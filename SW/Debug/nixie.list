
nixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800545c  0800545c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800545c  0800545c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800545c  0800545c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000010  08005474  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08005474  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b96  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a99  00000000  00000000  00030bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe8  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  00034650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a388  00000000  00000000  000354b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f447  00000000  00000000  0004f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a1bdd  00000000  00000000  0005ec7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010085c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000370c  00000000  00000000  001008d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005388 	.word	0x08005388

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08005388 	.word	0x08005388

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime1;
RTC_DateTypeDef sDate1;

//Called every second
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &sTime1, RTC_FORMAT_BIN); // Get Time
 8000224:	4927      	ldr	r1, [pc, #156]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2200      	movs	r2, #0
 800022a:	0018      	movs	r0, r3
 800022c:	f003 fa6c 	bl	8003708 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate1, RTC_FORMAT_BIN); // Get Date
 8000230:	4925      	ldr	r1, [pc, #148]	; (80002c8 <HAL_RTC_AlarmAEventCallback+0xac>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	0018      	movs	r0, r3
 8000238:	f003 fb54 	bl	80038e4 <HAL_RTC_GetDate>

	//Set clock, when button pushed
	if(!HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin))
 800023c:	2380      	movs	r3, #128	; 0x80
 800023e:	019b      	lsls	r3, r3, #6
 8000240:	4a22      	ldr	r2, [pc, #136]	; (80002cc <HAL_RTC_AlarmAEventCallback+0xb0>)
 8000242:	0019      	movs	r1, r3
 8000244:	0010      	movs	r0, r2
 8000246:	f002 fa45 	bl	80026d4 <HAL_GPIO_ReadPin>
 800024a:	1e03      	subs	r3, r0, #0
 800024c:	d12d      	bne.n	80002aa <HAL_RTC_AlarmAEventCallback+0x8e>
	{
		sTime1.SecondFraction = 0;
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
		sTime1.Seconds = 0;
 8000254:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000256:	2200      	movs	r2, #0
 8000258:	709a      	strb	r2, [r3, #2]
		if(sTime1.Minutes < 59)
 800025a:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800025c:	785b      	ldrb	r3, [r3, #1]
 800025e:	2b3a      	cmp	r3, #58	; 0x3a
 8000260:	d806      	bhi.n	8000270 <HAL_RTC_AlarmAEventCallback+0x54>
		{
			sTime1.Minutes = sTime1.Minutes + 1;
 8000262:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000264:	785b      	ldrb	r3, [r3, #1]
 8000266:	3301      	adds	r3, #1
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800026c:	705a      	strb	r2, [r3, #1]
 800026e:	e010      	b.n	8000292 <HAL_RTC_AlarmAEventCallback+0x76>
		}
		else
		{
			sTime1.Minutes = 0;
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000272:	2200      	movs	r2, #0
 8000274:	705a      	strb	r2, [r3, #1]
			if(sTime1.Hours < 23)
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b16      	cmp	r3, #22
 800027c:	d806      	bhi.n	800028c <HAL_RTC_AlarmAEventCallback+0x70>
			{
				sTime1.Hours = sTime1.Hours + 1;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	3301      	adds	r3, #1
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	e002      	b.n	8000292 <HAL_RTC_AlarmAEventCallback+0x76>
			}
			else
			{
				sTime1.Hours = 0;
 800028c:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_RTC_SetTime(hrtc, &sTime1, RTC_FORMAT_BIN);
 8000292:	490c      	ldr	r1, [pc, #48]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2200      	movs	r2, #0
 8000298:	0018      	movs	r0, r3
 800029a:	f003 f98d 	bl	80035b8 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(hrtc, &sDate1, RTC_FORMAT_BIN);
 800029e:	490a      	ldr	r1, [pc, #40]	; (80002c8 <HAL_RTC_AlarmAEventCallback+0xac>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2200      	movs	r2, #0
 80002a4:	0018      	movs	r0, r3
 80002a6:	f003 fa8b 	bl	80037c0 <HAL_RTC_SetDate>
	}

	nixie_set_time(sTime1.Hours, sTime1.Minutes, sTime1.Seconds);
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80002ac:	7818      	ldrb	r0, [r3, #0]
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80002b0:	7859      	ldrb	r1, [r3, #1]
 80002b2:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80002b4:	789b      	ldrb	r3, [r3, #2]
 80002b6:	001a      	movs	r2, r3
 80002b8:	f000 fe40 	bl	8000f3c <nixie_set_time>
}
 80002bc:	46c0      	nop			; (mov r8, r8)
 80002be:	46bd      	mov	sp, r7
 80002c0:	b002      	add	sp, #8
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000038 	.word	0x20000038
 80002c8:	20000034 	.word	0x20000034
 80002cc:	50000800 	.word	0x50000800

080002d0 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_COMP2_Init+0x58>)
 80002d6:	4a15      	ldr	r2, [pc, #84]	; (800032c <MX_COMP2_Init+0x5c>)
 80002d8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_COMP2_Init+0x58>)
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	0092      	lsls	r2, r2, #2
 80002e0:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_COMP2_Init+0x58>)
 80002e4:	2250      	movs	r2, #80	; 0x50
 80002e6:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_COMP2_Init+0x58>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_COMP2_Init+0x58>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_COMP2_Init+0x58>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_COMP2_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_COMP2_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_COMP2_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_COMP2_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <MX_COMP2_Init+0x58>)
 8000314:	0018      	movs	r0, r3
 8000316:	f001 fc29 	bl	8001b6c <HAL_COMP_Init>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 800031e:	f000 fd61 	bl	8000de4 <Error_Handler>
  }

}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	2000004c 	.word	0x2000004c
 800032c:	40010204 	.word	0x40010204

08000330 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000338:	230c      	movs	r3, #12
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	0018      	movs	r0, r3
 800033e:	2314      	movs	r3, #20
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f005 f818 	bl	8005378 <memset>
  if(compHandle->Instance==COMP2)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a11      	ldr	r2, [pc, #68]	; (8000394 <HAL_COMP_MspInit+0x64>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d11c      	bne.n	800038c <HAL_COMP_MspInit+0x5c>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <HAL_COMP_MspInit+0x68>)
 8000354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <HAL_COMP_MspInit+0x68>)
 8000358:	2101      	movs	r1, #1
 800035a:	430a      	orrs	r2, r1
 800035c:	635a      	str	r2, [r3, #52]	; 0x34
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <HAL_COMP_MspInit+0x68>)
 8000360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000362:	2201      	movs	r2, #1
 8000364:	4013      	ands	r3, r2
 8000366:	60bb      	str	r3, [r7, #8]
 8000368:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800036a:	210c      	movs	r1, #12
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2208      	movs	r2, #8
 8000370:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2203      	movs	r2, #3
 8000376:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800037e:	187a      	adds	r2, r7, r1
 8000380:	23a0      	movs	r3, #160	; 0xa0
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	0011      	movs	r1, r2
 8000386:	0018      	movs	r0, r3
 8000388:	f002 f840 	bl	800240c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b008      	add	sp, #32
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40010204 	.word	0x40010204
 8000398:	40021000 	.word	0x40021000

0800039c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08a      	sub	sp, #40	; 0x28
 80003a0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	0018      	movs	r0, r3
 80003a6:	2324      	movs	r3, #36	; 0x24
 80003a8:	001a      	movs	r2, r3
 80003aa:	2100      	movs	r1, #0
 80003ac:	f004 ffe4 	bl	8005378 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_DAC1_Init+0x64>)
 80003b2:	4a14      	ldr	r2, [pc, #80]	; (8000404 <MX_DAC1_Init+0x68>)
 80003b4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <MX_DAC1_Init+0x64>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 fe75 	bl	80020a8 <HAL_DAC_Init>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 80003c2:	f000 fd0f 	bl	8000de4 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2202      	movs	r2, #2
 80003d6:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2201      	movs	r2, #1
 80003dc:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80003e4:	1d39      	adds	r1, r7, #4
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_DAC1_Init+0x64>)
 80003e8:	2210      	movs	r2, #16
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fef0 	bl	80021d0 <HAL_DAC_ConfigChannel>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 fcf6 	bl	8000de4 <Error_Handler>
  }

}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b00a      	add	sp, #40	; 0x28
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000007c 	.word	0x2000007c
 8000404:	40007400 	.word	0x40007400

08000408 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <HAL_DAC_MspInit+0x38>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d10d      	bne.n	8000436 <HAL_DAC_MspInit+0x2e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <HAL_DAC_MspInit+0x3c>)
 800041c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800041e:	4b09      	ldr	r3, [pc, #36]	; (8000444 <HAL_DAC_MspInit+0x3c>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0589      	lsls	r1, r1, #22
 8000424:	430a      	orrs	r2, r1
 8000426:	63da      	str	r2, [r3, #60]	; 0x3c
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <HAL_DAC_MspInit+0x3c>)
 800042a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	059b      	lsls	r3, r3, #22
 8000430:	4013      	ands	r3, r2
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b004      	add	sp, #16
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	40007400 	.word	0x40007400
 8000444:	40021000 	.word	0x40021000

08000448 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	b002      	add	sp, #8
 800045e:	bd80      	pop	{r7, pc}

08000460 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <LL_IOP_GRP1_EnableClock+0x28>)
 800046a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <LL_IOP_GRP1_EnableClock+0x28>)
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	430a      	orrs	r2, r1
 8000472:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <LL_IOP_GRP1_EnableClock+0x28>)
 8000476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	4013      	ands	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800047e:	68fb      	ldr	r3, [r7, #12]
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40021000 	.word	0x40021000

0800048c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	003b      	movs	r3, r7
 8000494:	0018      	movs	r0, r3
 8000496:	2318      	movs	r3, #24
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f004 ff6c 	bl	8005378 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80004a0:	2004      	movs	r0, #4
 80004a2:	f7ff ffdd 	bl	8000460 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 80004a6:	2020      	movs	r0, #32
 80004a8:	f7ff ffda 	bl	8000460 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff ffd7 	bl	8000460 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80004b2:	2002      	movs	r0, #2
 80004b4:	f7ff ffd4 	bl	8000460 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 80004b8:	2008      	movs	r0, #8
 80004ba:	f7ff ffd1 	bl	8000460 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_0);
 80004be:	4bfe      	ldr	r3, [pc, #1016]	; (80008b8 <MX_GPIO_Init+0x42c>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	0018      	movs	r0, r3
 80004c4:	f7ff ffc0 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_1);
 80004c8:	4bfb      	ldr	r3, [pc, #1004]	; (80008b8 <MX_GPIO_Init+0x42c>)
 80004ca:	2102      	movs	r1, #2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f7ff ffbb 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN1_GPIO_Port, GN1_Pin);
 80004d2:	23a0      	movs	r3, #160	; 0xa0
 80004d4:	05db      	lsls	r3, r3, #23
 80004d6:	2101      	movs	r1, #1
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff ffb5 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN2_GPIO_Port, GN2_Pin);
 80004de:	23a0      	movs	r3, #160	; 0xa0
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2102      	movs	r1, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff ffaf 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G1_GPIO_Port, G1_Pin);
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2110      	movs	r1, #16
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff ffa9 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GDOT_GPIO_Port, GDOT_Pin);
 80004f6:	23a0      	movs	r3, #160	; 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	2120      	movs	r1, #32
 80004fc:	0018      	movs	r0, r3
 80004fe:	f7ff ffa3 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G3_GPIO_Port, G3_Pin);
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	0018      	movs	r0, r3
 800050a:	f7ff ff9d 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800050e:	23a0      	movs	r3, #160	; 0xa0
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	0018      	movs	r0, r3
 8000516:	f7ff ff97 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 800051a:	4be8      	ldr	r3, [pc, #928]	; (80008bc <MX_GPIO_Init+0x430>)
 800051c:	2101      	movs	r1, #1
 800051e:	0018      	movs	r0, r3
 8000520:	f7ff ff92 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000524:	4be5      	ldr	r3, [pc, #916]	; (80008bc <MX_GPIO_Init+0x430>)
 8000526:	2102      	movs	r1, #2
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff ff8d 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 800052e:	4be3      	ldr	r3, [pc, #908]	; (80008bc <MX_GPIO_Init+0x430>)
 8000530:	2104      	movs	r1, #4
 8000532:	0018      	movs	r0, r3
 8000534:	f7ff ff88 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	00db      	lsls	r3, r3, #3
 800053c:	4adf      	ldr	r2, [pc, #892]	; (80008bc <MX_GPIO_Init+0x430>)
 800053e:	0019      	movs	r1, r3
 8000540:	0010      	movs	r0, r2
 8000542:	f7ff ff81 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8000546:	2380      	movs	r3, #128	; 0x80
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	4adc      	ldr	r2, [pc, #880]	; (80008bc <MX_GPIO_Init+0x430>)
 800054c:	0019      	movs	r1, r3
 800054e:	0010      	movs	r0, r2
 8000550:	f7ff ff7a 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	015b      	lsls	r3, r3, #5
 8000558:	4ad8      	ldr	r2, [pc, #864]	; (80008bc <MX_GPIO_Init+0x430>)
 800055a:	0019      	movs	r1, r3
 800055c:	0010      	movs	r0, r2
 800055e:	f7ff ff73 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	4ad5      	ldr	r2, [pc, #852]	; (80008bc <MX_GPIO_Init+0x430>)
 8000568:	0019      	movs	r1, r3
 800056a:	0010      	movs	r0, r2
 800056c:	f7ff ff6c 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14);
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	01db      	lsls	r3, r3, #7
 8000574:	4ad1      	ldr	r2, [pc, #836]	; (80008bc <MX_GPIO_Init+0x430>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f7ff ff65 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	021b      	lsls	r3, r3, #8
 8000582:	4ace      	ldr	r2, [pc, #824]	; (80008bc <MX_GPIO_Init+0x430>)
 8000584:	0019      	movs	r1, r3
 8000586:	0010      	movs	r0, r2
 8000588:	f7ff ff5e 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	005a      	lsls	r2, r3, #1
 8000590:	23a0      	movs	r3, #160	; 0xa0
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff ff56 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	009a      	lsls	r2, r3, #2
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f7ff ff4e 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
 80005ac:	4bc4      	ldr	r3, [pc, #784]	; (80008c0 <MX_GPIO_Init+0x434>)
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ff49 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80005b6:	4bc2      	ldr	r3, [pc, #776]	; (80008c0 <MX_GPIO_Init+0x434>)
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff ff44 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	00da      	lsls	r2, r3, #3
 80005c4:	23a0      	movs	r3, #160	; 0xa0
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ff3c 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	011a      	lsls	r2, r3, #4
 80005d4:	23a0      	movs	r3, #160	; 0xa0
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ff34 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	015a      	lsls	r2, r3, #5
 80005e4:	23a0      	movs	r3, #160	; 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ff2c 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN3_GPIO_Port, GN3_Pin);
 80005f0:	4bb4      	ldr	r3, [pc, #720]	; (80008c4 <MX_GPIO_Init+0x438>)
 80005f2:	2102      	movs	r1, #2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff27 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G2_GPIO_Port, G2_Pin);
 80005fa:	4bb2      	ldr	r3, [pc, #712]	; (80008c4 <MX_GPIO_Init+0x438>)
 80005fc:	2104      	movs	r1, #4
 80005fe:	0018      	movs	r0, r3
 8000600:	f7ff ff22 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G4_GPIO_Port, G4_Pin);
 8000604:	4baf      	ldr	r3, [pc, #700]	; (80008c4 <MX_GPIO_Init+0x438>)
 8000606:	2108      	movs	r1, #8
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff ff1d 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G5_GPIO_Port, G5_Pin);
 800060e:	4bab      	ldr	r3, [pc, #684]	; (80008bc <MX_GPIO_Init+0x430>)
 8000610:	2108      	movs	r1, #8
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff ff18 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G6_GPIO_Port, G6_Pin);
 8000618:	4ba8      	ldr	r3, [pc, #672]	; (80008bc <MX_GPIO_Init+0x430>)
 800061a:	2110      	movs	r1, #16
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ff13 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN4_GPIO_Port, GN4_Pin);
 8000622:	4ba6      	ldr	r3, [pc, #664]	; (80008bc <MX_GPIO_Init+0x430>)
 8000624:	2120      	movs	r1, #32
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff ff0e 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G0_GPIO_Port, G0_Pin);
 800062c:	4ba3      	ldr	r3, [pc, #652]	; (80008bc <MX_GPIO_Init+0x430>)
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff ff09 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G9_GPIO_Port, G9_Pin);
 8000636:	4ba1      	ldr	r3, [pc, #644]	; (80008bc <MX_GPIO_Init+0x430>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ff04 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G8_GPIO_Port, G8_Pin);
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4a9d      	ldr	r2, [pc, #628]	; (80008bc <MX_GPIO_Init+0x430>)
 8000646:	0019      	movs	r1, r3
 8000648:	0010      	movs	r0, r2
 800064a:	f7ff fefd 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G7_GPIO_Port, G7_Pin);
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4a9a      	ldr	r2, [pc, #616]	; (80008bc <MX_GPIO_Init+0x430>)
 8000654:	0019      	movs	r1, r3
 8000656:	0010      	movs	r0, r2
 8000658:	f7ff fef6 	bl	8000448 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S2_Pin;
 800065c:	003b      	movs	r3, r7
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	0192      	lsls	r2, r2, #6
 8000662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000664:	003b      	movs	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800066a:	003b      	movs	r3, r7
 800066c:	2201      	movs	r2, #1
 800066e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8000670:	003b      	movs	r3, r7
 8000672:	4a93      	ldr	r2, [pc, #588]	; (80008c0 <MX_GPIO_Init+0x434>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f004 fdf6 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800067c:	003b      	movs	r3, r7
 800067e:	2201      	movs	r2, #1
 8000680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000682:	003b      	movs	r3, r7
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000688:	003b      	movs	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800068e:	003b      	movs	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000694:	003b      	movs	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800069a:	003b      	movs	r3, r7
 800069c:	4a86      	ldr	r2, [pc, #536]	; (80008b8 <MX_GPIO_Init+0x42c>)
 800069e:	0019      	movs	r1, r3
 80006a0:	0010      	movs	r0, r2
 80006a2:	f004 fde1 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80006a6:	003b      	movs	r3, r7
 80006a8:	2202      	movs	r2, #2
 80006aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006be:	003b      	movs	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006c4:	003b      	movs	r3, r7
 80006c6:	4a7c      	ldr	r2, [pc, #496]	; (80008b8 <MX_GPIO_Init+0x42c>)
 80006c8:	0019      	movs	r1, r3
 80006ca:	0010      	movs	r0, r2
 80006cc:	f004 fdcc 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NRST_Pin;
 80006d0:	003b      	movs	r3, r7
 80006d2:	2204      	movs	r2, #4
 80006d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006d6:	003b      	movs	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006dc:	003b      	movs	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 80006e2:	003b      	movs	r3, r7
 80006e4:	4a74      	ldr	r2, [pc, #464]	; (80008b8 <MX_GPIO_Init+0x42c>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f004 fdbd 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN1_Pin;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f4:	003b      	movs	r3, r7
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006fa:	003b      	movs	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000700:	003b      	movs	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000706:	003b      	movs	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN1_GPIO_Port, &GPIO_InitStruct);
 800070c:	003a      	movs	r2, r7
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f004 fda7 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN2_Pin;
 800071a:	003b      	movs	r3, r7
 800071c:	2202      	movs	r2, #2
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000720:	003b      	movs	r3, r7
 8000722:	2201      	movs	r2, #1
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000732:	003b      	movs	r3, r7
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN2_GPIO_Port, &GPIO_InitStruct);
 8000738:	003a      	movs	r2, r7
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f004 fd91 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G1_Pin;
 8000746:	003b      	movs	r3, r7
 8000748:	2210      	movs	r2, #16
 800074a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800074c:	003b      	movs	r3, r7
 800074e:	2201      	movs	r2, #1
 8000750:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000752:	003b      	movs	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000758:	003b      	movs	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800075e:	003b      	movs	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G1_GPIO_Port, &GPIO_InitStruct);
 8000764:	003a      	movs	r2, r7
 8000766:	23a0      	movs	r3, #160	; 0xa0
 8000768:	05db      	lsls	r3, r3, #23
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f004 fd7b 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GDOT_Pin;
 8000772:	003b      	movs	r3, r7
 8000774:	2220      	movs	r2, #32
 8000776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000778:	003b      	movs	r3, r7
 800077a:	2201      	movs	r2, #1
 800077c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800077e:	003b      	movs	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000784:	003b      	movs	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800078a:	003b      	movs	r3, r7
 800078c:	2202      	movs	r2, #2
 800078e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GDOT_GPIO_Port, &GPIO_InitStruct);
 8000790:	003a      	movs	r2, r7
 8000792:	23a0      	movs	r3, #160	; 0xa0
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f004 fd65 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G3_Pin;
 800079e:	003b      	movs	r3, r7
 80007a0:	2240      	movs	r2, #64	; 0x40
 80007a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007a4:	003b      	movs	r3, r7
 80007a6:	2201      	movs	r2, #1
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007b0:	003b      	movs	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 80007bc:	003a      	movs	r2, r7
 80007be:	23a0      	movs	r3, #160	; 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f004 fd4f 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80007ca:	003b      	movs	r3, r7
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d0:	003b      	movs	r3, r7
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007d6:	003b      	movs	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007dc:	003b      	movs	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	003a      	movs	r2, r7
 80007ea:	23a0      	movs	r3, #160	; 0xa0
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f004 fd39 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80007f6:	003b      	movs	r3, r7
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007fc:	003b      	movs	r3, r7
 80007fe:	2201      	movs	r2, #1
 8000800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000802:	003b      	movs	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800080e:	003b      	movs	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	003b      	movs	r3, r7
 8000816:	4a29      	ldr	r2, [pc, #164]	; (80008bc <MX_GPIO_Init+0x430>)
 8000818:	0019      	movs	r1, r3
 800081a:	0010      	movs	r0, r2
 800081c:	f004 fd24 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000820:	003b      	movs	r3, r7
 8000822:	2202      	movs	r2, #2
 8000824:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000826:	003b      	movs	r3, r7
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800082c:	003b      	movs	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000832:	003b      	movs	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000838:	003b      	movs	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	003b      	movs	r3, r7
 8000840:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MX_GPIO_Init+0x430>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f004 fd0f 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800084a:	003b      	movs	r3, r7
 800084c:	2204      	movs	r2, #4
 800084e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000850:	003b      	movs	r3, r7
 8000852:	2201      	movs	r2, #1
 8000854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000856:	003b      	movs	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800085c:	003b      	movs	r3, r7
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000862:	003b      	movs	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	003b      	movs	r3, r7
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <MX_GPIO_Init+0x430>)
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	f004 fcfa 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000874:	003b      	movs	r3, r7
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800087c:	003b      	movs	r3, r7
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000882:	003b      	movs	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000888:	003b      	movs	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800088e:	003b      	movs	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	003b      	movs	r3, r7
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <MX_GPIO_Init+0x430>)
 8000898:	0019      	movs	r1, r3
 800089a:	0010      	movs	r0, r2
 800089c:	f004 fce4 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2201      	movs	r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ae:	003b      	movs	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008b4:	003b      	movs	r3, r7
 80008b6:	e007      	b.n	80008c8 <MX_GPIO_Init+0x43c>
 80008b8:	50001400 	.word	0x50001400
 80008bc:	50000400 	.word	0x50000400
 80008c0:	50000800 	.word	0x50000800
 80008c4:	50000c00 	.word	0x50000c00
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008cc:	003b      	movs	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	003b      	movs	r3, r7
 80008d4:	4af0      	ldr	r2, [pc, #960]	; (8000c98 <MX_GPIO_Init+0x80c>)
 80008d6:	0019      	movs	r1, r3
 80008d8:	0010      	movs	r0, r2
 80008da:	f004 fcc5 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80008de:	003b      	movs	r3, r7
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	0152      	lsls	r2, r2, #5
 80008e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008e6:	003b      	movs	r3, r7
 80008e8:	2201      	movs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ec:	003b      	movs	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008f2:	003b      	movs	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f8:	003b      	movs	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	003b      	movs	r3, r7
 8000900:	4ae5      	ldr	r2, [pc, #916]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000902:	0019      	movs	r1, r3
 8000904:	0010      	movs	r0, r2
 8000906:	f004 fcaf 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800090a:	003b      	movs	r3, r7
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	0192      	lsls	r2, r2, #6
 8000910:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000912:	003b      	movs	r3, r7
 8000914:	2201      	movs	r2, #1
 8000916:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000918:	003b      	movs	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800091e:	003b      	movs	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000924:	003b      	movs	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	003b      	movs	r3, r7
 800092c:	4ada      	ldr	r2, [pc, #872]	; (8000c98 <MX_GPIO_Init+0x80c>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f004 fc99 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000936:	003b      	movs	r3, r7
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	01d2      	lsls	r2, r2, #7
 800093c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800093e:	003b      	movs	r3, r7
 8000940:	2201      	movs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000944:	003b      	movs	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800094a:	003b      	movs	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000950:	003b      	movs	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	003b      	movs	r3, r7
 8000958:	4acf      	ldr	r2, [pc, #828]	; (8000c98 <MX_GPIO_Init+0x80c>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f004 fc83 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000962:	003b      	movs	r3, r7
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	0212      	lsls	r2, r2, #8
 8000968:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800096a:	003b      	movs	r3, r7
 800096c:	2201      	movs	r2, #1
 800096e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000970:	003b      	movs	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000976:	003b      	movs	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800097c:	003b      	movs	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	003b      	movs	r3, r7
 8000984:	4ac4      	ldr	r2, [pc, #784]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000986:	0019      	movs	r1, r3
 8000988:	0010      	movs	r0, r2
 800098a:	f004 fc6d 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800098e:	003b      	movs	r3, r7
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0052      	lsls	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000996:	003b      	movs	r3, r7
 8000998:	2201      	movs	r2, #1
 800099a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800099c:	003b      	movs	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009a2:	003b      	movs	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009a8:	003b      	movs	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	003a      	movs	r2, r7
 80009b0:	23a0      	movs	r3, #160	; 0xa0
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f004 fc56 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80009bc:	003b      	movs	r3, r7
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009c4:	003b      	movs	r3, r7
 80009c6:	2201      	movs	r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009ca:	003b      	movs	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009d0:	003b      	movs	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009d6:	003b      	movs	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	003a      	movs	r2, r7
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f004 fc3f 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80009ea:	003b      	movs	r3, r7
 80009ec:	2240      	movs	r2, #64	; 0x40
 80009ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009f0:	003b      	movs	r3, r7
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009f6:	003b      	movs	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009fc:	003b      	movs	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a02:	003b      	movs	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	003b      	movs	r3, r7
 8000a0a:	4aa4      	ldr	r2, [pc, #656]	; (8000c9c <MX_GPIO_Init+0x810>)
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	0010      	movs	r0, r2
 8000a10:	f004 fc2a 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a20:	003b      	movs	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a26:	003b      	movs	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	003b      	movs	r3, r7
 8000a34:	4a99      	ldr	r2, [pc, #612]	; (8000c9c <MX_GPIO_Init+0x810>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	0010      	movs	r0, r2
 8000a3a:	f004 fc15 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	00d2      	lsls	r2, r2, #3
 8000a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2201      	movs	r2, #1
 8000a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a58:	003b      	movs	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	003a      	movs	r2, r7
 8000a60:	23a0      	movs	r3, #160	; 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f004 fbfe 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2201      	movs	r2, #1
 8000a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	003a      	movs	r2, r7
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f004 fbe7 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	0152      	lsls	r2, r2, #5
 8000aa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	003a      	movs	r2, r7
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f004 fbd0 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S1_Pin;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000ada:	003b      	movs	r3, r7
 8000adc:	4a70      	ldr	r2, [pc, #448]	; (8000ca0 <MX_GPIO_Init+0x814>)
 8000ade:	0019      	movs	r1, r3
 8000ae0:	0010      	movs	r0, r2
 8000ae2:	f004 fbc1 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN3_Pin;
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	2202      	movs	r2, #2
 8000aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aec:	003b      	movs	r3, r7
 8000aee:	2201      	movs	r2, #1
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000af2:	003b      	movs	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000afe:	003b      	movs	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN3_GPIO_Port, &GPIO_InitStruct);
 8000b04:	003b      	movs	r3, r7
 8000b06:	4a66      	ldr	r2, [pc, #408]	; (8000ca0 <MX_GPIO_Init+0x814>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f004 fbac 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G2_Pin;
 8000b10:	003b      	movs	r3, r7
 8000b12:	2204      	movs	r2, #4
 8000b14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b16:	003b      	movs	r3, r7
 8000b18:	2201      	movs	r2, #1
 8000b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b22:	003b      	movs	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G2_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	003b      	movs	r3, r7
 8000b30:	4a5b      	ldr	r2, [pc, #364]	; (8000ca0 <MX_GPIO_Init+0x814>)
 8000b32:	0019      	movs	r1, r3
 8000b34:	0010      	movs	r0, r2
 8000b36:	f004 fb97 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G4_Pin;
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b40:	003b      	movs	r3, r7
 8000b42:	2201      	movs	r2, #1
 8000b44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b46:	003b      	movs	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G4_GPIO_Port, &GPIO_InitStruct);
 8000b58:	003b      	movs	r3, r7
 8000b5a:	4a51      	ldr	r2, [pc, #324]	; (8000ca0 <MX_GPIO_Init+0x814>)
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	0010      	movs	r0, r2
 8000b60:	f004 fb82 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G5_Pin;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2208      	movs	r2, #8
 8000b68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b76:	003b      	movs	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b7c:	003b      	movs	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G5_GPIO_Port, &GPIO_InitStruct);
 8000b82:	003b      	movs	r3, r7
 8000b84:	4a44      	ldr	r2, [pc, #272]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000b86:	0019      	movs	r1, r3
 8000b88:	0010      	movs	r0, r2
 8000b8a:	f004 fb6d 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G6_Pin;
 8000b8e:	003b      	movs	r3, r7
 8000b90:	2210      	movs	r2, #16
 8000b92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b94:	003b      	movs	r3, r7
 8000b96:	2201      	movs	r2, #1
 8000b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ba0:	003b      	movs	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ba6:	003b      	movs	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G6_GPIO_Port, &GPIO_InitStruct);
 8000bac:	003b      	movs	r3, r7
 8000bae:	4a3a      	ldr	r2, [pc, #232]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	0010      	movs	r0, r2
 8000bb4:	f004 fb58 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN4_Pin;
 8000bb8:	003b      	movs	r3, r7
 8000bba:	2220      	movs	r2, #32
 8000bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bc4:	003b      	movs	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bca:	003b      	movs	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN4_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000bda:	0019      	movs	r1, r3
 8000bdc:	0010      	movs	r0, r2
 8000bde:	f004 fb43 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G0_Pin;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2240      	movs	r2, #64	; 0x40
 8000be6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be8:	003b      	movs	r3, r7
 8000bea:	2201      	movs	r2, #1
 8000bec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bee:	003b      	movs	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G0_GPIO_Port, &GPIO_InitStruct);
 8000c00:	003b      	movs	r3, r7
 8000c02:	4a25      	ldr	r2, [pc, #148]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000c04:	0019      	movs	r1, r3
 8000c06:	0010      	movs	r0, r2
 8000c08:	f004 fb2e 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G9_Pin;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2201      	movs	r2, #1
 8000c16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c24:	003b      	movs	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G9_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000c2e:	0019      	movs	r1, r3
 8000c30:	0010      	movs	r0, r2
 8000c32:	f004 fb19 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G8_Pin;
 8000c36:	003b      	movs	r3, r7
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c3e:	003b      	movs	r3, r7
 8000c40:	2201      	movs	r2, #1
 8000c42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c44:	003b      	movs	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G8_GPIO_Port, &GPIO_InitStruct);
 8000c56:	003b      	movs	r3, r7
 8000c58:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	0010      	movs	r0, r2
 8000c5e:	f004 fb03 	bl	8005268 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G7_Pin;
 8000c62:	003b      	movs	r3, r7
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c6a:	003b      	movs	r3, r7
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c70:	003b      	movs	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c76:	003b      	movs	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8000c82:	003b      	movs	r3, r7
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <MX_GPIO_Init+0x80c>)
 8000c86:	0019      	movs	r1, r3
 8000c88:	0010      	movs	r0, r2
 8000c8a:	f004 faed 	bl	8005268 <LL_GPIO_Init>

}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b006      	add	sp, #24
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	50000400 	.word	0x50000400
 8000c9c:	50000800 	.word	0x50000800
 8000ca0:	50000c00 	.word	0x50000c00

08000ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca8:	f000 fdec 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cac:	f000 f814 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb0:	f7ff fbec 	bl	800048c <MX_GPIO_Init>
  MX_COMP2_Init();
 8000cb4:	f7ff fb0c 	bl	80002d0 <MX_COMP2_Init>
  MX_DAC1_Init();
 8000cb8:	f7ff fb70 	bl	800039c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000cbc:	f000 fb96 	bl	80013ec <MX_TIM2_Init>
  MX_TIM14_Init();
 8000cc0:	f000 fc1a 	bl	80014f8 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000cc4:	f000 fc3e 	bl	8001544 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  MY_OWN_MX_RTC_Init();
 8000cc8:	f000 fa72 	bl	80011b0 <MY_OWN_MX_RTC_Init>
  nixie_init();
 8000ccc:	f000 f8e4 	bl	8000e98 <nixie_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  boost_op();
 8000cd0:	f000 f912 	bl	8000ef8 <boost_op>
 8000cd4:	e7fc      	b.n	8000cd0 <main+0x2c>
	...

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b0a1      	sub	sp, #132	; 0x84
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	2448      	movs	r4, #72	; 0x48
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2338      	movs	r3, #56	; 0x38
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f004 fb45 	bl	8005378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cee:	2338      	movs	r3, #56	; 0x38
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f004 fb3d 	bl	8005378 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	0018      	movs	r0, r3
 8000d02:	2334      	movs	r3, #52	; 0x34
 8000d04:	001a      	movs	r2, r3
 8000d06:	2100      	movs	r1, #0
 8000d08:	f004 fb36 	bl	8005378 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f001 fd19 	bl	8002748 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <SystemClock_Config+0x108>)
 8000d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <SystemClock_Config+0x108>)
 8000d1c:	2118      	movs	r1, #24
 8000d1e:	438a      	bics	r2, r1
 8000d20:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2206      	movs	r2, #6
 8000d26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0052      	lsls	r2, r2, #1
 8000d34:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d36:	0021      	movs	r1, r4
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2240      	movs	r2, #64	; 0x40
 8000d42:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2202      	movs	r2, #2
 8000d48:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2208      	movs	r2, #8
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	0292      	lsls	r2, r2, #10
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	0492      	lsls	r2, r2, #18
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	0592      	lsls	r2, r2, #22
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 fd26 	bl	80027c8 <HAL_RCC_OscConfig>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d80:	f000 f830 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d84:	2138      	movs	r1, #56	; 0x38
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2202      	movs	r2, #2
 8000d90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2102      	movs	r1, #2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 f830 	bl	8002e08 <HAL_RCC_ClockConfig>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000dac:	f000 f81a 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM15;
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2284      	movs	r2, #132	; 0x84
 8000db4:	03d2      	lsls	r2, r2, #15
 8000db6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	0052      	lsls	r2, r2, #1
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 f9a7 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000dd2:	f000 f807 	bl	8000de4 <Error_Handler>
  }
}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b021      	add	sp, #132	; 0x84
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	40021000 	.word	0x40021000

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <LL_GPIO_SetPinPull>:
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	68d9      	ldr	r1, [r3, #12]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	435a      	muls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	189b      	adds	r3, r3, r2
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	400b      	ands	r3, r1
 8000e0e:	001a      	movs	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	68b9      	ldr	r1, [r7, #8]
 8000e14:	434b      	muls	r3, r1
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	434b      	muls	r3, r1
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	60da      	str	r2, [r3, #12]
}
 8000e20:	46c0      	nop			; (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b004      	add	sp, #16
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_TIM_PeriodElapsedCallback>:
static void nixie_display();
static void nixie_display_reset_all();
static void nixie_display_set_anode(uint8_t n);

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d103      	bne.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//End of boost converter pulse. Set flag to poll the feedback comparator of boost converter again
		poll_comp = true;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
		{
			dac_value = dac_value + 10;
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
		}
	}
}
 8000e42:	e019      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x50>
	else if(htim->Instance == htim14.Instance)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d113      	bne.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x50>
		nixie_display();
 8000e50:	f000 f89a 	bl	8000f88 <nixie_display>
		if(dac_value < DAC_TARGET)
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d80c      	bhi.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x50>
			dac_value = dac_value + 10;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	330a      	adds	r3, #10
 8000e64:	001a      	movs	r2, r3
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e68:	601a      	str	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	2110      	movs	r1, #16
 8000e74:	f001 f98a 	bl	800218c <HAL_DAC_SetValue>
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200000fc 	.word	0x200000fc
 8000e84:	20000000 	.word	0x20000000
 8000e88:	2000013c 	.word	0x2000013c
 8000e8c:	2000002c 	.word	0x2000002c
 8000e90:	00000a27 	.word	0x00000a27
 8000e94:	2000007c 	.word	0x2000007c

08000e98 <nixie_init>:

void nixie_init()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	//Start DAC for feedback voltage of boost converter
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <nixie_init+0x4c>)
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 f924 	bl	80020ee <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <nixie_init+0x50>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <nixie_init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	2110      	movs	r1, #16
 8000eb0:	f001 f96c 	bl	800218c <HAL_DAC_SetValue>
	//Start comparator for boost converter
	HAL_COMP_Start(&hcomp2);
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <nixie_init+0x54>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 ffb8 	bl	8001e2c <HAL_COMP_Start>
	//Enable one pulse mode for boost converter. Trigger by software trough HAL_TIM_Base_Start
	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_1);
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <nixie_init+0x58>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f003 f8a9 	bl	8004018 <HAL_TIM_OnePulse_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <nixie_init+0x58>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <nixie_init+0x58>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	60da      	str	r2, [r3, #12]
	//Start timer and period elapsed event of multiplex timer for nixie tubes
	HAL_TIM_Base_Start_IT(&htim14);
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <nixie_init+0x5c>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f002 fff9 	bl	8003ed0 <HAL_TIM_Base_Start_IT>
}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000007c 	.word	0x2000007c
 8000ee8:	2000002c 	.word	0x2000002c
 8000eec:	2000004c 	.word	0x2000004c
 8000ef0:	200000fc 	.word	0x200000fc
 8000ef4:	2000013c 	.word	0x2000013c

08000ef8 <boost_op>:

void boost_op()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	if(poll_comp)
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <boost_op+0x38>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d010      	beq.n	8000f28 <boost_op+0x30>
	{
		//If voltage lower than feedback, activate next pulse of boost converter and switch off polling the comparator
		if(HAL_COMP_GetOutputLevel(&hcomp2) == COMP_OUTPUT_LEVEL_LOW)
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <boost_op+0x3c>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 ffe1 	bl	8001ed0 <HAL_COMP_GetOutputLevel>
 8000f0e:	1e03      	subs	r3, r0, #0
 8000f10:	d10a      	bne.n	8000f28 <boost_op+0x30>
		{
			poll_comp = false;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <boost_op+0x38>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_ENABLE(&htim2);
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <boost_op+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <boost_op+0x40>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2101      	movs	r1, #1
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	20000000 	.word	0x20000000
 8000f34:	2000004c 	.word	0x2000004c
 8000f38:	200000fc 	.word	0x200000fc

08000f3c <nixie_set_time>:

void nixie_set_time(uint8_t h, uint8_t m, uint8_t s)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	0004      	movs	r4, r0
 8000f44:	0008      	movs	r0, r1
 8000f46:	0011      	movs	r1, r2
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	1c22      	adds	r2, r4, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	1dbb      	adds	r3, r7, #6
 8000f50:	1c02      	adds	r2, r0, #0
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	1d7b      	adds	r3, r7, #5
 8000f56:	1c0a      	adds	r2, r1, #0
 8000f58:	701a      	strb	r2, [r3, #0]
	hours = h;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <nixie_set_time+0x40>)
 8000f5c:	1dfa      	adds	r2, r7, #7
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	701a      	strb	r2, [r3, #0]
	minutes = m;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <nixie_set_time+0x44>)
 8000f64:	1dba      	adds	r2, r7, #6
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	701a      	strb	r2, [r3, #0]
	seconds = s;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <nixie_set_time+0x48>)
 8000f6c:	1d7a      	adds	r2, r7, #5
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	701a      	strb	r2, [r3, #0]
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b003      	add	sp, #12
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	20000031 	.word	0x20000031
 8000f80:	20000032 	.word	0x20000032
 8000f84:	20000033 	.word	0x20000033

08000f88 <nixie_display>:

static void nixie_display()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	nixie_display_reset_all();
 8000f8c:	f000 f88e 	bl	80010ac <nixie_display_reset_all>
	switch(digit)
 8000f90:	4b40      	ldr	r3, [pc, #256]	; (8001094 <nixie_display+0x10c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d01f      	beq.n	8000fda <nixie_display+0x52>
 8000f9a:	dc02      	bgt.n	8000fa2 <nixie_display+0x1a>
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <nixie_display+0x24>
 8000fa0:	e05e      	b.n	8001060 <nixie_display+0xd8>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d030      	beq.n	8001008 <nixie_display+0x80>
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d044      	beq.n	8001034 <nixie_display+0xac>
 8000faa:	e059      	b.n	8001060 <nixie_display+0xd8>
	{
	case 0:
		nixie_display_set_anode(hours/10);
 8000fac:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <nixie_display+0x110>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	210a      	movs	r1, #10
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff f8a5 	bl	8000104 <__udivsi3>
 8000fba:	0003      	movs	r3, r0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 f892 	bl	80010e8 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN1_GPIO_Port, GN1_Pin, GPIO_PIN_SET);
 8000fc4:	23a0      	movs	r3, #160	; 0xa0
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2101      	movs	r1, #1
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f001 fb9e 	bl	800270e <HAL_GPIO_WritePin>
		digit = 1;
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <nixie_display+0x10c>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
		break;
 8000fd8:	e042      	b.n	8001060 <nixie_display+0xd8>
	case 1:
		nixie_display_set_anode(hours%10);
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <nixie_display+0x110>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	210a      	movs	r1, #10
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff f914 	bl	8000210 <__aeabi_uidivmod>
 8000fe8:	000b      	movs	r3, r1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 f87b 	bl	80010e8 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN2_GPIO_Port, GN2_Pin, GPIO_PIN_SET);
 8000ff2:	23a0      	movs	r3, #160	; 0xa0
 8000ff4:	05db      	lsls	r3, r3, #23
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f001 fb87 	bl	800270e <HAL_GPIO_WritePin>
		digit = 2;
 8001000:	4b24      	ldr	r3, [pc, #144]	; (8001094 <nixie_display+0x10c>)
 8001002:	2202      	movs	r2, #2
 8001004:	701a      	strb	r2, [r3, #0]
		break;
 8001006:	e02b      	b.n	8001060 <nixie_display+0xd8>
	case 2:
		nixie_display_set_anode(minutes/10);
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <nixie_display+0x114>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	210a      	movs	r1, #10
 8001010:	0018      	movs	r0, r3
 8001012:	f7ff f877 	bl	8000104 <__udivsi3>
 8001016:	0003      	movs	r3, r0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	0018      	movs	r0, r3
 800101c:	f000 f864 	bl	80010e8 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN3_GPIO_Port, GN3_Pin, GPIO_PIN_SET);
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <nixie_display+0x118>)
 8001022:	2201      	movs	r2, #1
 8001024:	2102      	movs	r1, #2
 8001026:	0018      	movs	r0, r3
 8001028:	f001 fb71 	bl	800270e <HAL_GPIO_WritePin>
		digit = 3;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <nixie_display+0x10c>)
 800102e:	2203      	movs	r2, #3
 8001030:	701a      	strb	r2, [r3, #0]
		break;
 8001032:	e015      	b.n	8001060 <nixie_display+0xd8>
	case 3:
		nixie_display_set_anode(minutes%10);
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <nixie_display+0x114>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	210a      	movs	r1, #10
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff f8e7 	bl	8000210 <__aeabi_uidivmod>
 8001042:	000b      	movs	r3, r1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	0018      	movs	r0, r3
 8001048:	f000 f84e 	bl	80010e8 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN4_GPIO_Port, GN4_Pin, GPIO_PIN_SET);
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <nixie_display+0x11c>)
 800104e:	2201      	movs	r2, #1
 8001050:	2120      	movs	r1, #32
 8001052:	0018      	movs	r0, r3
 8001054:	f001 fb5b 	bl	800270e <HAL_GPIO_WritePin>
		digit = 0;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <nixie_display+0x10c>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
		break;
 800105e:	46c0      	nop			; (mov r8, r8)
	}

	/*TODO: PA4 and PA5 can’t be used in output mode when DAC1_OUT1 or
	DAC1_OUT2 respectively is connected to on-chip peripherals*/
	if(seconds%2)
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <nixie_display+0x120>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2201      	movs	r2, #1
 8001068:	4013      	ands	r3, r2
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <nixie_display+0xf8>
	{
		//HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_SET);
		//Workaround: use LL library and use pullup oder -down resistor instaed of output
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLUP);
 8001070:	23a0      	movs	r3, #160	; 0xa0
 8001072:	05db      	lsls	r3, r3, #23
 8001074:	2201      	movs	r2, #1
 8001076:	2120      	movs	r1, #32
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff feb8 	bl	8000dee <LL_GPIO_SetPinPull>
	{
		//HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_RESET);
		//Workaround: use LL library and use pullup oder -down resistor instaed of output
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLDOWN);
	}
}
 800107e:	e006      	b.n	800108e <nixie_display+0x106>
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLDOWN);
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	2202      	movs	r2, #2
 8001086:	2120      	movs	r1, #32
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff feb0 	bl	8000dee <LL_GPIO_SetPinPull>
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000030 	.word	0x20000030
 8001098:	20000031 	.word	0x20000031
 800109c:	20000032 	.word	0x20000032
 80010a0:	50000c00 	.word	0x50000c00
 80010a4:	50000400 	.word	0x50000400
 80010a8:	20000033 	.word	0x20000033

080010ac <nixie_display_reset_all>:

static void nixie_display_reset_all()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GN1_Pin|GN2_Pin|G1_Pin|G3_Pin, GPIO_PIN_RESET);
 80010b0:	23a0      	movs	r3, #160	; 0xa0
 80010b2:	05db      	lsls	r3, r3, #23
 80010b4:	2200      	movs	r2, #0
 80010b6:	2153      	movs	r1, #83	; 0x53
 80010b8:	0018      	movs	r0, r3
 80010ba:	f001 fb28 	bl	800270e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GN3_Pin|G2_Pin|G4_Pin, GPIO_PIN_RESET);
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <nixie_display_reset_all+0x34>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	210e      	movs	r1, #14
 80010c4:	0018      	movs	r0, r3
 80010c6:	f001 fb22 	bl	800270e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G5_Pin|G6_Pin|GN4_Pin|G0_Pin|G9_Pin|G8_Pin|G7_Pin, GPIO_PIN_RESET);
 80010ca:	23fe      	movs	r3, #254	; 0xfe
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <nixie_display_reset_all+0x38>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	0019      	movs	r1, r3
 80010d4:	f001 fb1b 	bl	800270e <HAL_GPIO_WritePin>
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	50000c00 	.word	0x50000c00
 80010e4:	50000400 	.word	0x50000400

080010e8 <nixie_display_set_anode>:

static void nixie_display_set_anode(uint8_t n)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	0002      	movs	r2, r0
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	701a      	strb	r2, [r3, #0]
	switch(n)
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b09      	cmp	r3, #9
 80010fa:	d84e      	bhi.n	800119a <nixie_display_set_anode+0xb2>
 80010fc:	009a      	lsls	r2, r3, #2
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <nixie_display_set_anode+0xbc>)
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	469f      	mov	pc, r3
	{
	case 0:
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 8001106:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <nixie_display_set_anode+0xc0>)
 8001108:	2201      	movs	r2, #1
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	0018      	movs	r0, r3
 800110e:	f001 fafe 	bl	800270e <HAL_GPIO_WritePin>
		break;
 8001112:	e042      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 1:
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8001114:	23a0      	movs	r3, #160	; 0xa0
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	2201      	movs	r2, #1
 800111a:	2110      	movs	r1, #16
 800111c:	0018      	movs	r0, r3
 800111e:	f001 faf6 	bl	800270e <HAL_GPIO_WritePin>
		break;
 8001122:	e03a      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 2:
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <nixie_display_set_anode+0xc4>)
 8001126:	2201      	movs	r2, #1
 8001128:	2104      	movs	r1, #4
 800112a:	0018      	movs	r0, r3
 800112c:	f001 faef 	bl	800270e <HAL_GPIO_WritePin>
		break;
 8001130:	e033      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 3:
		HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_SET);
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	2201      	movs	r2, #1
 8001138:	2140      	movs	r1, #64	; 0x40
 800113a:	0018      	movs	r0, r3
 800113c:	f001 fae7 	bl	800270e <HAL_GPIO_WritePin>
		break;
 8001140:	e02b      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 4:
		HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_SET);
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <nixie_display_set_anode+0xc4>)
 8001144:	2201      	movs	r2, #1
 8001146:	2108      	movs	r1, #8
 8001148:	0018      	movs	r0, r3
 800114a:	f001 fae0 	bl	800270e <HAL_GPIO_WritePin>
		break;
 800114e:	e024      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 5:
		HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_SET);
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <nixie_display_set_anode+0xc0>)
 8001152:	2201      	movs	r2, #1
 8001154:	2108      	movs	r1, #8
 8001156:	0018      	movs	r0, r3
 8001158:	f001 fad9 	bl	800270e <HAL_GPIO_WritePin>
		break;
 800115c:	e01d      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 6:
		HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_SET);
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <nixie_display_set_anode+0xc0>)
 8001160:	2201      	movs	r2, #1
 8001162:	2110      	movs	r1, #16
 8001164:	0018      	movs	r0, r3
 8001166:	f001 fad2 	bl	800270e <HAL_GPIO_WritePin>
		break;
 800116a:	e016      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 7:
		HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_SET);
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <nixie_display_set_anode+0xc0>)
 8001172:	2201      	movs	r2, #1
 8001174:	0019      	movs	r1, r3
 8001176:	f001 faca 	bl	800270e <HAL_GPIO_WritePin>
		break;
 800117a:	e00e      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 8:
		HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_SET);
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <nixie_display_set_anode+0xc0>)
 8001182:	2201      	movs	r2, #1
 8001184:	0019      	movs	r1, r3
 8001186:	f001 fac2 	bl	800270e <HAL_GPIO_WritePin>
		break;
 800118a:	e006      	b.n	800119a <nixie_display_set_anode+0xb2>
	case 9:
		HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_SET);
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <nixie_display_set_anode+0xc0>)
 800118e:	2201      	movs	r2, #1
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0018      	movs	r0, r3
 8001194:	f001 fabb 	bl	800270e <HAL_GPIO_WritePin>
		break;
 8001198:	46c0      	nop			; (mov r8, r8)
	}
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	080053a0 	.word	0x080053a0
 80011a8:	50000400 	.word	0x50000400
 80011ac:	50000c00 	.word	0x50000c00

080011b0 <MY_OWN_MX_RTC_Init>:
#include "rtc.h"

/* USER CODE BEGIN 0 */
/* Own RTC init function */
void MY_OWN_MX_RTC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
  RTC_AlarmTypeDef sAlarm = {0};
 80011b6:	003b      	movs	r3, r7
 80011b8:	0018      	movs	r0, r3
 80011ba:	2328      	movs	r3, #40	; 0x28
 80011bc:	001a      	movs	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	f004 f8da 	bl	8005378 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011c6:	4a2c      	ldr	r2, [pc, #176]	; (8001278 <MY_OWN_MX_RTC_Init+0xc8>)
 80011c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011d2:	227f      	movs	r2, #127	; 0x7f
 80011d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011d8:	22ff      	movs	r2, #255	; 0xff
 80011da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	05d2      	lsls	r2, r2, #23
 80011f4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f002 f944 	bl	800348c <HAL_RTC_Init>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <MY_OWN_MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001208:	f7ff fdec 	bl	8000de4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800120c:	003b      	movs	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001212:	003b      	movs	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001218:	003b      	movs	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800121e:	003b      	movs	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001224:	003b      	movs	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_SET;
 800122a:	003b      	movs	r3, r7
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	02d2      	lsls	r2, r2, #11
 8001230:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001232:	003b      	movs	r3, r7
 8001234:	4a11      	ldr	r2, [pc, #68]	; (800127c <MY_OWN_MX_RTC_Init+0xcc>)
 8001236:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8001238:	003b      	movs	r3, r7
 800123a:	22f0      	movs	r2, #240	; 0xf0
 800123c:	0512      	lsls	r2, r2, #20
 800123e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001240:	003b      	movs	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001246:	003b      	movs	r3, r7
 8001248:	2220      	movs	r2, #32
 800124a:	2101      	movs	r1, #1
 800124c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800124e:	003b      	movs	r3, r7
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	0052      	lsls	r2, r2, #1
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001256:	0039      	movs	r1, r7
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MY_OWN_MX_RTC_Init+0xc4>)
 800125a:	2200      	movs	r2, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f002 fb8f 	bl	8003980 <HAL_RTC_SetAlarm_IT>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <MY_OWN_MX_RTC_Init+0xba>
  {
    Error_Handler();
 8001266:	f7ff fdbd 	bl	8000de4 <Error_Handler>
  }

}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b00a      	add	sp, #40	; 0x28
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	20000090 	.word	0x20000090
 8001278:	40002800 	.word	0x40002800
 800127c:	80808080 	.word	0x80808080

08001280 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a11      	ldr	r2, [pc, #68]	; (80012d4 <HAL_RTC_MspInit+0x54>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d11c      	bne.n	80012cc <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_RTC_MspInit+0x58>)
 8001294:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_RTC_MspInit+0x58>)
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0209      	lsls	r1, r1, #8
 800129c:	430a      	orrs	r2, r1
 800129e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_RTC_MspInit+0x58>)
 80012a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_RTC_MspInit+0x58>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	00c9      	lsls	r1, r1, #3
 80012aa:	430a      	orrs	r2, r1
 80012ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_RTC_MspInit+0x58>)
 80012b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4013      	ands	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	2002      	movs	r0, #2
 80012c2:	f000 febf 	bl	8002044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80012c6:	2002      	movs	r0, #2
 80012c8:	f000 fed1 	bl	800206e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40002800 	.word	0x40002800
 80012d8:	40021000 	.word	0x40021000

080012dc <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <LL_SYSCFG_DisableDBATT+0x1c>)
 80012e6:	6819      	ldr	r1, [r3, #0]
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <LL_SYSCFG_DisableDBATT+0x1c>)
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40010000 	.word	0x40010000

080012fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_MspInit+0x58>)
 8001304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_MspInit+0x58>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_MspInit+0x58>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2201      	movs	r2, #1
 8001314:	4013      	ands	r3, r2
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_MspInit+0x58>)
 800131c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x58>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0549      	lsls	r1, r1, #21
 8001324:	430a      	orrs	r2, r1
 8001326:	63da      	str	r2, [r3, #60]	; 0x3c
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_MspInit+0x58>)
 800132a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	055b      	lsls	r3, r3, #21
 8001330:	4013      	ands	r3, r2
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_DisableVREFBUF();
 8001336:	f000 fb5f 	bl	80019f8 <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800133a:	2002      	movs	r0, #2
 800133c:	f000 fb48 	bl	80019d0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8001340:	23c0      	movs	r3, #192	; 0xc0
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff ffc9 	bl	80012dc <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 faea 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001390:	4b03      	ldr	r3, [pc, #12]	; (80013a0 <RTC_TAMP_IRQHandler+0x14>)
 8001392:	0018      	movs	r0, r3
 8001394:	f002 fc34 	bl	8003c00 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	20000090 	.word	0x20000090

080013a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <TIM2_IRQHandler+0x14>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f002 fe76 	bl	800409c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	200000fc 	.word	0x200000fc

080013bc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <TIM14_IRQHandler+0x14>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f002 fe6a 	bl	800409c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	2000013c 	.word	0x2000013c

080013d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <SystemInit+0x14>)
 80013da:	2280      	movs	r2, #128	; 0x80
 80013dc:	0512      	lsls	r2, r2, #20
 80013de:	609a      	str	r2, [r3, #8]
#endif
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	2328      	movs	r3, #40	; 0x28
 80013f4:	18fb      	adds	r3, r7, r3
 80013f6:	0018      	movs	r0, r3
 80013f8:	2310      	movs	r3, #16
 80013fa:	001a      	movs	r2, r3
 80013fc:	2100      	movs	r1, #0
 80013fe:	f003 ffbb 	bl	8005378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	231c      	movs	r3, #28
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	0018      	movs	r0, r3
 8001408:	230c      	movs	r3, #12
 800140a:	001a      	movs	r2, r3
 800140c:	2100      	movs	r1, #0
 800140e:	f003 ffb3 	bl	8005378 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001412:	003b      	movs	r3, r7
 8001414:	0018      	movs	r0, r3
 8001416:	231c      	movs	r3, #28
 8001418:	001a      	movs	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	f003 ffac 	bl	8005378 <memset>

  htim2.Instance = TIM2;
 8001420:	4b34      	ldr	r3, [pc, #208]	; (80014f4 <MX_TIM2_Init+0x108>)
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	05d2      	lsls	r2, r2, #23
 8001426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <MX_TIM2_Init+0x108>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <MX_TIM2_Init+0x108>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 224;
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <MX_TIM2_Init+0x108>)
 8001436:	22e0      	movs	r2, #224	; 0xe0
 8001438:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <MX_TIM2_Init+0x108>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <MX_TIM2_Init+0x108>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <MX_TIM2_Init+0x108>)
 8001448:	0018      	movs	r0, r3
 800144a:	f002 fd15 	bl	8003e78 <HAL_TIM_Base_Init>
 800144e:	1e03      	subs	r3, r0, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001452:	f7ff fcc7 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001456:	2128      	movs	r1, #40	; 0x28
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0152      	lsls	r2, r2, #5
 800145e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001460:	187a      	adds	r2, r7, r1
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <MX_TIM2_Init+0x108>)
 8001464:	0011      	movs	r1, r2
 8001466:	0018      	movs	r0, r3
 8001468:	f003 f848 	bl	80044fc <HAL_TIM_ConfigClockSource>
 800146c:	1e03      	subs	r3, r0, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001470:	f7ff fcb8 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_TIM2_Init+0x108>)
 8001476:	0018      	movs	r0, r3
 8001478:	f002 fd54 	bl	8003f24 <HAL_TIM_PWM_Init>
 800147c:	1e03      	subs	r3, r0, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001480:	f7ff fcb0 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_TIM2_Init+0x108>)
 8001486:	2108      	movs	r1, #8
 8001488:	0018      	movs	r0, r3
 800148a:	f002 fd7f 	bl	8003f8c <HAL_TIM_OnePulse_Init>
 800148e:	1e03      	subs	r3, r0, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001492:	f7ff fca7 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	211c      	movs	r1, #28
 8001498:	187b      	adds	r3, r7, r1
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a4:	187a      	adds	r2, r7, r1
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_TIM2_Init+0x108>)
 80014a8:	0011      	movs	r1, r2
 80014aa:	0018      	movs	r0, r3
 80014ac:	f003 fd0a 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80014b4:	f7ff fc96 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80014b8:	003b      	movs	r3, r7
 80014ba:	2270      	movs	r2, #112	; 0x70
 80014bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 80014be:	003b      	movs	r3, r7
 80014c0:	2201      	movs	r2, #1
 80014c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c4:	003b      	movs	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014ca:	003b      	movs	r3, r7
 80014cc:	2204      	movs	r2, #4
 80014ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d0:	0039      	movs	r1, r7
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <MX_TIM2_Init+0x108>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	0018      	movs	r0, r3
 80014d8:	f002 ff12 	bl	8004300 <HAL_TIM_PWM_ConfigChannel>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80014e0:	f7ff fc80 	bl	8000de4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <MX_TIM2_Init+0x108>)
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 f93a 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b00e      	add	sp, #56	; 0x38
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200000fc 	.word	0x200000fc

080014f8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_TIM14_Init+0x40>)
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <MX_TIM14_Init+0x44>)
 8001500:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <MX_TIM14_Init+0x40>)
 8001504:	223f      	movs	r2, #63	; 0x3f
 8001506:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_TIM14_Init+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_TIM14_Init+0x40>)
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <MX_TIM14_Init+0x48>)
 8001512:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_TIM14_Init+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <MX_TIM14_Init+0x40>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <MX_TIM14_Init+0x40>)
 8001522:	0018      	movs	r0, r3
 8001524:	f002 fca8 	bl	8003e78 <HAL_TIM_Base_Init>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800152c:	f7ff fc5a 	bl	8000de4 <Error_Handler>
  }

}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	2000013c 	.word	0x2000013c
 800153c:	40002000 	.word	0x40002000
 8001540:	00001388 	.word	0x00001388

08001544 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b09c      	sub	sp, #112	; 0x70
 8001548:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	2360      	movs	r3, #96	; 0x60
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	0018      	movs	r0, r3
 8001550:	2310      	movs	r3, #16
 8001552:	001a      	movs	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f003 ff0f 	bl	8005378 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	2354      	movs	r3, #84	; 0x54
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	0018      	movs	r0, r3
 8001560:	230c      	movs	r3, #12
 8001562:	001a      	movs	r2, r3
 8001564:	2100      	movs	r1, #0
 8001566:	f003 ff07 	bl	8005378 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156a:	2338      	movs	r3, #56	; 0x38
 800156c:	18fb      	adds	r3, r7, r3
 800156e:	0018      	movs	r0, r3
 8001570:	231c      	movs	r3, #28
 8001572:	001a      	movs	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	f003 feff 	bl	8005378 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	0018      	movs	r0, r3
 800157e:	2334      	movs	r3, #52	; 0x34
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f003 fef8 	bl	8005378 <memset>

  htim15.Instance = TIM15;
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <MX_TIM15_Init+0x164>)
 800158a:	4a48      	ldr	r2, [pc, #288]	; (80016ac <MX_TIM15_Init+0x168>)
 800158c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <MX_TIM15_Init+0x164>)
 8001590:	223f      	movs	r2, #63	; 0x3f
 8001592:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b44      	ldr	r3, [pc, #272]	; (80016a8 <MX_TIM15_Init+0x164>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 249;
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <MX_TIM15_Init+0x164>)
 800159c:	22f9      	movs	r2, #249	; 0xf9
 800159e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <MX_TIM15_Init+0x164>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80015a6:	4b40      	ldr	r3, [pc, #256]	; (80016a8 <MX_TIM15_Init+0x164>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <MX_TIM15_Init+0x164>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <MX_TIM15_Init+0x164>)
 80015b4:	0018      	movs	r0, r3
 80015b6:	f002 fc5f 	bl	8003e78 <HAL_TIM_Base_Init>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80015be:	f7ff fc11 	bl	8000de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	2160      	movs	r1, #96	; 0x60
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2280      	movs	r2, #128	; 0x80
 80015c8:	0152      	lsls	r2, r2, #5
 80015ca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015cc:	187a      	adds	r2, r7, r1
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <MX_TIM15_Init+0x164>)
 80015d0:	0011      	movs	r1, r2
 80015d2:	0018      	movs	r0, r3
 80015d4:	f002 ff92 	bl	80044fc <HAL_TIM_ConfigClockSource>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80015dc:	f7ff fc02 	bl	8000de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80015e0:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <MX_TIM15_Init+0x164>)
 80015e2:	0018      	movs	r0, r3
 80015e4:	f002 fc9e 	bl	8003f24 <HAL_TIM_PWM_Init>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80015ec:	f7ff fbfa 	bl	8000de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2154      	movs	r1, #84	; 0x54
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015fe:	187a      	adds	r2, r7, r1
 8001600:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_TIM15_Init+0x164>)
 8001602:	0011      	movs	r1, r2
 8001604:	0018      	movs	r0, r3
 8001606:	f003 fc5d 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800160e:	f7ff fbe9 	bl	8000de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2138      	movs	r1, #56	; 0x38
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2260      	movs	r2, #96	; 0x60
 8001618:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 124;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	227c      	movs	r2, #124	; 0x7c
 800161e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001638:	187b      	adds	r3, r7, r1
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	1879      	adds	r1, r7, r1
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM15_Init+0x164>)
 8001642:	2200      	movs	r2, #0
 8001644:	0018      	movs	r0, r3
 8001646:	f002 fe5b 	bl	8004300 <HAL_TIM_PWM_ConfigChannel>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800164e:	f7ff fbc9 	bl	8000de4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	0192      	lsls	r2, r2, #6
 8001676:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001684:	1d3a      	adds	r2, r7, #4
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_TIM15_Init+0x164>)
 8001688:	0011      	movs	r1, r2
 800168a:	0018      	movs	r0, r3
 800168c:	f003 fc70 	bl	8004f70 <HAL_TIMEx_ConfigBreakDeadTime>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8001694:	f7ff fba6 	bl	8000de4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <MX_TIM15_Init+0x164>)
 800169a:	0018      	movs	r0, r3
 800169c:	f000 f860 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b01c      	add	sp, #112	; 0x70
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000bc 	.word	0x200000bc
 80016ac:	40014000 	.word	0x40014000

080016b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	05db      	lsls	r3, r3, #23
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d114      	bne.n	80016ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 80016c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 80016ca:	2101      	movs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 80016d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d4:	2201      	movs	r2, #1
 80016d6:	4013      	ands	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	200f      	movs	r0, #15
 80016e2:	f000 fcaf 	bl	8002044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e6:	200f      	movs	r0, #15
 80016e8:	f000 fcc1 	bl	800206e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80016ec:	e02e      	b.n	800174c <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM14)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a19      	ldr	r2, [pc, #100]	; (8001758 <HAL_TIM_Base_MspInit+0xa8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d116      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 80016fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	0209      	lsls	r1, r1, #8
 8001702:	430a      	orrs	r2, r1
 8001704:	641a      	str	r2, [r3, #64]	; 0x40
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 8001708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2013      	movs	r0, #19
 800171a:	f000 fc93 	bl	8002044 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800171e:	2013      	movs	r0, #19
 8001720:	f000 fca5 	bl	800206e <HAL_NVIC_EnableIRQ>
}
 8001724:	e012      	b.n	800174c <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM15)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0c      	ldr	r2, [pc, #48]	; (800175c <HAL_TIM_Base_MspInit+0xac>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d10d      	bne.n	800174c <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 8001732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	0249      	lsls	r1, r1, #9
 800173a:	430a      	orrs	r2, r1
 800173c:	641a      	str	r2, [r3, #64]	; 0x40
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_TIM_Base_MspInit+0xa4>)
 8001740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	025b      	lsls	r3, r3, #9
 8001746:	4013      	ands	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b006      	add	sp, #24
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	40002000 	.word	0x40002000
 800175c:	40014000 	.word	0x40014000

08001760 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	2314      	movs	r3, #20
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	0018      	movs	r0, r3
 800176e:	2314      	movs	r3, #20
 8001770:	001a      	movs	r2, r3
 8001772:	2100      	movs	r1, #0
 8001774:	f003 fe00 	bl	8005378 <memset>
  if(timHandle->Instance==TIM2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	05db      	lsls	r3, r3, #23
 8001780:	429a      	cmp	r2, r3
 8001782:	d124      	bne.n	80017ce <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_TIM_MspPostInit+0xc8>)
 8001786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_TIM_MspPostInit+0xc8>)
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_TIM_MspPostInit+0xc8>)
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	2201      	movs	r2, #1
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800179c:	2114      	movs	r1, #20
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2280      	movs	r2, #128	; 0x80
 80017a2:	0212      	lsls	r2, r2, #8
 80017a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2202      	movs	r2, #2
 80017aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2202      	movs	r2, #2
 80017bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	187a      	adds	r2, r7, r1
 80017c0:	23a0      	movs	r3, #160	; 0xa0
 80017c2:	05db      	lsls	r3, r3, #23
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fe20 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80017cc:	e027      	b.n	800181e <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM15)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a16      	ldr	r2, [pc, #88]	; (800182c <HAL_TIM_MspPostInit+0xcc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d122      	bne.n	800181e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_TIM_MspPostInit+0xc8>)
 80017da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_TIM_MspPostInit+0xc8>)
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_TIM_MspPostInit+0xc8>)
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f0:	2114      	movs	r1, #20
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2204      	movs	r2, #4
 80017f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2202      	movs	r2, #2
 80017fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2202      	movs	r2, #2
 8001802:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800180a:	187b      	adds	r3, r7, r1
 800180c:	2205      	movs	r2, #5
 800180e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	187a      	adds	r2, r7, r1
 8001812:	23a0      	movs	r3, #160	; 0xa0
 8001814:	05db      	lsls	r3, r3, #23
 8001816:	0011      	movs	r1, r2
 8001818:	0018      	movs	r0, r3
 800181a:	f000 fdf7 	bl	800240c <HAL_GPIO_Init>
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b00a      	add	sp, #40	; 0x28
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	40021000 	.word	0x40021000
 800182c:	40014000 	.word	0x40014000

08001830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001832:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001834:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001836:	e003      	b.n	8001840 <LoopCopyDataInit>

08001838 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800183a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800183c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800183e:	3104      	adds	r1, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <LoopForever+0xa>)
  ldr r3, =_edata
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <LoopForever+0xe>)
  adds r2, r0, r1
 8001844:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001846:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001848:	d3f6      	bcc.n	8001838 <CopyDataInit>
  ldr r2, =_sbss
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <LoopForever+0x12>)
  b LoopFillZerobss
 800184c:	e002      	b.n	8001854 <LoopFillZerobss>

0800184e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001850:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001852:	3204      	adds	r2, #4

08001854 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <LoopForever+0x16>)
  cmp r2, r3
 8001856:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001858:	d3f9      	bcc.n	800184e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800185a:	f7ff fdbb 	bl	80013d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800185e:	f003 fd67 	bl	8005330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001862:	f7ff fa1f 	bl	8000ca4 <main>

08001866 <LoopForever>:

LoopForever:
    b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   r0, =_estack
 8001868:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800186c:	08005464 	.word	0x08005464
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001874:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001878:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800187c:	20000180 	.word	0x20000180

08001880 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC1_COMP_IRQHandler>
	...

08001884 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_Init+0x3c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Init+0x3c>)
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0049      	lsls	r1, r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189e:	2000      	movs	r0, #0
 80018a0:	f000 f810 	bl	80018c4 <HAL_InitTick>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e001      	b.n	80018b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fd24 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b4:	1dfb      	adds	r3, r7, #7
 80018b6:	781b      	ldrb	r3, [r3, #0]
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b002      	add	sp, #8
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	230f      	movs	r3, #15
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_InitTick+0x88>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d02b      	beq.n	8001934 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_InitTick+0x8c>)
 80018de:	681c      	ldr	r4, [r3, #0]
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_InitTick+0x88>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0019      	movs	r1, r3
 80018e6:	23fa      	movs	r3, #250	; 0xfa
 80018e8:	0098      	lsls	r0, r3, #2
 80018ea:	f7fe fc0b 	bl	8000104 <__udivsi3>
 80018ee:	0003      	movs	r3, r0
 80018f0:	0019      	movs	r1, r3
 80018f2:	0020      	movs	r0, r4
 80018f4:	f7fe fc06 	bl	8000104 <__udivsi3>
 80018f8:	0003      	movs	r3, r0
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 fbc7 	bl	800208e <HAL_SYSTICK_Config>
 8001900:	1e03      	subs	r3, r0, #0
 8001902:	d112      	bne.n	800192a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d80a      	bhi.n	8001920 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	2301      	movs	r3, #1
 800190e:	425b      	negs	r3, r3
 8001910:	2200      	movs	r2, #0
 8001912:	0018      	movs	r0, r3
 8001914:	f000 fb96 	bl	8002044 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_InitTick+0x90>)
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e00d      	b.n	800193c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001920:	230f      	movs	r3, #15
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	e008      	b.n	800193c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800192a:	230f      	movs	r3, #15
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e003      	b.n	800193c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001934:	230f      	movs	r3, #15
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800193c:	230f      	movs	r3, #15
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	781b      	ldrb	r3, [r3, #0]
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b005      	add	sp, #20
 8001948:	bd90      	pop	{r4, r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	2000000c 	.word	0x2000000c
 8001950:	20000004 	.word	0x20000004
 8001954:	20000008 	.word	0x20000008

08001958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <HAL_IncTick+0x18>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <HAL_IncTick+0x1c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	18d2      	adds	r2, r2, r3
 8001966:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_IncTick+0x18>)
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000017c 	.word	0x2000017c
 8001974:	2000000c 	.word	0x2000000c

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_GetTick+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	2000017c 	.word	0x2000017c

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fff0 	bl	8001978 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	d004      	beq.n	80019b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_Delay+0x40>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	18d3      	adds	r3, r2, r3
 80019ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	f7ff ffe1 	bl	8001978 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d8f7      	bhi.n	80019b2 <HAL_Delay+0x26>
  {
  }
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2202      	movs	r2, #2
 80019de:	4393      	bics	r3, r2
 80019e0:	0019      	movs	r1, r3
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]
}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	40010030 	.word	0x40010030

080019f8 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]
}
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40010030 	.word	0x40010030

08001a14 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a1c:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <LL_EXTI_EnableIT_0_31+0x20>)
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	58d2      	ldr	r2, [r2, r3]
 8001a22:	4904      	ldr	r1, [pc, #16]	; (8001a34 <LL_EXTI_EnableIT_0_31+0x20>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	508b      	str	r3, [r1, r2]
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b002      	add	sp, #8
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021800 	.word	0x40021800

08001a38 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001a40:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <LL_EXTI_DisableIT_0_31+0x24>)
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	58d3      	ldr	r3, [r2, r3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	43d2      	mvns	r2, r2
 8001a4a:	4904      	ldr	r1, [pc, #16]	; (8001a5c <LL_EXTI_DisableIT_0_31+0x24>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	508b      	str	r3, [r1, r2]
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b002      	add	sp, #8
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021800 	.word	0x40021800

08001a60 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001a68:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001a6a:	2384      	movs	r3, #132	; 0x84
 8001a6c:	58d2      	ldr	r2, [r2, r3]
 8001a6e:	4904      	ldr	r1, [pc, #16]	; (8001a80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	2284      	movs	r2, #132	; 0x84
 8001a76:	508b      	str	r3, [r1, r2]

}
 8001a78:	46c0      	nop			; (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b002      	add	sp, #8
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021800 	.word	0x40021800

08001a84 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001a8e:	2384      	movs	r3, #132	; 0x84
 8001a90:	58d3      	ldr	r3, [r2, r3]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	43d2      	mvns	r2, r2
 8001a96:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2284      	movs	r2, #132	; 0x84
 8001a9c:	508b      	str	r3, [r1, r2]
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	40021800 	.word	0x40021800

08001aac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021800 	.word	0x40021800

08001acc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	43d9      	mvns	r1, r3
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001ade:	400a      	ands	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021800 	.word	0x40021800

08001af0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021800 	.word	0x40021800

08001b10 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021800 	.word	0x40021800

08001b34 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	611a      	str	r2, [r3, #16]
}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b002      	add	sp, #8
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	40021800 	.word	0x40021800

08001b50 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	60da      	str	r2, [r3, #12]
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021800 	.word	0x40021800

08001b6c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	231f      	movs	r3, #31
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 8001b86:	231f      	movs	r3, #31
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e13a      	b.n	8001e06 <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0fdb      	lsrs	r3, r3, #31
 8001b98:	07da      	lsls	r2, r3, #31
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d104      	bne.n	8001bac <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8001ba2:	231f      	movs	r3, #31
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e12c      	b.n	8001e06 <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2229      	movs	r2, #41	; 0x29
 8001bb0:	5c9b      	ldrb	r3, [r3, r2]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10a      	bne.n	8001bce <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2228      	movs	r2, #40	; 0x28
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7fe fbb1 	bl	8000330 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2230      	movs	r2, #48	; 0x30
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a83      	ldr	r2, [pc, #524]	; (8001e14 <HAL_COMP_Init+0x2a8>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d10d      	bne.n	8001c3c <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001c20:	4b7d      	ldr	r3, [pc, #500]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c26:	497d      	ldr	r1, [pc, #500]	; (8001e1c <HAL_COMP_Init+0x2b0>)
 8001c28:	400a      	ands	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001c2c:	4b7a      	ldr	r3, [pc, #488]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4b79      	ldr	r3, [pc, #484]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	0109      	lsls	r1, r1, #4
 8001c36:	430a      	orrs	r2, r1
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	e01f      	b.n	8001c7c <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	23c0      	movs	r3, #192	; 0xc0
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d10d      	bne.n	8001c64 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001c48:	4b73      	ldr	r3, [pc, #460]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b72      	ldr	r3, [pc, #456]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0109      	lsls	r1, r1, #4
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001c56:	4b70      	ldr	r3, [pc, #448]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c5c:	496f      	ldr	r1, [pc, #444]	; (8001e1c <HAL_COMP_Init+0x2b0>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	e00b      	b.n	8001c7c <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001c64:	4b6c      	ldr	r3, [pc, #432]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b6b      	ldr	r3, [pc, #428]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c6a:	496c      	ldr	r1, [pc, #432]	; (8001e1c <HAL_COMP_Init+0x2b0>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001c70:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c76:	4969      	ldr	r1, [pc, #420]	; (8001e1c <HAL_COMP_Init+0x2b0>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	01d2      	lsls	r2, r2, #7
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d006      	beq.n	8001c96 <HAL_COMP_Init+0x12a>
 8001c88:	22a0      	movs	r2, #160	; 0xa0
 8001c8a:	01d2      	lsls	r2, r2, #7
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d010      	beq.n	8001cb2 <HAL_COMP_Init+0x146>
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d01c      	beq.n	8001cce <HAL_COMP_Init+0x162>
 8001c94:	e02a      	b.n	8001cec <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001c96:	4b60      	ldr	r3, [pc, #384]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001c9c:	2180      	movs	r1, #128	; 0x80
 8001c9e:	01c9      	lsls	r1, r1, #7
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001ca4:	4b5c      	ldr	r3, [pc, #368]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001caa:	495d      	ldr	r1, [pc, #372]	; (8001e20 <HAL_COMP_Init+0x2b4>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
        break;
 8001cb0:	e029      	b.n	8001d06 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cb8:	4959      	ldr	r1, [pc, #356]	; (8001e20 <HAL_COMP_Init+0x2b4>)
 8001cba:	400a      	ands	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001cbe:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	01c9      	lsls	r1, r1, #7
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
        break;
 8001ccc:	e01b      	b.n	8001d06 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001cce:	4b52      	ldr	r3, [pc, #328]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b51      	ldr	r3, [pc, #324]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	01c9      	lsls	r1, r1, #7
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001cdc:	4b4e      	ldr	r3, [pc, #312]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4b4d      	ldr	r3, [pc, #308]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	01c9      	lsls	r1, r1, #7
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]
        break;
 8001cea:	e00c      	b.n	8001d06 <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001cec:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cf2:	494b      	ldr	r1, [pc, #300]	; (8001e20 <HAL_COMP_Init+0x2b4>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001cf8:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001cfe:	4948      	ldr	r1, [pc, #288]	; (8001e20 <HAL_COMP_Init+0x2b4>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]
        break;
 8001d04:	46c0      	nop			; (mov r8, r8)
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2230      	movs	r2, #48	; 0x30
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d016      	beq.n	8001d40 <HAL_COMP_Init+0x1d4>
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d113      	bne.n	8001d40 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_COMP_Init+0x2b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4942      	ldr	r1, [pc, #264]	; (8001e28 <HAL_COMP_Init+0x2bc>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7fe f9f0 	bl	8000104 <__udivsi3>
 8001d24:	0003      	movs	r3, r0
 8001d26:	001a      	movs	r2, r3
 8001d28:	0013      	movs	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	189b      	adds	r3, r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8001d32:	e002      	b.n	8001d3a <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f9      	bne.n	8001d34 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a34      	ldr	r2, [pc, #208]	; (8001e18 <HAL_COMP_Init+0x2ac>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d102      	bne.n	8001d50 <HAL_COMP_Init+0x1e4>
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	e001      	b.n	8001d54 <HAL_COMP_Init+0x1e8>
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	02db      	lsls	r3, r3, #11
 8001d54:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d040      	beq.n	8001de2 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	2210      	movs	r2, #16
 8001d66:	4013      	ands	r3, r2
 8001d68:	d004      	beq.n	8001d74 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fe9d 	bl	8001aac <LL_EXTI_EnableRisingTrig_0_31>
 8001d72:	e003      	b.n	8001d7c <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff fea8 	bl	8001acc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	2220      	movs	r2, #32
 8001d82:	4013      	ands	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff feb1 	bl	8001af0 <LL_EXTI_EnableFallingTrig_0_31>
 8001d8e:	e003      	b.n	8001d98 <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f7ff febc 	bl	8001b10 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff fed8 	bl	8001b50 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff fec6 	bl	8001b34 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d004      	beq.n	8001dbc <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f7ff fe53 	bl	8001a60 <LL_EXTI_EnableEvent_0_31>
 8001dba:	e003      	b.n	8001dc4 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7ff fe60 	bl	8001a84 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff fe1f 	bl	8001a14 <LL_EXTI_EnableIT_0_31>
 8001dd6:	e00c      	b.n	8001df2 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff fe2c 	bl	8001a38 <LL_EXTI_DisableIT_0_31>
 8001de0:	e007      	b.n	8001df2 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7ff fe4d 	bl	8001a84 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7ff fe23 	bl	8001a38 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2229      	movs	r2, #41	; 0x29
 8001df6:	5c9b      	ldrb	r3, [r3, r2]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2229      	movs	r2, #41	; 0x29
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001e06:	231f      	movs	r3, #31
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b008      	add	sp, #32
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	fe00740f 	.word	0xfe00740f
 8001e18:	40010200 	.word	0x40010200
 8001e1c:	fffff7ff 	.word	0xfffff7ff
 8001e20:	ffffbfff 	.word	0xffffbfff
 8001e24:	20000004 	.word	0x20000004
 8001e28:	00030d40 	.word	0x00030d40

08001e2c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	230f      	movs	r3, #15
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d104      	bne.n	8001e50 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 8001e46:	230f      	movs	r3, #15
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e034      	b.n	8001eba <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	0fdb      	lsrs	r3, r3, #31
 8001e58:	07da      	lsls	r2, r3, #31
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d104      	bne.n	8001e6c <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 8001e62:	230f      	movs	r3, #15
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e026      	b.n	8001eba <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2229      	movs	r2, #41	; 0x29
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d11c      	bne.n	8001eb2 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2101      	movs	r1, #1
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2229      	movs	r2, #41	; 0x29
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_COMP_Start+0x9c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	490d      	ldr	r1, [pc, #52]	; (8001ecc <HAL_COMP_Start+0xa0>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f7fe f934 	bl	8000104 <__udivsi3>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001ea2:	e002      	b.n	8001eaa <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <HAL_COMP_Start+0x78>
 8001eb0:	e003      	b.n	8001eba <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001eba:	230f      	movs	r3, #15
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	781b      	ldrb	r3, [r3, #0]
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	00030d40 	.word	0x00030d40

08001ed0 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	0f9b      	lsrs	r3, r3, #30
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4013      	ands	r3, r2
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}

08001eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	1dfb      	adds	r3, r7, #7
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b7f      	cmp	r3, #127	; 0x7f
 8001efe:	d809      	bhi.n	8001f14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	001a      	movs	r2, r3
 8001f06:	231f      	movs	r3, #31
 8001f08:	401a      	ands	r2, r3
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_EnableIRQ+0x30>)
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4091      	lsls	r1, r2
 8001f10:	000a      	movs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
  }
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	0002      	movs	r2, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b7f      	cmp	r3, #127	; 0x7f
 8001f34:	d828      	bhi.n	8001f88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f36:	4a2f      	ldr	r2, [pc, #188]	; (8001ff4 <__NVIC_SetPriority+0xd4>)
 8001f38:	1dfb      	adds	r3, r7, #7
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	33c0      	adds	r3, #192	; 0xc0
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	589b      	ldr	r3, [r3, r2]
 8001f46:	1dfa      	adds	r2, r7, #7
 8001f48:	7812      	ldrb	r2, [r2, #0]
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	400a      	ands	r2, r1
 8001f50:	00d2      	lsls	r2, r2, #3
 8001f52:	21ff      	movs	r1, #255	; 0xff
 8001f54:	4091      	lsls	r1, r2
 8001f56:	000a      	movs	r2, r1
 8001f58:	43d2      	mvns	r2, r2
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	019b      	lsls	r3, r3, #6
 8001f62:	22ff      	movs	r2, #255	; 0xff
 8001f64:	401a      	ands	r2, r3
 8001f66:	1dfb      	adds	r3, r7, #7
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	4003      	ands	r3, r0
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f74:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <__NVIC_SetPriority+0xd4>)
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	33c0      	adds	r3, #192	; 0xc0
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f86:	e031      	b.n	8001fec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <__NVIC_SetPriority+0xd8>)
 8001f8a:	1dfb      	adds	r3, r7, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	0019      	movs	r1, r3
 8001f90:	230f      	movs	r3, #15
 8001f92:	400b      	ands	r3, r1
 8001f94:	3b08      	subs	r3, #8
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3306      	adds	r3, #6
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	18d3      	adds	r3, r2, r3
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	1dfa      	adds	r2, r7, #7
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	2203      	movs	r2, #3
 8001faa:	400a      	ands	r2, r1
 8001fac:	00d2      	lsls	r2, r2, #3
 8001fae:	21ff      	movs	r1, #255	; 0xff
 8001fb0:	4091      	lsls	r1, r2
 8001fb2:	000a      	movs	r2, r1
 8001fb4:	43d2      	mvns	r2, r2
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	019b      	lsls	r3, r3, #6
 8001fbe:	22ff      	movs	r2, #255	; 0xff
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	2303      	movs	r3, #3
 8001fca:	4003      	ands	r3, r0
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <__NVIC_SetPriority+0xd8>)
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	001c      	movs	r4, r3
 8001fd8:	230f      	movs	r3, #15
 8001fda:	4023      	ands	r3, r4
 8001fdc:	3b08      	subs	r3, #8
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	18c3      	adds	r3, r0, r3
 8001fe8:	3304      	adds	r3, #4
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b003      	add	sp, #12
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	4a0c      	ldr	r2, [pc, #48]	; (800203c <SysTick_Config+0x40>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200e:	2301      	movs	r3, #1
 8002010:	e010      	b.n	8002034 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <SysTick_Config+0x44>)
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	3a01      	subs	r2, #1
 8002018:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201a:	2301      	movs	r3, #1
 800201c:	425b      	negs	r3, r3
 800201e:	2103      	movs	r1, #3
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff ff7d 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <SysTick_Config+0x44>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x44>)
 800202e:	2207      	movs	r2, #7
 8002030:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}
 800203c:	00ffffff 	.word	0x00ffffff
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	210f      	movs	r1, #15
 8002050:	187b      	adds	r3, r7, r1
 8002052:	1c02      	adds	r2, r0, #0
 8002054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	187b      	adds	r3, r7, r1
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b25b      	sxtb	r3, r3
 800205e:	0011      	movs	r1, r2
 8002060:	0018      	movs	r0, r3
 8002062:	f7ff ff5d 	bl	8001f20 <__NVIC_SetPriority>
}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b004      	add	sp, #16
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	0002      	movs	r2, r0
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b25b      	sxtb	r3, r3
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff ff33 	bl	8001eec <__NVIC_EnableIRQ>
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff ffaf 	bl	8001ffc <SysTick_Config>
 800209e:	0003      	movs	r3, r0
}
 80020a0:	0018      	movs	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e015      	b.n	80020e6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	791b      	ldrb	r3, [r3, #4]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7fe f99b 	bl	8000408 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	0018      	movs	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b002      	add	sp, #8
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	795b      	ldrb	r3, [r3, #5]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_DAC_Start+0x16>
 8002100:	2302      	movs	r3, #2
 8002102:	e03f      	b.n	8002184 <HAL_DAC_Start+0x96>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6819      	ldr	r1, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2210      	movs	r2, #16
 800211a:	4013      	ands	r3, r2
 800211c:	2201      	movs	r2, #1
 800211e:	409a      	lsls	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	223e      	movs	r2, #62	; 0x3e
 8002136:	4013      	ands	r3, r2
 8002138:	2b02      	cmp	r3, #2
 800213a:	d11c      	bne.n	8002176 <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	e013      	b.n	8002176 <HAL_DAC_Start+0x88>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	23f8      	movs	r3, #248	; 0xf8
 8002156:	039b      	lsls	r3, r3, #14
 8002158:	401a      	ands	r2, r3
 800215a:	2102      	movs	r1, #2
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4099      	lsls	r1, r3
 8002160:	000b      	movs	r3, r1
 8002162:	429a      	cmp	r2, r3
 8002164:	d107      	bne.n	8002176 <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2102      	movs	r1, #2
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d105      	bne.n	80021b6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	18d3      	adds	r3, r2, r3
 80021b0:	3308      	adds	r3, #8
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e004      	b.n	80021c0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	18d3      	adds	r3, r2, r3
 80021bc:	3314      	adds	r3, #20
 80021be:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b006      	add	sp, #24
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	795b      	ldrb	r3, [r3, #5]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_DAC_ConfigChannel+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e107      	b.n	80023fc <HAL_DAC_ConfigChannel+0x22c>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2202      	movs	r2, #2
 80021f6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d000      	beq.n	8002202 <HAL_DAC_ConfigChannel+0x32>
 8002200:	e074      	b.n	80022ec <HAL_DAC_ConfigChannel+0x11c>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d138      	bne.n	800227a <HAL_DAC_ConfigChannel+0xaa>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002208:	f7ff fbb6 	bl	8001978 <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	61fb      	str	r3, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002210:	e011      	b.n	8002236 <HAL_DAC_ConfigChannel+0x66>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002212:	f7ff fbb1 	bl	8001978 <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d90a      	bls.n	8002236 <HAL_DAC_ConfigChannel+0x66>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2208      	movs	r2, #8
 8002226:	431a      	orrs	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2203      	movs	r2, #3
 8002230:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0e2      	b.n	80023fc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	4013      	ands	r3, r2
 8002242:	d1e6      	bne.n	8002212 <HAL_DAC_ConfigChannel+0x42>
        }
      }
      HAL_Delay(1);
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff fba1 	bl	800198c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	6992      	ldr	r2, [r2, #24]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
 8002254:	e01e      	b.n	8002294 <HAL_DAC_ConfigChannel+0xc4>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002256:	f7ff fb8f 	bl	8001978 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d90a      	bls.n	800227a <HAL_DAC_ConfigChannel+0xaa>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2208      	movs	r2, #8
 800226a:	431a      	orrs	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2203      	movs	r2, #3
 8002274:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e0c0      	b.n	80023fc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	2b00      	cmp	r3, #0
 8002282:	dbe8      	blt.n	8002256 <HAL_DAC_ConfigChannel+0x86>
        }
      }
      HAL_Delay(1U);
 8002284:	2001      	movs	r0, #1
 8002286:	f7ff fb81 	bl	800198c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	6992      	ldr	r2, [r2, #24]
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	2110      	movs	r1, #16
 800229e:	400a      	ands	r2, r1
 80022a0:	4958      	ldr	r1, [pc, #352]	; (8002404 <HAL_DAC_ConfigChannel+0x234>)
 80022a2:	4091      	lsls	r1, r2
 80022a4:	000a      	movs	r2, r1
 80022a6:	43d2      	mvns	r2, r2
 80022a8:	401a      	ands	r2, r3
 80022aa:	0011      	movs	r1, r2
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2010      	movs	r0, #16
 80022b4:	4003      	ands	r3, r0
 80022b6:	409a      	lsls	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	2110      	movs	r1, #16
 80022ca:	400a      	ands	r2, r1
 80022cc:	21ff      	movs	r1, #255	; 0xff
 80022ce:	4091      	lsls	r1, r2
 80022d0:	000a      	movs	r2, r1
 80022d2:	43d2      	mvns	r2, r2
 80022d4:	401a      	ands	r2, r3
 80022d6:	0011      	movs	r1, r2
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2010      	movs	r0, #16
 80022e0:	4003      	ands	r3, r0
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d11d      	bne.n	8002330 <HAL_DAC_ConfigChannel+0x160>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2210      	movs	r2, #16
 8002300:	4013      	ands	r3, r2
 8002302:	221f      	movs	r2, #31
 8002304:	409a      	lsls	r2, r3
 8002306:	0013      	movs	r3, r2
 8002308:	43da      	mvns	r2, r3
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2210      	movs	r2, #16
 800231a:	4013      	ands	r3, r2
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2210      	movs	r2, #16
 800233c:	4013      	ands	r3, r2
 800233e:	2207      	movs	r2, #7
 8002340:	409a      	lsls	r2, r3
 8002342:	0013      	movs	r3, r2
 8002344:	43da      	mvns	r2, r3
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	431a      	orrs	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2210      	movs	r2, #16
 8002362:	4013      	ands	r3, r2
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	409a      	lsls	r2, r3
 8002368:	0013      	movs	r3, r2
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2110      	movs	r1, #16
 8002382:	400b      	ands	r3, r1
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	01c9      	lsls	r1, r1, #7
 8002388:	4099      	lsls	r1, r3
 800238a:	000b      	movs	r3, r1
 800238c:	43d9      	mvns	r1, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	400a      	ands	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2210      	movs	r2, #16
 80023a2:	4013      	ands	r3, r2
 80023a4:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_DAC_ConfigChannel+0x238>)
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2210      	movs	r2, #16
 80023bc:	4013      	ands	r3, r2
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	409a      	lsls	r2, r3
 80023c2:	0013      	movs	r3, r2
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2110      	movs	r1, #16
 80023dc:	400b      	ands	r3, r1
 80023de:	21c0      	movs	r1, #192	; 0xc0
 80023e0:	4099      	lsls	r1, r3
 80023e2:	000b      	movs	r3, r1
 80023e4:	43d9      	mvns	r1, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2201      	movs	r2, #1
 80023f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b008      	add	sp, #32
 8002402:	bd80      	pop	{r7, pc}
 8002404:	000003ff 	.word	0x000003ff
 8002408:	00000ffe 	.word	0x00000ffe

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241a:	e147      	b.n	80026ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	4091      	lsls	r1, r2
 8002426:	000a      	movs	r2, r1
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d100      	bne.n	8002434 <HAL_GPIO_Init+0x28>
 8002432:	e138      	b.n	80026a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x38>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b12      	cmp	r3, #18
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	0092      	lsls	r2, r2, #2
 800244e:	58d3      	ldr	r3, [r2, r3]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2207      	movs	r2, #7
 8002456:	4013      	ands	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	409a      	lsls	r2, r3
 800245e:	0013      	movs	r3, r2
 8002460:	43da      	mvns	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2107      	movs	r1, #7
 8002470:	400b      	ands	r3, r1
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	409a      	lsls	r2, r3
 8002476:	0013      	movs	r3, r2
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	0092      	lsls	r2, r2, #2
 8002488:	6939      	ldr	r1, [r7, #16]
 800248a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	409a      	lsls	r2, r3
 800249a:	0013      	movs	r3, r2
 800249c:	43da      	mvns	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2203      	movs	r2, #3
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	409a      	lsls	r2, r3
 80024b2:	0013      	movs	r3, r2
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d00b      	beq.n	80024e0 <HAL_GPIO_Init+0xd4>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d007      	beq.n	80024e0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d4:	2b11      	cmp	r3, #17
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b12      	cmp	r3, #18
 80024de:	d130      	bne.n	8002542 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	409a      	lsls	r2, r3
 80024ee:	0013      	movs	r3, r2
 80024f0:	43da      	mvns	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	409a      	lsls	r2, r3
 8002502:	0013      	movs	r3, r2
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002516:	2201      	movs	r2, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
 800251c:	0013      	movs	r3, r2
 800251e:	43da      	mvns	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	2201      	movs	r2, #1
 800252e:	401a      	ands	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	409a      	lsls	r2, r3
 8002534:	0013      	movs	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	409a      	lsls	r2, r3
 8002550:	0013      	movs	r3, r2
 8002552:	43da      	mvns	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	055b      	lsls	r3, r3, #21
 800257a:	4013      	ands	r3, r2
 800257c:	d100      	bne.n	8002580 <HAL_GPIO_Init+0x174>
 800257e:	e092      	b.n	80026a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002580:	4a50      	ldr	r2, [pc, #320]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3318      	adds	r3, #24
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	589b      	ldr	r3, [r3, r2]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2203      	movs	r2, #3
 8002592:	4013      	ands	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	220f      	movs	r2, #15
 8002598:	409a      	lsls	r2, r3
 800259a:	0013      	movs	r3, r2
 800259c:	43da      	mvns	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	23a0      	movs	r3, #160	; 0xa0
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0x1ca>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <HAL_GPIO_Init+0x2bc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00d      	beq.n	80025d2 <HAL_GPIO_Init+0x1c6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a44      	ldr	r2, [pc, #272]	; (80026cc <HAL_GPIO_Init+0x2c0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x1c2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a43      	ldr	r2, [pc, #268]	; (80026d0 <HAL_GPIO_Init+0x2c4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_GPIO_Init+0x1be>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x1cc>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x1cc>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x1cc>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x1cc>
 80025d6:	2300      	movs	r3, #0
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	2103      	movs	r1, #3
 80025dc:	400a      	ands	r2, r1
 80025de:	00d2      	lsls	r2, r2, #3
 80025e0:	4093      	lsls	r3, r2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80025e8:	4936      	ldr	r1, [pc, #216]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3318      	adds	r3, #24
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025f6:	4a33      	ldr	r2, [pc, #204]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	58d3      	ldr	r3, [r2, r3]
 80025fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43da      	mvns	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	025b      	lsls	r3, r3, #9
 8002610:	4013      	ands	r3, r2
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800261c:	4929      	ldr	r1, [pc, #164]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002624:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 8002626:	2384      	movs	r3, #132	; 0x84
 8002628:	58d3      	ldr	r3, [r2, r3]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	43da      	mvns	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	4013      	ands	r3, r2
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800264a:	491e      	ldr	r1, [pc, #120]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 800264c:	2284      	movs	r2, #132	; 0x84
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43da      	mvns	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	035b      	lsls	r3, r3, #13
 800266a:	4013      	ands	r3, r2
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43da      	mvns	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	039b      	lsls	r3, r3, #14
 8002694:	4013      	ands	r3, r2
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_GPIO_Init+0x2b8>)
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	40da      	lsrs	r2, r3
 80026b4:	1e13      	subs	r3, r2, #0
 80026b6:	d000      	beq.n	80026ba <HAL_GPIO_Init+0x2ae>
 80026b8:	e6b0      	b.n	800241c <HAL_GPIO_Init+0x10>
  }
}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b006      	add	sp, #24
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	40021800 	.word	0x40021800
 80026c8:	50000400 	.word	0x50000400
 80026cc:	50000800 	.word	0x50000800
 80026d0:	50000c00 	.word	0x50000c00

080026d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	000a      	movs	r2, r1
 80026de:	1cbb      	adds	r3, r7, #2
 80026e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	1cba      	adds	r2, r7, #2
 80026e8:	8812      	ldrh	r2, [r2, #0]
 80026ea:	4013      	ands	r3, r2
 80026ec:	d004      	beq.n	80026f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026ee:	230f      	movs	r3, #15
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	e003      	b.n	8002700 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026f8:	230f      	movs	r3, #15
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002700:	230f      	movs	r3, #15
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	781b      	ldrb	r3, [r3, #0]
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	0008      	movs	r0, r1
 8002718:	0011      	movs	r1, r2
 800271a:	1cbb      	adds	r3, r7, #2
 800271c:	1c02      	adds	r2, r0, #0
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	1c7b      	adds	r3, r7, #1
 8002722:	1c0a      	adds	r2, r1, #0
 8002724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002726:	1c7b      	adds	r3, r7, #1
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d004      	beq.n	8002738 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800272e:	1cbb      	adds	r3, r7, #2
 8002730:	881a      	ldrh	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002736:	e003      	b.n	8002740 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002738:	1cbb      	adds	r3, r7, #2
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002756:	4013      	ands	r3, r2
 8002758:	0019      	movs	r1, r3
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d11f      	bne.n	80027ac <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	0013      	movs	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	189b      	adds	r3, r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4912      	ldr	r1, [pc, #72]	; (80027c4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800277a:	0018      	movs	r0, r3
 800277c:	f7fd fcc2 	bl	8000104 <__udivsi3>
 8002780:	0003      	movs	r3, r0
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002786:	e008      	b.n	800279a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3b01      	subs	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e001      	b.n	800279a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e009      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	401a      	ands	r2, r3
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d0ed      	beq.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	40007000 	.word	0x40007000
 80027bc:	fffff9ff 	.word	0xfffff9ff
 80027c0:	20000004 	.word	0x20000004
 80027c4:	000f4240 	.word	0x000f4240

080027c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e304      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d100      	bne.n	80027e6 <HAL_RCC_OscConfig+0x1e>
 80027e4:	e07c      	b.n	80028e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e6:	4bc3      	ldr	r3, [pc, #780]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2238      	movs	r2, #56	; 0x38
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f0:	4bc0      	ldr	r3, [pc, #768]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2203      	movs	r2, #3
 80027f6:	4013      	ands	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b10      	cmp	r3, #16
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_OscConfig+0x3e>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d002      	beq.n	800280c <HAL_RCC_OscConfig+0x44>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d10b      	bne.n	8002824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	4bb9      	ldr	r3, [pc, #740]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	029b      	lsls	r3, r3, #10
 8002814:	4013      	ands	r3, r2
 8002816:	d062      	beq.n	80028de <HAL_RCC_OscConfig+0x116>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d15e      	bne.n	80028de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e2df      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	025b      	lsls	r3, r3, #9
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_RCC_OscConfig+0x78>
 8002830:	4bb0      	ldr	r3, [pc, #704]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4baf      	ldr	r3, [pc, #700]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002836:	2180      	movs	r1, #128	; 0x80
 8002838:	0249      	lsls	r1, r1, #9
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e020      	b.n	8002882 <HAL_RCC_OscConfig+0xba>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	23a0      	movs	r3, #160	; 0xa0
 8002846:	02db      	lsls	r3, r3, #11
 8002848:	429a      	cmp	r2, r3
 800284a:	d10e      	bne.n	800286a <HAL_RCC_OscConfig+0xa2>
 800284c:	4ba9      	ldr	r3, [pc, #676]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4ba8      	ldr	r3, [pc, #672]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	02c9      	lsls	r1, r1, #11
 8002856:	430a      	orrs	r2, r1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	4ba6      	ldr	r3, [pc, #664]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4ba5      	ldr	r3, [pc, #660]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002860:	2180      	movs	r1, #128	; 0x80
 8002862:	0249      	lsls	r1, r1, #9
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e00b      	b.n	8002882 <HAL_RCC_OscConfig+0xba>
 800286a:	4ba2      	ldr	r3, [pc, #648]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4ba1      	ldr	r3, [pc, #644]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002870:	49a1      	ldr	r1, [pc, #644]	; (8002af8 <HAL_RCC_OscConfig+0x330>)
 8002872:	400a      	ands	r2, r1
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	4b9f      	ldr	r3, [pc, #636]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b9e      	ldr	r3, [pc, #632]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800287c:	499f      	ldr	r1, [pc, #636]	; (8002afc <HAL_RCC_OscConfig+0x334>)
 800287e:	400a      	ands	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d014      	beq.n	80028b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7ff f875 	bl	8001978 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff f870 	bl	8001978 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e29e      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a6:	4b93      	ldr	r3, [pc, #588]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	029b      	lsls	r3, r3, #10
 80028ae:	4013      	ands	r3, r2
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xcc>
 80028b2:	e015      	b.n	80028e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7ff f860 	bl	8001978 <HAL_GetTick>
 80028b8:	0003      	movs	r3, r0
 80028ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028be:	f7ff f85b 	bl	8001978 <HAL_GetTick>
 80028c2:	0002      	movs	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e289      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d0:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	029b      	lsls	r3, r3, #10
 80028d8:	4013      	ands	r3, r2
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0xf6>
 80028dc:	e000      	b.n	80028e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d100      	bne.n	80028ec <HAL_RCC_OscConfig+0x124>
 80028ea:	e099      	b.n	8002a20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ec:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2238      	movs	r2, #56	; 0x38
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f6:	4b7f      	ldr	r3, [pc, #508]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2203      	movs	r2, #3
 80028fc:	4013      	ands	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b10      	cmp	r3, #16
 8002904:	d102      	bne.n	800290c <HAL_RCC_OscConfig+0x144>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d002      	beq.n	8002912 <HAL_RCC_OscConfig+0x14a>
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d135      	bne.n	800297e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002912:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4013      	ands	r3, r2
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x162>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e25c      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a74      	ldr	r2, [pc, #464]	; (8002b00 <HAL_RCC_OscConfig+0x338>)
 8002930:	4013      	ands	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	4b6e      	ldr	r3, [pc, #440]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800293c:	430a      	orrs	r2, r1
 800293e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d112      	bne.n	800296c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002946:	4b6b      	ldr	r3, [pc, #428]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x33c>)
 800294c:	4013      	ands	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	4b67      	ldr	r3, [pc, #412]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800295a:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0adb      	lsrs	r3, r3, #11
 8002960:	2207      	movs	r2, #7
 8002962:	4013      	ands	r3, r2
 8002964:	4a68      	ldr	r2, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x340>)
 8002966:	40da      	lsrs	r2, r3
 8002968:	4b68      	ldr	r3, [pc, #416]	; (8002b0c <HAL_RCC_OscConfig+0x344>)
 800296a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800296c:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <HAL_RCC_OscConfig+0x348>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe ffa7 	bl	80018c4 <HAL_InitTick>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d051      	beq.n	8002a1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e232      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d030      	beq.n	80029e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002986:	4b5b      	ldr	r3, [pc, #364]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a5e      	ldr	r2, [pc, #376]	; (8002b04 <HAL_RCC_OscConfig+0x33c>)
 800298c:	4013      	ands	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	4b57      	ldr	r3, [pc, #348]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800299a:	4b56      	ldr	r3, [pc, #344]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b55      	ldr	r3, [pc, #340]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	0049      	lsls	r1, r1, #1
 80029a4:	430a      	orrs	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe ffe6 	bl	8001978 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b2:	f7fe ffe1 	bl	8001978 <HAL_GetTick>
 80029b6:	0002      	movs	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e20f      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d0:	4b48      	ldr	r3, [pc, #288]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a4a      	ldr	r2, [pc, #296]	; (8002b00 <HAL_RCC_OscConfig+0x338>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	021a      	lsls	r2, r3, #8
 80029e0:	4b44      	ldr	r3, [pc, #272]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80029e2:	430a      	orrs	r2, r1
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	e01b      	b.n	8002a20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80029e8:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 80029ee:	4949      	ldr	r1, [pc, #292]	; (8002b14 <HAL_RCC_OscConfig+0x34c>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe ffc0 	bl	8001978 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe ffbb 	bl	8001978 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1e9      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a10:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x236>
 8002a1c:	e000      	b.n	8002a20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2208      	movs	r2, #8
 8002a26:	4013      	ands	r3, r2
 8002a28:	d047      	beq.n	8002aba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002a2a:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2238      	movs	r2, #56	; 0x38
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b18      	cmp	r3, #24
 8002a34:	d10a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a36:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d03c      	beq.n	8002aba <HAL_RCC_OscConfig+0x2f2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d138      	bne.n	8002aba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e1cb      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d019      	beq.n	8002a88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002a56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a58:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe ff8a 	bl	8001978 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe ff85 	bl	8001978 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e1b3      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d0f1      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2a2>
 8002a86:	e018      	b.n	8002aba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002a8e:	2101      	movs	r1, #1
 8002a90:	438a      	bics	r2, r1
 8002a92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe ff70 	bl	8001978 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9e:	f7fe ff6b 	bl	8001978 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e199      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d1f1      	bne.n	8002a9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d100      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2fe>
 8002ac4:	e0c6      	b.n	8002c54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac6:	231f      	movs	r3, #31
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2238      	movs	r2, #56	; 0x38
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b20      	cmp	r3, #32
 8002ad8:	d11e      	bne.n	8002b18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCC_OscConfig+0x32c>)
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	2202      	movs	r2, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d100      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x31e>
 8002ae4:	e0b6      	b.n	8002c54 <HAL_RCC_OscConfig+0x48c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d000      	beq.n	8002af0 <HAL_RCC_OscConfig+0x328>
 8002aee:	e0b1      	b.n	8002c54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e177      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
 8002af4:	40021000 	.word	0x40021000
 8002af8:	fffeffff 	.word	0xfffeffff
 8002afc:	fffbffff 	.word	0xfffbffff
 8002b00:	ffff80ff 	.word	0xffff80ff
 8002b04:	ffffc7ff 	.word	0xffffc7ff
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	20000008 	.word	0x20000008
 8002b14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b18:	4bb4      	ldr	r3, [pc, #720]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	055b      	lsls	r3, r3, #21
 8002b20:	4013      	ands	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_OscConfig+0x360>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_RCC_OscConfig+0x362>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d011      	beq.n	8002b52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b2e:	4baf      	ldr	r3, [pc, #700]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b32:	4bae      	ldr	r3, [pc, #696]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	0549      	lsls	r1, r1, #21
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b3c:	4bab      	ldr	r3, [pc, #684]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	055b      	lsls	r3, r3, #21
 8002b44:	4013      	ands	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b4a:	231f      	movs	r3, #31
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b52:	4ba7      	ldr	r3, [pc, #668]	; (8002df0 <HAL_RCC_OscConfig+0x628>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d11a      	bne.n	8002b94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5e:	4ba4      	ldr	r3, [pc, #656]	; (8002df0 <HAL_RCC_OscConfig+0x628>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4ba3      	ldr	r3, [pc, #652]	; (8002df0 <HAL_RCC_OscConfig+0x628>)
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	0049      	lsls	r1, r1, #1
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe ff04 	bl	8001978 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b76:	f7fe feff 	bl	8001978 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e12d      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	4b99      	ldr	r3, [pc, #612]	; (8002df0 <HAL_RCC_OscConfig+0x628>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d106      	bne.n	8002baa <HAL_RCC_OscConfig+0x3e2>
 8002b9c:	4b93      	ldr	r3, [pc, #588]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002b9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ba0:	4b92      	ldr	r3, [pc, #584]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCC_OscConfig+0x41c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	d10c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x404>
 8002bb2:	4b8e      	ldr	r3, [pc, #568]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bb6:	4b8d      	ldr	r3, [pc, #564]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002bb8:	2104      	movs	r1, #4
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bbe:	4b8b      	ldr	r3, [pc, #556]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002bc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bc2:	4b8a      	ldr	r3, [pc, #552]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bca:	e00b      	b.n	8002be4 <HAL_RCC_OscConfig+0x41c>
 8002bcc:	4b87      	ldr	r3, [pc, #540]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bd0:	4b86      	ldr	r3, [pc, #536]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	438a      	bics	r2, r1
 8002bd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bd8:	4b84      	ldr	r3, [pc, #528]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bdc:	4b83      	ldr	r3, [pc, #524]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002bde:	2104      	movs	r1, #4
 8002be0:	438a      	bics	r2, r1
 8002be2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d014      	beq.n	8002c16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fec4 	bl	8001978 <HAL_GetTick>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf4:	e009      	b.n	8002c0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe febf 	bl	8001978 <HAL_GetTick>
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	4a7c      	ldr	r2, [pc, #496]	; (8002df4 <HAL_RCC_OscConfig+0x62c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0ec      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0a:	4b78      	ldr	r3, [pc, #480]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2202      	movs	r2, #2
 8002c10:	4013      	ands	r3, r2
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x42e>
 8002c14:	e013      	b.n	8002c3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe feaf 	bl	8001978 <HAL_GetTick>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c1e:	e009      	b.n	8002c34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7fe feaa 	bl	8001978 <HAL_GetTick>
 8002c24:	0002      	movs	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	4a72      	ldr	r2, [pc, #456]	; (8002df4 <HAL_RCC_OscConfig+0x62c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e0d7      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c34:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2202      	movs	r2, #2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c3e:	231f      	movs	r3, #31
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4c:	4b67      	ldr	r3, [pc, #412]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002c4e:	496a      	ldr	r1, [pc, #424]	; (8002df8 <HAL_RCC_OscConfig+0x630>)
 8002c50:	400a      	ands	r2, r1
 8002c52:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d100      	bne.n	8002c5e <HAL_RCC_OscConfig+0x496>
 8002c5c:	e0c1      	b.n	8002de2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c5e:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2238      	movs	r2, #56	; 0x38
 8002c64:	4013      	ands	r3, r2
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d100      	bne.n	8002c6c <HAL_RCC_OscConfig+0x4a4>
 8002c6a:	e081      	b.n	8002d70 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d156      	bne.n	8002d22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c74:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002c7a:	4960      	ldr	r1, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x634>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fe7a 	bl	8001978 <HAL_GetTick>
 8002c84:	0003      	movs	r3, r0
 8002c86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe fe75 	bl	8001978 <HAL_GetTick>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e0a3      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9c:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	049b      	lsls	r3, r3, #18
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca8:	4b50      	ldr	r3, [pc, #320]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a54      	ldr	r2, [pc, #336]	; (8002e00 <HAL_RCC_OscConfig+0x638>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	4b45      	ldr	r3, [pc, #276]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b43      	ldr	r3, [pc, #268]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b42      	ldr	r3, [pc, #264]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	0449      	lsls	r1, r1, #17
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002cea:	4b40      	ldr	r3, [pc, #256]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	4b3f      	ldr	r3, [pc, #252]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0549      	lsls	r1, r1, #21
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fe3e 	bl	8001978 <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe fe39 	bl	8001978 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e067      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	049b      	lsls	r3, r3, #18
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x53a>
 8002d20:	e05f      	b.n	8002de2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b32      	ldr	r3, [pc, #200]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d28:	4934      	ldr	r1, [pc, #208]	; (8002dfc <HAL_RCC_OscConfig+0x634>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d34:	2103      	movs	r1, #3
 8002d36:	438a      	bics	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002d3a:	4b2c      	ldr	r3, [pc, #176]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d40:	4930      	ldr	r1, [pc, #192]	; (8002e04 <HAL_RCC_OscConfig+0x63c>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fe17 	bl	8001978 <HAL_GetTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fe12 	bl	8001978 <HAL_GetTick>
 8002d54:	0002      	movs	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e040      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	049b      	lsls	r3, r3, #18
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x588>
 8002d6e:	e038      	b.n	8002de2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e033      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x624>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2203      	movs	r2, #3
 8002d86:	401a      	ands	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d126      	bne.n	8002dde <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2270      	movs	r2, #112	; 0x70
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d11f      	bne.n	8002dde <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	23fe      	movs	r3, #254	; 0xfe
 8002da2:	01db      	lsls	r3, r3, #7
 8002da4:	401a      	ands	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d116      	bne.n	8002dde <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	23f8      	movs	r3, #248	; 0xf8
 8002db4:	039b      	lsls	r3, r3, #14
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d10e      	bne.n	8002dde <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	23e0      	movs	r3, #224	; 0xe0
 8002dc4:	051b      	lsls	r3, r3, #20
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	0f5b      	lsrs	r3, r3, #29
 8002dd4:	075a      	lsls	r2, r3, #29
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b008      	add	sp, #32
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40007000 	.word	0x40007000
 8002df4:	00001388 	.word	0x00001388
 8002df8:	efffffff 	.word	0xefffffff
 8002dfc:	feffffff 	.word	0xfeffffff
 8002e00:	11c1808c 	.word	0x11c1808c
 8002e04:	eefeffff 	.word	0xeefeffff

08002e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0e9      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2207      	movs	r2, #7
 8002e22:	4013      	ands	r3, r2
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d91e      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2207      	movs	r2, #7
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fd9c 	bl	8001978 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e44:	e009      	b.n	8002e5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e46:	f7fe fd97 	bl	8001978 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	4a6a      	ldr	r2, [pc, #424]	; (8002ffc <HAL_RCC_ClockConfig+0x1f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0ca      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e5a:	4b67      	ldr	r3, [pc, #412]	; (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2207      	movs	r2, #7
 8002e60:	4013      	ands	r3, r2
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1ee      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d015      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2204      	movs	r2, #4
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d006      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e7c:	4b60      	ldr	r3, [pc, #384]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002e82:	21e0      	movs	r1, #224	; 0xe0
 8002e84:	01c9      	lsls	r1, r1, #7
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8a:	4b5d      	ldr	r3, [pc, #372]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	4a5d      	ldr	r2, [pc, #372]	; (8003004 <HAL_RCC_ClockConfig+0x1fc>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d057      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eb0:	4b53      	ldr	r3, [pc, #332]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d12b      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e097      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec8:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	049b      	lsls	r3, r3, #18
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d11f      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e08b      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee0:	4b47      	ldr	r3, [pc, #284]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d113      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e07f      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ef8:	4b41      	ldr	r3, [pc, #260]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efc:	2202      	movs	r2, #2
 8002efe:	4013      	ands	r3, r2
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e074      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e06d      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f14:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2207      	movs	r2, #7
 8002f1a:	4393      	bics	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002f24:	430a      	orrs	r2, r1
 8002f26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f28:	f7fe fd26 	bl	8001978 <HAL_GetTick>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f30:	e009      	b.n	8002f46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f32:	f7fe fd21 	bl	8001978 <HAL_GetTick>
 8002f36:	0002      	movs	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	4a2f      	ldr	r2, [pc, #188]	; (8002ffc <HAL_RCC_ClockConfig+0x1f4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e054      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	4b2e      	ldr	r3, [pc, #184]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2238      	movs	r2, #56	; 0x38
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1ec      	bne.n	8002f32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f58:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2207      	movs	r2, #7
 8002f5e:	4013      	ands	r3, r2
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d21e      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2207      	movs	r2, #7
 8002f6c:	4393      	bics	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f78:	f7fe fcfe 	bl	8001978 <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f80:	e009      	b.n	8002f96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f82:	f7fe fcf9 	bl	8001978 <HAL_GetTick>
 8002f86:	0002      	movs	r2, r0
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	4a1b      	ldr	r2, [pc, #108]	; (8002ffc <HAL_RCC_ClockConfig+0x1f4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e02c      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2207      	movs	r2, #7
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d1ee      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4013      	ands	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fae:	4b14      	ldr	r3, [pc, #80]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4a15      	ldr	r2, [pc, #84]	; (8003008 <HAL_RCC_ClockConfig+0x200>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fc2:	f000 f829 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fc6:	0001      	movs	r1, r0
 8002fc8:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <HAL_RCC_ClockConfig+0x1f8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	220f      	movs	r2, #15
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCC_ClockConfig+0x204>)
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	58d3      	ldr	r3, [r2, r3]
 8002fd8:	221f      	movs	r2, #31
 8002fda:	4013      	ands	r3, r2
 8002fdc:	000a      	movs	r2, r1
 8002fde:	40da      	lsrs	r2, r3
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_ClockConfig+0x208>)
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_ClockConfig+0x20c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7fe fc6b 	bl	80018c4 <HAL_InitTick>
 8002fee:	0003      	movs	r3, r0
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b004      	add	sp, #16
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40022000 	.word	0x40022000
 8002ffc:	00001388 	.word	0x00001388
 8003000:	40021000 	.word	0x40021000
 8003004:	fffff0ff 	.word	0xfffff0ff
 8003008:	ffff8fff 	.word	0xffff8fff
 800300c:	080053c8 	.word	0x080053c8
 8003010:	20000004 	.word	0x20000004
 8003014:	20000008 	.word	0x20000008

08003018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800301e:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2238      	movs	r2, #56	; 0x38
 8003024:	4013      	ands	r3, r2
 8003026:	d10f      	bne.n	8003048 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0adb      	lsrs	r3, r3, #11
 800302e:	2207      	movs	r2, #7
 8003030:	4013      	ands	r3, r2
 8003032:	2201      	movs	r2, #1
 8003034:	409a      	lsls	r2, r3
 8003036:	0013      	movs	r3, r2
 8003038:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800303a:	6839      	ldr	r1, [r7, #0]
 800303c:	4835      	ldr	r0, [pc, #212]	; (8003114 <HAL_RCC_GetSysClockFreq+0xfc>)
 800303e:	f7fd f861 	bl	8000104 <__udivsi3>
 8003042:	0003      	movs	r3, r0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	e05d      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003048:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2238      	movs	r2, #56	; 0x38
 800304e:	4013      	ands	r3, r2
 8003050:	2b08      	cmp	r3, #8
 8003052:	d102      	bne.n	800305a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003054:	4b30      	ldr	r3, [pc, #192]	; (8003118 <HAL_RCC_GetSysClockFreq+0x100>)
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e054      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800305a:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2238      	movs	r2, #56	; 0x38
 8003060:	4013      	ands	r3, r2
 8003062:	2b10      	cmp	r3, #16
 8003064:	d138      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003066:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2203      	movs	r2, #3
 800306c:	4013      	ands	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	2207      	movs	r2, #7
 8003078:	4013      	ands	r3, r2
 800307a:	3301      	adds	r3, #1
 800307c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d10d      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	4824      	ldr	r0, [pc, #144]	; (8003118 <HAL_RCC_GetSysClockFreq+0x100>)
 8003088:	f7fd f83c 	bl	8000104 <__udivsi3>
 800308c:	0003      	movs	r3, r0
 800308e:	0019      	movs	r1, r3
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	227f      	movs	r2, #127	; 0x7f
 8003098:	4013      	ands	r3, r2
 800309a:	434b      	muls	r3, r1
 800309c:	617b      	str	r3, [r7, #20]
        break;
 800309e:	e00d      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	481c      	ldr	r0, [pc, #112]	; (8003114 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030a4:	f7fd f82e 	bl	8000104 <__udivsi3>
 80030a8:	0003      	movs	r3, r0
 80030aa:	0019      	movs	r1, r3
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	227f      	movs	r2, #127	; 0x7f
 80030b4:	4013      	ands	r3, r2
 80030b6:	434b      	muls	r3, r1
 80030b8:	617b      	str	r3, [r7, #20]
        break;
 80030ba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0f5b      	lsrs	r3, r3, #29
 80030c2:	2207      	movs	r2, #7
 80030c4:	4013      	ands	r3, r2
 80030c6:	3301      	adds	r3, #1
 80030c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	6978      	ldr	r0, [r7, #20]
 80030ce:	f7fd f819 	bl	8000104 <__udivsi3>
 80030d2:	0003      	movs	r3, r0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e015      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2238      	movs	r2, #56	; 0x38
 80030de:	4013      	ands	r3, r2
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d103      	bne.n	80030ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	e00b      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2238      	movs	r2, #56	; 0x38
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b18      	cmp	r3, #24
 80030f6:	d103      	bne.n	8003100 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80030f8:	23fa      	movs	r3, #250	; 0xfa
 80030fa:	01db      	lsls	r3, r3, #7
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	e001      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003104:	693b      	ldr	r3, [r7, #16]
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b006      	add	sp, #24
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	40021000 	.word	0x40021000
 8003114:	00f42400 	.word	0x00f42400
 8003118:	007a1200 	.word	0x007a1200

0800311c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003124:	2313      	movs	r3, #19
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800312c:	2312      	movs	r3, #18
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	2380      	movs	r3, #128	; 0x80
 800313a:	029b      	lsls	r3, r3, #10
 800313c:	4013      	ands	r3, r2
 800313e:	d100      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003140:	e0a4      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2311      	movs	r3, #17
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4bc3      	ldr	r3, [pc, #780]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800314c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	055b      	lsls	r3, r3, #21
 8003152:	4013      	ands	r3, r2
 8003154:	d111      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	4bc0      	ldr	r3, [pc, #768]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800315a:	4bbf      	ldr	r3, [pc, #764]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800315c:	2180      	movs	r1, #128	; 0x80
 800315e:	0549      	lsls	r1, r1, #21
 8003160:	430a      	orrs	r2, r1
 8003162:	63da      	str	r2, [r3, #60]	; 0x3c
 8003164:	4bbc      	ldr	r3, [pc, #752]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	055b      	lsls	r3, r3, #21
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003172:	2311      	movs	r3, #17
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800317a:	4bb8      	ldr	r3, [pc, #736]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	4bb7      	ldr	r3, [pc, #732]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	0049      	lsls	r1, r1, #1
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003188:	f7fe fbf6 	bl	8001978 <HAL_GetTick>
 800318c:	0003      	movs	r3, r0
 800318e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003190:	e00b      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7fe fbf1 	bl	8001978 <HAL_GetTick>
 8003196:	0002      	movs	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d904      	bls.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80031a0:	2313      	movs	r3, #19
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	2203      	movs	r2, #3
 80031a6:	701a      	strb	r2, [r3, #0]
        break;
 80031a8:	e005      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031aa:	4bac      	ldr	r3, [pc, #688]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	d0ed      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80031b6:	2313      	movs	r3, #19
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d154      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031c0:	4ba5      	ldr	r3, [pc, #660]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031c4:	23c0      	movs	r3, #192	; 0xc0
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4013      	ands	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d019      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d014      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031dc:	4b9e      	ldr	r3, [pc, #632]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	4a9f      	ldr	r2, [pc, #636]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031e6:	4b9c      	ldr	r3, [pc, #624]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031ea:	4b9b      	ldr	r3, [pc, #620]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	0249      	lsls	r1, r1, #9
 80031f0:	430a      	orrs	r2, r1
 80031f2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031f4:	4b98      	ldr	r3, [pc, #608]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031f8:	4b97      	ldr	r3, [pc, #604]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031fa:	499a      	ldr	r1, [pc, #616]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003200:	4b95      	ldr	r3, [pc, #596]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2201      	movs	r2, #1
 800320a:	4013      	ands	r3, r2
 800320c:	d016      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fbb3 	bl	8001978 <HAL_GetTick>
 8003212:	0003      	movs	r3, r0
 8003214:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003216:	e00c      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe fbae 	bl	8001978 <HAL_GetTick>
 800321c:	0002      	movs	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	4a91      	ldr	r2, [pc, #580]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d904      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8003228:	2313      	movs	r3, #19
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2203      	movs	r2, #3
 800322e:	701a      	strb	r2, [r3, #0]
            break;
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003232:	4b89      	ldr	r3, [pc, #548]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	2202      	movs	r2, #2
 8003238:	4013      	ands	r3, r2
 800323a:	d0ed      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800323c:	2313      	movs	r3, #19
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003246:	4b84      	ldr	r3, [pc, #528]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	4a85      	ldr	r2, [pc, #532]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003254:	4b80      	ldr	r3, [pc, #512]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003256:	430a      	orrs	r2, r1
 8003258:	65da      	str	r2, [r3, #92]	; 0x5c
 800325a:	e00c      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800325c:	2312      	movs	r3, #18
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	2213      	movs	r2, #19
 8003262:	18ba      	adds	r2, r7, r2
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e005      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326a:	2312      	movs	r3, #18
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	2213      	movs	r2, #19
 8003270:	18ba      	adds	r2, r7, r2
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003276:	2311      	movs	r3, #17
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b75      	ldr	r3, [pc, #468]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003284:	4b74      	ldr	r3, [pc, #464]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003286:	4979      	ldr	r1, [pc, #484]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003288:	400a      	ands	r2, r1
 800328a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	4013      	ands	r3, r2
 8003294:	d009      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003296:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	2203      	movs	r2, #3
 800329c:	4393      	bics	r3, r2
 800329e:	0019      	movs	r1, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	4b6c      	ldr	r3, [pc, #432]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a6:	430a      	orrs	r2, r1
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2202      	movs	r2, #2
 80032b0:	4013      	ands	r3, r2
 80032b2:	d009      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	220c      	movs	r2, #12
 80032ba:	4393      	bics	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032c4:	430a      	orrs	r2, r1
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2220      	movs	r2, #32
 80032ce:	4013      	ands	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d2:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	4a66      	ldr	r2, [pc, #408]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e2:	430a      	orrs	r2, r1
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4013      	ands	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032f2:	4b59      	ldr	r3, [pc, #356]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	4a5f      	ldr	r2, [pc, #380]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699a      	ldr	r2, [r3, #24]
 8003300:	4b55      	ldr	r3, [pc, #340]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003302:	430a      	orrs	r2, r1
 8003304:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4013      	ands	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003312:	4b51      	ldr	r3, [pc, #324]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	4a58      	ldr	r2, [pc, #352]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003318:	4013      	ands	r3, r2
 800331a:	0019      	movs	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003322:	430a      	orrs	r2, r1
 8003324:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	4013      	ands	r3, r2
 800332e:	d009      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003330:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	4a51      	ldr	r2, [pc, #324]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003336:	4013      	ands	r3, r2
 8003338:	0019      	movs	r1, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003340:	430a      	orrs	r2, r1
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	01db      	lsls	r3, r3, #7
 800334c:	4013      	ands	r3, r2
 800334e:	d015      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	0899      	lsrs	r1, r3, #2
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800335e:	430a      	orrs	r2, r1
 8003360:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1a      	ldr	r2, [r3, #32]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	05db      	lsls	r3, r3, #23
 800336a:	429a      	cmp	r2, r3
 800336c:	d106      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800336e:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	4b39      	ldr	r3, [pc, #228]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	0249      	lsls	r1, r1, #9
 8003378:	430a      	orrs	r2, r1
 800337a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	031b      	lsls	r3, r3, #12
 8003384:	4013      	ands	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003388:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	4393      	bics	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003398:	430a      	orrs	r2, r1
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	039b      	lsls	r3, r3, #14
 80033a4:	4013      	ands	r3, r2
 80033a6:	d016      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	4a34      	ldr	r2, [pc, #208]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033b8:	430a      	orrs	r2, r1
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	03db      	lsls	r3, r3, #15
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d106      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80033c8:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033ce:	2180      	movs	r1, #128	; 0x80
 80033d0:	0449      	lsls	r1, r1, #17
 80033d2:	430a      	orrs	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	03db      	lsls	r3, r3, #15
 80033de:	4013      	ands	r3, r2
 80033e0:	d016      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	4a27      	ldr	r2, [pc, #156]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	045b      	lsls	r3, r3, #17
 80033fe:	429a      	cmp	r2, r3
 8003400:	d106      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0449      	lsls	r1, r1, #17
 800340c:	430a      	orrs	r2, r1
 800340e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	4013      	ands	r3, r2
 800341a:	d016      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003422:	4013      	ands	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800342c:	430a      	orrs	r2, r1
 800342e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	01db      	lsls	r3, r3, #7
 8003438:	429a      	cmp	r2, r3
 800343a:	d106      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	0249      	lsls	r1, r1, #9
 8003446:	430a      	orrs	r2, r1
 8003448:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 800344a:	2312      	movs	r3, #18
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	781b      	ldrb	r3, [r3, #0]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b006      	add	sp, #24
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
 8003460:	fffffcff 	.word	0xfffffcff
 8003464:	fffeffff 	.word	0xfffeffff
 8003468:	00001388 	.word	0x00001388
 800346c:	efffffff 	.word	0xefffffff
 8003470:	fffff3ff 	.word	0xfffff3ff
 8003474:	fff3ffff 	.word	0xfff3ffff
 8003478:	ffcfffff 	.word	0xffcfffff
 800347c:	ffffcfff 	.word	0xffffcfff
 8003480:	ffbfffff 	.word	0xffbfffff
 8003484:	feffffff 	.word	0xfeffffff
 8003488:	ffff3fff 	.word	0xffff3fff

0800348c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003494:	230f      	movs	r3, #15
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d100      	bne.n	80034a4 <HAL_RTC_Init+0x18>
 80034a2:	e07f      	b.n	80035a4 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2229      	movs	r2, #41	; 0x29
 80034a8:	5c9b      	ldrb	r3, [r3, r2]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2228      	movs	r2, #40	; 0x28
 80034b4:	2100      	movs	r1, #0
 80034b6:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2288      	movs	r2, #136	; 0x88
 80034bc:	0212      	lsls	r2, r2, #8
 80034be:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fd fedc 	bl	8001280 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2229      	movs	r2, #41	; 0x29
 80034cc:	2102      	movs	r1, #2
 80034ce:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	22ca      	movs	r2, #202	; 0xca
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2253      	movs	r2, #83	; 0x53
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80034e0:	250f      	movs	r5, #15
 80034e2:	197c      	adds	r4, r7, r5
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 fbef 	bl	8003cca <RTC_EnterInitMode>
 80034ec:	0003      	movs	r3, r0
 80034ee:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 80034f0:	197b      	adds	r3, r7, r5
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d148      	bne.n	800358a <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	492c      	ldr	r1, [pc, #176]	; (80035b4 <HAL_RTC_Init+0x128>)
 8003504:	400a      	ands	r2, r1
 8003506:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6999      	ldr	r1, [r3, #24]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6912      	ldr	r2, [r2, #16]
 800352e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	041a      	lsls	r2, r3, #16
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003544:	250f      	movs	r5, #15
 8003546:	197c      	adds	r4, r7, r5
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f000 fc00 	bl	8003d50 <RTC_ExitInitMode>
 8003550:	0003      	movs	r3, r0
 8003552:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8003554:	197b      	adds	r3, r7, r5
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d116      	bne.n	800358a <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	00d2      	lsls	r2, r2, #3
 8003568:	08d2      	lsrs	r2, r2, #3
 800356a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6999      	ldr	r1, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	22ff      	movs	r2, #255	; 0xff
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003592:	230f      	movs	r3, #15
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2229      	movs	r2, #41	; 0x29
 80035a0:	2101      	movs	r1, #1
 80035a2:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80035a4:	230f      	movs	r3, #15
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	781b      	ldrb	r3, [r3, #0]
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b004      	add	sp, #16
 80035b0:	bdb0      	pop	{r4, r5, r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	fb8fffbf 	.word	0xfb8fffbf

080035b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2228      	movs	r2, #40	; 0x28
 80035c8:	5c9b      	ldrb	r3, [r3, r2]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_RTC_SetTime+0x1a>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e092      	b.n	80036f8 <HAL_RTC_SetTime+0x140>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2228      	movs	r2, #40	; 0x28
 80035d6:	2101      	movs	r1, #1
 80035d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2229      	movs	r2, #41	; 0x29
 80035de:	2102      	movs	r1, #2
 80035e0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	22ca      	movs	r2, #202	; 0xca
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2253      	movs	r2, #83	; 0x53
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80035f2:	2513      	movs	r5, #19
 80035f4:	197c      	adds	r4, r7, r5
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 fb66 	bl	8003cca <RTC_EnterInitMode>
 80035fe:	0003      	movs	r3, r0
 8003600:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003602:	197b      	adds	r3, r7, r5
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d162      	bne.n	80036d0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d125      	bne.n	800365c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2240      	movs	r2, #64	; 0x40
 8003618:	4013      	ands	r3, r2
 800361a:	d102      	bne.n	8003622 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2200      	movs	r2, #0
 8003620:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 fbd8 	bl	8003ddc <RTC_ByteToBcd2>
 800362c:	0003      	movs	r3, r0
 800362e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	785b      	ldrb	r3, [r3, #1]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 fbd1 	bl	8003ddc <RTC_ByteToBcd2>
 800363a:	0003      	movs	r3, r0
 800363c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800363e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	789b      	ldrb	r3, [r3, #2]
 8003644:	0018      	movs	r0, r3
 8003646:	f000 fbc9 	bl	8003ddc <RTC_ByteToBcd2>
 800364a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800364c:	0022      	movs	r2, r4
 800364e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	78db      	ldrb	r3, [r3, #3]
 8003654:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e017      	b.n	800368c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	4013      	ands	r3, r2
 8003666:	d102      	bne.n	800366e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2200      	movs	r2, #0
 800366c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800367a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003680:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	78db      	ldrb	r3, [r3, #3]
 8003686:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	491b      	ldr	r1, [pc, #108]	; (8003700 <HAL_RTC_SetTime+0x148>)
 8003694:	400a      	ands	r2, r1
 8003696:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4918      	ldr	r1, [pc, #96]	; (8003704 <HAL_RTC_SetTime+0x14c>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6999      	ldr	r1, [r3, #24]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036c0:	2313      	movs	r3, #19
 80036c2:	18fc      	adds	r4, r7, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 fb42 	bl	8003d50 <RTC_ExitInitMode>
 80036cc:	0003      	movs	r3, r0
 80036ce:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	22ff      	movs	r2, #255	; 0xff
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80036d8:	2313      	movs	r3, #19
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d103      	bne.n	80036ea <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2229      	movs	r2, #41	; 0x29
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2228      	movs	r2, #40	; 0x28
 80036ee:	2100      	movs	r1, #0
 80036f0:	5499      	strb	r1, [r3, r2]

  return status;
 80036f2:	2313      	movs	r3, #19
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	781b      	ldrb	r3, [r3, #0]
}
 80036f8:	0018      	movs	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b006      	add	sp, #24
 80036fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003700:	007f7f7f 	.word	0x007f7f7f
 8003704:	fffbffff 	.word	0xfffbffff

08003708 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	045b      	lsls	r3, r3, #17
 8003726:	0c5a      	lsrs	r2, r3, #17
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_RTC_GetTime+0xb4>)
 8003734:	4013      	ands	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b2db      	uxtb	r3, r3
 800373e:	223f      	movs	r2, #63	; 0x3f
 8003740:	4013      	ands	r3, r2
 8003742:	b2da      	uxtb	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	0a1b      	lsrs	r3, r3, #8
 800374c:	b2db      	uxtb	r3, r3
 800374e:	227f      	movs	r2, #127	; 0x7f
 8003750:	4013      	ands	r3, r2
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	227f      	movs	r2, #127	; 0x7f
 800375e:	4013      	ands	r3, r2
 8003760:	b2da      	uxtb	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	0d9b      	lsrs	r3, r3, #22
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2201      	movs	r2, #1
 800376e:	4013      	ands	r3, r2
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11a      	bne.n	80037b2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	0018      	movs	r0, r3
 8003782:	f000 fb54 	bl	8003e2e <RTC_Bcd2ToByte>
 8003786:	0003      	movs	r3, r0
 8003788:	001a      	movs	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	0018      	movs	r0, r3
 8003794:	f000 fb4b 	bl	8003e2e <RTC_Bcd2ToByte>
 8003798:	0003      	movs	r3, r0
 800379a:	001a      	movs	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	789b      	ldrb	r3, [r3, #2]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f000 fb42 	bl	8003e2e <RTC_Bcd2ToByte>
 80037aa:	0003      	movs	r3, r0
 80037ac:	001a      	movs	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b006      	add	sp, #24
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	007f7f7f 	.word	0x007f7f7f

080037c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2228      	movs	r2, #40	; 0x28
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_RTC_SetDate+0x1a>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e07e      	b.n	80038d8 <HAL_RTC_SetDate+0x118>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2228      	movs	r2, #40	; 0x28
 80037de:	2101      	movs	r1, #1
 80037e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2229      	movs	r2, #41	; 0x29
 80037e6:	2102      	movs	r1, #2
 80037e8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10e      	bne.n	800380e <HAL_RTC_SetDate+0x4e>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	785b      	ldrb	r3, [r3, #1]
 80037f4:	001a      	movs	r2, r3
 80037f6:	2310      	movs	r3, #16
 80037f8:	4013      	ands	r3, r2
 80037fa:	d008      	beq.n	800380e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	2210      	movs	r2, #16
 8003802:	4393      	bics	r3, r2
 8003804:	b2db      	uxtb	r3, r3
 8003806:	330a      	adds	r3, #10
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d11c      	bne.n	800384e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	78db      	ldrb	r3, [r3, #3]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 fadf 	bl	8003ddc <RTC_ByteToBcd2>
 800381e:	0003      	movs	r3, r0
 8003820:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	785b      	ldrb	r3, [r3, #1]
 8003826:	0018      	movs	r0, r3
 8003828:	f000 fad8 	bl	8003ddc <RTC_ByteToBcd2>
 800382c:	0003      	movs	r3, r0
 800382e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003830:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	789b      	ldrb	r3, [r3, #2]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 fad0 	bl	8003ddc <RTC_ByteToBcd2>
 800383c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800383e:	0022      	movs	r2, r4
 8003840:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e00e      	b.n	800386c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	78db      	ldrb	r3, [r3, #3]
 8003852:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800385a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003860:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	22ca      	movs	r2, #202	; 0xca
 8003872:	625a      	str	r2, [r3, #36]	; 0x24
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2253      	movs	r2, #83	; 0x53
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800387c:	2513      	movs	r5, #19
 800387e:	197c      	adds	r4, r7, r5
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	0018      	movs	r0, r3
 8003884:	f000 fa21 	bl	8003cca <RTC_EnterInitMode>
 8003888:	0003      	movs	r3, r0
 800388a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800388c:	197b      	adds	r3, r7, r5
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4911      	ldr	r1, [pc, #68]	; (80038e0 <HAL_RTC_SetDate+0x120>)
 800389c:	400a      	ands	r2, r1
 800389e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038a0:	2313      	movs	r3, #19
 80038a2:	18fc      	adds	r4, r7, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 fa52 	bl	8003d50 <RTC_ExitInitMode>
 80038ac:	0003      	movs	r3, r0
 80038ae:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	22ff      	movs	r2, #255	; 0xff
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80038b8:	2313      	movs	r3, #19
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2229      	movs	r2, #41	; 0x29
 80038c6:	2101      	movs	r1, #1
 80038c8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2228      	movs	r2, #40	; 0x28
 80038ce:	2100      	movs	r1, #0
 80038d0:	5499      	strb	r1, [r3, r2]

  return status;
 80038d2:	2313      	movs	r3, #19
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	781b      	ldrb	r3, [r3, #0]
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b006      	add	sp, #24
 80038de:	bdb0      	pop	{r4, r5, r7, pc}
 80038e0:	00ffff3f 	.word	0x00ffff3f

080038e4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4a21      	ldr	r2, [pc, #132]	; (800397c <HAL_RTC_GetDate+0x98>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	b2db      	uxtb	r3, r3
 800390c:	221f      	movs	r2, #31
 800390e:	4013      	ands	r3, r2
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	223f      	movs	r2, #63	; 0x3f
 800391c:	4013      	ands	r3, r2
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	0b5b      	lsrs	r3, r3, #13
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2207      	movs	r2, #7
 800392c:	4013      	ands	r3, r2
 800392e:	b2da      	uxtb	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11a      	bne.n	8003970 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	78db      	ldrb	r3, [r3, #3]
 800393e:	0018      	movs	r0, r3
 8003940:	f000 fa75 	bl	8003e2e <RTC_Bcd2ToByte>
 8003944:	0003      	movs	r3, r0
 8003946:	001a      	movs	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 fa6c 	bl	8003e2e <RTC_Bcd2ToByte>
 8003956:	0003      	movs	r3, r0
 8003958:	001a      	movs	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	789b      	ldrb	r3, [r3, #2]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fa63 	bl	8003e2e <RTC_Bcd2ToByte>
 8003968:	0003      	movs	r3, r0
 800396a:	001a      	movs	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	0018      	movs	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	b006      	add	sp, #24
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	00ffff3f 	.word	0x00ffff3f

08003980 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2228      	movs	r2, #40	; 0x28
 8003990:	5c9b      	ldrb	r3, [r3, r2]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_RTC_SetAlarm_IT+0x1a>
 8003996:	2302      	movs	r3, #2
 8003998:	e127      	b.n	8003bea <HAL_RTC_SetAlarm_IT+0x26a>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2228      	movs	r2, #40	; 0x28
 800399e:	2101      	movs	r1, #1
 80039a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2229      	movs	r2, #41	; 0x29
 80039a6:	2102      	movs	r1, #2
 80039a8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d136      	bne.n	8003a1e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	4013      	ands	r3, r2
 80039ba:	d102      	bne.n	80039c2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fa08 	bl	8003ddc <RTC_ByteToBcd2>
 80039cc:	0003      	movs	r3, r0
 80039ce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 fa01 	bl	8003ddc <RTC_ByteToBcd2>
 80039da:	0003      	movs	r3, r0
 80039dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80039de:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	789b      	ldrb	r3, [r3, #2]
 80039e4:	0018      	movs	r0, r3
 80039e6:	f000 f9f9 	bl	8003ddc <RTC_ByteToBcd2>
 80039ea:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80039ec:	0022      	movs	r2, r4
 80039ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	78db      	ldrb	r3, [r3, #3]
 80039f4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80039f6:	431a      	orrs	r2, r3
 80039f8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2220      	movs	r2, #32
 80039fe:	5c9b      	ldrb	r3, [r3, r2]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 f9eb 	bl	8003ddc <RTC_ByteToBcd2>
 8003a06:	0003      	movs	r3, r0
 8003a08:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a0a:	0022      	movs	r2, r4
 8003a0c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	e022      	b.n	8003a64 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	4013      	ands	r3, r2
 8003a28:	d102      	bne.n	8003a30 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a3c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	78db      	ldrb	r3, [r3, #3]
 8003a48:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5c5b      	ldrb	r3, [r3, r1]
 8003a52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	22ca      	movs	r2, #202	; 0xca
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2253      	movs	r2, #83	; 0x53
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d14c      	bne.n	8003b26 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4957      	ldr	r1, [pc, #348]	; (8003bf4 <HAL_RTC_SetAlarm_IT+0x274>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003aac:	f7fd ff64 	bl	8001978 <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ab4:	e016      	b.n	8003ae4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ab6:	f7fd ff5f 	bl	8001978 <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	1ad2      	subs	r2, r2, r3
 8003ac0:	23fa      	movs	r3, #250	; 0xfa
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d90d      	bls.n	8003ae4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	22ff      	movs	r2, #255	; 0xff
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2229      	movs	r2, #41	; 0x29
 8003ad4:	2103      	movs	r1, #3
 8003ad6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2228      	movs	r2, #40	; 0x28
 8003adc:	2100      	movs	r1, #0
 8003ade:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e082      	b.n	8003bea <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	4013      	ands	r3, r2
 8003aee:	d0e2      	beq.n	8003ab6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	0049      	lsls	r1, r1, #1
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699a      	ldr	r2, [r3, #24]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2180      	movs	r1, #128	; 0x80
 8003b1e:	0149      	lsls	r1, r1, #5
 8003b20:	430a      	orrs	r2, r1
 8003b22:	619a      	str	r2, [r3, #24]
 8003b24:	e04b      	b.n	8003bbe <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4931      	ldr	r1, [pc, #196]	; (8003bf8 <HAL_RTC_SetAlarm_IT+0x278>)
 8003b32:	400a      	ands	r2, r1
 8003b34:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2102      	movs	r1, #2
 8003b42:	430a      	orrs	r2, r1
 8003b44:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003b46:	f7fd ff17 	bl	8001978 <HAL_GetTick>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003b4e:	e016      	b.n	8003b7e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b50:	f7fd ff12 	bl	8001978 <HAL_GetTick>
 8003b54:	0002      	movs	r2, r0
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	1ad2      	subs	r2, r2, r3
 8003b5a:	23fa      	movs	r3, #250	; 0xfa
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d90d      	bls.n	8003b7e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	22ff      	movs	r2, #255	; 0xff
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2229      	movs	r2, #41	; 0x29
 8003b6e:	2103      	movs	r1, #3
 8003b70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2228      	movs	r2, #40	; 0x28
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e035      	b.n	8003bea <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2202      	movs	r2, #2
 8003b86:	4013      	ands	r3, r2
 8003b88:	d0e2      	beq.n	8003b50 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	0089      	lsls	r1, r1, #2
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	0189      	lsls	r1, r1, #6
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003bbe:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	58d3      	ldr	r3, [r2, r3]
 8003bc4:	490d      	ldr	r1, [pc, #52]	; (8003bfc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	0312      	lsls	r2, r2, #12
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	22ff      	movs	r2, #255	; 0xff
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2229      	movs	r2, #41	; 0x29
 8003bdc:	2101      	movs	r1, #1
 8003bde:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2228      	movs	r2, #40	; 0x28
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b009      	add	sp, #36	; 0x24
 8003bf0:	bd90      	pop	{r4, r7, pc}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	fffffeff 	.word	0xfffffeff
 8003bf8:	fffffdff 	.word	0xfffffdff
 8003bfc:	40021800 	.word	0x40021800

08003c00 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	015b      	lsls	r3, r3, #5
 8003c12:	4013      	ands	r3, r2
 8003c14:	d011      	beq.n	8003c3a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7fc faf1 	bl	800021c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	019b      	lsls	r3, r3, #6
 8003c44:	4013      	ands	r3, r2
 8003c46:	d011      	beq.n	8003c6c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4e:	2202      	movs	r2, #2
 8003c50:	4013      	ands	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2102      	movs	r1, #2
 8003c60:	430a      	orrs	r2, r1
 8003c62:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	0018      	movs	r0, r3
 8003c68:	f000 f8fe 	bl	8003e68 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2229      	movs	r2, #41	; 0x29
 8003c70:	2101      	movs	r1, #1
 8003c72:	5499      	strb	r1, [r3, r2]
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	21a0      	movs	r1, #160	; 0xa0
 8003c90:	438a      	bics	r2, r1
 8003c92:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003c94:	f7fd fe70 	bl	8001978 <HAL_GetTick>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c9e:	f7fd fe6b 	bl	8001978 <HAL_GetTick>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1ad2      	subs	r2, r2, r3
 8003ca8:	23fa      	movs	r3, #250	; 0xfa
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d901      	bls.n	8003cb4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e006      	b.n	8003cc2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d0ee      	beq.n	8003c9e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b004      	add	sp, #16
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003cd2:	230f      	movs	r3, #15
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2240      	movs	r2, #64	; 0x40
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d12d      	bne.n	8003d42 <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003cf6:	f7fd fe3f 	bl	8001978 <HAL_GetTick>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003cfe:	e015      	b.n	8003d2c <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d00:	f7fd fe3a 	bl	8001978 <HAL_GetTick>
 8003d04:	0002      	movs	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad2      	subs	r2, r2, r3
 8003d0a:	210f      	movs	r1, #15
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	1879      	adds	r1, r7, r1
 8003d10:	7809      	ldrb	r1, [r1, #0]
 8003d12:	7019      	strb	r1, [r3, #0]
 8003d14:	23fa      	movs	r3, #250	; 0xfa
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d907      	bls.n	8003d2c <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2203      	movs	r2, #3
 8003d22:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2229      	movs	r2, #41	; 0x29
 8003d28:	2103      	movs	r1, #3
 8003d2a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2240      	movs	r2, #64	; 0x40
 8003d34:	4013      	ands	r3, r2
 8003d36:	d104      	bne.n	8003d42 <RTC_EnterInitMode+0x78>
 8003d38:	230f      	movs	r3, #15
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d1de      	bne.n	8003d00 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003d42:	230f      	movs	r3, #15
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	781b      	ldrb	r3, [r3, #0]
}
 8003d48:	0018      	movs	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b004      	add	sp, #16
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d58:	230f      	movs	r3, #15
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003d60:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <RTC_ExitInitMode+0x88>)
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <RTC_ExitInitMode+0x88>)
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	438a      	bics	r2, r1
 8003d6a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <RTC_ExitInitMode+0x88>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2220      	movs	r2, #32
 8003d72:	4013      	ands	r3, r2
 8003d74:	d10e      	bne.n	8003d94 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7ff ff7f 	bl	8003c7c <HAL_RTC_WaitForSynchro>
 8003d7e:	1e03      	subs	r3, r0, #0
 8003d80:	d022      	beq.n	8003dc8 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2229      	movs	r2, #41	; 0x29
 8003d86:	2103      	movs	r1, #3
 8003d88:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003d8a:	230f      	movs	r3, #15
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2203      	movs	r2, #3
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e019      	b.n	8003dc8 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <RTC_ExitInitMode+0x88>)
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <RTC_ExitInitMode+0x88>)
 8003d9a:	2120      	movs	r1, #32
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	0018      	movs	r0, r3
 8003da4:	f7ff ff6a 	bl	8003c7c <HAL_RTC_WaitForSynchro>
 8003da8:	1e03      	subs	r3, r0, #0
 8003daa:	d007      	beq.n	8003dbc <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2229      	movs	r2, #41	; 0x29
 8003db0:	2103      	movs	r1, #3
 8003db2:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003db4:	230f      	movs	r3, #15
 8003db6:	18fb      	adds	r3, r7, r3
 8003db8:	2203      	movs	r2, #3
 8003dba:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <RTC_ExitInitMode+0x88>)
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <RTC_ExitInitMode+0x88>)
 8003dc2:	2120      	movs	r1, #32
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003dc8:	230f      	movs	r3, #15
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b004      	add	sp, #16
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	40002800 	.word	0x40002800

08003ddc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	0002      	movs	r2, r0
 8003de4:	1dfb      	adds	r3, r7, #7
 8003de6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003dec:	230b      	movs	r3, #11
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	1dfa      	adds	r2, r7, #7
 8003df2:	7812      	ldrb	r2, [r2, #0]
 8003df4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003df6:	e008      	b.n	8003e0a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003dfe:	220b      	movs	r2, #11
 8003e00:	18bb      	adds	r3, r7, r2
 8003e02:	18ba      	adds	r2, r7, r2
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	3a0a      	subs	r2, #10
 8003e08:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003e0a:	230b      	movs	r3, #11
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b09      	cmp	r3, #9
 8003e12:	d8f1      	bhi.n	8003df8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	230b      	movs	r3, #11
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b2db      	uxtb	r3, r3
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b004      	add	sp, #16
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	0002      	movs	r2, r0
 8003e36:	1dfb      	adds	r3, r7, #7
 8003e38:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003e3a:	1dfb      	adds	r3, r7, #7
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	091b      	lsrs	r3, r3, #4
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	001a      	movs	r2, r3
 8003e44:	0013      	movs	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	189b      	adds	r3, r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	210f      	movs	r1, #15
 8003e58:	400b      	ands	r3, r1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	18d3      	adds	r3, r2, r3
 8003e5e:	b2db      	uxtb	r3, r3
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b002      	add	sp, #8
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e01e      	b.n	8003ec8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	223d      	movs	r2, #61	; 0x3d
 8003e8e:	5c9b      	ldrb	r3, [r3, r2]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d107      	bne.n	8003ea6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	223c      	movs	r2, #60	; 0x3c
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7fd fc05 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	223d      	movs	r2, #61	; 0x3d
 8003eaa:	2102      	movs	r1, #2
 8003eac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	0010      	movs	r0, r2
 8003eba:	f000 fbff 	bl	80046bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	223d      	movs	r2, #61	; 0x3d
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	0018      	movs	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	4a0c      	ldr	r2, [pc, #48]	; (8003f20 <HAL_TIM_Base_Start_IT+0x50>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d00c      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x44>
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	025b      	lsls	r3, r3, #9
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d007      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	430a      	orrs	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	0018      	movs	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b004      	add	sp, #16
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	00010007 	.word	0x00010007

08003f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01e      	b.n	8003f74 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	223d      	movs	r2, #61	; 0x3d
 8003f3a:	5c9b      	ldrb	r3, [r3, r2]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	223c      	movs	r2, #60	; 0x3c
 8003f46:	2100      	movs	r1, #0
 8003f48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f000 f815 	bl	8003f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	223d      	movs	r2, #61	; 0x3d
 8003f56:	2102      	movs	r1, #2
 8003f58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3304      	adds	r3, #4
 8003f62:	0019      	movs	r1, r3
 8003f64:	0010      	movs	r0, r2
 8003f66:	f000 fba9 	bl	80046bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	223d      	movs	r2, #61	; 0x3d
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	0018      	movs	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b002      	add	sp, #8
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e02e      	b.n	8003ffe <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	223d      	movs	r2, #61	; 0x3d
 8003fa4:	5c9b      	ldrb	r3, [r3, r2]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	223c      	movs	r2, #60	; 0x3c
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 f825 	bl	8004006 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	223d      	movs	r2, #61	; 0x3d
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	0019      	movs	r1, r3
 8003fce:	0010      	movs	r0, r2
 8003fd0:	f000 fb74 	bl	80046bc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2108      	movs	r1, #8
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	223d      	movs	r2, #61	; 0x3d
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	46bd      	mov	sp, r7
 8004012:	b002      	add	sp, #8
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2201      	movs	r2, #1
 8004028:	2100      	movs	r1, #0
 800402a:	0018      	movs	r0, r3
 800402c:	f000 ff26 	bl	8004e7c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2201      	movs	r2, #1
 8004036:	2104      	movs	r1, #4
 8004038:	0018      	movs	r0, r3
 800403a:	f000 ff1f 	bl	8004e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_TIM_OnePulse_Start+0x74>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIM_OnePulse_Start+0x4e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a10      	ldr	r2, [pc, #64]	; (8004090 <HAL_TIM_OnePulse_Start+0x78>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_TIM_OnePulse_Start+0x4e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <HAL_TIM_OnePulse_Start+0x7c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIM_OnePulse_Start+0x4e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <HAL_TIM_OnePulse_Start+0x80>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d101      	bne.n	800406a <HAL_TIM_OnePulse_Start+0x52>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_TIM_OnePulse_Start+0x54>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_TIM_OnePulse_Start+0x6a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	0209      	lsls	r1, r1, #8
 800407e:	430a      	orrs	r2, r1
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b002      	add	sp, #8
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2202      	movs	r2, #2
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d124      	bne.n	80040fc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2202      	movs	r2, #2
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d11d      	bne.n	80040fc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2203      	movs	r2, #3
 80040c6:	4252      	negs	r2, r2
 80040c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2203      	movs	r2, #3
 80040d8:	4013      	ands	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 fad4 	bl	800468c <HAL_TIM_IC_CaptureCallback>
 80040e4:	e007      	b.n	80040f6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f000 fac7 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 fad3 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2204      	movs	r2, #4
 8004104:	4013      	ands	r3, r2
 8004106:	2b04      	cmp	r3, #4
 8004108:	d125      	bne.n	8004156 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	2204      	movs	r2, #4
 8004112:	4013      	ands	r3, r2
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11e      	bne.n	8004156 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2205      	movs	r2, #5
 800411e:	4252      	negs	r2, r2
 8004120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	23c0      	movs	r3, #192	; 0xc0
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4013      	ands	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0018      	movs	r0, r3
 800413a:	f000 faa7 	bl	800468c <HAL_TIM_IC_CaptureCallback>
 800413e:	e007      	b.n	8004150 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0018      	movs	r0, r3
 8004144:	f000 fa9a 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	0018      	movs	r0, r3
 800414c:	f000 faa6 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2208      	movs	r2, #8
 800415e:	4013      	ands	r3, r2
 8004160:	2b08      	cmp	r3, #8
 8004162:	d124      	bne.n	80041ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2208      	movs	r2, #8
 800416c:	4013      	ands	r3, r2
 800416e:	2b08      	cmp	r3, #8
 8004170:	d11d      	bne.n	80041ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2209      	movs	r2, #9
 8004178:	4252      	negs	r2, r2
 800417a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2204      	movs	r2, #4
 8004180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	2203      	movs	r2, #3
 800418a:	4013      	ands	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	0018      	movs	r0, r3
 8004192:	f000 fa7b 	bl	800468c <HAL_TIM_IC_CaptureCallback>
 8004196:	e007      	b.n	80041a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0018      	movs	r0, r3
 800419c:	f000 fa6e 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 fa7a 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2210      	movs	r2, #16
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d125      	bne.n	8004208 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2210      	movs	r2, #16
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d11e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2211      	movs	r2, #17
 80041d0:	4252      	negs	r2, r2
 80041d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2208      	movs	r2, #8
 80041d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	23c0      	movs	r3, #192	; 0xc0
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4013      	ands	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	0018      	movs	r0, r3
 80041ec:	f000 fa4e 	bl	800468c <HAL_TIM_IC_CaptureCallback>
 80041f0:	e007      	b.n	8004202 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 fa41 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 fa4d 	bl	800469c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2201      	movs	r2, #1
 8004210:	4013      	ands	r3, r2
 8004212:	2b01      	cmp	r3, #1
 8004214:	d10f      	bne.n	8004236 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	4013      	ands	r3, r2
 8004220:	2b01      	cmp	r3, #1
 8004222:	d108      	bne.n	8004236 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2202      	movs	r2, #2
 800422a:	4252      	negs	r2, r2
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0018      	movs	r0, r3
 8004232:	f7fc fdf9 	bl	8000e28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	4013      	ands	r3, r2
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d10f      	bne.n	8004264 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2280      	movs	r2, #128	; 0x80
 800424c:	4013      	ands	r3, r2
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d108      	bne.n	8004264 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2281      	movs	r2, #129	; 0x81
 8004258:	4252      	negs	r2, r2
 800425a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f000 ff34 	bl	80050cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	2380      	movs	r3, #128	; 0x80
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	401a      	ands	r2, r3
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	429a      	cmp	r2, r3
 8004276:	d10e      	bne.n	8004296 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2280      	movs	r2, #128	; 0x80
 8004280:	4013      	ands	r3, r2
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d107      	bne.n	8004296 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <HAL_TIM_IRQHandler+0x260>)
 800428c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	0018      	movs	r0, r3
 8004292:	f000 ff23 	bl	80050dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2240      	movs	r2, #64	; 0x40
 800429e:	4013      	ands	r3, r2
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d10f      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	2240      	movs	r2, #64	; 0x40
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d108      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2241      	movs	r2, #65	; 0x41
 80042b8:	4252      	negs	r2, r2
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	0018      	movs	r0, r3
 80042c0:	f000 f9f4 	bl	80046ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2220      	movs	r2, #32
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d10f      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	4013      	ands	r3, r2
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d108      	bne.n	80042f2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2221      	movs	r2, #33	; 0x21
 80042e6:	4252      	negs	r2, r2
 80042e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 fee5 	bl	80050bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b002      	add	sp, #8
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	fffffeff 	.word	0xfffffeff

08004300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	223c      	movs	r2, #60	; 0x3c
 8004310:	5c9b      	ldrb	r3, [r3, r2]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004316:	2302      	movs	r3, #2
 8004318:	e0e7      	b.n	80044ea <HAL_TIM_PWM_ConfigChannel+0x1ea>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	223c      	movs	r2, #60	; 0x3c
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	223d      	movs	r2, #61	; 0x3d
 8004326:	2102      	movs	r1, #2
 8004328:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b14      	cmp	r3, #20
 800432e:	d900      	bls.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004330:	e0d1      	b.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	009a      	lsls	r2, r3, #2
 8004336:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	0011      	movs	r1, r2
 8004346:	0018      	movs	r0, r3
 8004348:	f000 fa38 	bl	80047bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2108      	movs	r1, #8
 8004358:	430a      	orrs	r2, r1
 800435a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2104      	movs	r1, #4
 8004368:	438a      	bics	r2, r1
 800436a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6999      	ldr	r1, [r3, #24]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	619a      	str	r2, [r3, #24]
      break;
 800437e:	e0ab      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	0011      	movs	r1, r2
 8004388:	0018      	movs	r0, r3
 800438a:	f000 faa1 	bl	80048d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	0109      	lsls	r1, r1, #4
 800439c:	430a      	orrs	r2, r1
 800439e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4953      	ldr	r1, [pc, #332]	; (80044f8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80043ac:	400a      	ands	r2, r1
 80043ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6999      	ldr	r1, [r3, #24]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	619a      	str	r2, [r3, #24]
      break;
 80043c4:	e088      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	0011      	movs	r1, r2
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 fb02 	bl	80049d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2108      	movs	r1, #8
 80043e0:	430a      	orrs	r2, r1
 80043e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2104      	movs	r1, #4
 80043f0:	438a      	bics	r2, r1
 80043f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69d9      	ldr	r1, [r3, #28]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	61da      	str	r2, [r3, #28]
      break;
 8004406:	e067      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	0011      	movs	r1, r2
 8004410:	0018      	movs	r0, r3
 8004412:	f000 fb69 	bl	8004ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	0109      	lsls	r1, r1, #4
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4931      	ldr	r1, [pc, #196]	; (80044f8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004434:	400a      	ands	r2, r1
 8004436:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69d9      	ldr	r1, [r3, #28]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	021a      	lsls	r2, r3, #8
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	61da      	str	r2, [r3, #28]
      break;
 800444c:	e044      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	0011      	movs	r1, r2
 8004456:	0018      	movs	r0, r3
 8004458:	f000 fbb0 	bl	8004bbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2108      	movs	r1, #8
 8004468:	430a      	orrs	r2, r1
 800446a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2104      	movs	r1, #4
 8004478:	438a      	bics	r2, r1
 800447a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800448e:	e023      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	0011      	movs	r1, r2
 8004498:	0018      	movs	r0, r3
 800449a:	f000 fbef 	bl	8004c7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2180      	movs	r1, #128	; 0x80
 80044aa:	0109      	lsls	r1, r1, #4
 80044ac:	430a      	orrs	r2, r1
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	490f      	ldr	r1, [pc, #60]	; (80044f8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80044bc:	400a      	ands	r2, r1
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044d4:	e000      	b.n	80044d8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 80044d6:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	223d      	movs	r2, #61	; 0x3d
 80044dc:	2101      	movs	r1, #1
 80044de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	223c      	movs	r2, #60	; 0x3c
 80044e4:	2100      	movs	r1, #0
 80044e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	08005408 	.word	0x08005408
 80044f8:	fffffbff 	.word	0xfffffbff

080044fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	223c      	movs	r2, #60	; 0x3c
 800450a:	5c9b      	ldrb	r3, [r3, r2]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIM_ConfigClockSource+0x18>
 8004510:	2302      	movs	r3, #2
 8004512:	e0ab      	b.n	800466c <HAL_TIM_ConfigClockSource+0x170>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	223c      	movs	r2, #60	; 0x3c
 8004518:	2101      	movs	r1, #1
 800451a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	223d      	movs	r2, #61	; 0x3d
 8004520:	2102      	movs	r1, #2
 8004522:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a51      	ldr	r2, [pc, #324]	; (8004674 <HAL_TIM_ConfigClockSource+0x178>)
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a50      	ldr	r2, [pc, #320]	; (8004678 <HAL_TIM_ConfigClockSource+0x17c>)
 8004538:	4013      	ands	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d100      	bne.n	800454e <HAL_TIM_ConfigClockSource+0x52>
 800454c:	e06b      	b.n	8004626 <HAL_TIM_ConfigClockSource+0x12a>
 800454e:	d80e      	bhi.n	800456e <HAL_TIM_ConfigClockSource+0x72>
 8004550:	2b10      	cmp	r3, #16
 8004552:	d100      	bne.n	8004556 <HAL_TIM_ConfigClockSource+0x5a>
 8004554:	e077      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x14a>
 8004556:	d803      	bhi.n	8004560 <HAL_TIM_ConfigClockSource+0x64>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d100      	bne.n	800455e <HAL_TIM_ConfigClockSource+0x62>
 800455c:	e073      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800455e:	e07c      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004560:	2b20      	cmp	r3, #32
 8004562:	d100      	bne.n	8004566 <HAL_TIM_ConfigClockSource+0x6a>
 8004564:	e06f      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x14a>
 8004566:	2b30      	cmp	r3, #48	; 0x30
 8004568:	d100      	bne.n	800456c <HAL_TIM_ConfigClockSource+0x70>
 800456a:	e06c      	b.n	8004646 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800456c:	e075      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800456e:	2b70      	cmp	r3, #112	; 0x70
 8004570:	d00e      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0x94>
 8004572:	d804      	bhi.n	800457e <HAL_TIM_ConfigClockSource+0x82>
 8004574:	2b50      	cmp	r3, #80	; 0x50
 8004576:	d036      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0xea>
 8004578:	2b60      	cmp	r3, #96	; 0x60
 800457a:	d044      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800457c:	e06d      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800457e:	2280      	movs	r2, #128	; 0x80
 8004580:	0152      	lsls	r2, r2, #5
 8004582:	4293      	cmp	r3, r2
 8004584:	d068      	beq.n	8004658 <HAL_TIM_ConfigClockSource+0x15c>
 8004586:	2280      	movs	r2, #128	; 0x80
 8004588:	0192      	lsls	r2, r2, #6
 800458a:	4293      	cmp	r3, r2
 800458c:	d017      	beq.n	80045be <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800458e:	e064      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6899      	ldr	r1, [r3, #8]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f000 fc4c 	bl	8004e3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2277      	movs	r2, #119	; 0x77
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]
      break;
 80045bc:	e04d      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f000 fc35 	bl	8004e3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	01c9      	lsls	r1, r1, #7
 80045e0:	430a      	orrs	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
      break;
 80045e4:	e039      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	001a      	movs	r2, r3
 80045f4:	f000 fba6 	bl	8004d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2150      	movs	r1, #80	; 0x50
 80045fe:	0018      	movs	r0, r3
 8004600:	f000 fc00 	bl	8004e04 <TIM_ITRx_SetConfig>
      break;
 8004604:	e029      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	001a      	movs	r2, r3
 8004614:	f000 fbc4 	bl	8004da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2160      	movs	r1, #96	; 0x60
 800461e:	0018      	movs	r0, r3
 8004620:	f000 fbf0 	bl	8004e04 <TIM_ITRx_SetConfig>
      break;
 8004624:	e019      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	001a      	movs	r2, r3
 8004634:	f000 fb86 	bl	8004d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2140      	movs	r1, #64	; 0x40
 800463e:	0018      	movs	r0, r3
 8004640:	f000 fbe0 	bl	8004e04 <TIM_ITRx_SetConfig>
      break;
 8004644:	e009      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	0019      	movs	r1, r3
 8004650:	0010      	movs	r0, r2
 8004652:	f000 fbd7 	bl	8004e04 <TIM_ITRx_SetConfig>
      break;
 8004656:	e000      	b.n	800465a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004658:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	223d      	movs	r2, #61	; 0x3d
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	223c      	movs	r2, #60	; 0x3c
 8004666:	2100      	movs	r1, #0
 8004668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	0018      	movs	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	b004      	add	sp, #16
 8004672:	bd80      	pop	{r7, pc}
 8004674:	ffceff88 	.word	0xffceff88
 8004678:	ffff00ff 	.word	0xffff00ff

0800467c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b002      	add	sp, #8
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004694:	46c0      	nop			; (mov r8, r8)
 8004696:	46bd      	mov	sp, r7
 8004698:	b002      	add	sp, #8
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a4:	46c0      	nop			; (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b002      	add	sp, #8
 80046ba:	bd80      	pop	{r7, pc}

080046bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a34      	ldr	r2, [pc, #208]	; (80047a0 <TIM_Base_SetConfig+0xe4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d008      	beq.n	80046e6 <TIM_Base_SetConfig+0x2a>
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	05db      	lsls	r3, r3, #23
 80046da:	429a      	cmp	r2, r3
 80046dc:	d003      	beq.n	80046e6 <TIM_Base_SetConfig+0x2a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a30      	ldr	r2, [pc, #192]	; (80047a4 <TIM_Base_SetConfig+0xe8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d108      	bne.n	80046f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2270      	movs	r2, #112	; 0x70
 80046ea:	4393      	bics	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a29      	ldr	r2, [pc, #164]	; (80047a0 <TIM_Base_SetConfig+0xe4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d018      	beq.n	8004732 <TIM_Base_SetConfig+0x76>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	05db      	lsls	r3, r3, #23
 8004706:	429a      	cmp	r2, r3
 8004708:	d013      	beq.n	8004732 <TIM_Base_SetConfig+0x76>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a25      	ldr	r2, [pc, #148]	; (80047a4 <TIM_Base_SetConfig+0xe8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_Base_SetConfig+0x76>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a24      	ldr	r2, [pc, #144]	; (80047a8 <TIM_Base_SetConfig+0xec>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0x76>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a23      	ldr	r2, [pc, #140]	; (80047ac <TIM_Base_SetConfig+0xf0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x76>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <TIM_Base_SetConfig+0xf4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x76>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <TIM_Base_SetConfig+0xf8>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <TIM_Base_SetConfig+0xfc>)
 8004736:	4013      	ands	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2280      	movs	r2, #128	; 0x80
 8004748:	4393      	bics	r3, r2
 800474a:	001a      	movs	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <TIM_Base_SetConfig+0xe4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00b      	beq.n	800478a <TIM_Base_SetConfig+0xce>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <TIM_Base_SetConfig+0xf0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d007      	beq.n	800478a <TIM_Base_SetConfig+0xce>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <TIM_Base_SetConfig+0xf4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_Base_SetConfig+0xce>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <TIM_Base_SetConfig+0xf8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d103      	bne.n	8004792 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	615a      	str	r2, [r3, #20]
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b004      	add	sp, #16
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40002000 	.word	0x40002000
 80047ac:	40014000 	.word	0x40014000
 80047b0:	40014400 	.word	0x40014400
 80047b4:	40014800 	.word	0x40014800
 80047b8:	fffffcff 	.word	0xfffffcff

080047bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	2201      	movs	r2, #1
 80047cc:	4393      	bics	r3, r2
 80047ce:	001a      	movs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a32      	ldr	r2, [pc, #200]	; (80048b4 <TIM_OC1_SetConfig+0xf8>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2203      	movs	r2, #3
 80047f2:	4393      	bics	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2202      	movs	r2, #2
 8004804:	4393      	bics	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a28      	ldr	r2, [pc, #160]	; (80048b8 <TIM_OC1_SetConfig+0xfc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00b      	beq.n	8004832 <TIM_OC1_SetConfig+0x76>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a27      	ldr	r2, [pc, #156]	; (80048bc <TIM_OC1_SetConfig+0x100>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <TIM_OC1_SetConfig+0x76>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <TIM_OC1_SetConfig+0x104>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_OC1_SetConfig+0x76>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <TIM_OC1_SetConfig+0x108>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10c      	bne.n	800484c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2208      	movs	r2, #8
 8004836:	4393      	bics	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2204      	movs	r2, #4
 8004848:	4393      	bics	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <TIM_OC1_SetConfig+0xfc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00b      	beq.n	800486c <TIM_OC1_SetConfig+0xb0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a19      	ldr	r2, [pc, #100]	; (80048bc <TIM_OC1_SetConfig+0x100>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d007      	beq.n	800486c <TIM_OC1_SetConfig+0xb0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <TIM_OC1_SetConfig+0x104>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d003      	beq.n	800486c <TIM_OC1_SetConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <TIM_OC1_SetConfig+0x108>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d111      	bne.n	8004890 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <TIM_OC1_SetConfig+0x10c>)
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4a15      	ldr	r2, [pc, #84]	; (80048cc <TIM_OC1_SetConfig+0x110>)
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	621a      	str	r2, [r3, #32]
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b006      	add	sp, #24
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	fffeff8f 	.word	0xfffeff8f
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800
 80048c8:	fffffeff 	.word	0xfffffeff
 80048cc:	fffffdff 	.word	0xfffffdff

080048d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	2210      	movs	r2, #16
 80048e0:	4393      	bics	r3, r2
 80048e2:	001a      	movs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4a2e      	ldr	r2, [pc, #184]	; (80049b8 <TIM_OC2_SetConfig+0xe8>)
 80048fe:	4013      	ands	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <TIM_OC2_SetConfig+0xec>)
 8004906:	4013      	ands	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2220      	movs	r2, #32
 800491a:	4393      	bics	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a24      	ldr	r2, [pc, #144]	; (80049c0 <TIM_OC2_SetConfig+0xf0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d10d      	bne.n	800494e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2280      	movs	r2, #128	; 0x80
 8004936:	4393      	bics	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2240      	movs	r2, #64	; 0x40
 800494a:	4393      	bics	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <TIM_OC2_SetConfig+0xf0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_OC2_SetConfig+0x9e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <TIM_OC2_SetConfig+0xf4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_OC2_SetConfig+0x9e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a19      	ldr	r2, [pc, #100]	; (80049c8 <TIM_OC2_SetConfig+0xf8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_OC2_SetConfig+0x9e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a18      	ldr	r2, [pc, #96]	; (80049cc <TIM_OC2_SetConfig+0xfc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d113      	bne.n	8004996 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <TIM_OC2_SetConfig+0x100>)
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <TIM_OC2_SetConfig+0x104>)
 800497a:	4013      	ands	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b006      	add	sp, #24
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	feff8fff 	.word	0xfeff8fff
 80049bc:	fffffcff 	.word	0xfffffcff
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800
 80049d0:	fffffbff 	.word	0xfffffbff
 80049d4:	fffff7ff 	.word	0xfffff7ff

080049d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	4a35      	ldr	r2, [pc, #212]	; (8004abc <TIM_OC3_SetConfig+0xe4>)
 80049e8:	401a      	ands	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a2f      	ldr	r2, [pc, #188]	; (8004ac0 <TIM_OC3_SetConfig+0xe8>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	4393      	bics	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <TIM_OC3_SetConfig+0xec>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <TIM_OC3_SetConfig+0xf0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10d      	bne.n	8004a52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	4a24      	ldr	r2, [pc, #144]	; (8004acc <TIM_OC3_SetConfig+0xf4>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4a20      	ldr	r2, [pc, #128]	; (8004ad0 <TIM_OC3_SetConfig+0xf8>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1c      	ldr	r2, [pc, #112]	; (8004ac8 <TIM_OC3_SetConfig+0xf0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d00b      	beq.n	8004a72 <TIM_OC3_SetConfig+0x9a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <TIM_OC3_SetConfig+0xfc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d007      	beq.n	8004a72 <TIM_OC3_SetConfig+0x9a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <TIM_OC3_SetConfig+0x100>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_OC3_SetConfig+0x9a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <TIM_OC3_SetConfig+0x104>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d113      	bne.n	8004a9a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <TIM_OC3_SetConfig+0x108>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <TIM_OC3_SetConfig+0x10c>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	621a      	str	r2, [r3, #32]
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b006      	add	sp, #24
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	fffffeff 	.word	0xfffffeff
 8004ac0:	fffeff8f 	.word	0xfffeff8f
 8004ac4:	fffffdff 	.word	0xfffffdff
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	fffff7ff 	.word	0xfffff7ff
 8004ad0:	fffffbff 	.word	0xfffffbff
 8004ad4:	40014000 	.word	0x40014000
 8004ad8:	40014400 	.word	0x40014400
 8004adc:	40014800 	.word	0x40014800
 8004ae0:	ffffefff 	.word	0xffffefff
 8004ae4:	ffffdfff 	.word	0xffffdfff

08004ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	4a28      	ldr	r2, [pc, #160]	; (8004b98 <TIM_OC4_SetConfig+0xb0>)
 8004af8:	401a      	ands	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a22      	ldr	r2, [pc, #136]	; (8004b9c <TIM_OC4_SetConfig+0xb4>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4a21      	ldr	r2, [pc, #132]	; (8004ba0 <TIM_OC4_SetConfig+0xb8>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <TIM_OC4_SetConfig+0xbc>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	031b      	lsls	r3, r3, #12
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <TIM_OC4_SetConfig+0xc0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <TIM_OC4_SetConfig+0x78>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a18      	ldr	r2, [pc, #96]	; (8004bac <TIM_OC4_SetConfig+0xc4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <TIM_OC4_SetConfig+0x78>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <TIM_OC4_SetConfig+0xc8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_OC4_SetConfig+0x78>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <TIM_OC4_SetConfig+0xcc>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d109      	bne.n	8004b74 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <TIM_OC4_SetConfig+0xd0>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b006      	add	sp, #24
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	ffffefff 	.word	0xffffefff
 8004b9c:	feff8fff 	.word	0xfeff8fff
 8004ba0:	fffffcff 	.word	0xfffffcff
 8004ba4:	ffffdfff 	.word	0xffffdfff
 8004ba8:	40012c00 	.word	0x40012c00
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800
 8004bb8:	ffffbfff 	.word	0xffffbfff

08004bbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	4a25      	ldr	r2, [pc, #148]	; (8004c60 <TIM_OC5_SetConfig+0xa4>)
 8004bcc:	401a      	ands	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <TIM_OC5_SetConfig+0xa8>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <TIM_OC5_SetConfig+0xac>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <TIM_OC5_SetConfig+0xb0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00b      	beq.n	8004c2a <TIM_OC5_SetConfig+0x6e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <TIM_OC5_SetConfig+0xb4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d007      	beq.n	8004c2a <TIM_OC5_SetConfig+0x6e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a15      	ldr	r2, [pc, #84]	; (8004c74 <TIM_OC5_SetConfig+0xb8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <TIM_OC5_SetConfig+0x6e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <TIM_OC5_SetConfig+0xbc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d109      	bne.n	8004c3e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	4a0c      	ldr	r2, [pc, #48]	; (8004c60 <TIM_OC5_SetConfig+0xa4>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	621a      	str	r2, [r3, #32]
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b006      	add	sp, #24
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	fffeffff 	.word	0xfffeffff
 8004c64:	fffeff8f 	.word	0xfffeff8f
 8004c68:	fffdffff 	.word	0xfffdffff
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800

08004c7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <TIM_OC6_SetConfig+0xa8>)
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <TIM_OC6_SetConfig+0xac>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4a1c      	ldr	r2, [pc, #112]	; (8004d2c <TIM_OC6_SetConfig+0xb0>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	051b      	lsls	r3, r3, #20
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <TIM_OC6_SetConfig+0xb4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_OC6_SetConfig+0x70>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <TIM_OC6_SetConfig+0xb8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_OC6_SetConfig+0x70>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <TIM_OC6_SetConfig+0xbc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_OC6_SetConfig+0x70>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <TIM_OC6_SetConfig+0xc0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d109      	bne.n	8004d00 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4a14      	ldr	r2, [pc, #80]	; (8004d40 <TIM_OC6_SetConfig+0xc4>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	029b      	lsls	r3, r3, #10
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	b006      	add	sp, #24
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	ffefffff 	.word	0xffefffff
 8004d28:	feff8fff 	.word	0xfeff8fff
 8004d2c:	ffdfffff 	.word	0xffdfffff
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800
 8004d40:	fffbffff 	.word	0xfffbffff

08004d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4393      	bics	r3, r2
 8004d5e:	001a      	movs	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	22f0      	movs	r2, #240	; 0xf0
 8004d6e:	4393      	bics	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	220a      	movs	r2, #10
 8004d80:	4393      	bics	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	621a      	str	r2, [r3, #32]
}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b006      	add	sp, #24
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	2210      	movs	r2, #16
 8004db2:	4393      	bics	r3, r2
 8004db4:	001a      	movs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4a0d      	ldr	r2, [pc, #52]	; (8004e00 <TIM_TI2_ConfigInputStage+0x60>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	031b      	lsls	r3, r3, #12
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	22a0      	movs	r2, #160	; 0xa0
 8004ddc:	4393      	bics	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	621a      	str	r2, [r3, #32]
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b006      	add	sp, #24
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	ffff0fff 	.word	0xffff0fff

08004e04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <TIM_ITRx_SetConfig+0x34>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	2207      	movs	r2, #7
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	609a      	str	r2, [r3, #8]
}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b004      	add	sp, #16
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	ffcfff8f 	.word	0xffcfff8f

08004e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4a09      	ldr	r2, [pc, #36]	; (8004e78 <TIM_ETR_SetConfig+0x3c>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	46c0      	nop			; (mov r8, r8)
 8004e72:	46bd      	mov	sp, r7
 8004e74:	b006      	add	sp, #24
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	ffff00ff 	.word	0xffff00ff

08004e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	221f      	movs	r2, #31
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2201      	movs	r2, #1
 8004e90:	409a      	lsls	r2, r3
 8004e92:	0013      	movs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	43d2      	mvns	r2, r2
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1a      	ldr	r2, [r3, #32]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	211f      	movs	r1, #31
 8004eac:	400b      	ands	r3, r1
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4099      	lsls	r1, r3
 8004eb2:	000b      	movs	r3, r1
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b006      	add	sp, #24
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	223c      	movs	r2, #60	; 0x3c
 8004ed2:	5c9b      	ldrb	r3, [r3, r2]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e040      	b.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	223c      	movs	r2, #60	; 0x3c
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	223d      	movs	r2, #61	; 0x3d
 8004ee8:	2102      	movs	r1, #2
 8004eea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d108      	bne.n	8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2270      	movs	r2, #112	; 0x70
 8004f1c:	4393      	bics	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2280      	movs	r2, #128	; 0x80
 8004f2e:	4393      	bics	r3, r2
 8004f30:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	223d      	movs	r2, #61	; 0x3d
 8004f50:	2101      	movs	r1, #1
 8004f52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	223c      	movs	r2, #60	; 0x3c
 8004f58:	2100      	movs	r1, #0
 8004f5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b004      	add	sp, #16
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	ff0fffff 	.word	0xff0fffff

08004f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	223c      	movs	r2, #60	; 0x3c
 8004f82:	5c9b      	ldrb	r3, [r3, r2]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e079      	b.n	8005080 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	223c      	movs	r2, #60	; 0x3c
 8004f90:	2101      	movs	r1, #1
 8004f92:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	22ff      	movs	r2, #255	; 0xff
 8004f98:	4393      	bics	r3, r2
 8004f9a:	001a      	movs	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a38      	ldr	r2, [pc, #224]	; (8005088 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004fa8:	401a      	ands	r2, r3
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a35      	ldr	r2, [pc, #212]	; (800508c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a33      	ldr	r2, [pc, #204]	; (8005090 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a30      	ldr	r2, [pc, #192]	; (8005094 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a2e      	ldr	r2, [pc, #184]	; (8005098 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004fe0:	401a      	ands	r2, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a2b      	ldr	r2, [pc, #172]	; (800509c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004fee:	401a      	ands	r2, r3
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a29      	ldr	r2, [pc, #164]	; (80050a0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004ffc:	401a      	ands	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a25      	ldr	r2, [pc, #148]	; (80050a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d106      	bne.n	8005020 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4a24      	ldr	r2, [pc, #144]	; (80050a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005016:	401a      	ands	r2, r3
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4313      	orrs	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d121      	bne.n	800506e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800502e:	401a      	ands	r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	051b      	lsls	r3, r3, #20
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800503e:	401a      	ands	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4313      	orrs	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800504c:	401a      	ands	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d106      	bne.n	800506e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005064:	401a      	ands	r2, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	223c      	movs	r2, #60	; 0x3c
 800507a:	2100      	movs	r1, #0
 800507c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	0018      	movs	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	b004      	add	sp, #16
 8005086:	bd80      	pop	{r7, pc}
 8005088:	fffffcff 	.word	0xfffffcff
 800508c:	fffffbff 	.word	0xfffffbff
 8005090:	fffff7ff 	.word	0xfffff7ff
 8005094:	ffffefff 	.word	0xffffefff
 8005098:	ffffdfff 	.word	0xffffdfff
 800509c:	ffffbfff 	.word	0xffffbfff
 80050a0:	fff0ffff 	.word	0xfff0ffff
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	efffffff 	.word	0xefffffff
 80050ac:	ff0fffff 	.word	0xff0fffff
 80050b0:	feffffff 	.word	0xfeffffff
 80050b4:	fdffffff 	.word	0xfdffffff
 80050b8:	dfffffff 	.word	0xdfffffff

080050bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b002      	add	sp, #8
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d4:	46c0      	nop			; (mov r8, r8)
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b002      	add	sp, #8
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050e4:	46c0      	nop			; (mov r8, r8)
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b002      	add	sp, #8
 80050ea:	bd80      	pop	{r7, pc}

080050ec <LL_GPIO_SetPinMode>:
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	435a      	muls	r2, r3
 8005102:	0013      	movs	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	189b      	adds	r3, r3, r2
 8005108:	43db      	mvns	r3, r3
 800510a:	400b      	ands	r3, r1
 800510c:	001a      	movs	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	434b      	muls	r3, r1
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	434b      	muls	r3, r1
 8005118:	431a      	orrs	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]
}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	46bd      	mov	sp, r7
 8005122:	b004      	add	sp, #16
 8005124:	bd80      	pop	{r7, pc}

08005126 <LL_GPIO_SetPinOutputType>:
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	43d2      	mvns	r2, r2
 800513a:	401a      	ands	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	434b      	muls	r3, r1
 8005142:	431a      	orrs	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
}
 8005148:	46c0      	nop			; (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	b004      	add	sp, #16
 800514e:	bd80      	pop	{r7, pc}

08005150 <LL_GPIO_SetPinSpeed>:
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6899      	ldr	r1, [r3, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	435a      	muls	r2, r3
 8005166:	0013      	movs	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	189b      	adds	r3, r3, r2
 800516c:	43db      	mvns	r3, r3
 800516e:	400b      	ands	r3, r1
 8005170:	001a      	movs	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	434b      	muls	r3, r1
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	434b      	muls	r3, r1
 800517c:	431a      	orrs	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	609a      	str	r2, [r3, #8]
}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	46bd      	mov	sp, r7
 8005186:	b004      	add	sp, #16
 8005188:	bd80      	pop	{r7, pc}

0800518a <LL_GPIO_SetPinPull>:
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	68d9      	ldr	r1, [r3, #12]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	435a      	muls	r2, r3
 80051a0:	0013      	movs	r3, r2
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	189b      	adds	r3, r3, r2
 80051a6:	43db      	mvns	r3, r3
 80051a8:	400b      	ands	r3, r1
 80051aa:	001a      	movs	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	434b      	muls	r3, r1
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	434b      	muls	r3, r1
 80051b6:	431a      	orrs	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	60da      	str	r2, [r3, #12]
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b004      	add	sp, #16
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <LL_GPIO_SetAFPin_0_7>:
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a19      	ldr	r1, [r3, #32]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4353      	muls	r3, r2
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4353      	muls	r3, r2
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	435a      	muls	r2, r3
 80051e2:	0013      	movs	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	43db      	mvns	r3, r3
 80051ea:	400b      	ands	r3, r1
 80051ec:	001a      	movs	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	434b      	muls	r3, r1
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	434b      	muls	r3, r1
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	434b      	muls	r3, r1
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	434b      	muls	r3, r1
 8005200:	431a      	orrs	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}

0800520e <LL_GPIO_SetAFPin_8_15>:
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0a12      	lsrs	r2, r2, #8
 8005226:	4353      	muls	r3, r2
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	0a12      	lsrs	r2, r2, #8
 800522c:	4353      	muls	r3, r2
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0a12      	lsrs	r2, r2, #8
 8005232:	435a      	muls	r2, r3
 8005234:	0013      	movs	r3, r2
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	43db      	mvns	r3, r3
 800523c:	400b      	ands	r3, r1
 800523e:	001a      	movs	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	0a1b      	lsrs	r3, r3, #8
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	0a09      	lsrs	r1, r1, #8
 8005248:	434b      	muls	r3, r1
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	0a09      	lsrs	r1, r1, #8
 800524e:	434b      	muls	r3, r1
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	0a09      	lsrs	r1, r1, #8
 8005254:	434b      	muls	r3, r1
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	434b      	muls	r3, r1
 800525a:	431a      	orrs	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b004      	add	sp, #16
 8005266:	bd80      	pop	{r7, pc}

08005268 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005276:	e040      	b.n	80052fa <LL_GPIO_Init+0x92>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2101      	movs	r1, #1
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4091      	lsls	r1, r2
 8005282:	000a      	movs	r2, r1
 8005284:	4013      	ands	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d032      	beq.n	80052f4 <LL_GPIO_Init+0x8c>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	0018      	movs	r0, r3
 8005298:	f7ff ff28 	bl	80050ec <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d003      	beq.n	80052ac <LL_GPIO_Init+0x44>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d106      	bne.n	80052ba <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	0018      	movs	r0, r3
 80052b6:	f7ff ff4b 	bl	8005150 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff ff61 	bl	800518a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d111      	bne.n	80052f4 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2bff      	cmp	r3, #255	; 0xff
 80052d4:	d807      	bhi.n	80052e6 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	0018      	movs	r0, r3
 80052e0:	f7ff ff70 	bl	80051c4 <LL_GPIO_SetAFPin_0_7>
 80052e4:	e006      	b.n	80052f4 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	0018      	movs	r0, r3
 80052f0:	f7ff ff8d 	bl	800520e <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	40da      	lsrs	r2, r3
 8005302:	1e13      	subs	r3, r2, #0
 8005304:	d1b8      	bne.n	8005278 <LL_GPIO_Init+0x10>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d003      	beq.n	8005316 <LL_GPIO_Init+0xae>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d107      	bne.n	8005326 <LL_GPIO_Init+0xbe>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0018      	movs	r0, r3
 8005322:	f7ff ff00 	bl	8005126 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005326:	2300      	movs	r3, #0
}
 8005328:	0018      	movs	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	b004      	add	sp, #16
 800532e:	bd80      	pop	{r7, pc}

08005330 <__libc_init_array>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	2600      	movs	r6, #0
 8005334:	4d0c      	ldr	r5, [pc, #48]	; (8005368 <__libc_init_array+0x38>)
 8005336:	4c0d      	ldr	r4, [pc, #52]	; (800536c <__libc_init_array+0x3c>)
 8005338:	1b64      	subs	r4, r4, r5
 800533a:	10a4      	asrs	r4, r4, #2
 800533c:	42a6      	cmp	r6, r4
 800533e:	d109      	bne.n	8005354 <__libc_init_array+0x24>
 8005340:	2600      	movs	r6, #0
 8005342:	f000 f821 	bl	8005388 <_init>
 8005346:	4d0a      	ldr	r5, [pc, #40]	; (8005370 <__libc_init_array+0x40>)
 8005348:	4c0a      	ldr	r4, [pc, #40]	; (8005374 <__libc_init_array+0x44>)
 800534a:	1b64      	subs	r4, r4, r5
 800534c:	10a4      	asrs	r4, r4, #2
 800534e:	42a6      	cmp	r6, r4
 8005350:	d105      	bne.n	800535e <__libc_init_array+0x2e>
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	00b3      	lsls	r3, r6, #2
 8005356:	58eb      	ldr	r3, [r5, r3]
 8005358:	4798      	blx	r3
 800535a:	3601      	adds	r6, #1
 800535c:	e7ee      	b.n	800533c <__libc_init_array+0xc>
 800535e:	00b3      	lsls	r3, r6, #2
 8005360:	58eb      	ldr	r3, [r5, r3]
 8005362:	4798      	blx	r3
 8005364:	3601      	adds	r6, #1
 8005366:	e7f2      	b.n	800534e <__libc_init_array+0x1e>
 8005368:	0800545c 	.word	0x0800545c
 800536c:	0800545c 	.word	0x0800545c
 8005370:	0800545c 	.word	0x0800545c
 8005374:	08005460 	.word	0x08005460

08005378 <memset>:
 8005378:	0003      	movs	r3, r0
 800537a:	1812      	adds	r2, r2, r0
 800537c:	4293      	cmp	r3, r2
 800537e:	d100      	bne.n	8005382 <memset+0xa>
 8005380:	4770      	bx	lr
 8005382:	7019      	strb	r1, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	e7f9      	b.n	800537c <memset+0x4>

08005388 <_init>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538e:	bc08      	pop	{r3}
 8005390:	469e      	mov	lr, r3
 8005392:	4770      	bx	lr

08005394 <_fini>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr
