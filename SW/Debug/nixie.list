
nixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000448c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004604  08004604  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004604  08004604  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004604  08004604  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004604  08004604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004608  08004608  00014608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800460c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000010  0800461c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  0800461c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3aa  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002535  00000000  00000000  0002e3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  00030918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  000316d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d0d  00000000  00000000  00032330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ce23  00000000  00000000  0004b03d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ba2d  00000000  00000000  00057e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f388d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f3c  00000000  00000000  000f3908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004530 	.word	0x08004530

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004530 	.word	0x08004530

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8000220:	4b15      	ldr	r3, [pc, #84]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000222:	4a16      	ldr	r2, [pc, #88]	; (800027c <MX_COMP2_Init+0x60>)
 8000224:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8000226:	4b14      	ldr	r3, [pc, #80]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000228:	2280      	movs	r2, #128	; 0x80
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 800022e:	4b12      	ldr	r3, [pc, #72]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000230:	2240      	movs	r2, #64	; 0x40
 8000232:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000234:	4b10      	ldr	r3, [pc, #64]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_COMP2_Init+0x5c>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	0252      	lsls	r2, r2, #9
 8000246:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <MX_COMP2_Init+0x5c>)
 800024a:	2200      	movs	r2, #0
 800024c:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <MX_COMP2_Init+0x5c>)
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000262:	0018      	movs	r0, r3
 8000264:	f001 f8bc 	bl	80013e0 <HAL_COMP_Init>
 8000268:	1e03      	subs	r3, r0, #0
 800026a:	d001      	beq.n	8000270 <MX_COMP2_Init+0x54>
  {
    Error_Handler();
 800026c:	f000 fa08 	bl	8000680 <Error_Handler>
  }

}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	20000034 	.word	0x20000034
 800027c:	40010204 	.word	0x40010204

08000280 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000288:	230c      	movs	r3, #12
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	0018      	movs	r0, r3
 800028e:	2314      	movs	r3, #20
 8000290:	001a      	movs	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f004 f944 	bl	8004520 <memset>
  if(compHandle->Instance==COMP2)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <HAL_COMP_MspInit+0x64>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d11c      	bne.n	80002dc <HAL_COMP_MspInit+0x5c>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <HAL_COMP_MspInit+0x68>)
 80002a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <HAL_COMP_MspInit+0x68>)
 80002a8:	2101      	movs	r1, #1
 80002aa:	430a      	orrs	r2, r1
 80002ac:	635a      	str	r2, [r3, #52]	; 0x34
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <HAL_COMP_MspInit+0x68>)
 80002b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002b2:	2201      	movs	r2, #1
 80002b4:	4013      	ands	r3, r2
 80002b6:	60bb      	str	r3, [r7, #8]
 80002b8:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = FB_170V_Pin;
 80002ba:	210c      	movs	r1, #12
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2208      	movs	r2, #8
 80002c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2203      	movs	r2, #3
 80002c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(FB_170V_GPIO_Port, &GPIO_InitStruct);
 80002ce:	187a      	adds	r2, r7, r1
 80002d0:	23a0      	movs	r3, #160	; 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 fc80 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b008      	add	sp, #32
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010204 	.word	0x40010204
 80002e8:	40021000 	.word	0x40021000

080002ec <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	2324      	movs	r3, #36	; 0x24
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f004 f910 	bl	8004520 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000300:	4b13      	ldr	r3, [pc, #76]	; (8000350 <MX_DAC1_Init+0x64>)
 8000302:	4a14      	ldr	r2, [pc, #80]	; (8000354 <MX_DAC1_Init+0x68>)
 8000304:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_DAC1_Init+0x64>)
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fab5 	bl	8001878 <HAL_DAC_Init>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8000312:	f000 f9b5 	bl	8000680 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2202      	movs	r2, #2
 8000326:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2201      	movs	r2, #1
 800032c:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000334:	1d39      	adds	r1, r7, #4
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_DAC1_Init+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	0018      	movs	r0, r3
 800033c:	f001 fb30 	bl	80019a0 <HAL_DAC_ConfigChannel>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000344:	f000 f99c 	bl	8000680 <Error_Handler>
  }

}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b00a      	add	sp, #40	; 0x28
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000064 	.word	0x20000064
 8000354:	40007400 	.word	0x40007400

08000358 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <HAL_DAC_MspInit+0x38>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d10d      	bne.n	8000386 <HAL_DAC_MspInit+0x2e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_DAC_MspInit+0x3c>)
 800036c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <HAL_DAC_MspInit+0x3c>)
 8000370:	2180      	movs	r1, #128	; 0x80
 8000372:	0589      	lsls	r1, r1, #22
 8000374:	430a      	orrs	r2, r1
 8000376:	63da      	str	r2, [r3, #60]	; 0x3c
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_DAC_MspInit+0x3c>)
 800037a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	059b      	lsls	r3, r3, #22
 8000380:	4013      	ands	r3, r2
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b004      	add	sp, #16
 800038c:	bd80      	pop	{r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40007400 	.word	0x40007400
 8000394:	40021000 	.word	0x40021000

08000398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b08b      	sub	sp, #44	; 0x2c
 800039c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	2414      	movs	r4, #20
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	0018      	movs	r0, r3
 80003a4:	2314      	movs	r3, #20
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f004 f8b9 	bl	8004520 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ae:	4b5f      	ldr	r3, [pc, #380]	; (800052c <MX_GPIO_Init+0x194>)
 80003b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003b2:	4b5e      	ldr	r3, [pc, #376]	; (800052c <MX_GPIO_Init+0x194>)
 80003b4:	2104      	movs	r1, #4
 80003b6:	430a      	orrs	r2, r1
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34
 80003ba:	4b5c      	ldr	r3, [pc, #368]	; (800052c <MX_GPIO_Init+0x194>)
 80003bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003be:	2204      	movs	r2, #4
 80003c0:	4013      	ands	r3, r2
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c6:	4b59      	ldr	r3, [pc, #356]	; (800052c <MX_GPIO_Init+0x194>)
 80003c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003ca:	4b58      	ldr	r3, [pc, #352]	; (800052c <MX_GPIO_Init+0x194>)
 80003cc:	2120      	movs	r1, #32
 80003ce:	430a      	orrs	r2, r1
 80003d0:	635a      	str	r2, [r3, #52]	; 0x34
 80003d2:	4b56      	ldr	r3, [pc, #344]	; (800052c <MX_GPIO_Init+0x194>)
 80003d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d6:	2220      	movs	r2, #32
 80003d8:	4013      	ands	r3, r2
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b53      	ldr	r3, [pc, #332]	; (800052c <MX_GPIO_Init+0x194>)
 80003e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003e2:	4b52      	ldr	r3, [pc, #328]	; (800052c <MX_GPIO_Init+0x194>)
 80003e4:	2101      	movs	r1, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	635a      	str	r2, [r3, #52]	; 0x34
 80003ea:	4b50      	ldr	r3, [pc, #320]	; (800052c <MX_GPIO_Init+0x194>)
 80003ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ee:	2201      	movs	r2, #1
 80003f0:	4013      	ands	r3, r2
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f6:	4b4d      	ldr	r3, [pc, #308]	; (800052c <MX_GPIO_Init+0x194>)
 80003f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fa:	4b4c      	ldr	r3, [pc, #304]	; (800052c <MX_GPIO_Init+0x194>)
 80003fc:	2108      	movs	r1, #8
 80003fe:	430a      	orrs	r2, r1
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
 8000402:	4b4a      	ldr	r3, [pc, #296]	; (800052c <MX_GPIO_Init+0x194>)
 8000404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000406:	2208      	movs	r2, #8
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b47      	ldr	r3, [pc, #284]	; (800052c <MX_GPIO_Init+0x194>)
 8000410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000412:	4b46      	ldr	r3, [pc, #280]	; (800052c <MX_GPIO_Init+0x194>)
 8000414:	2102      	movs	r1, #2
 8000416:	430a      	orrs	r2, r1
 8000418:	635a      	str	r2, [r3, #52]	; 0x34
 800041a:	4b44      	ldr	r3, [pc, #272]	; (800052c <MX_GPIO_Init+0x194>)
 800041c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041e:	2202      	movs	r2, #2
 8000420:	4013      	ands	r3, r2
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GN1_Pin|GN2_Pin|G1_Pin|GDOT_Pin 
 8000426:	23a0      	movs	r3, #160	; 0xa0
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2200      	movs	r2, #0
 800042c:	2173      	movs	r1, #115	; 0x73
 800042e:	0018      	movs	r0, r3
 8000430:	f001 fd38 	bl	8001ea4 <HAL_GPIO_WritePin>
                          |G3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GN3_Pin|G2_Pin|G4_Pin, GPIO_PIN_RESET);
 8000434:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <MX_GPIO_Init+0x198>)
 8000436:	2200      	movs	r2, #0
 8000438:	210e      	movs	r1, #14
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fd32 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G5_Pin|G6_Pin|GN4_Pin|G0_Pin 
 8000440:	23fe      	movs	r3, #254	; 0xfe
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	483b      	ldr	r0, [pc, #236]	; (8000534 <MX_GPIO_Init+0x19c>)
 8000446:	2200      	movs	r2, #0
 8000448:	0019      	movs	r1, r3
 800044a:	f001 fd2b 	bl	8001ea4 <HAL_GPIO_WritePin>
                          |G9_Pin|G8_Pin|G7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	0192      	lsls	r2, r2, #6
 8000454:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2200      	movs	r2, #0
 800045a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8000462:	193b      	adds	r3, r7, r4
 8000464:	4a34      	ldr	r2, [pc, #208]	; (8000538 <MX_GPIO_Init+0x1a0>)
 8000466:	0019      	movs	r1, r3
 8000468:	0010      	movs	r0, r2
 800046a:	f001 fbb7 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2204      	movs	r2, #4
 8000472:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000480:	193b      	adds	r3, r7, r4
 8000482:	4a2e      	ldr	r2, [pc, #184]	; (800053c <MX_GPIO_Init+0x1a4>)
 8000484:	0019      	movs	r1, r3
 8000486:	0010      	movs	r0, r2
 8000488:	f001 fba8 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = GN1_Pin|GN2_Pin|G1_Pin|GDOT_Pin 
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2273      	movs	r2, #115	; 0x73
 8000490:	601a      	str	r2, [r3, #0]
                          |G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	23a0      	movs	r3, #160	; 0xa0
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 fb95 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S1_Pin;
 80004b2:	0021      	movs	r1, r4
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2201      	movs	r2, #1
 80004b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80004c6:	000c      	movs	r4, r1
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	4a19      	ldr	r2, [pc, #100]	; (8000530 <MX_GPIO_Init+0x198>)
 80004cc:	0019      	movs	r1, r3
 80004ce:	0010      	movs	r0, r2
 80004d0:	f001 fb84 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GN3_Pin|G2_Pin|G4_Pin;
 80004d4:	0021      	movs	r1, r4
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	220e      	movs	r2, #14
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2201      	movs	r2, #1
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004ee:	000c      	movs	r4, r1
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <MX_GPIO_Init+0x198>)
 80004f4:	0019      	movs	r1, r3
 80004f6:	0010      	movs	r0, r2
 80004f8:	f001 fb70 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G5_Pin|G6_Pin|GN4_Pin|G0_Pin 
 80004fc:	0021      	movs	r1, r4
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	22fe      	movs	r2, #254	; 0xfe
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	601a      	str	r2, [r3, #0]
                          |G9_Pin|G8_Pin|G7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	187b      	adds	r3, r7, r1
 800051a:	4a06      	ldr	r2, [pc, #24]	; (8000534 <MX_GPIO_Init+0x19c>)
 800051c:	0019      	movs	r1, r3
 800051e:	0010      	movs	r0, r2
 8000520:	f001 fb5c 	bl	8001bdc <HAL_GPIO_Init>

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b00b      	add	sp, #44	; 0x2c
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	50000c00 	.word	0x50000c00
 8000534:	50000400 	.word	0x50000400
 8000538:	50000800 	.word	0x50000800
 800053c:	50001400 	.word	0x50001400

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fdae 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f814 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f7ff ff24 	bl	8000398 <MX_GPIO_Init>
  MX_COMP2_Init();
 8000550:	f7ff fe64 	bl	800021c <MX_COMP2_Init>
  MX_DAC1_Init();
 8000554:	f7ff feca 	bl	80002ec <MX_DAC1_Init>
  MX_RTC_Init();
 8000558:	f000 fa5c 	bl	8000a14 <MX_RTC_Init>
  MX_TIM2_Init();
 800055c:	f000 fb5e 	bl	8000c1c <MX_TIM2_Init>
  MX_TIM14_Init();
 8000560:	f000 fbe2 	bl	8000d28 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000564:	f000 fc06 	bl	8000d74 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  nixie_init();
 8000568:	f000 f8c2 	bl	80006f0 <nixie_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  boost_op();
 800056c:	f000 f8e6 	bl	800073c <boost_op>
 8000570:	e7fc      	b.n	800056c <main+0x2c>
	...

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b0a1      	sub	sp, #132	; 0x84
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	2448      	movs	r4, #72	; 0x48
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	2338      	movs	r3, #56	; 0x38
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f003 ffcb 	bl	8004520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	2338      	movs	r3, #56	; 0x38
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	0018      	movs	r0, r3
 8000590:	2310      	movs	r3, #16
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f003 ffc3 	bl	8004520 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	0018      	movs	r0, r3
 800059e:	2334      	movs	r3, #52	; 0x34
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f003 ffbc 	bl	8004520 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 fc97 	bl	8001ee0 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b2:	4b32      	ldr	r3, [pc, #200]	; (800067c <SystemClock_Config+0x108>)
 80005b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005b6:	4b31      	ldr	r3, [pc, #196]	; (800067c <SystemClock_Config+0x108>)
 80005b8:	2118      	movs	r1, #24
 80005ba:	438a      	bics	r2, r1
 80005bc:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2206      	movs	r2, #6
 80005c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c4:	193b      	adds	r3, r7, r4
 80005c6:	2201      	movs	r2, #1
 80005c8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005d2:	0021      	movs	r1, r4
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2240      	movs	r2, #64	; 0x40
 80005de:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2202      	movs	r2, #2
 80005e4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2202      	movs	r2, #2
 80005ea:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	220a      	movs	r2, #10
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0292      	lsls	r2, r2, #10
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	0492      	lsls	r2, r2, #18
 8000606:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000608:	187b      	adds	r3, r7, r1
 800060a:	22e0      	movs	r2, #224	; 0xe0
 800060c:	0612      	lsls	r2, r2, #24
 800060e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	187b      	adds	r3, r7, r1
 8000612:	0018      	movs	r0, r3
 8000614:	f001 fca4 	bl	8001f60 <HAL_RCC_OscConfig>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800061c:	f000 f830 	bl	8000680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	2138      	movs	r1, #56	; 0x38
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2207      	movs	r2, #7
 8000626:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2202      	movs	r2, #2
 800062c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2100      	movs	r1, #0
 800063e:	0018      	movs	r0, r3
 8000640:	f001 ffae 	bl	80025a0 <HAL_RCC_ClockConfig>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000648:	f000 f81a 	bl	8000680 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM15;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2284      	movs	r2, #132	; 0x84
 8000650:	03d2      	lsls	r2, r2, #15
 8000652:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0052      	lsls	r2, r2, #1
 8000660:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	f002 f925 	bl	80028b4 <HAL_RCCEx_PeriphCLKConfig>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800066e:	f000 f807 	bl	8000680 <Error_Handler>
  }
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b021      	add	sp, #132	; 0x84
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <HAL_TIM_PeriodElapsedCallback>:
static void nixie_display();
static void nixie_display_reset_all();
static void nixie_display_set_anode(uint8_t n);

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d108      	bne.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		//stop pwm pulse and set flag to poll the feedback comparator of boost converter
		HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2100      	movs	r1, #0
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 fe45 	bl	8003334 <HAL_TIM_PWM_Stop>
		poll_comp = true;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]

		//ramp up feedback voltage for boost converter
		if(dac_value < DAC_TARGET)
			dac_value++;
	}
}
 80006b0:	e012      	b.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x4c>
	else if(htim->Instance == htim14.Instance)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d10c      	bne.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x4c>
		nixie_display();
 80006be:	f000 f85b 	bl	8000778 <nixie_display>
		if(dac_value < DAC_TARGET)
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	23f4      	movs	r3, #244	; 0xf4
 80006c8:	33ff      	adds	r3, #255	; 0xff
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d804      	bhi.n	80006d8 <HAL_TIM_PeriodElapsedCallback+0x4c>
			dac_value++;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000e4 	.word	0x200000e4
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000124 	.word	0x20000124
 80006ec:	2000002c 	.word	0x2000002c

080006f0 <nixie_init>:

void nixie_init()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	//Start DAC for feedback voltage of boost converter
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <nixie_init+0x3c>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 f8e0 	bl	80018be <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <nixie_init+0x40>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <nixie_init+0x3c>)
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	f001 f928 	bl	800195c <HAL_DAC_SetValue>
	//Start period elapsed event of boost converter pulse
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <nixie_init+0x44>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	68da      	ldr	r2, [r3, #12]
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <nixie_init+0x44>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2101      	movs	r1, #1
 8000718:	430a      	orrs	r2, r1
 800071a:	60da      	str	r2, [r3, #12]
	//Start timer and period elapsed event of multiplex timer for nixie tubes
	HAL_TIM_Base_Start_IT(&htim14);
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <nixie_init+0x48>)
 800071e:	0018      	movs	r0, r3
 8000720:	f002 fd56 	bl	80031d0 <HAL_TIM_Base_Start_IT>
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000064 	.word	0x20000064
 8000730:	2000002c 	.word	0x2000002c
 8000734:	200000e4 	.word	0x200000e4
 8000738:	20000124 	.word	0x20000124

0800073c <boost_op>:

void boost_op()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	if(poll_comp)
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <boost_op+0x30>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00d      	beq.n	8000766 <boost_op+0x2a>
	{
		//If voltage lower than feedback, activate next pulse of boost converter and switch off polling the comparator
		if(HAL_COMP_GetOutputLevel(&hcomp2)==COMP_OUTPUT_LEVEL_LOW)
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <boost_op+0x34>)
 800074c:	0018      	movs	r0, r3
 800074e:	f000 ffa7 	bl	80016a0 <HAL_COMP_GetOutputLevel>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d107      	bne.n	8000766 <boost_op+0x2a>
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <boost_op+0x38>)
 8000758:	2100      	movs	r1, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f002 fd96 	bl	800328c <HAL_TIM_PWM_Start>
			poll_comp = false;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <boost_op+0x30>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000034 	.word	0x20000034
 8000774:	200000e4 	.word	0x200000e4

08000778 <nixie_display>:
	minutes = m;
	seconds = s;
}

static void nixie_display()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	nixie_display_reset_all();
 800077c:	f000 f882 	bl	8000884 <nixie_display_reset_all>
	switch(digit)
 8000780:	4b3a      	ldr	r3, [pc, #232]	; (800086c <nixie_display+0xf4>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b01      	cmp	r3, #1
 8000788:	d01c      	beq.n	80007c4 <nixie_display+0x4c>
 800078a:	dc02      	bgt.n	8000792 <nixie_display+0x1a>
 800078c:	2b00      	cmp	r3, #0
 800078e:	d005      	beq.n	800079c <nixie_display+0x24>
 8000790:	e052      	b.n	8000838 <nixie_display+0xc0>
 8000792:	2b02      	cmp	r3, #2
 8000794:	d02a      	beq.n	80007ec <nixie_display+0x74>
 8000796:	2b03      	cmp	r3, #3
 8000798:	d03b      	beq.n	8000812 <nixie_display+0x9a>
 800079a:	e04d      	b.n	8000838 <nixie_display+0xc0>
	{
	case 0:
		nixie_display_set_anode(hours/10);
 800079c:	4b34      	ldr	r3, [pc, #208]	; (8000870 <nixie_display+0xf8>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	210a      	movs	r1, #10
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff fcad 	bl	8000104 <__udivsi3>
 80007aa:	0003      	movs	r3, r0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f8cc 	bl	800094c <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN1_GPIO_Port, GN1_Pin, GPIO_PIN_SET);
 80007b4:	23a0      	movs	r3, #160	; 0xa0
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fb71 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80007c2:	e039      	b.n	8000838 <nixie_display+0xc0>
	case 1:
		nixie_display_set_anode(hours%10);
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <nixie_display+0xf8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	210a      	movs	r1, #10
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff fd1f 	bl	8000210 <__aeabi_uidivmod>
 80007d2:	000b      	movs	r3, r1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f8b8 	bl	800094c <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN2_GPIO_Port, GN2_Pin, GPIO_PIN_SET);
 80007dc:	23a0      	movs	r3, #160	; 0xa0
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	2201      	movs	r2, #1
 80007e2:	2102      	movs	r1, #2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fb5d 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80007ea:	e025      	b.n	8000838 <nixie_display+0xc0>
	case 2:
		nixie_display_set_anode(minutes/10);
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <nixie_display+0xfc>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	210a      	movs	r1, #10
 80007f4:	0018      	movs	r0, r3
 80007f6:	f7ff fc85 	bl	8000104 <__udivsi3>
 80007fa:	0003      	movs	r3, r0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f8a4 	bl	800094c <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN3_GPIO_Port, GN3_Pin, GPIO_PIN_SET);
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <nixie_display+0x100>)
 8000806:	2201      	movs	r2, #1
 8000808:	2102      	movs	r1, #2
 800080a:	0018      	movs	r0, r3
 800080c:	f001 fb4a 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 8000810:	e012      	b.n	8000838 <nixie_display+0xc0>
	case 3:
		nixie_display_set_anode(minutes%10);
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <nixie_display+0xfc>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	210a      	movs	r1, #10
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff fcf8 	bl	8000210 <__aeabi_uidivmod>
 8000820:	000b      	movs	r3, r1
 8000822:	b2db      	uxtb	r3, r3
 8000824:	0018      	movs	r0, r3
 8000826:	f000 f891 	bl	800094c <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN4_GPIO_Port, GN4_Pin, GPIO_PIN_SET);
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <nixie_display+0x104>)
 800082c:	2201      	movs	r2, #1
 800082e:	2120      	movs	r1, #32
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fb37 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 8000836:	46c0      	nop			; (mov r8, r8)
	}
	if(seconds%2)
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <nixie_display+0x108>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d007      	beq.n	8000858 <nixie_display+0xe0>
		HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_SET);
 8000848:	23a0      	movs	r3, #160	; 0xa0
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	2201      	movs	r2, #1
 800084e:	2120      	movs	r1, #32
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fb27 	bl	8001ea4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_RESET);
}
 8000856:	e006      	b.n	8000866 <nixie_display+0xee>
		HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_RESET);
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	2200      	movs	r2, #0
 800085e:	2120      	movs	r1, #32
 8000860:	0018      	movs	r0, r3
 8000862:	f001 fb1f 	bl	8001ea4 <HAL_GPIO_WritePin>
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000030 	.word	0x20000030
 8000870:	20000031 	.word	0x20000031
 8000874:	20000032 	.word	0x20000032
 8000878:	50000c00 	.word	0x50000c00
 800087c:	50000400 	.word	0x50000400
 8000880:	20000033 	.word	0x20000033

08000884 <nixie_display_reset_all>:

static void nixie_display_reset_all()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GN1_GPIO_Port, GN1_Pin, GPIO_PIN_RESET);
 8000888:	23a0      	movs	r3, #160	; 0xa0
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	2200      	movs	r2, #0
 800088e:	2101      	movs	r1, #1
 8000890:	0018      	movs	r0, r3
 8000892:	f001 fb07 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GN2_GPIO_Port, GN2_Pin, GPIO_PIN_RESET);
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2200      	movs	r2, #0
 800089c:	2102      	movs	r1, #2
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 fb00 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GN3_GPIO_Port, GN3_Pin, GPIO_PIN_RESET);
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <nixie_display_reset_all+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 fafa 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GN4_GPIO_Port, GN4_Pin, GPIO_PIN_RESET);
 80008b0:	4b25      	ldr	r3, [pc, #148]	; (8000948 <nixie_display_reset_all+0xc4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 faf4 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_RESET);
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <nixie_display_reset_all+0xc4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	0018      	movs	r0, r3
 80008c4:	f001 faee 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 80008c8:	23a0      	movs	r3, #160	; 0xa0
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	2200      	movs	r2, #0
 80008ce:	2110      	movs	r1, #16
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fae7 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <nixie_display_reset_all+0xc0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	2104      	movs	r1, #4
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 fae1 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_RESET);
 80008e2:	23a0      	movs	r3, #160	; 0xa0
 80008e4:	05db      	lsls	r3, r3, #23
 80008e6:	2200      	movs	r2, #0
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 fada 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_RESET);
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <nixie_display_reset_all+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fad4 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_RESET);
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <nixie_display_reset_all+0xc4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	2108      	movs	r1, #8
 8000902:	0018      	movs	r0, r3
 8000904:	f001 face 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_RESET);
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <nixie_display_reset_all+0xc4>)
 800090a:	2200      	movs	r2, #0
 800090c:	2110      	movs	r1, #16
 800090e:	0018      	movs	r0, r3
 8000910:	f001 fac8 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_RESET);
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <nixie_display_reset_all+0xc4>)
 800091a:	2200      	movs	r2, #0
 800091c:	0019      	movs	r1, r3
 800091e:	f001 fac1 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_RESET);
 8000922:	2380      	movs	r3, #128	; 0x80
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <nixie_display_reset_all+0xc4>)
 8000928:	2200      	movs	r2, #0
 800092a:	0019      	movs	r1, r3
 800092c:	f001 faba 	bl	8001ea4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_RESET);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <nixie_display_reset_all+0xc4>)
 8000932:	2200      	movs	r2, #0
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fab4 	bl	8001ea4 <HAL_GPIO_WritePin>
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	50000c00 	.word	0x50000c00
 8000948:	50000400 	.word	0x50000400

0800094c <nixie_display_set_anode>:

static void nixie_display_set_anode(uint8_t n)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	0002      	movs	r2, r0
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	701a      	strb	r2, [r3, #0]
	switch(n)
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b09      	cmp	r3, #9
 800095e:	d84e      	bhi.n	80009fe <nixie_display_set_anode+0xb2>
 8000960:	009a      	lsls	r2, r3, #2
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <nixie_display_set_anode+0xbc>)
 8000964:	18d3      	adds	r3, r2, r3
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	469f      	mov	pc, r3
	{
	case 0:
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <nixie_display_set_anode+0xc0>)
 800096c:	2201      	movs	r2, #1
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	0018      	movs	r0, r3
 8000972:	f001 fa97 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 8000976:	e042      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 1:
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000978:	23a0      	movs	r3, #160	; 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	2201      	movs	r2, #1
 800097e:	2110      	movs	r1, #16
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fa8f 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 8000986:	e03a      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 2:
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <nixie_display_set_anode+0xc4>)
 800098a:	2201      	movs	r2, #1
 800098c:	2104      	movs	r1, #4
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fa88 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 8000994:	e033      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 3:
		HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_SET);
 8000996:	23a0      	movs	r3, #160	; 0xa0
 8000998:	05db      	lsls	r3, r3, #23
 800099a:	2201      	movs	r2, #1
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	0018      	movs	r0, r3
 80009a0:	f001 fa80 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80009a4:	e02b      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 4:
		HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_SET);
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <nixie_display_set_anode+0xc4>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	2108      	movs	r1, #8
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 fa79 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80009b2:	e024      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 5:
		HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_SET);
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <nixie_display_set_anode+0xc0>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	2108      	movs	r1, #8
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fa72 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80009c0:	e01d      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 6:
		HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_SET);
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <nixie_display_set_anode+0xc0>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 fa6b 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80009ce:	e016      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 7:
		HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_SET);
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <nixie_display_set_anode+0xc0>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	0019      	movs	r1, r3
 80009da:	f001 fa63 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80009de:	e00e      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 8:
		HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_SET);
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <nixie_display_set_anode+0xc0>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	0019      	movs	r1, r3
 80009ea:	f001 fa5b 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80009ee:	e006      	b.n	80009fe <nixie_display_set_anode+0xb2>
	case 9:
		HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_SET);
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <nixie_display_set_anode+0xc0>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 fa54 	bl	8001ea4 <HAL_GPIO_WritePin>
		break;
 80009fc:	46c0      	nop			; (mov r8, r8)
	}
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	08004548 	.word	0x08004548
 8000a0c:	50000400 	.word	0x50000400
 8000a10:	50000c00 	.word	0x50000c00

08000a14 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f003 fd7c 	bl	8004520 <memset>
  RTC_DateTypeDef sDate = {0};
 8000a28:	003b      	movs	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a30:	4a2d      	ldr	r2, [pc, #180]	; (8000ae8 <MX_RTC_Init+0xd4>)
 8000a32:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a3c:	227f      	movs	r2, #127	; 0x7f
 8000a3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a42:	22ff      	movs	r2, #255	; 0xff
 8000a44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	05d2      	lsls	r2, r2, #23
 8000a5e:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 f8db 	bl	8002c24 <HAL_RTC_Init>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000a72:	f7ff fe05 	bl	8000680 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2200      	movs	r2, #0
 8000a86:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a9a:	1d39      	adds	r1, r7, #4
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f002 f955 	bl	8002d50 <HAL_RTC_SetTime>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000aaa:	f7ff fde9 	bl	8000680 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000aba:	003b      	movs	r3, r7
 8000abc:	2201      	movs	r2, #1
 8000abe:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ac6:	0039      	movs	r1, r7
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_RTC_Init+0xd0>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 f9e7 	bl	8002ea0 <HAL_RTC_SetDate>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000ad6:	f7ff fdd3 	bl	8000680 <Error_Handler>
  }

}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b006      	add	sp, #24
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	20000078 	.word	0x20000078
 8000ae8:	40002800 	.word	0x40002800

08000aec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_RTC_MspInit+0x44>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d114      	bne.n	8000b28 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_RTC_MspInit+0x48>)
 8000b00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <HAL_RTC_MspInit+0x48>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	0209      	lsls	r1, r1, #8
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_RTC_MspInit+0x48>)
 8000b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_RTC_MspInit+0x48>)
 8000b12:	2180      	movs	r1, #128	; 0x80
 8000b14:	00c9      	lsls	r1, r1, #3
 8000b16:	430a      	orrs	r2, r1
 8000b18:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_RTC_MspInit+0x48>)
 8000b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	4013      	ands	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b004      	add	sp, #16
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40002800 	.word	0x40002800
 8000b34:	40021000 	.word	0x40021000

08000b38 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000b42:	6819      	ldr	r1, [r3, #0]
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010000 	.word	0x40010000

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	2101      	movs	r1, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	641a      	str	r2, [r3, #64]	; 0x40
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4013      	ands	r3, r2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0549      	lsls	r1, r1, #21
 8000b80:	430a      	orrs	r2, r1
 8000b82:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	055b      	lsls	r3, r3, #21
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale 
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 fb2c 	bl	80011f0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000b98:	f000 fb52 	bl	8001240 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 fb3b 	bl	8001218 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8000ba2:	23c0      	movs	r3, #192	; 0xc0
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ffc6 	bl	8000b38 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 faca 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <TIM14_IRQHandler+0x14>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f002 fc48 	bl	8003488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000124 	.word	0x20000124

08000c04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <SystemInit+0x14>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	0512      	lsls	r2, r2, #20
 8000c0e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	2328      	movs	r3, #40	; 0x28
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	0018      	movs	r0, r3
 8000c28:	2310      	movs	r3, #16
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f003 fc77 	bl	8004520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c32:	231c      	movs	r3, #28
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	0018      	movs	r0, r3
 8000c38:	230c      	movs	r3, #12
 8000c3a:	001a      	movs	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f003 fc6f 	bl	8004520 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	003b      	movs	r3, r7
 8000c44:	0018      	movs	r0, r3
 8000c46:	231c      	movs	r3, #28
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f003 fc68 	bl	8004520 <memset>

  htim2.Instance = TIM2;
 8000c50:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	05d2      	lsls	r2, r2, #23
 8000c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 44;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c66:	222c      	movs	r2, #44	; 0x2c
 8000c68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f002 fa7c 	bl	8003176 <HAL_TIM_Base_Init>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c82:	f7ff fcfd 	bl	8000680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c86:	2128      	movs	r1, #40	; 0x28
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	0152      	lsls	r2, r2, #5
 8000c8e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c90:	187a      	adds	r2, r7, r1
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f002 fe26 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000ca0:	f7ff fcee 	bl	8000680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f002 fabc 	bl	8003224 <HAL_TIM_PWM_Init>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000cb0:	f7ff fce6 	bl	8000680 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000cb6:	2108      	movs	r1, #8
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f002 fb9f 	bl	80033fc <HAL_TIM_OnePulse_Init>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000cc2:	f7ff fcdd 	bl	8000680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	211c      	movs	r1, #28
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd4:	187a      	adds	r2, r7, r1
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000cd8:	0011      	movs	r1, r2
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f003 fae8 	bl	80042b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000ce4:	f7ff fccc 	bl	8000680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce8:	003b      	movs	r3, r7
 8000cea:	2260      	movs	r2, #96	; 0x60
 8000cec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 24;
 8000cee:	003b      	movs	r3, r7
 8000cf0:	2218      	movs	r2, #24
 8000cf2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf4:	003b      	movs	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cfa:	003b      	movs	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d00:	0039      	movs	r1, r7
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f002 fcf0 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8000d10:	f7ff fcb6 	bl	8000680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <MX_TIM2_Init+0x108>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 f932 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b00e      	add	sp, #56	; 0x38
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200000e4 	.word	0x200000e4

08000d28 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <MX_TIM14_Init+0x40>)
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <MX_TIM14_Init+0x44>)
 8000d30:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 19;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <MX_TIM14_Init+0x40>)
 8000d34:	2213      	movs	r2, #19
 8000d36:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_TIM14_Init+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_TIM14_Init+0x40>)
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <MX_TIM14_Init+0x48>)
 8000d42:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <MX_TIM14_Init+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_TIM14_Init+0x40>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <MX_TIM14_Init+0x40>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f002 fa0f 	bl	8003176 <HAL_TIM_Base_Init>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000d5c:	f7ff fc90 	bl	8000680 <Error_Handler>
  }

}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000124 	.word	0x20000124
 8000d6c:	40002000 	.word	0x40002000
 8000d70:	00001387 	.word	0x00001387

08000d74 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	2360      	movs	r3, #96	; 0x60
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	0018      	movs	r0, r3
 8000d80:	2310      	movs	r3, #16
 8000d82:	001a      	movs	r2, r3
 8000d84:	2100      	movs	r1, #0
 8000d86:	f003 fbcb 	bl	8004520 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8a:	2354      	movs	r3, #84	; 0x54
 8000d8c:	18fb      	adds	r3, r7, r3
 8000d8e:	0018      	movs	r0, r3
 8000d90:	230c      	movs	r3, #12
 8000d92:	001a      	movs	r2, r3
 8000d94:	2100      	movs	r1, #0
 8000d96:	f003 fbc3 	bl	8004520 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d9a:	2338      	movs	r3, #56	; 0x38
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	0018      	movs	r0, r3
 8000da0:	231c      	movs	r3, #28
 8000da2:	001a      	movs	r2, r3
 8000da4:	2100      	movs	r1, #0
 8000da6:	f003 fbbb 	bl	8004520 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	0018      	movs	r0, r3
 8000dae:	2334      	movs	r3, #52	; 0x34
 8000db0:	001a      	movs	r2, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	f003 fbb4 	bl	8004520 <memset>

  htim15.Instance = TIM15;
 8000db8:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000dba:	4a48      	ldr	r2, [pc, #288]	; (8000edc <MX_TIM15_Init+0x168>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 8000dbe:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000dc0:	2213      	movs	r2, #19
 8000dc2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 249;
 8000dca:	4b43      	ldr	r3, [pc, #268]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000dcc:	22f9      	movs	r2, #249	; 0xf9
 8000dce:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000dd6:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000de2:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000de4:	0018      	movs	r0, r3
 8000de6:	f002 f9c6 	bl	8003176 <HAL_TIM_Base_Init>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000dee:	f7ff fc47 	bl	8000680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df2:	2160      	movs	r1, #96	; 0x60
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	0152      	lsls	r2, r2, #5
 8000dfa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000dfc:	187a      	adds	r2, r7, r1
 8000dfe:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f002 fd70 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000e0c:	f7ff fc38 	bl	8000680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e10:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f002 fa06 	bl	8003224 <HAL_TIM_PWM_Init>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000e1c:	f7ff fc30 	bl	8000680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e20:	2154      	movs	r1, #84	; 0x54
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e2e:	187a      	adds	r2, r7, r1
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f003 fa3b 	bl	80042b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000e3e:	f7ff fc1f 	bl	8000680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	2138      	movs	r1, #56	; 0x38
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2260      	movs	r2, #96	; 0x60
 8000e48:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 124;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	227c      	movs	r2, #124	; 0x7c
 8000e4e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6e:	1879      	adds	r1, r7, r1
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	0018      	movs	r0, r3
 8000e76:	f002 fc39 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000e7e:	f7ff fbff 	bl	8000680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	0192      	lsls	r2, r2, #6
 8000ea6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb4:	1d3a      	adds	r2, r7, #4
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000eb8:	0011      	movs	r1, r2
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f003 fa4e 	bl	800435c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8000ec4:	f7ff fbdc 	bl	8000680 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <MX_TIM15_Init+0x164>)
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f000 f858 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b01c      	add	sp, #112	; 0x70
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000a4 	.word	0x200000a4
 8000edc:	40014000 	.word	0x40014000

08000ee0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d10c      	bne.n	8000f0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	430a      	orrs	r2, r1
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f04:	2201      	movs	r2, #1
 8000f06:	4013      	ands	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000f0c:	e02e      	b.n	8000f6c <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM14)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_TIM_Base_MspInit+0x98>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d116      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	0209      	lsls	r1, r1, #8
 8000f22:	430a      	orrs	r2, r1
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	2013      	movs	r0, #19
 8000f3a:	f000 fc6b 	bl	8001814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f3e:	2013      	movs	r0, #19
 8000f40:	f000 fc7d 	bl	800183e <HAL_NVIC_EnableIRQ>
}
 8000f44:	e012      	b.n	8000f6c <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM15)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_TIM_Base_MspInit+0x9c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d10d      	bne.n	8000f6c <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_TIM_Base_MspInit+0x94>)
 8000f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	025b      	lsls	r3, r3, #9
 8000f66:	4013      	ands	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	46c0      	nop			; (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b006      	add	sp, #24
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40002000 	.word	0x40002000
 8000f7c:	40014000 	.word	0x40014000

08000f80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	2314      	movs	r3, #20
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	2314      	movs	r3, #20
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f003 fac4 	bl	8004520 <memset>
  if(timHandle->Instance==TIM2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d124      	bne.n	8000fee <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_TIM_MspPostInit+0xc8>)
 8000fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <HAL_TIM_MspPostInit+0xc8>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	430a      	orrs	r2, r1
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <HAL_TIM_MspPostInit+0xc8>)
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fbc:	2114      	movs	r1, #20
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	0212      	lsls	r2, r2, #8
 8000fc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2202      	movs	r2, #2
 8000fca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2202      	movs	r2, #2
 8000fdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	187a      	adds	r2, r7, r1
 8000fe0:	23a0      	movs	r3, #160	; 0xa0
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 fdf8 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000fec:	e027      	b.n	800103e <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM15)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d122      	bne.n	800103e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_TIM_MspPostInit+0xc8>)
 8000ffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_TIM_MspPostInit+0xc8>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_TIM_MspPostInit+0xc8>)
 8001006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001008:	2201      	movs	r2, #1
 800100a:	4013      	ands	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LS_Pin;
 8001010:	2114      	movs	r1, #20
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2204      	movs	r2, #4
 8001016:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	187b      	adds	r3, r7, r1
 800101a:	2202      	movs	r2, #2
 800101c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2205      	movs	r2, #5
 800102e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LS_GPIO_Port, &GPIO_InitStruct);
 8001030:	187a      	adds	r2, r7, r1
 8001032:	23a0      	movs	r3, #160	; 0xa0
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	0011      	movs	r1, r2
 8001038:	0018      	movs	r0, r3
 800103a:	f000 fdcf 	bl	8001bdc <HAL_GPIO_Init>
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b00a      	add	sp, #40	; 0x28
 8001044:	bd80      	pop	{r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40021000 	.word	0x40021000
 800104c:	40014000 	.word	0x40014000

08001050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001054:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001056:	e003      	b.n	8001060 <LoopCopyDataInit>

08001058 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800105a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800105c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800105e:	3104      	adds	r1, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <LoopForever+0xa>)
  ldr r3, =_edata
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <LoopForever+0xe>)
  adds r2, r0, r1
 8001064:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001066:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001068:	d3f6      	bcc.n	8001058 <CopyDataInit>
  ldr r2, =_sbss
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LoopForever+0x12>)
  b LoopFillZerobss
 800106c:	e002      	b.n	8001074 <LoopFillZerobss>

0800106e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001070:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001072:	3204      	adds	r2, #4

08001074 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <LoopForever+0x16>)
  cmp r2, r3
 8001076:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001078:	d3f9      	bcc.n	800106e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800107a:	f7ff fdc3 	bl	8000c04 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800107e:	f003 fa2b 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001082:	f7ff fa5d 	bl	8000540 <main>

08001086 <LoopForever>:

LoopForever:
    b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   r0, =_estack
 8001088:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 800108c:	0800460c 	.word	0x0800460c
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001094:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001098:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800109c:	20000168 	.word	0x20000168

080010a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_COMP_IRQHandler>
	...

080010a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_Init+0x3c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Init+0x3c>)
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	0049      	lsls	r1, r1, #1
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f810 	bl	80010e4 <HAL_InitTick>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e001      	b.n	80010d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fd42 	bl	8000b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010ec:	230f      	movs	r3, #15
 80010ee:	18fb      	adds	r3, r7, r3
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_InitTick+0x88>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d02b      	beq.n	8001154 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <HAL_InitTick+0x8c>)
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_InitTick+0x88>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0019      	movs	r1, r3
 8001106:	23fa      	movs	r3, #250	; 0xfa
 8001108:	0098      	lsls	r0, r3, #2
 800110a:	f7fe fffb 	bl	8000104 <__udivsi3>
 800110e:	0003      	movs	r3, r0
 8001110:	0019      	movs	r1, r3
 8001112:	0020      	movs	r0, r4
 8001114:	f7fe fff6 	bl	8000104 <__udivsi3>
 8001118:	0003      	movs	r3, r0
 800111a:	0018      	movs	r0, r3
 800111c:	f000 fb9f 	bl	800185e <HAL_SYSTICK_Config>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d112      	bne.n	800114a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d80a      	bhi.n	8001140 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	2200      	movs	r2, #0
 8001132:	0018      	movs	r0, r3
 8001134:	f000 fb6e 	bl	8001814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_InitTick+0x90>)
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e00d      	b.n	800115c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e008      	b.n	800115c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114a:	230f      	movs	r3, #15
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	e003      	b.n	800115c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	781b      	ldrb	r3, [r3, #0]
}
 8001162:	0018      	movs	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	b005      	add	sp, #20
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	2000000c 	.word	0x2000000c
 8001170:	20000004 	.word	0x20000004
 8001174:	20000008 	.word	0x20000008

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_IncTick+0x18>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_IncTick+0x1c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	18d2      	adds	r2, r2, r3
 8001186:	4b02      	ldr	r3, [pc, #8]	; (8001190 <HAL_IncTick+0x18>)
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000164 	.word	0x20000164
 8001194:	2000000c 	.word	0x2000000c

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <HAL_GetTick+0x10>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	20000164 	.word	0x20000164

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff fff0 	bl	8001198 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	d004      	beq.n	80011d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_Delay+0x40>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	f7ff ffe1 	bl	8001198 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d8f7      	bhi.n	80011d2 <HAL_Delay+0x26>
  {
  }
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b004      	add	sp, #16
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	2000000c 	.word	0x2000000c

080011f0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *         This parameter can be one of the following values:
  *         @arg @ref SYSCFG_VREFBUF_VoltageScale
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2204      	movs	r2, #4
 80011fe:	4393      	bics	r3, r2
 8001200:	0019      	movs	r1, r3
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40010030 	.word	0x40010030

08001218 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2202      	movs	r2, #2
 8001226:	4393      	bics	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40010030 	.word	0x40010030

08001240 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800124c:	2101      	movs	r1, #1
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001252:	f7ff ffa1 	bl	8001198 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	607b      	str	r3, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800125a:	e008      	b.n	800126e <HAL_SYSCFG_EnableVREFBUF+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800125c:	f7ff ff9c 	bl	8001198 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b0a      	cmp	r3, #10
 8001268:	d901      	bls.n	800126e <HAL_SYSCFG_EnableVREFBUF+0x2e>
    {
      return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e005      	b.n	800127a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2208      	movs	r2, #8
 8001274:	4013      	ands	r3, r2
 8001276:	d0f1      	beq.n	800125c <HAL_SYSCFG_EnableVREFBUF+0x1c>
    }
  }

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40010030 	.word	0x40010030

08001288 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	58d2      	ldr	r2, [r2, r3]
 8001296:	4904      	ldr	r1, [pc, #16]	; (80012a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4313      	orrs	r3, r2
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	508b      	str	r3, [r1, r2]
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b002      	add	sp, #8
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021800 	.word	0x40021800

080012ac <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	58d3      	ldr	r3, [r2, r3]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	43d2      	mvns	r2, r2
 80012be:	4904      	ldr	r1, [pc, #16]	; (80012d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	508b      	str	r3, [r1, r2]
}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b002      	add	sp, #8
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40021800 	.word	0x40021800

080012d4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80012de:	2384      	movs	r3, #132	; 0x84
 80012e0:	58d2      	ldr	r2, [r2, r3]
 80012e2:	4904      	ldr	r1, [pc, #16]	; (80012f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	2284      	movs	r2, #132	; 0x84
 80012ea:	508b      	str	r3, [r1, r2]

}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021800 	.word	0x40021800

080012f8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001302:	2384      	movs	r3, #132	; 0x84
 8001304:	58d3      	ldr	r3, [r2, r3]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	43d2      	mvns	r2, r2
 800130a:	4904      	ldr	r1, [pc, #16]	; (800131c <LL_EXTI_DisableEvent_0_31+0x24>)
 800130c:	4013      	ands	r3, r2
 800130e:	2284      	movs	r2, #132	; 0x84
 8001310:	508b      	str	r3, [r1, r2]
}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b002      	add	sp, #8
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	40021800 	.word	0x40021800

08001320 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021800 	.word	0x40021800

08001340 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	43d9      	mvns	r1, r3
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001352:	400a      	ands	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40021800 	.word	0x40021800

08001364 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	430a      	orrs	r2, r1
 8001376:	605a      	str	r2, [r3, #4]
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021800 	.word	0x40021800

08001384 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	43d9      	mvns	r1, r3
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001396:	400a      	ands	r2, r1
 8001398:	605a      	str	r2, [r3, #4]
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40021800 	.word	0x40021800

080013a8 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40021800 	.word	0x40021800

080013c4 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	60da      	str	r2, [r3, #12]
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b002      	add	sp, #8
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	40021800 	.word	0x40021800

080013e0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80013ec:	231f      	movs	r3, #31
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d104      	bne.n	8001404 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 80013fa:	231f      	movs	r3, #31
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e13a      	b.n	800167a <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0fdb      	lsrs	r3, r3, #31
 800140c:	07da      	lsls	r2, r3, #31
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	061b      	lsls	r3, r3, #24
 8001412:	429a      	cmp	r2, r3
 8001414:	d104      	bne.n	8001420 <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8001416:	231f      	movs	r3, #31
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	e12c      	b.n	800167a <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2229      	movs	r2, #41	; 0x29
 8001424:	5c9b      	ldrb	r3, [r3, r2]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10a      	bne.n	8001442 <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2228      	movs	r2, #40	; 0x28
 8001430:	2100      	movs	r1, #0
 8001432:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0018      	movs	r0, r3
 800143e:	f7fe ff1f 	bl	8000280 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2230      	movs	r2, #48	; 0x30
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 800146e:	4313      	orrs	r3, r2
 8001470:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a83      	ldr	r2, [pc, #524]	; (8001688 <HAL_COMP_Init+0x2a8>)
 800147a:	4013      	ands	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	429a      	cmp	r2, r3
 8001492:	d10d      	bne.n	80014b0 <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001494:	4b7d      	ldr	r3, [pc, #500]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b7c      	ldr	r3, [pc, #496]	; (800168c <HAL_COMP_Init+0x2ac>)
 800149a:	497d      	ldr	r1, [pc, #500]	; (8001690 <HAL_COMP_Init+0x2b0>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80014a0:	4b7a      	ldr	r3, [pc, #488]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4b79      	ldr	r3, [pc, #484]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	0109      	lsls	r1, r1, #4
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	e01f      	b.n	80014f0 <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	23c0      	movs	r3, #192	; 0xc0
 80014b6:	015b      	lsls	r3, r3, #5
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d10d      	bne.n	80014d8 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80014bc:	4b73      	ldr	r3, [pc, #460]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b72      	ldr	r3, [pc, #456]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	0109      	lsls	r1, r1, #4
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80014ca:	4b70      	ldr	r3, [pc, #448]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014d0:	496f      	ldr	r1, [pc, #444]	; (8001690 <HAL_COMP_Init+0x2b0>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	e00b      	b.n	80014f0 <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80014d8:	4b6c      	ldr	r3, [pc, #432]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b6b      	ldr	r3, [pc, #428]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014de:	496c      	ldr	r1, [pc, #432]	; (8001690 <HAL_COMP_Init+0x2b0>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80014e4:	4b69      	ldr	r3, [pc, #420]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4b68      	ldr	r3, [pc, #416]	; (800168c <HAL_COMP_Init+0x2ac>)
 80014ea:	4969      	ldr	r1, [pc, #420]	; (8001690 <HAL_COMP_Init+0x2b0>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	01d2      	lsls	r2, r2, #7
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d006      	beq.n	800150a <HAL_COMP_Init+0x12a>
 80014fc:	22a0      	movs	r2, #160	; 0xa0
 80014fe:	01d2      	lsls	r2, r2, #7
 8001500:	4293      	cmp	r3, r2
 8001502:	d010      	beq.n	8001526 <HAL_COMP_Init+0x146>
 8001504:	2b01      	cmp	r3, #1
 8001506:	d01c      	beq.n	8001542 <HAL_COMP_Init+0x162>
 8001508:	e02a      	b.n	8001560 <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800150a:	4b60      	ldr	r3, [pc, #384]	; (800168c <HAL_COMP_Init+0x2ac>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	01c9      	lsls	r1, r1, #7
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001518:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_COMP_Init+0x2ac>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4b5b      	ldr	r3, [pc, #364]	; (800168c <HAL_COMP_Init+0x2ac>)
 800151e:	495d      	ldr	r1, [pc, #372]	; (8001694 <HAL_COMP_Init+0x2b4>)
 8001520:	400a      	ands	r2, r1
 8001522:	605a      	str	r2, [r3, #4]
        break;
 8001524:	e029      	b.n	800157a <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b58      	ldr	r3, [pc, #352]	; (800168c <HAL_COMP_Init+0x2ac>)
 800152c:	4959      	ldr	r1, [pc, #356]	; (8001694 <HAL_COMP_Init+0x2b4>)
 800152e:	400a      	ands	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001532:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4b55      	ldr	r3, [pc, #340]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	01c9      	lsls	r1, r1, #7
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
        break;
 8001540:	e01b      	b.n	800157a <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001542:	4b52      	ldr	r3, [pc, #328]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	01c9      	lsls	r1, r1, #7
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001550:	4b4e      	ldr	r3, [pc, #312]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4b4d      	ldr	r3, [pc, #308]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	01c9      	lsls	r1, r1, #7
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
        break;
 800155e:	e00c      	b.n	800157a <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001560:	4b4a      	ldr	r3, [pc, #296]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001566:	494b      	ldr	r1, [pc, #300]	; (8001694 <HAL_COMP_Init+0x2b4>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800156c:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_COMP_Init+0x2ac>)
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_COMP_Init+0x2ac>)
 8001572:	4948      	ldr	r1, [pc, #288]	; (8001694 <HAL_COMP_Init+0x2b4>)
 8001574:	400a      	ands	r2, r1
 8001576:	605a      	str	r2, [r3, #4]
        break;
 8001578:	46c0      	nop			; (mov r8, r8)
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2230      	movs	r2, #48	; 0x30
 8001582:	4013      	ands	r3, r2
 8001584:	d016      	beq.n	80015b4 <HAL_COMP_Init+0x1d4>
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d113      	bne.n	80015b4 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <HAL_COMP_Init+0x2b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4942      	ldr	r1, [pc, #264]	; (800169c <HAL_COMP_Init+0x2bc>)
 8001592:	0018      	movs	r0, r3
 8001594:	f7fe fdb6 	bl	8000104 <__udivsi3>
 8001598:	0003      	movs	r3, r0
 800159a:	001a      	movs	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	189b      	adds	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80015a6:	e002      	b.n	80015ae <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f9      	bne.n	80015a8 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a34      	ldr	r2, [pc, #208]	; (800168c <HAL_COMP_Init+0x2ac>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d102      	bne.n	80015c4 <HAL_COMP_Init+0x1e4>
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	029b      	lsls	r3, r3, #10
 80015c2:	e001      	b.n	80015c8 <HAL_COMP_Init+0x1e8>
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	02db      	lsls	r3, r3, #11
 80015c8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	d040      	beq.n	8001656 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2210      	movs	r2, #16
 80015da:	4013      	ands	r3, r2
 80015dc:	d004      	beq.n	80015e8 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff fe9d 	bl	8001320 <LL_EXTI_EnableRisingTrig_0_31>
 80015e6:	e003      	b.n	80015f0 <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff fea8 	bl	8001340 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	2220      	movs	r2, #32
 80015f6:	4013      	ands	r3, r2
 80015f8:	d004      	beq.n	8001604 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff feb1 	bl	8001364 <LL_EXTI_EnableFallingTrig_0_31>
 8001602:	e003      	b.n	800160c <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff febc 	bl	8001384 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff fed8 	bl	80013c4 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff fec6 	bl	80013a8 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	2202      	movs	r2, #2
 8001622:	4013      	ands	r3, r2
 8001624:	d004      	beq.n	8001630 <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff fe53 	bl	80012d4 <LL_EXTI_EnableEvent_0_31>
 800162e:	e003      	b.n	8001638 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff fe60 	bl	80012f8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2201      	movs	r2, #1
 800163e:	4013      	ands	r3, r2
 8001640:	d004      	beq.n	800164c <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff fe1f 	bl	8001288 <LL_EXTI_EnableIT_0_31>
 800164a:	e00c      	b.n	8001666 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff fe2c 	bl	80012ac <LL_EXTI_DisableIT_0_31>
 8001654:	e007      	b.n	8001666 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	0018      	movs	r0, r3
 800165a:	f7ff fe4d 	bl	80012f8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff fe23 	bl	80012ac <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2229      	movs	r2, #41	; 0x29
 800166a:	5c9b      	ldrb	r3, [r3, r2]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d103      	bne.n	800167a <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2229      	movs	r2, #41	; 0x29
 8001676:	2101      	movs	r1, #1
 8001678:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800167a:	231f      	movs	r3, #31
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	781b      	ldrb	r3, [r3, #0]
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b008      	add	sp, #32
 8001686:	bd80      	pop	{r7, pc}
 8001688:	fe00740f 	.word	0xfe00740f
 800168c:	40010200 	.word	0x40010200
 8001690:	fffff7ff 	.word	0xfffff7ff
 8001694:	ffffbfff 	.word	0xffffbfff
 8001698:	20000004 	.word	0x20000004
 800169c:	00030d40 	.word	0x00030d40

080016a0 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	0f9b      	lsrs	r3, r3, #30
 80016b0:	2201      	movs	r2, #1
 80016b2:	4013      	ands	r3, r2
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	0002      	movs	r2, r0
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b7f      	cmp	r3, #127	; 0x7f
 80016ce:	d809      	bhi.n	80016e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	001a      	movs	r2, r3
 80016d6:	231f      	movs	r3, #31
 80016d8:	401a      	ands	r2, r3
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_EnableIRQ+0x30>)
 80016dc:	2101      	movs	r1, #1
 80016de:	4091      	lsls	r1, r2
 80016e0:	000a      	movs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
  }
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	0002      	movs	r2, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b7f      	cmp	r3, #127	; 0x7f
 8001704:	d828      	bhi.n	8001758 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001706:	4a2f      	ldr	r2, [pc, #188]	; (80017c4 <__NVIC_SetPriority+0xd4>)
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b25b      	sxtb	r3, r3
 800170e:	089b      	lsrs	r3, r3, #2
 8001710:	33c0      	adds	r3, #192	; 0xc0
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	589b      	ldr	r3, [r3, r2]
 8001716:	1dfa      	adds	r2, r7, #7
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	0011      	movs	r1, r2
 800171c:	2203      	movs	r2, #3
 800171e:	400a      	ands	r2, r1
 8001720:	00d2      	lsls	r2, r2, #3
 8001722:	21ff      	movs	r1, #255	; 0xff
 8001724:	4091      	lsls	r1, r2
 8001726:	000a      	movs	r2, r1
 8001728:	43d2      	mvns	r2, r2
 800172a:	401a      	ands	r2, r3
 800172c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	019b      	lsls	r3, r3, #6
 8001732:	22ff      	movs	r2, #255	; 0xff
 8001734:	401a      	ands	r2, r3
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	0018      	movs	r0, r3
 800173c:	2303      	movs	r3, #3
 800173e:	4003      	ands	r3, r0
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001744:	481f      	ldr	r0, [pc, #124]	; (80017c4 <__NVIC_SetPriority+0xd4>)
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b25b      	sxtb	r3, r3
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	430a      	orrs	r2, r1
 8001750:	33c0      	adds	r3, #192	; 0xc0
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001756:	e031      	b.n	80017bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <__NVIC_SetPriority+0xd8>)
 800175a:	1dfb      	adds	r3, r7, #7
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	0019      	movs	r1, r3
 8001760:	230f      	movs	r3, #15
 8001762:	400b      	ands	r3, r1
 8001764:	3b08      	subs	r3, #8
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3306      	adds	r3, #6
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	3304      	adds	r3, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1dfa      	adds	r2, r7, #7
 8001774:	7812      	ldrb	r2, [r2, #0]
 8001776:	0011      	movs	r1, r2
 8001778:	2203      	movs	r2, #3
 800177a:	400a      	ands	r2, r1
 800177c:	00d2      	lsls	r2, r2, #3
 800177e:	21ff      	movs	r1, #255	; 0xff
 8001780:	4091      	lsls	r1, r2
 8001782:	000a      	movs	r2, r1
 8001784:	43d2      	mvns	r2, r2
 8001786:	401a      	ands	r2, r3
 8001788:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	019b      	lsls	r3, r3, #6
 800178e:	22ff      	movs	r2, #255	; 0xff
 8001790:	401a      	ands	r2, r3
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	0018      	movs	r0, r3
 8001798:	2303      	movs	r3, #3
 800179a:	4003      	ands	r3, r0
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <__NVIC_SetPriority+0xd8>)
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	001c      	movs	r4, r3
 80017a8:	230f      	movs	r3, #15
 80017aa:	4023      	ands	r3, r4
 80017ac:	3b08      	subs	r3, #8
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	430a      	orrs	r2, r1
 80017b2:	3306      	adds	r3, #6
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	18c3      	adds	r3, r0, r3
 80017b8:	3304      	adds	r3, #4
 80017ba:	601a      	str	r2, [r3, #0]
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b003      	add	sp, #12
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <SysTick_Config+0x40>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017de:	2301      	movs	r3, #1
 80017e0:	e010      	b.n	8001804 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <SysTick_Config+0x44>)
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	3a01      	subs	r2, #1
 80017e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ea:	2301      	movs	r3, #1
 80017ec:	425b      	negs	r3, r3
 80017ee:	2103      	movs	r1, #3
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ff7d 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <SysTick_Config+0x44>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x44>)
 80017fe:	2207      	movs	r2, #7
 8001800:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001802:	2300      	movs	r3, #0
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}
 800180c:	00ffffff 	.word	0x00ffffff
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	210f      	movs	r1, #15
 8001820:	187b      	adds	r3, r7, r1
 8001822:	1c02      	adds	r2, r0, #0
 8001824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	187b      	adds	r3, r7, r1
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	0011      	movs	r1, r2
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b004      	add	sp, #16
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	0002      	movs	r2, r0
 8001846:	1dfb      	adds	r3, r7, #7
 8001848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	b25b      	sxtb	r3, r3
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff ff33 	bl	80016bc <__NVIC_EnableIRQ>
}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff ffaf 	bl	80017cc <SysTick_Config>
 800186e:	0003      	movs	r3, r0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e015      	b.n	80018b6 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	791b      	ldrb	r3, [r3, #4]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d106      	bne.n	80018a2 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	0018      	movs	r0, r3
 800189e:	f7fe fd5b 	bl	8000358 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2202      	movs	r2, #2
 80018a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b002      	add	sp, #8
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	795b      	ldrb	r3, [r3, #5]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_DAC_Start+0x16>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e03f      	b.n	8001954 <HAL_DAC_Start+0x96>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6819      	ldr	r1, [r3, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2210      	movs	r2, #16
 80018ea:	4013      	ands	r3, r2
 80018ec:	2201      	movs	r2, #1
 80018ee:	409a      	lsls	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10f      	bne.n	800191e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	223e      	movs	r2, #62	; 0x3e
 8001906:	4013      	ands	r3, r2
 8001908:	2b02      	cmp	r3, #2
 800190a:	d11c      	bne.n	8001946 <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2101      	movs	r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	e013      	b.n	8001946 <HAL_DAC_Start+0x88>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	23f8      	movs	r3, #248	; 0xf8
 8001926:	039b      	lsls	r3, r3, #14
 8001928:	401a      	ands	r2, r3
 800192a:	2102      	movs	r1, #2
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4099      	lsls	r1, r3
 8001930:	000b      	movs	r3, r1
 8001932:	429a      	cmp	r2, r3
 8001934:	d107      	bne.n	8001946 <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2102      	movs	r1, #2
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	18d3      	adds	r3, r2, r3
 8001980:	3308      	adds	r3, #8
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e004      	b.n	8001990 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	18d3      	adds	r3, r2, r3
 800198c:	3314      	adds	r3, #20
 800198e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b006      	add	sp, #24
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	795b      	ldrb	r3, [r3, #5]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_DAC_ConfigChannel+0x1c>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e107      	b.n	8001bcc <HAL_DAC_ConfigChannel+0x22c>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2201      	movs	r2, #1
 80019c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2202      	movs	r2, #2
 80019c6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d000      	beq.n	80019d2 <HAL_DAC_ConfigChannel+0x32>
 80019d0:	e074      	b.n	8001abc <HAL_DAC_ConfigChannel+0x11c>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d138      	bne.n	8001a4a <HAL_DAC_ConfigChannel+0xaa>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fbde 	bl	8001198 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	61fb      	str	r3, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80019e0:	e011      	b.n	8001a06 <HAL_DAC_ConfigChannel+0x66>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019e2:	f7ff fbd9 	bl	8001198 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d90a      	bls.n	8001a06 <HAL_DAC_ConfigChannel+0x66>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2208      	movs	r2, #8
 80019f6:	431a      	orrs	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2203      	movs	r2, #3
 8001a00:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0e2      	b.n	8001bcc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	4013      	ands	r3, r2
 8001a12:	d1e6      	bne.n	80019e2 <HAL_DAC_ConfigChannel+0x42>
        }
      }
      HAL_Delay(1);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff fbc9 	bl	80011ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	6992      	ldr	r2, [r2, #24]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
 8001a24:	e01e      	b.n	8001a64 <HAL_DAC_ConfigChannel+0xc4>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a26:	f7ff fbb7 	bl	8001198 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d90a      	bls.n	8001a4a <HAL_DAC_ConfigChannel+0xaa>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2203      	movs	r2, #3
 8001a44:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0c0      	b.n	8001bcc <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dbe8      	blt.n	8001a26 <HAL_DAC_ConfigChannel+0x86>
        }
      }
      HAL_Delay(1U);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7ff fba9 	bl	80011ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	6992      	ldr	r2, [r2, #24]
 8001a62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	400a      	ands	r2, r1
 8001a70:	4958      	ldr	r1, [pc, #352]	; (8001bd4 <HAL_DAC_ConfigChannel+0x234>)
 8001a72:	4091      	lsls	r1, r2
 8001a74:	000a      	movs	r2, r1
 8001a76:	43d2      	mvns	r2, r2
 8001a78:	401a      	ands	r2, r3
 8001a7a:	0011      	movs	r1, r2
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2010      	movs	r0, #16
 8001a84:	4003      	ands	r3, r0
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	2110      	movs	r1, #16
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	21ff      	movs	r1, #255	; 0xff
 8001a9e:	4091      	lsls	r1, r2
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	43d2      	mvns	r2, r2
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	6a1a      	ldr	r2, [r3, #32]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2010      	movs	r0, #16
 8001ab0:	4003      	ands	r3, r0
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d11d      	bne.n	8001b00 <HAL_DAC_ConfigChannel+0x160>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	221f      	movs	r2, #31
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2210      	movs	r2, #16
 8001aea:	4013      	ands	r3, r2
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b06:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2207      	movs	r2, #7
 8001b10:	409a      	lsls	r2, r3
 8001b12:	0013      	movs	r3, r2
 8001b14:	43da      	mvns	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2210      	movs	r2, #16
 8001b32:	4013      	ands	r3, r2
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2110      	movs	r1, #16
 8001b52:	400b      	ands	r3, r1
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	01c9      	lsls	r1, r1, #7
 8001b58:	4099      	lsls	r1, r3
 8001b5a:	000b      	movs	r3, r1
 8001b5c:	43d9      	mvns	r1, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	400a      	ands	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2210      	movs	r2, #16
 8001b72:	4013      	ands	r3, r2
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_DAC_ConfigChannel+0x238>)
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2210      	movs	r2, #16
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	409a      	lsls	r2, r3
 8001b92:	0013      	movs	r3, r2
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2110      	movs	r1, #16
 8001bac:	400b      	ands	r3, r1
 8001bae:	21c0      	movs	r1, #192	; 0xc0
 8001bb0:	4099      	lsls	r1, r3
 8001bb2:	000b      	movs	r3, r1
 8001bb4:	43d9      	mvns	r1, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	400a      	ands	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b008      	add	sp, #32
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	000003ff 	.word	0x000003ff
 8001bd8:	00000ffe 	.word	0x00000ffe

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bea:	e147      	b.n	8001e7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4091      	lsls	r1, r2
 8001bf6:	000a      	movs	r2, r1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d100      	bne.n	8001c04 <HAL_GPIO_Init+0x28>
 8001c02:	e138      	b.n	8001e76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x38>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b12      	cmp	r3, #18
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	58d3      	ldr	r3, [r2, r3]
 8001c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2207      	movs	r2, #7
 8001c26:	4013      	ands	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	0013      	movs	r3, r2
 8001c30:	43da      	mvns	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2107      	movs	r1, #7
 8001c40:	400b      	ands	r3, r1
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	409a      	lsls	r2, r3
 8001c46:	0013      	movs	r3, r2
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	0092      	lsls	r2, r2, #2
 8001c58:	6939      	ldr	r1, [r7, #16]
 8001c5a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	0013      	movs	r3, r2
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	409a      	lsls	r2, r3
 8001c82:	0013      	movs	r3, r2
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d00b      	beq.n	8001cb0 <HAL_GPIO_Init+0xd4>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d007      	beq.n	8001cb0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca4:	2b11      	cmp	r3, #17
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b12      	cmp	r3, #18
 8001cae:	d130      	bne.n	8001d12 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	2203      	movs	r2, #3
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	0013      	movs	r3, r2
 8001cc0:	43da      	mvns	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	43da      	mvns	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	055b      	lsls	r3, r3, #21
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d100      	bne.n	8001d50 <HAL_GPIO_Init+0x174>
 8001d4e:	e092      	b.n	8001e76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d50:	4a50      	ldr	r2, [pc, #320]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3318      	adds	r3, #24
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	589b      	ldr	r3, [r3, r2]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4013      	ands	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	220f      	movs	r2, #15
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	0013      	movs	r3, r2
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	23a0      	movs	r3, #160	; 0xa0
 8001d78:	05db      	lsls	r3, r3, #23
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x1ca>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a45      	ldr	r2, [pc, #276]	; (8001e98 <HAL_GPIO_Init+0x2bc>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x1c6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a44      	ldr	r2, [pc, #272]	; (8001e9c <HAL_GPIO_Init+0x2c0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x1c2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a43      	ldr	r2, [pc, #268]	; (8001ea0 <HAL_GPIO_Init+0x2c4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x1be>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x1cc>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e004      	b.n	8001da8 <HAL_GPIO_Init+0x1cc>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_Init+0x1cc>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x1cc>
 8001da6:	2300      	movs	r3, #0
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	2103      	movs	r1, #3
 8001dac:	400a      	ands	r2, r1
 8001dae:	00d2      	lsls	r2, r2, #3
 8001db0:	4093      	lsls	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001db8:	4936      	ldr	r1, [pc, #216]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3318      	adds	r3, #24
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dc6:	4a33      	ldr	r2, [pc, #204]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	58d3      	ldr	r3, [r2, r3]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	025b      	lsls	r3, r3, #9
 8001de0:	4013      	ands	r3, r2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dec:	4929      	ldr	r1, [pc, #164]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001df6:	2384      	movs	r3, #132	; 0x84
 8001df8:	58d3      	ldr	r3, [r2, r3]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	029b      	lsls	r3, r3, #10
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e1a:	491e      	ldr	r1, [pc, #120]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001e1c:	2284      	movs	r2, #132	; 0x84
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	035b      	lsls	r3, r3, #13
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43da      	mvns	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	039b      	lsls	r3, r3, #14
 8001e64:	4013      	ands	r3, r2
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_GPIO_Init+0x2b8>)
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	40da      	lsrs	r2, r3
 8001e84:	1e13      	subs	r3, r2, #0
 8001e86:	d000      	beq.n	8001e8a <HAL_GPIO_Init+0x2ae>
 8001e88:	e6b0      	b.n	8001bec <HAL_GPIO_Init+0x10>
  }
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b006      	add	sp, #24
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	40021800 	.word	0x40021800
 8001e98:	50000400 	.word	0x50000400
 8001e9c:	50000800 	.word	0x50000800
 8001ea0:	50000c00 	.word	0x50000c00

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	0008      	movs	r0, r1
 8001eae:	0011      	movs	r1, r2
 8001eb0:	1cbb      	adds	r3, r7, #2
 8001eb2:	1c02      	adds	r2, r0, #0
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	1c7b      	adds	r3, r7, #1
 8001eb8:	1c0a      	adds	r2, r1, #0
 8001eba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebc:	1c7b      	adds	r3, r7, #1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec4:	1cbb      	adds	r3, r7, #2
 8001ec6:	881a      	ldrh	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ece:	1cbb      	adds	r3, r7, #2
 8001ed0:	881a      	ldrh	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d11f      	bne.n	8001f44 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001f04:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	0013      	movs	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	189b      	adds	r3, r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4912      	ldr	r1, [pc, #72]	; (8001f5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f12:	0018      	movs	r0, r3
 8001f14:	f7fe f8f6 	bl	8000104 <__udivsi3>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f1e:	e008      	b.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e001      	b.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e009      	b.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d0ed      	beq.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b004      	add	sp, #16
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40007000 	.word	0x40007000
 8001f54:	fffff9ff 	.word	0xfffff9ff
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	000f4240 	.word	0x000f4240

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e304      	b.n	800257c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x1e>
 8001f7c:	e07c      	b.n	8002078 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7e:	4bc3      	ldr	r3, [pc, #780]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2238      	movs	r2, #56	; 0x38
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f88:	4bc0      	ldr	r3, [pc, #768]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	4013      	ands	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3e>
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x44>
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4bb9      	ldr	r3, [pc, #740]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	029b      	lsls	r3, r3, #10
 8001fac:	4013      	ands	r3, r2
 8001fae:	d062      	beq.n	8002076 <HAL_RCC_OscConfig+0x116>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d15e      	bne.n	8002076 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e2df      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	025b      	lsls	r3, r3, #9
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x78>
 8001fc8:	4bb0      	ldr	r3, [pc, #704]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4baf      	ldr	r3, [pc, #700]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	0249      	lsls	r1, r1, #9
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e020      	b.n	800201a <HAL_RCC_OscConfig+0xba>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	23a0      	movs	r3, #160	; 0xa0
 8001fde:	02db      	lsls	r3, r3, #11
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d10e      	bne.n	8002002 <HAL_RCC_OscConfig+0xa2>
 8001fe4:	4ba9      	ldr	r3, [pc, #676]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4ba8      	ldr	r3, [pc, #672]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	02c9      	lsls	r1, r1, #11
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	4ba6      	ldr	r3, [pc, #664]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4ba5      	ldr	r3, [pc, #660]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	0249      	lsls	r1, r1, #9
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e00b      	b.n	800201a <HAL_RCC_OscConfig+0xba>
 8002002:	4ba2      	ldr	r3, [pc, #648]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4ba1      	ldr	r3, [pc, #644]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002008:	49a1      	ldr	r1, [pc, #644]	; (8002290 <HAL_RCC_OscConfig+0x330>)
 800200a:	400a      	ands	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4b9f      	ldr	r3, [pc, #636]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b9e      	ldr	r3, [pc, #632]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002014:	499f      	ldr	r1, [pc, #636]	; (8002294 <HAL_RCC_OscConfig+0x334>)
 8002016:	400a      	ands	r2, r1
 8002018:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d014      	beq.n	800204c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7ff f8b9 	bl	8001198 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7ff f8b4 	bl	8001198 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e29e      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203e:	4b93      	ldr	r3, [pc, #588]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	4013      	ands	r3, r2
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xcc>
 800204a:	e015      	b.n	8002078 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f8a4 	bl	8001198 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002056:	f7ff f89f 	bl	8001198 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e289      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	4013      	ands	r3, r2
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0xf6>
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d100      	bne.n	8002084 <HAL_RCC_OscConfig+0x124>
 8002082:	e099      	b.n	80021b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002084:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2238      	movs	r2, #56	; 0x38
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208e:	4b7f      	ldr	r3, [pc, #508]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2203      	movs	r2, #3
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d102      	bne.n	80020a4 <HAL_RCC_OscConfig+0x144>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d002      	beq.n	80020aa <HAL_RCC_OscConfig+0x14a>
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d135      	bne.n	8002116 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020aa:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4013      	ands	r3, r2
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x162>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e25c      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b72      	ldr	r3, [pc, #456]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a74      	ldr	r2, [pc, #464]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	4b6e      	ldr	r3, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d112      	bne.n	8002104 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020de:	4b6b      	ldr	r3, [pc, #428]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6e      	ldr	r2, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x33c>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	0019      	movs	r1, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	4b67      	ldr	r3, [pc, #412]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80020f2:	4b66      	ldr	r3, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0adb      	lsrs	r3, r3, #11
 80020f8:	2207      	movs	r2, #7
 80020fa:	4013      	ands	r3, r2
 80020fc:	4a68      	ldr	r2, [pc, #416]	; (80022a0 <HAL_RCC_OscConfig+0x340>)
 80020fe:	40da      	lsrs	r2, r3
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <HAL_RCC_OscConfig+0x344>)
 8002102:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002104:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x348>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0018      	movs	r0, r3
 800210a:	f7fe ffeb 	bl	80010e4 <HAL_InitTick>
 800210e:	1e03      	subs	r3, r0, #0
 8002110:	d051      	beq.n	80021b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e232      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d030      	beq.n	8002180 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800211e:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5e      	ldr	r2, [pc, #376]	; (800229c <HAL_RCC_OscConfig+0x33c>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	4b57      	ldr	r3, [pc, #348]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002132:	4b56      	ldr	r3, [pc, #344]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b55      	ldr	r3, [pc, #340]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0049      	lsls	r1, r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff f82a 	bl	8001198 <HAL_GetTick>
 8002144:	0003      	movs	r3, r0
 8002146:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7ff f825 	bl	8001198 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e20f      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4013      	ands	r3, r2
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b48      	ldr	r3, [pc, #288]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a4a      	ldr	r2, [pc, #296]	; (8002298 <HAL_RCC_OscConfig+0x338>)
 800216e:	4013      	ands	r3, r2
 8002170:	0019      	movs	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	021a      	lsls	r2, r3, #8
 8002178:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	e01b      	b.n	80021b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002180:	4b42      	ldr	r3, [pc, #264]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002186:	4949      	ldr	r1, [pc, #292]	; (80022ac <HAL_RCC_OscConfig+0x34c>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f804 	bl	8001198 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7fe ffff 	bl	8001198 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1e9      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a8:	4b38      	ldr	r3, [pc, #224]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4013      	ands	r3, r2
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x236>
 80021b4:	e000      	b.n	80021b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2208      	movs	r2, #8
 80021be:	4013      	ands	r3, r2
 80021c0:	d047      	beq.n	8002252 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80021c2:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2238      	movs	r2, #56	; 0x38
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b18      	cmp	r3, #24
 80021cc:	d10a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	2202      	movs	r2, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d03c      	beq.n	8002252 <HAL_RCC_OscConfig+0x2f2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d138      	bne.n	8002252 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e1cb      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d019      	beq.n	8002220 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f0:	4b26      	ldr	r3, [pc, #152]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7fe ffce 	bl	8001198 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002202:	f7fe ffc9 	bl	8001198 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1b3      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	2202      	movs	r2, #2
 800221a:	4013      	ands	r3, r2
 800221c:	d0f1      	beq.n	8002202 <HAL_RCC_OscConfig+0x2a2>
 800221e:	e018      	b.n	8002252 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002226:	2101      	movs	r1, #1
 8002228:	438a      	bics	r2, r1
 800222a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7fe ffb4 	bl	8001198 <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe ffaf 	bl	8001198 <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e199      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224c:	2202      	movs	r2, #2
 800224e:	4013      	ands	r3, r2
 8002250:	d1f1      	bne.n	8002236 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2204      	movs	r2, #4
 8002258:	4013      	ands	r3, r2
 800225a:	d100      	bne.n	800225e <HAL_RCC_OscConfig+0x2fe>
 800225c:	e0c6      	b.n	80023ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	231f      	movs	r3, #31
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2238      	movs	r2, #56	; 0x38
 800226c:	4013      	ands	r3, r2
 800226e:	2b20      	cmp	r3, #32
 8002270:	d11e      	bne.n	80022b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x32c>)
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	2202      	movs	r2, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d100      	bne.n	800227e <HAL_RCC_OscConfig+0x31e>
 800227c:	e0b6      	b.n	80023ec <HAL_RCC_OscConfig+0x48c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d000      	beq.n	8002288 <HAL_RCC_OscConfig+0x328>
 8002286:	e0b1      	b.n	80023ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e177      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
 800228c:	40021000 	.word	0x40021000
 8002290:	fffeffff 	.word	0xfffeffff
 8002294:	fffbffff 	.word	0xfffbffff
 8002298:	ffff80ff 	.word	0xffff80ff
 800229c:	ffffc7ff 	.word	0xffffc7ff
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	20000004 	.word	0x20000004
 80022a8:	20000008 	.word	0x20000008
 80022ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022b0:	4bb4      	ldr	r3, [pc, #720]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80022b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	055b      	lsls	r3, r3, #21
 80022b8:	4013      	ands	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x360>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x362>
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d011      	beq.n	80022ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4baf      	ldr	r3, [pc, #700]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80022c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ca:	4bae      	ldr	r3, [pc, #696]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80022cc:	2180      	movs	r1, #128	; 0x80
 80022ce:	0549      	lsls	r1, r1, #21
 80022d0:	430a      	orrs	r2, r1
 80022d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80022d4:	4bab      	ldr	r3, [pc, #684]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80022d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	055b      	lsls	r3, r3, #21
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80022e2:	231f      	movs	r3, #31
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ea:	4ba7      	ldr	r3, [pc, #668]	; (8002588 <HAL_RCC_OscConfig+0x628>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f6:	4ba4      	ldr	r3, [pc, #656]	; (8002588 <HAL_RCC_OscConfig+0x628>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4ba3      	ldr	r3, [pc, #652]	; (8002588 <HAL_RCC_OscConfig+0x628>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0049      	lsls	r1, r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002304:	f7fe ff48 	bl	8001198 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230e:	f7fe ff43 	bl	8001198 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e12d      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002320:	4b99      	ldr	r3, [pc, #612]	; (8002588 <HAL_RCC_OscConfig+0x628>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x3e2>
 8002334:	4b93      	ldr	r3, [pc, #588]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002338:	4b92      	ldr	r3, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002340:	e01c      	b.n	800237c <HAL_RCC_OscConfig+0x41c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b05      	cmp	r3, #5
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x404>
 800234a:	4b8e      	ldr	r3, [pc, #568]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 800234c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800234e:	4b8d      	ldr	r3, [pc, #564]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002350:	2104      	movs	r1, #4
 8002352:	430a      	orrs	r2, r1
 8002354:	65da      	str	r2, [r3, #92]	; 0x5c
 8002356:	4b8b      	ldr	r3, [pc, #556]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235a:	4b8a      	ldr	r3, [pc, #552]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 800235c:	2101      	movs	r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	65da      	str	r2, [r3, #92]	; 0x5c
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x41c>
 8002364:	4b87      	ldr	r3, [pc, #540]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002368:	4b86      	ldr	r3, [pc, #536]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 800236a:	2101      	movs	r1, #1
 800236c:	438a      	bics	r2, r1
 800236e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002370:	4b84      	ldr	r3, [pc, #528]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002374:	4b83      	ldr	r3, [pc, #524]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002376:	2104      	movs	r1, #4
 8002378:	438a      	bics	r2, r1
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d014      	beq.n	80023ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe ff08 	bl	8001198 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238c:	e009      	b.n	80023a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe ff03 	bl	8001198 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	4a7c      	ldr	r2, [pc, #496]	; (800258c <HAL_RCC_OscConfig+0x62c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0ec      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	4b78      	ldr	r3, [pc, #480]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2202      	movs	r2, #2
 80023a8:	4013      	ands	r3, r2
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x42e>
 80023ac:	e013      	b.n	80023d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7fe fef3 	bl	8001198 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b6:	e009      	b.n	80023cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b8:	f7fe feee 	bl	8001198 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_RCC_OscConfig+0x62c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0d7      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023cc:	4b6d      	ldr	r3, [pc, #436]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023d6:	231f      	movs	r3, #31
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80023e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023e4:	4b67      	ldr	r3, [pc, #412]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80023e6:	496a      	ldr	r1, [pc, #424]	; (8002590 <HAL_RCC_OscConfig+0x630>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d100      	bne.n	80023f6 <HAL_RCC_OscConfig+0x496>
 80023f4:	e0c1      	b.n	800257a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f6:	4b63      	ldr	r3, [pc, #396]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2238      	movs	r2, #56	; 0x38
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d100      	bne.n	8002404 <HAL_RCC_OscConfig+0x4a4>
 8002402:	e081      	b.n	8002508 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d156      	bne.n	80024ba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002412:	4960      	ldr	r1, [pc, #384]	; (8002594 <HAL_RCC_OscConfig+0x634>)
 8002414:	400a      	ands	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe febe 	bl	8001198 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe feb9 	bl	8001198 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e0a3      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	049b      	lsls	r3, r3, #18
 800243c:	4013      	ands	r3, r2
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a54      	ldr	r2, [pc, #336]	; (8002598 <HAL_RCC_OscConfig+0x638>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246c:	431a      	orrs	r2, r3
 800246e:	4b45      	ldr	r3, [pc, #276]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002470:	430a      	orrs	r2, r1
 8002472:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	0449      	lsls	r1, r1, #17
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002482:	4b40      	ldr	r3, [pc, #256]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	0549      	lsls	r1, r1, #21
 800248c:	430a      	orrs	r2, r1
 800248e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fe82 	bl	8001198 <HAL_GetTick>
 8002494:	0003      	movs	r3, r0
 8002496:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe fe7d 	bl	8001198 <HAL_GetTick>
 800249e:	0002      	movs	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e067      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ac:	4b35      	ldr	r3, [pc, #212]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	049b      	lsls	r3, r3, #18
 80024b4:	4013      	ands	r3, r2
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x53a>
 80024b8:	e05f      	b.n	800257a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80024c0:	4934      	ldr	r1, [pc, #208]	; (8002594 <HAL_RCC_OscConfig+0x634>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80024cc:	2103      	movs	r1, #3
 80024ce:	438a      	bics	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80024d2:	4b2c      	ldr	r3, [pc, #176]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80024d8:	4930      	ldr	r1, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x63c>)
 80024da:	400a      	ands	r2, r1
 80024dc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fe5b 	bl	8001198 <HAL_GetTick>
 80024e2:	0003      	movs	r3, r0
 80024e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fe56 	bl	8001198 <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e040      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	049b      	lsls	r3, r3, #18
 8002502:	4013      	ands	r3, r2
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x588>
 8002506:	e038      	b.n	800257a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e033      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_OscConfig+0x624>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2203      	movs	r2, #3
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	d126      	bne.n	8002576 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2270      	movs	r2, #112	; 0x70
 800252c:	401a      	ands	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d11f      	bne.n	8002576 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	23fe      	movs	r3, #254	; 0xfe
 800253a:	01db      	lsls	r3, r3, #7
 800253c:	401a      	ands	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d116      	bne.n	8002576 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	23f8      	movs	r3, #248	; 0xf8
 800254c:	039b      	lsls	r3, r3, #14
 800254e:	401a      	ands	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d10e      	bne.n	8002576 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	23e0      	movs	r3, #224	; 0xe0
 800255c:	051b      	lsls	r3, r3, #20
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d106      	bne.n	8002576 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	0f5b      	lsrs	r3, r3, #29
 800256c:	075a      	lsls	r2, r3, #29
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b008      	add	sp, #32
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	00001388 	.word	0x00001388
 8002590:	efffffff 	.word	0xefffffff
 8002594:	feffffff 	.word	0xfeffffff
 8002598:	11c1808c 	.word	0x11c1808c
 800259c:	eefeffff 	.word	0xeefeffff

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0e9      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2207      	movs	r2, #7
 80025ba:	4013      	ands	r3, r2
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d91e      	bls.n	8002600 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2207      	movs	r2, #7
 80025c8:	4393      	bics	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	4b70      	ldr	r3, [pc, #448]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025d4:	f7fe fde0 	bl	8001198 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025dc:	e009      	b.n	80025f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025de:	f7fe fddb 	bl	8001198 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0ca      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2207      	movs	r2, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d015      	beq.n	8002636 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2204      	movs	r2, #4
 8002610:	4013      	ands	r3, r2
 8002612:	d006      	beq.n	8002622 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002614:	4b60      	ldr	r3, [pc, #384]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800261a:	21e0      	movs	r1, #224	; 0xe0
 800261c:	01c9      	lsls	r1, r1, #7
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4a5d      	ldr	r2, [pc, #372]	; (800279c <HAL_RCC_ClockConfig+0x1fc>)
 8002628:	4013      	ands	r3, r2
 800262a:	0019      	movs	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d057      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002648:	4b53      	ldr	r3, [pc, #332]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	4013      	ands	r3, r2
 8002652:	d12b      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e097      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d107      	bne.n	8002670 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002660:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	049b      	lsls	r3, r3, #18
 8002668:	4013      	ands	r3, r2
 800266a:	d11f      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e08b      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002678:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4013      	ands	r3, r2
 8002682:	d113      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e07f      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d106      	bne.n	800269e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002694:	2202      	movs	r2, #2
 8002696:	4013      	ands	r3, r2
 8002698:	d108      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e074      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269e:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e06d      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ac:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2207      	movs	r2, #7
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe fd6a 	bl	8001198 <HAL_GetTick>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c8:	e009      	b.n	80026de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ca:	f7fe fd65 	bl	8001198 <HAL_GetTick>
 80026ce:	0002      	movs	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e054      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2238      	movs	r2, #56	; 0x38
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1ec      	bne.n	80026ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2207      	movs	r2, #7
 80026f6:	4013      	ands	r3, r2
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d21e      	bcs.n	800273c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2207      	movs	r2, #7
 8002704:	4393      	bics	r3, r2
 8002706:	0019      	movs	r1, r3
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002710:	f7fe fd42 	bl	8001198 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002718:	e009      	b.n	800272e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271a:	f7fe fd3d 	bl	8001198 <HAL_GetTick>
 800271e:	0002      	movs	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_RCC_ClockConfig+0x1f4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e02c      	b.n	8002788 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2207      	movs	r2, #7
 8002734:	4013      	ands	r3, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2204      	movs	r2, #4
 8002742:	4013      	ands	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <HAL_RCC_ClockConfig+0x200>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002756:	430a      	orrs	r2, r1
 8002758:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800275a:	f000 f829 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 800275e:	0001      	movs	r1, r0
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <HAL_RCC_ClockConfig+0x1f8>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	220f      	movs	r2, #15
 8002768:	401a      	ands	r2, r3
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x204>)
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	58d3      	ldr	r3, [r2, r3]
 8002770:	221f      	movs	r2, #31
 8002772:	4013      	ands	r3, r2
 8002774:	000a      	movs	r2, r1
 8002776:	40da      	lsrs	r2, r3
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x208>)
 800277a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x20c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f7fe fcaf 	bl	80010e4 <HAL_InitTick>
 8002786:	0003      	movs	r3, r0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40022000 	.word	0x40022000
 8002794:	00001388 	.word	0x00001388
 8002798:	40021000 	.word	0x40021000
 800279c:	fffff0ff 	.word	0xfffff0ff
 80027a0:	ffff8fff 	.word	0xffff8fff
 80027a4:	08004570 	.word	0x08004570
 80027a8:	20000004 	.word	0x20000004
 80027ac:	20000008 	.word	0x20000008

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027b6:	4b3c      	ldr	r3, [pc, #240]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2238      	movs	r2, #56	; 0x38
 80027bc:	4013      	ands	r3, r2
 80027be:	d10f      	bne.n	80027e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0adb      	lsrs	r3, r3, #11
 80027c6:	2207      	movs	r2, #7
 80027c8:	4013      	ands	r3, r2
 80027ca:	2201      	movs	r2, #1
 80027cc:	409a      	lsls	r2, r3
 80027ce:	0013      	movs	r3, r2
 80027d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	4835      	ldr	r0, [pc, #212]	; (80028ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80027d6:	f7fd fc95 	bl	8000104 <__udivsi3>
 80027da:	0003      	movs	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	e05d      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2238      	movs	r2, #56	; 0x38
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d102      	bne.n	80027f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027ec:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e054      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2238      	movs	r2, #56	; 0x38
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d138      	bne.n	8002870 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2203      	movs	r2, #3
 8002804:	4013      	ands	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	2207      	movs	r2, #7
 8002810:	4013      	ands	r3, r2
 8002812:	3301      	adds	r3, #1
 8002814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d10d      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	4824      	ldr	r0, [pc, #144]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002820:	f7fd fc70 	bl	8000104 <__udivsi3>
 8002824:	0003      	movs	r3, r0
 8002826:	0019      	movs	r1, r3
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	227f      	movs	r2, #127	; 0x7f
 8002830:	4013      	ands	r3, r2
 8002832:	434b      	muls	r3, r1
 8002834:	617b      	str	r3, [r7, #20]
        break;
 8002836:	e00d      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	481c      	ldr	r0, [pc, #112]	; (80028ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800283c:	f7fd fc62 	bl	8000104 <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	0019      	movs	r1, r3
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	227f      	movs	r2, #127	; 0x7f
 800284c:	4013      	ands	r3, r2
 800284e:	434b      	muls	r3, r1
 8002850:	617b      	str	r3, [r7, #20]
        break;
 8002852:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002854:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0f5b      	lsrs	r3, r3, #29
 800285a:	2207      	movs	r2, #7
 800285c:	4013      	ands	r3, r2
 800285e:	3301      	adds	r3, #1
 8002860:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f7fd fc4d 	bl	8000104 <__udivsi3>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e015      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002870:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2238      	movs	r2, #56	; 0x38
 8002876:	4013      	ands	r3, r2
 8002878:	2b20      	cmp	r3, #32
 800287a:	d103      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	e00b      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2238      	movs	r2, #56	; 0x38
 800288a:	4013      	ands	r3, r2
 800288c:	2b18      	cmp	r3, #24
 800288e:	d103      	bne.n	8002898 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002890:	23fa      	movs	r3, #250	; 0xfa
 8002892:	01db      	lsls	r3, r3, #7
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	e001      	b.n	800289c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800289c:	693b      	ldr	r3, [r7, #16]
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b006      	add	sp, #24
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	007a1200 	.word	0x007a1200

080028b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80028bc:	2313      	movs	r3, #19
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c4:	2312      	movs	r3, #18
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	029b      	lsls	r3, r3, #10
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80028d8:	e0a4      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2311      	movs	r3, #17
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e2:	4bc3      	ldr	r3, [pc, #780]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	055b      	lsls	r3, r3, #21
 80028ea:	4013      	ands	r3, r2
 80028ec:	d111      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ee:	4bc0      	ldr	r3, [pc, #768]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f2:	4bbf      	ldr	r3, [pc, #764]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	0549      	lsls	r1, r1, #21
 80028f8:	430a      	orrs	r2, r1
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80028fc:	4bbc      	ldr	r3, [pc, #752]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	055b      	lsls	r3, r3, #21
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290a:	2311      	movs	r3, #17
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002912:	4bb8      	ldr	r3, [pc, #736]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4bb7      	ldr	r3, [pc, #732]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002918:	2180      	movs	r1, #128	; 0x80
 800291a:	0049      	lsls	r1, r1, #1
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002920:	f7fe fc3a 	bl	8001198 <HAL_GetTick>
 8002924:	0003      	movs	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002928:	e00b      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe fc35 	bl	8001198 <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d904      	bls.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002938:	2313      	movs	r3, #19
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	2203      	movs	r2, #3
 800293e:	701a      	strb	r2, [r3, #0]
        break;
 8002940:	e005      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002942:	4bac      	ldr	r3, [pc, #688]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4013      	ands	r3, r2
 800294c:	d0ed      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800294e:	2313      	movs	r3, #19
 8002950:	18fb      	adds	r3, r7, r3
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d154      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002958:	4ba5      	ldr	r3, [pc, #660]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800295a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800295c:	23c0      	movs	r3, #192	; 0xc0
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4013      	ands	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d019      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xea>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	429a      	cmp	r2, r3
 8002972:	d014      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002974:	4b9e      	ldr	r3, [pc, #632]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	4a9f      	ldr	r2, [pc, #636]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800297a:	4013      	ands	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800297e:	4b9c      	ldr	r3, [pc, #624]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002982:	4b9b      	ldr	r3, [pc, #620]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0249      	lsls	r1, r1, #9
 8002988:	430a      	orrs	r2, r1
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800298c:	4b98      	ldr	r3, [pc, #608]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800298e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002990:	4b97      	ldr	r3, [pc, #604]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002992:	499a      	ldr	r1, [pc, #616]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002994:	400a      	ands	r2, r1
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002998:	4b95      	ldr	r3, [pc, #596]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2201      	movs	r2, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	d016      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe fbf7 	bl	8001198 <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ae:	e00c      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe fbf2 	bl	8001198 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	4a91      	ldr	r2, [pc, #580]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d904      	bls.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80029c0:	2313      	movs	r3, #19
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2203      	movs	r2, #3
 80029c6:	701a      	strb	r2, [r3, #0]
            break;
 80029c8:	e004      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ca:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	2202      	movs	r2, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	d0ed      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80029d4:	2313      	movs	r3, #19
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	4b84      	ldr	r3, [pc, #528]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	4a85      	ldr	r2, [pc, #532]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ec:	4b80      	ldr	r3, [pc, #512]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80029f2:	e00c      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029f4:	2312      	movs	r3, #18
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	2213      	movs	r2, #19
 80029fa:	18ba      	adds	r2, r7, r2
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e005      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a02:	2312      	movs	r3, #18
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2213      	movs	r2, #19
 8002a08:	18ba      	adds	r2, r7, r2
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a0e:	2311      	movs	r3, #17
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a18:	4b75      	ldr	r3, [pc, #468]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a1c:	4b74      	ldr	r3, [pc, #464]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a1e:	4979      	ldr	r1, [pc, #484]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a2e:	4b70      	ldr	r3, [pc, #448]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	2203      	movs	r2, #3
 8002a34:	4393      	bics	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4b6c      	ldr	r3, [pc, #432]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2202      	movs	r2, #2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a50:	220c      	movs	r2, #12
 8002a52:	4393      	bics	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	4b65      	ldr	r3, [pc, #404]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	4013      	ands	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a6a:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	0019      	movs	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	4b5d      	ldr	r3, [pc, #372]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8a:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	4a5f      	ldr	r2, [pc, #380]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	4b55      	ldr	r3, [pc, #340]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aaa:	4b51      	ldr	r3, [pc, #324]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ac8:	4b49      	ldr	r3, [pc, #292]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	4a51      	ldr	r2, [pc, #324]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	4b46      	ldr	r3, [pc, #280]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	01db      	lsls	r3, r3, #7
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae8:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	0899      	lsrs	r1, r3, #2
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1a      	ldr	r2, [r3, #32]
 8002af4:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	05db      	lsls	r3, r3, #23
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d106      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0249      	lsls	r1, r1, #9
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	031b      	lsls	r3, r3, #12
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b20:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	4393      	bics	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	039b      	lsls	r3, r3, #14
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d016      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b40:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	0019      	movs	r1, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4e:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b50:	430a      	orrs	r2, r1
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	03db      	lsls	r3, r3, #15
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b60:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b66:	2180      	movs	r1, #128	; 0x80
 8002b68:	0449      	lsls	r1, r1, #17
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	03db      	lsls	r3, r3, #15
 8002b76:	4013      	ands	r3, r2
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	045b      	lsls	r3, r3, #17
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d106      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0449      	lsls	r1, r1, #17
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d016      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bb4:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb8:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	01db      	lsls	r3, r3, #7
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	0249      	lsls	r1, r1, #9
 8002bde:	430a      	orrs	r2, r1
 8002be0:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002be2:	2312      	movs	r3, #18
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	781b      	ldrb	r3, [r3, #0]
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b006      	add	sp, #24
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	fffffcff 	.word	0xfffffcff
 8002bfc:	fffeffff 	.word	0xfffeffff
 8002c00:	00001388 	.word	0x00001388
 8002c04:	efffffff 	.word	0xefffffff
 8002c08:	fffff3ff 	.word	0xfffff3ff
 8002c0c:	fff3ffff 	.word	0xfff3ffff
 8002c10:	ffcfffff 	.word	0xffcfffff
 8002c14:	ffffcfff 	.word	0xffffcfff
 8002c18:	ffbfffff 	.word	0xffbfffff
 8002c1c:	feffffff 	.word	0xfeffffff
 8002c20:	ffff3fff 	.word	0xffff3fff

08002c24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c24:	b5b0      	push	{r4, r5, r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c2c:	230f      	movs	r3, #15
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d100      	bne.n	8002c3c <HAL_RTC_Init+0x18>
 8002c3a:	e07f      	b.n	8002d3c <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2229      	movs	r2, #41	; 0x29
 8002c40:	5c9b      	ldrb	r3, [r3, r2]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2228      	movs	r2, #40	; 0x28
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2288      	movs	r2, #136	; 0x88
 8002c54:	0212      	lsls	r2, r2, #8
 8002c56:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7fd ff46 	bl	8000aec <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2229      	movs	r2, #41	; 0x29
 8002c64:	2102      	movs	r1, #2
 8002c66:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	22ca      	movs	r2, #202	; 0xca
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2253      	movs	r2, #83	; 0x53
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c78:	250f      	movs	r5, #15
 8002c7a:	197c      	adds	r4, r7, r5
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 f9c7 	bl	8003012 <RTC_EnterInitMode>
 8002c84:	0003      	movs	r3, r0
 8002c86:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002c88:	197b      	adds	r3, r7, r5
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d148      	bne.n	8002d22 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	492c      	ldr	r1, [pc, #176]	; (8002d4c <HAL_RTC_Init+0x128>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6999      	ldr	r1, [r3, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6912      	ldr	r2, [r2, #16]
 8002cc6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6919      	ldr	r1, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	041a      	lsls	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002cdc:	250f      	movs	r5, #15
 8002cde:	197c      	adds	r4, r7, r5
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f9d8 	bl	8003098 <RTC_ExitInitMode>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8002cec:	197b      	adds	r3, r7, r5
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d116      	bne.n	8002d22 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	00d2      	lsls	r2, r2, #3
 8002d00:	08d2      	lsrs	r2, r2, #3
 8002d02:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6999      	ldr	r1, [r3, #24]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002d2a:	230f      	movs	r3, #15
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2229      	movs	r2, #41	; 0x29
 8002d38:	2101      	movs	r1, #1
 8002d3a:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	fb8fffbf 	.word	0xfb8fffbf

08002d50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2228      	movs	r2, #40	; 0x28
 8002d60:	5c9b      	ldrb	r3, [r3, r2]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_RTC_SetTime+0x1a>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e092      	b.n	8002e90 <HAL_RTC_SetTime+0x140>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2228      	movs	r2, #40	; 0x28
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2229      	movs	r2, #41	; 0x29
 8002d76:	2102      	movs	r1, #2
 8002d78:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	22ca      	movs	r2, #202	; 0xca
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2253      	movs	r2, #83	; 0x53
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d8a:	2513      	movs	r5, #19
 8002d8c:	197c      	adds	r4, r7, r5
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f93e 	bl	8003012 <RTC_EnterInitMode>
 8002d96:	0003      	movs	r3, r0
 8002d98:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002d9a:	197b      	adds	r3, r7, r5
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d162      	bne.n	8002e68 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d125      	bne.n	8002df4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	4013      	ands	r3, r2
 8002db2:	d102      	bne.n	8002dba <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f9b0 	bl	8003124 <RTC_ByteToBcd2>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 f9a9 	bl	8003124 <RTC_ByteToBcd2>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dd6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	789b      	ldrb	r3, [r3, #2]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 f9a1 	bl	8003124 <RTC_ByteToBcd2>
 8002de2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002de4:	0022      	movs	r2, r4
 8002de6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	78db      	ldrb	r3, [r3, #3]
 8002dec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e017      	b.n	8002e24 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d102      	bne.n	8002e06 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2200      	movs	r2, #0
 8002e04:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e12:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e18:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	78db      	ldrb	r3, [r3, #3]
 8002e1e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	491b      	ldr	r1, [pc, #108]	; (8002e98 <HAL_RTC_SetTime+0x148>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4918      	ldr	r1, [pc, #96]	; (8002e9c <HAL_RTC_SetTime+0x14c>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6999      	ldr	r1, [r3, #24]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e58:	2313      	movs	r3, #19
 8002e5a:	18fc      	adds	r4, r7, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 f91a 	bl	8003098 <RTC_ExitInitMode>
 8002e64:	0003      	movs	r3, r0
 8002e66:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	22ff      	movs	r2, #255	; 0xff
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002e70:	2313      	movs	r3, #19
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2229      	movs	r2, #41	; 0x29
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2228      	movs	r2, #40	; 0x28
 8002e86:	2100      	movs	r1, #0
 8002e88:	5499      	strb	r1, [r3, r2]

  return status;
 8002e8a:	2313      	movs	r3, #19
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	781b      	ldrb	r3, [r3, #0]
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b006      	add	sp, #24
 8002e96:	bdb0      	pop	{r4, r5, r7, pc}
 8002e98:	007f7f7f 	.word	0x007f7f7f
 8002e9c:	fffbffff 	.word	0xfffbffff

08002ea0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2228      	movs	r2, #40	; 0x28
 8002eb0:	5c9b      	ldrb	r3, [r3, r2]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_RTC_SetDate+0x1a>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e07e      	b.n	8002fb8 <HAL_RTC_SetDate+0x118>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2228      	movs	r2, #40	; 0x28
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2229      	movs	r2, #41	; 0x29
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10e      	bne.n	8002eee <HAL_RTC_SetDate+0x4e>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d008      	beq.n	8002eee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	785b      	ldrb	r3, [r3, #1]
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	4393      	bics	r3, r2
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	330a      	adds	r3, #10
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d11c      	bne.n	8002f2e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	78db      	ldrb	r3, [r3, #3]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 f913 	bl	8003124 <RTC_ByteToBcd2>
 8002efe:	0003      	movs	r3, r0
 8002f00:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 f90c 	bl	8003124 <RTC_ByteToBcd2>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f10:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	789b      	ldrb	r3, [r3, #2]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 f904 	bl	8003124 <RTC_ByteToBcd2>
 8002f1c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002f1e:	0022      	movs	r2, r4
 8002f20:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e00e      	b.n	8002f4c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	78db      	ldrb	r3, [r3, #3]
 8002f32:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	785b      	ldrb	r3, [r3, #1]
 8002f38:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f3a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002f40:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	22ca      	movs	r2, #202	; 0xca
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2253      	movs	r2, #83	; 0x53
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f5c:	2513      	movs	r5, #19
 8002f5e:	197c      	adds	r4, r7, r5
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f855 	bl	8003012 <RTC_EnterInitMode>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f6c:	197b      	adds	r3, r7, r5
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10d      	bne.n	8002f90 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4911      	ldr	r1, [pc, #68]	; (8002fc0 <HAL_RTC_SetDate+0x120>)
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f80:	2313      	movs	r3, #19
 8002f82:	18fc      	adds	r4, r7, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f886 	bl	8003098 <RTC_ExitInitMode>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	22ff      	movs	r2, #255	; 0xff
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002f98:	2313      	movs	r3, #19
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d103      	bne.n	8002faa <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2229      	movs	r2, #41	; 0x29
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2228      	movs	r2, #40	; 0x28
 8002fae:	2100      	movs	r1, #0
 8002fb0:	5499      	strb	r1, [r3, r2]

  return status;
 8002fb2:	2313      	movs	r3, #19
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	781b      	ldrb	r3, [r3, #0]
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc0:	00ffff3f 	.word	0x00ffff3f

08002fc4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	21a0      	movs	r1, #160	; 0xa0
 8002fd8:	438a      	bics	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002fdc:	f7fe f8dc 	bl	8001198 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fe6:	f7fe f8d7 	bl	8001198 <HAL_GetTick>
 8002fea:	0002      	movs	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad2      	subs	r2, r2, r3
 8002ff0:	23fa      	movs	r3, #250	; 0xfa
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d901      	bls.n	8002ffc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e006      	b.n	800300a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	4013      	ands	r3, r2
 8003006:	d0ee      	beq.n	8002fe6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b004      	add	sp, #16
 8003010:	bd80      	pop	{r7, pc}

08003012 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800301a:	230f      	movs	r3, #15
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2240      	movs	r2, #64	; 0x40
 800302a:	4013      	ands	r3, r2
 800302c:	d12d      	bne.n	800308a <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	430a      	orrs	r2, r1
 800303c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800303e:	f7fe f8ab 	bl	8001198 <HAL_GetTick>
 8003042:	0003      	movs	r3, r0
 8003044:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003046:	e015      	b.n	8003074 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003048:	f7fe f8a6 	bl	8001198 <HAL_GetTick>
 800304c:	0002      	movs	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad2      	subs	r2, r2, r3
 8003052:	210f      	movs	r1, #15
 8003054:	187b      	adds	r3, r7, r1
 8003056:	1879      	adds	r1, r7, r1
 8003058:	7809      	ldrb	r1, [r1, #0]
 800305a:	7019      	strb	r1, [r3, #0]
 800305c:	23fa      	movs	r3, #250	; 0xfa
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	429a      	cmp	r2, r3
 8003062:	d907      	bls.n	8003074 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8003064:	230f      	movs	r3, #15
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2203      	movs	r2, #3
 800306a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2229      	movs	r2, #41	; 0x29
 8003070:	2103      	movs	r1, #3
 8003072:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	4013      	ands	r3, r2
 800307e:	d104      	bne.n	800308a <RTC_EnterInitMode+0x78>
 8003080:	230f      	movs	r3, #15
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d1de      	bne.n	8003048 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800308a:	230f      	movs	r3, #15
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	781b      	ldrb	r3, [r3, #0]
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b004      	add	sp, #16
 8003096:	bd80      	pop	{r7, pc}

08003098 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a0:	230f      	movs	r3, #15
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <RTC_ExitInitMode+0x88>)
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <RTC_ExitInitMode+0x88>)
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	438a      	bics	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <RTC_ExitInitMode+0x88>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2220      	movs	r2, #32
 80030ba:	4013      	ands	r3, r2
 80030bc:	d10e      	bne.n	80030dc <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff ff7f 	bl	8002fc4 <HAL_RTC_WaitForSynchro>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d022      	beq.n	8003110 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2229      	movs	r2, #41	; 0x29
 80030ce:	2103      	movs	r1, #3
 80030d0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80030d2:	230f      	movs	r3, #15
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	2203      	movs	r2, #3
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e019      	b.n	8003110 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80030dc:	4b10      	ldr	r3, [pc, #64]	; (8003120 <RTC_ExitInitMode+0x88>)
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <RTC_ExitInitMode+0x88>)
 80030e2:	2120      	movs	r1, #32
 80030e4:	438a      	bics	r2, r1
 80030e6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7ff ff6a 	bl	8002fc4 <HAL_RTC_WaitForSynchro>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d007      	beq.n	8003104 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2229      	movs	r2, #41	; 0x29
 80030f8:	2103      	movs	r1, #3
 80030fa:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2203      	movs	r2, #3
 8003102:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <RTC_ExitInitMode+0x88>)
 8003106:	699a      	ldr	r2, [r3, #24]
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <RTC_ExitInitMode+0x88>)
 800310a:	2120      	movs	r1, #32
 800310c:	430a      	orrs	r2, r1
 800310e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003110:	230f      	movs	r3, #15
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	781b      	ldrb	r3, [r3, #0]
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b004      	add	sp, #16
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	40002800 	.word	0x40002800

08003124 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	0002      	movs	r2, r0
 800312c:	1dfb      	adds	r3, r7, #7
 800312e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003134:	230b      	movs	r3, #11
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	1dfa      	adds	r2, r7, #7
 800313a:	7812      	ldrb	r2, [r2, #0]
 800313c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800313e:	e008      	b.n	8003152 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3301      	adds	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003146:	220b      	movs	r2, #11
 8003148:	18bb      	adds	r3, r7, r2
 800314a:	18ba      	adds	r2, r7, r2
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	3a0a      	subs	r2, #10
 8003150:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003152:	230b      	movs	r3, #11
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b09      	cmp	r3, #9
 800315a:	d8f1      	bhi.n	8003140 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	b2da      	uxtb	r2, r3
 8003164:	230b      	movs	r3, #11
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	b2db      	uxtb	r3, r3
}
 800316e:	0018      	movs	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	b004      	add	sp, #16
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e01e      	b.n	80031c6 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	223d      	movs	r2, #61	; 0x3d
 800318c:	5c9b      	ldrb	r3, [r3, r2]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	223c      	movs	r2, #60	; 0x3c
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f7fd fe9e 	bl	8000ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	223d      	movs	r2, #61	; 0x3d
 80031a8:	2102      	movs	r1, #2
 80031aa:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	0019      	movs	r1, r3
 80031b6:	0010      	movs	r0, r2
 80031b8:	f000 fc76 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	223d      	movs	r2, #61	; 0x3d
 80031c0:	2101      	movs	r1, #1
 80031c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b002      	add	sp, #8
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <HAL_TIM_Base_Start_IT+0x50>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d00c      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x44>
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	025b      	lsls	r3, r3, #9
 8003200:	429a      	cmp	r2, r3
 8003202:	d007      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2101      	movs	r1, #1
 8003210:	430a      	orrs	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bd80      	pop	{r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	00010007 	.word	0x00010007

08003224 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e01e      	b.n	8003274 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	223d      	movs	r2, #61	; 0x3d
 800323a:	5c9b      	ldrb	r3, [r3, r2]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	223c      	movs	r2, #60	; 0x3c
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f000 f815 	bl	800327c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223d      	movs	r2, #61	; 0x3d
 8003256:	2102      	movs	r1, #2
 8003258:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	0019      	movs	r1, r3
 8003264:	0010      	movs	r0, r2
 8003266:	f000 fc1f 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	223d      	movs	r2, #61	; 0x3d
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	2201      	movs	r2, #1
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 ffe2 	bl	8004268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <HAL_TIM_PWM_Start+0x94>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00e      	beq.n	80032cc <HAL_TIM_PWM_Start+0x40>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_TIM_PWM_Start+0x98>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d009      	beq.n	80032cc <HAL_TIM_PWM_Start+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <HAL_TIM_PWM_Start+0x9c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d004      	beq.n	80032cc <HAL_TIM_PWM_Start+0x40>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_TIM_PWM_Start+0xa0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_TIM_PWM_Start+0x44>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <HAL_TIM_PWM_Start+0x46>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	0209      	lsls	r1, r1, #8
 80032e4:	430a      	orrs	r2, r1
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_TIM_PWM_Start+0xa4>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d00c      	beq.n	8003314 <HAL_TIM_PWM_Start+0x88>
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	025b      	lsls	r3, r3, #9
 8003300:	429a      	cmp	r2, r3
 8003302:	d007      	beq.n	8003314 <HAL_TIM_PWM_Start+0x88>
  {
    __HAL_TIM_ENABLE(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2101      	movs	r1, #1
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	40012c00 	.word	0x40012c00
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	40014800 	.word	0x40014800
 8003330:	00010007 	.word	0x00010007

08003334 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	0018      	movs	r0, r3
 8003348:	f000 ff8e 	bl	8004268 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a23      	ldr	r2, [pc, #140]	; (80033e0 <HAL_TIM_PWM_Stop+0xac>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_TIM_PWM_Stop+0x40>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_TIM_PWM_Stop+0xb0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_TIM_PWM_Stop+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <HAL_TIM_PWM_Stop+0xb4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_PWM_Stop+0x40>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1f      	ldr	r2, [pc, #124]	; (80033ec <HAL_TIM_PWM_Stop+0xb8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_TIM_PWM_Stop+0x44>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_TIM_PWM_Stop+0x46>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_TIM_PWM_Stop+0xbc>)
 8003386:	4013      	ands	r3, r2
 8003388:	d10d      	bne.n	80033a6 <HAL_TIM_PWM_Stop+0x72>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_TIM_PWM_Stop+0xc0>)
 8003392:	4013      	ands	r3, r2
 8003394:	d107      	bne.n	80033a6 <HAL_TIM_PWM_Stop+0x72>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4915      	ldr	r1, [pc, #84]	; (80033f8 <HAL_TIM_PWM_Stop+0xc4>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_TIM_PWM_Stop+0xbc>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	d10d      	bne.n	80033ce <HAL_TIM_PWM_Stop+0x9a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a0e      	ldr	r2, [pc, #56]	; (80033f4 <HAL_TIM_PWM_Stop+0xc0>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	d107      	bne.n	80033ce <HAL_TIM_PWM_Stop+0x9a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	438a      	bics	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223d      	movs	r2, #61	; 0x3d
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40014000 	.word	0x40014000
 80033e8:	40014400 	.word	0x40014400
 80033ec:	40014800 	.word	0x40014800
 80033f0:	00001111 	.word	0x00001111
 80033f4:	00000444 	.word	0x00000444
 80033f8:	ffff7fff 	.word	0xffff7fff

080033fc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e02e      	b.n	800346e <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	223d      	movs	r2, #61	; 0x3d
 8003414:	5c9b      	ldrb	r3, [r3, r2]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	223c      	movs	r2, #60	; 0x3c
 8003420:	2100      	movs	r1, #0
 8003422:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 f825 	bl	8003476 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	223d      	movs	r2, #61	; 0x3d
 8003430:	2102      	movs	r1, #2
 8003432:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	0019      	movs	r1, r3
 800343e:	0010      	movs	r0, r2
 8003440:	f000 fb32 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2108      	movs	r1, #8
 8003450:	438a      	bics	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	223d      	movs	r2, #61	; 0x3d
 8003468:	2101      	movs	r1, #1
 800346a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2202      	movs	r2, #2
 8003498:	4013      	ands	r3, r2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d124      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2202      	movs	r2, #2
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d11d      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2203      	movs	r2, #3
 80034b2:	4252      	negs	r2, r2
 80034b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2203      	movs	r2, #3
 80034c4:	4013      	ands	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fad4 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 80034d0:	e007      	b.n	80034e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f000 fac7 	bl	8003a68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0018      	movs	r0, r3
 80034de:	f000 fad3 	bl	8003a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2204      	movs	r2, #4
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d125      	bne.n	8003542 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2204      	movs	r2, #4
 80034fe:	4013      	ands	r3, r2
 8003500:	2b04      	cmp	r3, #4
 8003502:	d11e      	bne.n	8003542 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2205      	movs	r2, #5
 800350a:	4252      	negs	r2, r2
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	23c0      	movs	r3, #192	; 0xc0
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4013      	ands	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	0018      	movs	r0, r3
 8003526:	f000 faa7 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 800352a:	e007      	b.n	800353c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f000 fa9a 	bl	8003a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0018      	movs	r0, r3
 8003538:	f000 faa6 	bl	8003a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2208      	movs	r2, #8
 800354a:	4013      	ands	r3, r2
 800354c:	2b08      	cmp	r3, #8
 800354e:	d124      	bne.n	800359a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2208      	movs	r2, #8
 8003558:	4013      	ands	r3, r2
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11d      	bne.n	800359a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2209      	movs	r2, #9
 8003564:	4252      	negs	r2, r2
 8003566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2204      	movs	r2, #4
 800356c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2203      	movs	r2, #3
 8003576:	4013      	ands	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	0018      	movs	r0, r3
 800357e:	f000 fa7b 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 8003582:	e007      	b.n	8003594 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	0018      	movs	r0, r3
 8003588:	f000 fa6e 	bl	8003a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	0018      	movs	r0, r3
 8003590:	f000 fa7a 	bl	8003a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2210      	movs	r2, #16
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d125      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2210      	movs	r2, #16
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d11e      	bne.n	80035f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2211      	movs	r2, #17
 80035bc:	4252      	negs	r2, r2
 80035be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2208      	movs	r2, #8
 80035c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	23c0      	movs	r3, #192	; 0xc0
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4013      	ands	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 fa4e 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 80035dc:	e007      	b.n	80035ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f000 fa41 	bl	8003a68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 fa4d 	bl	8003a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2201      	movs	r2, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10f      	bne.n	8003622 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	4013      	ands	r3, r2
 800360c:	2b01      	cmp	r3, #1
 800360e:	d108      	bne.n	8003622 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2202      	movs	r2, #2
 8003616:	4252      	negs	r2, r2
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f7fd f835 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	4013      	ands	r3, r2
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	d10f      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2280      	movs	r2, #128	; 0x80
 8003638:	4013      	ands	r3, r2
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d108      	bne.n	8003650 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2281      	movs	r2, #129	; 0x81
 8003644:	4252      	negs	r2, r2
 8003646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0018      	movs	r0, r3
 800364c:	f000 ff34 	bl	80044b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	401a      	ands	r2, r3
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	429a      	cmp	r2, r3
 8003662:	d10e      	bne.n	8003682 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	4013      	ands	r3, r2
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d107      	bne.n	8003682 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <HAL_TIM_IRQHandler+0x260>)
 8003678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0018      	movs	r0, r3
 800367e:	f000 ff23 	bl	80044c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2240      	movs	r2, #64	; 0x40
 800368a:	4013      	ands	r3, r2
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	d10f      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	4013      	ands	r3, r2
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d108      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2241      	movs	r2, #65	; 0x41
 80036a4:	4252      	negs	r2, r2
 80036a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f000 f9f4 	bl	8003a98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2220      	movs	r2, #32
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d10f      	bne.n	80036de <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d108      	bne.n	80036de <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2221      	movs	r2, #33	; 0x21
 80036d2:	4252      	negs	r2, r2
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 fee5 	bl	80044a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	fffffeff 	.word	0xfffffeff

080036ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	223c      	movs	r2, #60	; 0x3c
 80036fc:	5c9b      	ldrb	r3, [r3, r2]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003702:	2302      	movs	r3, #2
 8003704:	e0e7      	b.n	80038d6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	223c      	movs	r2, #60	; 0x3c
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	223d      	movs	r2, #61	; 0x3d
 8003712:	2102      	movs	r1, #2
 8003714:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b14      	cmp	r3, #20
 800371a:	d900      	bls.n	800371e <HAL_TIM_PWM_ConfigChannel+0x32>
 800371c:	e0d1      	b.n	80038c2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	009a      	lsls	r2, r3, #2
 8003722:	4b6f      	ldr	r3, [pc, #444]	; (80038e0 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8003724:	18d3      	adds	r3, r2, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	0011      	movs	r1, r2
 8003732:	0018      	movs	r0, r3
 8003734:	f000 fa38 	bl	8003ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2108      	movs	r1, #8
 8003744:	430a      	orrs	r2, r1
 8003746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2104      	movs	r1, #4
 8003754:	438a      	bics	r2, r1
 8003756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6999      	ldr	r1, [r3, #24]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	619a      	str	r2, [r3, #24]
      break;
 800376a:	e0ab      	b.n	80038c4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	0011      	movs	r1, r2
 8003774:	0018      	movs	r0, r3
 8003776:	f000 faa1 	bl	8003cbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	0109      	lsls	r1, r1, #4
 8003788:	430a      	orrs	r2, r1
 800378a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4953      	ldr	r1, [pc, #332]	; (80038e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003798:	400a      	ands	r2, r1
 800379a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6999      	ldr	r1, [r3, #24]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	021a      	lsls	r2, r3, #8
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	619a      	str	r2, [r3, #24]
      break;
 80037b0:	e088      	b.n	80038c4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	0011      	movs	r1, r2
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 fb02 	bl	8003dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2108      	movs	r1, #8
 80037cc:	430a      	orrs	r2, r1
 80037ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2104      	movs	r1, #4
 80037dc:	438a      	bics	r2, r1
 80037de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69d9      	ldr	r1, [r3, #28]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	61da      	str	r2, [r3, #28]
      break;
 80037f2:	e067      	b.n	80038c4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	0011      	movs	r1, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 fb69 	bl	8003ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	0109      	lsls	r1, r1, #4
 8003810:	430a      	orrs	r2, r1
 8003812:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4931      	ldr	r1, [pc, #196]	; (80038e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003820:	400a      	ands	r2, r1
 8003822:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69d9      	ldr	r1, [r3, #28]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	61da      	str	r2, [r3, #28]
      break;
 8003838:	e044      	b.n	80038c4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f000 fbb0 	bl	8003fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2108      	movs	r1, #8
 8003854:	430a      	orrs	r2, r1
 8003856:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2104      	movs	r1, #4
 8003864:	438a      	bics	r2, r1
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800387a:	e023      	b.n	80038c4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	0011      	movs	r1, r2
 8003884:	0018      	movs	r0, r3
 8003886:	f000 fbef 	bl	8004068 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2180      	movs	r1, #128	; 0x80
 8003896:	0109      	lsls	r1, r1, #4
 8003898:	430a      	orrs	r2, r1
 800389a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	490f      	ldr	r1, [pc, #60]	; (80038e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 80038c2:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	223d      	movs	r2, #61	; 0x3d
 80038c8:	2101      	movs	r1, #1
 80038ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	223c      	movs	r2, #60	; 0x3c
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b004      	add	sp, #16
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	080045b0 	.word	0x080045b0
 80038e4:	fffffbff 	.word	0xfffffbff

080038e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	223c      	movs	r2, #60	; 0x3c
 80038f6:	5c9b      	ldrb	r3, [r3, r2]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_ConfigClockSource+0x18>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0ab      	b.n	8003a58 <HAL_TIM_ConfigClockSource+0x170>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	223c      	movs	r2, #60	; 0x3c
 8003904:	2101      	movs	r1, #1
 8003906:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	223d      	movs	r2, #61	; 0x3d
 800390c:	2102      	movs	r1, #2
 800390e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a51      	ldr	r2, [pc, #324]	; (8003a60 <HAL_TIM_ConfigClockSource+0x178>)
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a50      	ldr	r2, [pc, #320]	; (8003a64 <HAL_TIM_ConfigClockSource+0x17c>)
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d100      	bne.n	800393a <HAL_TIM_ConfigClockSource+0x52>
 8003938:	e06b      	b.n	8003a12 <HAL_TIM_ConfigClockSource+0x12a>
 800393a:	d80e      	bhi.n	800395a <HAL_TIM_ConfigClockSource+0x72>
 800393c:	2b10      	cmp	r3, #16
 800393e:	d100      	bne.n	8003942 <HAL_TIM_ConfigClockSource+0x5a>
 8003940:	e077      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x14a>
 8003942:	d803      	bhi.n	800394c <HAL_TIM_ConfigClockSource+0x64>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d100      	bne.n	800394a <HAL_TIM_ConfigClockSource+0x62>
 8003948:	e073      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800394a:	e07c      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800394c:	2b20      	cmp	r3, #32
 800394e:	d100      	bne.n	8003952 <HAL_TIM_ConfigClockSource+0x6a>
 8003950:	e06f      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x14a>
 8003952:	2b30      	cmp	r3, #48	; 0x30
 8003954:	d100      	bne.n	8003958 <HAL_TIM_ConfigClockSource+0x70>
 8003956:	e06c      	b.n	8003a32 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003958:	e075      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800395a:	2b70      	cmp	r3, #112	; 0x70
 800395c:	d00e      	beq.n	800397c <HAL_TIM_ConfigClockSource+0x94>
 800395e:	d804      	bhi.n	800396a <HAL_TIM_ConfigClockSource+0x82>
 8003960:	2b50      	cmp	r3, #80	; 0x50
 8003962:	d036      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0xea>
 8003964:	2b60      	cmp	r3, #96	; 0x60
 8003966:	d044      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003968:	e06d      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800396a:	2280      	movs	r2, #128	; 0x80
 800396c:	0152      	lsls	r2, r2, #5
 800396e:	4293      	cmp	r3, r2
 8003970:	d068      	beq.n	8003a44 <HAL_TIM_ConfigClockSource+0x15c>
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	0192      	lsls	r2, r2, #6
 8003976:	4293      	cmp	r3, r2
 8003978:	d017      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800397a:	e064      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6899      	ldr	r1, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f000 fc4c 	bl	8004228 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2277      	movs	r2, #119	; 0x77
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]
      break;
 80039a8:	e04d      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6899      	ldr	r1, [r3, #8]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f000 fc35 	bl	8004228 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	01c9      	lsls	r1, r1, #7
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
      break;
 80039d0:	e039      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	001a      	movs	r2, r3
 80039e0:	f000 fba6 	bl	8004130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2150      	movs	r1, #80	; 0x50
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fc00 	bl	80041f0 <TIM_ITRx_SetConfig>
      break;
 80039f0:	e029      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6859      	ldr	r1, [r3, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	001a      	movs	r2, r3
 8003a00:	f000 fbc4 	bl	800418c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2160      	movs	r1, #96	; 0x60
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 fbf0 	bl	80041f0 <TIM_ITRx_SetConfig>
      break;
 8003a10:	e019      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6859      	ldr	r1, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	001a      	movs	r2, r3
 8003a20:	f000 fb86 	bl	8004130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2140      	movs	r1, #64	; 0x40
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 fbe0 	bl	80041f0 <TIM_ITRx_SetConfig>
      break;
 8003a30:	e009      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	0010      	movs	r0, r2
 8003a3e:	f000 fbd7 	bl	80041f0 <TIM_ITRx_SetConfig>
      break;
 8003a42:	e000      	b.n	8003a46 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003a44:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	223d      	movs	r2, #61	; 0x3d
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	223c      	movs	r2, #60	; 0x3c
 8003a52:	2100      	movs	r1, #0
 8003a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b004      	add	sp, #16
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	ffceff88 	.word	0xffceff88
 8003a64:	ffff00ff 	.word	0xffff00ff

08003a68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b002      	add	sp, #8
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b002      	add	sp, #8
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a34      	ldr	r2, [pc, #208]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d008      	beq.n	8003ad2 <TIM_Base_SetConfig+0x2a>
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	05db      	lsls	r3, r3, #23
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0x2a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <TIM_Base_SetConfig+0xe8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2270      	movs	r2, #112	; 0x70
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <TIM_Base_SetConfig+0x76>
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	05db      	lsls	r3, r3, #23
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d013      	beq.n	8003b1e <TIM_Base_SetConfig+0x76>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <TIM_Base_SetConfig+0xe8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00f      	beq.n	8003b1e <TIM_Base_SetConfig+0x76>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a24      	ldr	r2, [pc, #144]	; (8003b94 <TIM_Base_SetConfig+0xec>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_Base_SetConfig+0x76>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <TIM_Base_SetConfig+0xf0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_Base_SetConfig+0x76>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <TIM_Base_SetConfig+0xf4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_Base_SetConfig+0x76>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <TIM_Base_SetConfig+0xf8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d108      	bne.n	8003b30 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <TIM_Base_SetConfig+0xfc>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	4393      	bics	r3, r2
 8003b36:	001a      	movs	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <TIM_Base_SetConfig+0xe4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00b      	beq.n	8003b76 <TIM_Base_SetConfig+0xce>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <TIM_Base_SetConfig+0xf0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_Base_SetConfig+0xce>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <TIM_Base_SetConfig+0xf4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_Base_SetConfig+0xce>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a0b      	ldr	r2, [pc, #44]	; (8003ba0 <TIM_Base_SetConfig+0xf8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d103      	bne.n	8003b7e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	615a      	str	r2, [r3, #20]
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b004      	add	sp, #16
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40002000 	.word	0x40002000
 8003b98:	40014000 	.word	0x40014000
 8003b9c:	40014400 	.word	0x40014400
 8003ba0:	40014800 	.word	0x40014800
 8003ba4:	fffffcff 	.word	0xfffffcff

08003ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	4393      	bics	r3, r2
 8003bba:	001a      	movs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a32      	ldr	r2, [pc, #200]	; (8003ca0 <TIM_OC1_SetConfig+0xf8>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	4393      	bics	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a28      	ldr	r2, [pc, #160]	; (8003ca4 <TIM_OC1_SetConfig+0xfc>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_OC1_SetConfig+0x76>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a27      	ldr	r2, [pc, #156]	; (8003ca8 <TIM_OC1_SetConfig+0x100>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_OC1_SetConfig+0x76>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a26      	ldr	r2, [pc, #152]	; (8003cac <TIM_OC1_SetConfig+0x104>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_OC1_SetConfig+0x76>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a25      	ldr	r2, [pc, #148]	; (8003cb0 <TIM_OC1_SetConfig+0x108>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2208      	movs	r2, #8
 8003c22:	4393      	bics	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2204      	movs	r2, #4
 8003c34:	4393      	bics	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ca4 <TIM_OC1_SetConfig+0xfc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00b      	beq.n	8003c58 <TIM_OC1_SetConfig+0xb0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <TIM_OC1_SetConfig+0x100>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <TIM_OC1_SetConfig+0xb0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a18      	ldr	r2, [pc, #96]	; (8003cac <TIM_OC1_SetConfig+0x104>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_OC1_SetConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a17      	ldr	r2, [pc, #92]	; (8003cb0 <TIM_OC1_SetConfig+0x108>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d111      	bne.n	8003c7c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <TIM_OC1_SetConfig+0x10c>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <TIM_OC1_SetConfig+0x110>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b006      	add	sp, #24
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	fffeff8f 	.word	0xfffeff8f
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40014000 	.word	0x40014000
 8003cac:	40014400 	.word	0x40014400
 8003cb0:	40014800 	.word	0x40014800
 8003cb4:	fffffeff 	.word	0xfffffeff
 8003cb8:	fffffdff 	.word	0xfffffdff

08003cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	2210      	movs	r2, #16
 8003ccc:	4393      	bics	r3, r2
 8003cce:	001a      	movs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a2e      	ldr	r2, [pc, #184]	; (8003da4 <TIM_OC2_SetConfig+0xe8>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <TIM_OC2_SetConfig+0xec>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2220      	movs	r2, #32
 8003d06:	4393      	bics	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a24      	ldr	r2, [pc, #144]	; (8003dac <TIM_OC2_SetConfig+0xf0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10d      	bne.n	8003d3a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	4393      	bics	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2240      	movs	r2, #64	; 0x40
 8003d36:	4393      	bics	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <TIM_OC2_SetConfig+0xf0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <TIM_OC2_SetConfig+0x9e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1a      	ldr	r2, [pc, #104]	; (8003db0 <TIM_OC2_SetConfig+0xf4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d007      	beq.n	8003d5a <TIM_OC2_SetConfig+0x9e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <TIM_OC2_SetConfig+0xf8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_OC2_SetConfig+0x9e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <TIM_OC2_SetConfig+0xfc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d113      	bne.n	8003d82 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <TIM_OC2_SetConfig+0x100>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <TIM_OC2_SetConfig+0x104>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b006      	add	sp, #24
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	feff8fff 	.word	0xfeff8fff
 8003da8:	fffffcff 	.word	0xfffffcff
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800
 8003dbc:	fffffbff 	.word	0xfffffbff
 8003dc0:	fffff7ff 	.word	0xfffff7ff

08003dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <TIM_OC3_SetConfig+0xe4>)
 8003dd4:	401a      	ands	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a2f      	ldr	r2, [pc, #188]	; (8003eac <TIM_OC3_SetConfig+0xe8>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2203      	movs	r2, #3
 8003df8:	4393      	bics	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4a29      	ldr	r2, [pc, #164]	; (8003eb0 <TIM_OC3_SetConfig+0xec>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <TIM_OC3_SetConfig+0xf0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10d      	bne.n	8003e3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4a24      	ldr	r2, [pc, #144]	; (8003eb8 <TIM_OC3_SetConfig+0xf4>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <TIM_OC3_SetConfig+0xf8>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1c      	ldr	r2, [pc, #112]	; (8003eb4 <TIM_OC3_SetConfig+0xf0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_OC3_SetConfig+0x9a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1d      	ldr	r2, [pc, #116]	; (8003ec0 <TIM_OC3_SetConfig+0xfc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_OC3_SetConfig+0x9a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <TIM_OC3_SetConfig+0x100>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_OC3_SetConfig+0x9a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a1b      	ldr	r2, [pc, #108]	; (8003ec8 <TIM_OC3_SetConfig+0x104>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d113      	bne.n	8003e86 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4a1a      	ldr	r2, [pc, #104]	; (8003ecc <TIM_OC3_SetConfig+0x108>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <TIM_OC3_SetConfig+0x10c>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	621a      	str	r2, [r3, #32]
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b006      	add	sp, #24
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	fffffeff 	.word	0xfffffeff
 8003eac:	fffeff8f 	.word	0xfffeff8f
 8003eb0:	fffffdff 	.word	0xfffffdff
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	fffff7ff 	.word	0xfffff7ff
 8003ebc:	fffffbff 	.word	0xfffffbff
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800
 8003ecc:	ffffefff 	.word	0xffffefff
 8003ed0:	ffffdfff 	.word	0xffffdfff

08003ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4a28      	ldr	r2, [pc, #160]	; (8003f84 <TIM_OC4_SetConfig+0xb0>)
 8003ee4:	401a      	ands	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <TIM_OC4_SetConfig+0xb4>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a21      	ldr	r2, [pc, #132]	; (8003f8c <TIM_OC4_SetConfig+0xb8>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <TIM_OC4_SetConfig+0xbc>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <TIM_OC4_SetConfig+0xc0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <TIM_OC4_SetConfig+0x78>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <TIM_OC4_SetConfig+0xc4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_OC4_SetConfig+0x78>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a17      	ldr	r2, [pc, #92]	; (8003f9c <TIM_OC4_SetConfig+0xc8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_OC4_SetConfig+0x78>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <TIM_OC4_SetConfig+0xcc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d109      	bne.n	8003f60 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4a15      	ldr	r2, [pc, #84]	; (8003fa4 <TIM_OC4_SetConfig+0xd0>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b006      	add	sp, #24
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	ffffefff 	.word	0xffffefff
 8003f88:	feff8fff 	.word	0xfeff8fff
 8003f8c:	fffffcff 	.word	0xfffffcff
 8003f90:	ffffdfff 	.word	0xffffdfff
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800
 8003fa4:	ffffbfff 	.word	0xffffbfff

08003fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	4a25      	ldr	r2, [pc, #148]	; (800404c <TIM_OC5_SetConfig+0xa4>)
 8003fb8:	401a      	ands	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <TIM_OC5_SetConfig+0xa8>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <TIM_OC5_SetConfig+0xac>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a17      	ldr	r2, [pc, #92]	; (8004058 <TIM_OC5_SetConfig+0xb0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <TIM_OC5_SetConfig+0x6e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a16      	ldr	r2, [pc, #88]	; (800405c <TIM_OC5_SetConfig+0xb4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_OC5_SetConfig+0x6e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a15      	ldr	r2, [pc, #84]	; (8004060 <TIM_OC5_SetConfig+0xb8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_OC5_SetConfig+0x6e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a14      	ldr	r2, [pc, #80]	; (8004064 <TIM_OC5_SetConfig+0xbc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d109      	bne.n	800402a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4a0c      	ldr	r2, [pc, #48]	; (800404c <TIM_OC5_SetConfig+0xa4>)
 800401a:	4013      	ands	r3, r2
 800401c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	021b      	lsls	r3, r3, #8
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b006      	add	sp, #24
 800404a:	bd80      	pop	{r7, pc}
 800404c:	fffeffff 	.word	0xfffeffff
 8004050:	fffeff8f 	.word	0xfffeff8f
 8004054:	fffdffff 	.word	0xfffdffff
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40014000 	.word	0x40014000
 8004060:	40014400 	.word	0x40014400
 8004064:	40014800 	.word	0x40014800

08004068 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4a26      	ldr	r2, [pc, #152]	; (8004110 <TIM_OC6_SetConfig+0xa8>)
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a20      	ldr	r2, [pc, #128]	; (8004114 <TIM_OC6_SetConfig+0xac>)
 8004094:	4013      	ands	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <TIM_OC6_SetConfig+0xb0>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	051b      	lsls	r3, r3, #20
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a18      	ldr	r2, [pc, #96]	; (800411c <TIM_OC6_SetConfig+0xb4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <TIM_OC6_SetConfig+0x70>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a17      	ldr	r2, [pc, #92]	; (8004120 <TIM_OC6_SetConfig+0xb8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_OC6_SetConfig+0x70>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a16      	ldr	r2, [pc, #88]	; (8004124 <TIM_OC6_SetConfig+0xbc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_OC6_SetConfig+0x70>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a15      	ldr	r2, [pc, #84]	; (8004128 <TIM_OC6_SetConfig+0xc0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d109      	bne.n	80040ec <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	4a14      	ldr	r2, [pc, #80]	; (800412c <TIM_OC6_SetConfig+0xc4>)
 80040dc:	4013      	ands	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	029b      	lsls	r3, r3, #10
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b006      	add	sp, #24
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	ffefffff 	.word	0xffefffff
 8004114:	feff8fff 	.word	0xfeff8fff
 8004118:	ffdfffff 	.word	0xffdfffff
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	fffbffff 	.word	0xfffbffff

08004130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	2201      	movs	r2, #1
 8004148:	4393      	bics	r3, r2
 800414a:	001a      	movs	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	22f0      	movs	r2, #240	; 0xf0
 800415a:	4393      	bics	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	220a      	movs	r2, #10
 800416c:	4393      	bics	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	621a      	str	r2, [r3, #32]
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b006      	add	sp, #24
 800418a:	bd80      	pop	{r7, pc}

0800418c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	2210      	movs	r2, #16
 800419e:	4393      	bics	r3, r2
 80041a0:	001a      	movs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <TIM_TI2_ConfigInputStage+0x60>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	031b      	lsls	r3, r3, #12
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	22a0      	movs	r2, #160	; 0xa0
 80041c8:	4393      	bics	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b006      	add	sp, #24
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	ffff0fff 	.word	0xffff0fff

080041f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <TIM_ITRx_SetConfig+0x34>)
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	2207      	movs	r2, #7
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	609a      	str	r2, [r3, #8]
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b004      	add	sp, #16
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	ffcfff8f 	.word	0xffcfff8f

08004228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4a09      	ldr	r2, [pc, #36]	; (8004264 <TIM_ETR_SetConfig+0x3c>)
 8004240:	4013      	ands	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	021a      	lsls	r2, r3, #8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	431a      	orrs	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b006      	add	sp, #24
 8004262:	bd80      	pop	{r7, pc}
 8004264:	ffff00ff 	.word	0xffff00ff

08004268 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	221f      	movs	r2, #31
 8004278:	4013      	ands	r3, r2
 800427a:	2201      	movs	r2, #1
 800427c:	409a      	lsls	r2, r3
 800427e:	0013      	movs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	43d2      	mvns	r2, r2
 800428a:	401a      	ands	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	211f      	movs	r1, #31
 8004298:	400b      	ands	r3, r1
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4099      	lsls	r1, r3
 800429e:	000b      	movs	r3, r1
 80042a0:	431a      	orrs	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b006      	add	sp, #24
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	223c      	movs	r2, #60	; 0x3c
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e040      	b.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	223c      	movs	r2, #60	; 0x3c
 80042cc:	2101      	movs	r1, #1
 80042ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	223d      	movs	r2, #61	; 0x3d
 80042d4:	2102      	movs	r1, #2
 80042d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a19      	ldr	r2, [pc, #100]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d108      	bne.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2270      	movs	r2, #112	; 0x70
 8004308:	4393      	bics	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2280      	movs	r2, #128	; 0x80
 800431a:	4393      	bics	r3, r2
 800431c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4313      	orrs	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	223d      	movs	r2, #61	; 0x3d
 800433c:	2101      	movs	r1, #1
 800433e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	223c      	movs	r2, #60	; 0x3c
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b004      	add	sp, #16
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	40012c00 	.word	0x40012c00
 8004358:	ff0fffff 	.word	0xff0fffff

0800435c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	223c      	movs	r2, #60	; 0x3c
 800436e:	5c9b      	ldrb	r3, [r3, r2]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004374:	2302      	movs	r3, #2
 8004376:	e079      	b.n	800446c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	223c      	movs	r2, #60	; 0x3c
 800437c:	2101      	movs	r1, #1
 800437e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	22ff      	movs	r2, #255	; 0xff
 8004384:	4393      	bics	r3, r2
 8004386:	001a      	movs	r2, r3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4a38      	ldr	r2, [pc, #224]	; (8004474 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004394:	401a      	ands	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a35      	ldr	r2, [pc, #212]	; (8004478 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80043a2:	401a      	ands	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a33      	ldr	r2, [pc, #204]	; (800447c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80043b0:	401a      	ands	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a30      	ldr	r2, [pc, #192]	; (8004480 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80043be:	401a      	ands	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a2e      	ldr	r2, [pc, #184]	; (8004484 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80043cc:	401a      	ands	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80043da:	401a      	ands	r2, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80043e8:	401a      	ands	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a25      	ldr	r2, [pc, #148]	; (8004490 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d106      	bne.n	800440c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004402:	401a      	ands	r2, r3
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d121      	bne.n	800445a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800441a:	401a      	ands	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	051b      	lsls	r3, r3, #20
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a1c      	ldr	r2, [pc, #112]	; (800449c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800442a:	401a      	ands	r2, r3
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a1a      	ldr	r2, [pc, #104]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004438:	401a      	ands	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a12      	ldr	r2, [pc, #72]	; (8004490 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d106      	bne.n	800445a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004450:	401a      	ands	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	223c      	movs	r2, #60	; 0x3c
 8004466:	2100      	movs	r1, #0
 8004468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b004      	add	sp, #16
 8004472:	bd80      	pop	{r7, pc}
 8004474:	fffffcff 	.word	0xfffffcff
 8004478:	fffffbff 	.word	0xfffffbff
 800447c:	fffff7ff 	.word	0xfffff7ff
 8004480:	ffffefff 	.word	0xffffefff
 8004484:	ffffdfff 	.word	0xffffdfff
 8004488:	ffffbfff 	.word	0xffffbfff
 800448c:	fff0ffff 	.word	0xfff0ffff
 8004490:	40012c00 	.word	0x40012c00
 8004494:	efffffff 	.word	0xefffffff
 8004498:	ff0fffff 	.word	0xff0fffff
 800449c:	feffffff 	.word	0xfeffffff
 80044a0:	fdffffff 	.word	0xfdffffff
 80044a4:	dfffffff 	.word	0xdfffffff

080044a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2600      	movs	r6, #0
 80044dc:	4d0c      	ldr	r5, [pc, #48]	; (8004510 <__libc_init_array+0x38>)
 80044de:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	2600      	movs	r6, #0
 80044ea:	f000 f821 	bl	8004530 <_init>
 80044ee:	4d0a      	ldr	r5, [pc, #40]	; (8004518 <__libc_init_array+0x40>)
 80044f0:	4c0a      	ldr	r4, [pc, #40]	; (800451c <__libc_init_array+0x44>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	00b3      	lsls	r3, r6, #2
 80044fe:	58eb      	ldr	r3, [r5, r3]
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	00b3      	lsls	r3, r6, #2
 8004508:	58eb      	ldr	r3, [r5, r3]
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08004604 	.word	0x08004604
 8004514:	08004604 	.word	0x08004604
 8004518:	08004604 	.word	0x08004604
 800451c:	08004608 	.word	0x08004608

08004520 <memset>:
 8004520:	0003      	movs	r3, r0
 8004522:	1812      	adds	r2, r2, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	7019      	strb	r1, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr
