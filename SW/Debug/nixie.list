
nixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f50  08003f50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f50  08003f50  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f50  08003f50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08003f64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003f64  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d753  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002357  00000000  00000000  0002d787  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  0002fae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00030848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a17  00000000  00000000  00031468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5f6  00000000  00000000  00033e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b923  00000000  00000000  00040475  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbd98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  000dbe14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003ea4 	.word	0x08003ea4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003ea4 	.word	0x08003ea4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8000220:	4b15      	ldr	r3, [pc, #84]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000222:	4a16      	ldr	r2, [pc, #88]	; (800027c <MX_COMP2_Init+0x60>)
 8000224:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8000226:	4b14      	ldr	r3, [pc, #80]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000228:	2280      	movs	r2, #128	; 0x80
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 800022e:	4b12      	ldr	r3, [pc, #72]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000230:	2240      	movs	r2, #64	; 0x40
 8000232:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000234:	4b10      	ldr	r3, [pc, #64]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <MX_COMP2_Init+0x5c>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_LOW;
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	0252      	lsls	r2, r2, #9
 8000246:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000248:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <MX_COMP2_Init+0x5c>)
 800024a:	2200      	movs	r2, #0
 800024c:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800025a:	4b07      	ldr	r3, [pc, #28]	; (8000278 <MX_COMP2_Init+0x5c>)
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fef4 	bl	8001050 <HAL_COMP_Init>
 8000268:	1e03      	subs	r3, r0, #0
 800026a:	d001      	beq.n	8000270 <MX_COMP2_Init+0x54>
  {
    Error_Handler();
 800026c:	f000 fa04 	bl	8000678 <Error_Handler>
  }

}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	20000028 	.word	0x20000028
 800027c:	40010204 	.word	0x40010204

08000280 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000288:	230c      	movs	r3, #12
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	0018      	movs	r0, r3
 800028e:	2314      	movs	r3, #20
 8000290:	001a      	movs	r2, r3
 8000292:	2100      	movs	r1, #0
 8000294:	f003 fdfe 	bl	8003e94 <memset>
  if(compHandle->Instance==COMP2)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <HAL_COMP_MspInit+0x64>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d11c      	bne.n	80002dc <HAL_COMP_MspInit+0x5c>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <HAL_COMP_MspInit+0x68>)
 80002a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <HAL_COMP_MspInit+0x68>)
 80002a8:	2101      	movs	r1, #1
 80002aa:	430a      	orrs	r2, r1
 80002ac:	635a      	str	r2, [r3, #52]	; 0x34
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <HAL_COMP_MspInit+0x68>)
 80002b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002b2:	2201      	movs	r2, #1
 80002b4:	4013      	ands	r3, r2
 80002b6:	60bb      	str	r3, [r7, #8]
 80002b8:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = FB_170V_Pin;
 80002ba:	210c      	movs	r1, #12
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2208      	movs	r2, #8
 80002c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2203      	movs	r2, #3
 80002c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(FB_170V_GPIO_Port, &GPIO_InitStruct);
 80002ce:	187a      	adds	r2, r7, r1
 80002d0:	23a0      	movs	r3, #160	; 0xa0
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 fa3a 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b008      	add	sp, #32
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010204 	.word	0x40010204
 80002e8:	40021000 	.word	0x40021000

080002ec <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	2324      	movs	r3, #36	; 0x24
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f003 fdca 	bl	8003e94 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000300:	4b13      	ldr	r3, [pc, #76]	; (8000350 <MX_DAC1_Init+0x64>)
 8000302:	4a14      	ldr	r2, [pc, #80]	; (8000354 <MX_DAC1_Init+0x68>)
 8000304:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_DAC1_Init+0x64>)
 8000308:	0018      	movs	r0, r3
 800030a:	f001 f8df 	bl	80014cc <HAL_DAC_Init>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8000312:	f000 f9b1 	bl	8000678 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2202      	movs	r2, #2
 8000326:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2201      	movs	r2, #1
 800032c:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000334:	1d39      	adds	r1, r7, #4
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_DAC1_Init+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	0018      	movs	r0, r3
 800033c:	f001 f8ea 	bl	8001514 <HAL_DAC_ConfigChannel>
 8000340:	1e03      	subs	r3, r0, #0
 8000342:	d001      	beq.n	8000348 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000344:	f000 f998 	bl	8000678 <Error_Handler>
  }

}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b00a      	add	sp, #40	; 0x28
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000058 	.word	0x20000058
 8000354:	40007400 	.word	0x40007400

08000358 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <HAL_DAC_MspInit+0x38>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d10d      	bne.n	8000386 <HAL_DAC_MspInit+0x2e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <HAL_DAC_MspInit+0x3c>)
 800036c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <HAL_DAC_MspInit+0x3c>)
 8000370:	2180      	movs	r1, #128	; 0x80
 8000372:	0589      	lsls	r1, r1, #22
 8000374:	430a      	orrs	r2, r1
 8000376:	63da      	str	r2, [r3, #60]	; 0x3c
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <HAL_DAC_MspInit+0x3c>)
 800037a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	059b      	lsls	r3, r3, #22
 8000380:	4013      	ands	r3, r2
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b004      	add	sp, #16
 800038c:	bd80      	pop	{r7, pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40007400 	.word	0x40007400
 8000394:	40021000 	.word	0x40021000

08000398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b08b      	sub	sp, #44	; 0x2c
 800039c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	2414      	movs	r4, #20
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	0018      	movs	r0, r3
 80003a4:	2314      	movs	r3, #20
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f003 fd73 	bl	8003e94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ae:	4b5f      	ldr	r3, [pc, #380]	; (800052c <MX_GPIO_Init+0x194>)
 80003b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003b2:	4b5e      	ldr	r3, [pc, #376]	; (800052c <MX_GPIO_Init+0x194>)
 80003b4:	2104      	movs	r1, #4
 80003b6:	430a      	orrs	r2, r1
 80003b8:	635a      	str	r2, [r3, #52]	; 0x34
 80003ba:	4b5c      	ldr	r3, [pc, #368]	; (800052c <MX_GPIO_Init+0x194>)
 80003bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003be:	2204      	movs	r2, #4
 80003c0:	4013      	ands	r3, r2
 80003c2:	613b      	str	r3, [r7, #16]
 80003c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c6:	4b59      	ldr	r3, [pc, #356]	; (800052c <MX_GPIO_Init+0x194>)
 80003c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003ca:	4b58      	ldr	r3, [pc, #352]	; (800052c <MX_GPIO_Init+0x194>)
 80003cc:	2120      	movs	r1, #32
 80003ce:	430a      	orrs	r2, r1
 80003d0:	635a      	str	r2, [r3, #52]	; 0x34
 80003d2:	4b56      	ldr	r3, [pc, #344]	; (800052c <MX_GPIO_Init+0x194>)
 80003d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d6:	2220      	movs	r2, #32
 80003d8:	4013      	ands	r3, r2
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b53      	ldr	r3, [pc, #332]	; (800052c <MX_GPIO_Init+0x194>)
 80003e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003e2:	4b52      	ldr	r3, [pc, #328]	; (800052c <MX_GPIO_Init+0x194>)
 80003e4:	2101      	movs	r1, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	635a      	str	r2, [r3, #52]	; 0x34
 80003ea:	4b50      	ldr	r3, [pc, #320]	; (800052c <MX_GPIO_Init+0x194>)
 80003ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ee:	2201      	movs	r2, #1
 80003f0:	4013      	ands	r3, r2
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f6:	4b4d      	ldr	r3, [pc, #308]	; (800052c <MX_GPIO_Init+0x194>)
 80003f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003fa:	4b4c      	ldr	r3, [pc, #304]	; (800052c <MX_GPIO_Init+0x194>)
 80003fc:	2108      	movs	r1, #8
 80003fe:	430a      	orrs	r2, r1
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
 8000402:	4b4a      	ldr	r3, [pc, #296]	; (800052c <MX_GPIO_Init+0x194>)
 8000404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000406:	2208      	movs	r2, #8
 8000408:	4013      	ands	r3, r2
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b47      	ldr	r3, [pc, #284]	; (800052c <MX_GPIO_Init+0x194>)
 8000410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000412:	4b46      	ldr	r3, [pc, #280]	; (800052c <MX_GPIO_Init+0x194>)
 8000414:	2102      	movs	r1, #2
 8000416:	430a      	orrs	r2, r1
 8000418:	635a      	str	r2, [r3, #52]	; 0x34
 800041a:	4b44      	ldr	r3, [pc, #272]	; (800052c <MX_GPIO_Init+0x194>)
 800041c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041e:	2202      	movs	r2, #2
 8000420:	4013      	ands	r3, r2
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GN1_Pin|GN2_Pin|G1_Pin|GDOT_Pin 
 8000426:	23a0      	movs	r3, #160	; 0xa0
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2200      	movs	r2, #0
 800042c:	2173      	movs	r1, #115	; 0x73
 800042e:	0018      	movs	r0, r3
 8000430:	f001 faf2 	bl	8001a18 <HAL_GPIO_WritePin>
                          |G3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GN3_Pin|G2_Pin|G4_Pin, GPIO_PIN_RESET);
 8000434:	4b3e      	ldr	r3, [pc, #248]	; (8000530 <MX_GPIO_Init+0x198>)
 8000436:	2200      	movs	r2, #0
 8000438:	210e      	movs	r1, #14
 800043a:	0018      	movs	r0, r3
 800043c:	f001 faec 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G5_Pin|G6_Pin|GN4_Pin|G0_Pin 
 8000440:	23fe      	movs	r3, #254	; 0xfe
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	483b      	ldr	r0, [pc, #236]	; (8000534 <MX_GPIO_Init+0x19c>)
 8000446:	2200      	movs	r2, #0
 8000448:	0019      	movs	r1, r3
 800044a:	f001 fae5 	bl	8001a18 <HAL_GPIO_WritePin>
                          |G9_Pin|G8_Pin|G7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	0192      	lsls	r2, r2, #6
 8000454:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2200      	movs	r2, #0
 800045a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8000462:	193b      	adds	r3, r7, r4
 8000464:	4a34      	ldr	r2, [pc, #208]	; (8000538 <MX_GPIO_Init+0x1a0>)
 8000466:	0019      	movs	r1, r3
 8000468:	0010      	movs	r0, r2
 800046a:	f001 f971 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2204      	movs	r2, #4
 8000472:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2200      	movs	r2, #0
 800047e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000480:	193b      	adds	r3, r7, r4
 8000482:	4a2e      	ldr	r2, [pc, #184]	; (800053c <MX_GPIO_Init+0x1a4>)
 8000484:	0019      	movs	r1, r3
 8000486:	0010      	movs	r0, r2
 8000488:	f001 f962 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = GN1_Pin|GN2_Pin|G1_Pin|GDOT_Pin 
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2273      	movs	r2, #115	; 0x73
 8000490:	601a      	str	r2, [r3, #0]
                          |G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	23a0      	movs	r3, #160	; 0xa0
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 f94f 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S1_Pin;
 80004b2:	0021      	movs	r1, r4
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2201      	movs	r2, #1
 80004b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80004c6:	000c      	movs	r4, r1
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	4a19      	ldr	r2, [pc, #100]	; (8000530 <MX_GPIO_Init+0x198>)
 80004cc:	0019      	movs	r1, r3
 80004ce:	0010      	movs	r0, r2
 80004d0:	f001 f93e 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GN3_Pin|G2_Pin|G4_Pin;
 80004d4:	0021      	movs	r1, r4
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	220e      	movs	r2, #14
 80004da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2201      	movs	r2, #1
 80004e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004ee:	000c      	movs	r4, r1
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <MX_GPIO_Init+0x198>)
 80004f4:	0019      	movs	r1, r3
 80004f6:	0010      	movs	r0, r2
 80004f8:	f001 f92a 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G5_Pin|G6_Pin|GN4_Pin|G0_Pin 
 80004fc:	0021      	movs	r1, r4
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	22fe      	movs	r2, #254	; 0xfe
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	601a      	str	r2, [r3, #0]
                          |G9_Pin|G8_Pin|G7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	187b      	adds	r3, r7, r1
 800051a:	4a06      	ldr	r2, [pc, #24]	; (8000534 <MX_GPIO_Init+0x19c>)
 800051c:	0019      	movs	r1, r3
 800051e:	0010      	movs	r0, r2
 8000520:	f001 f916 	bl	8001750 <HAL_GPIO_Init>

}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b00b      	add	sp, #44	; 0x2c
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	50000c00 	.word	0x50000c00
 8000534:	50000400 	.word	0x50000400
 8000538:	50000800 	.word	0x50000800
 800053c:	50001400 	.word	0x50001400

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fbe6 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f810 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f7ff ff24 	bl	8000398 <MX_GPIO_Init>
  MX_COMP2_Init();
 8000550:	f7ff fe64 	bl	800021c <MX_COMP2_Init>
  MX_DAC1_Init();
 8000554:	f7ff feca 	bl	80002ec <MX_DAC1_Init>
  MX_RTC_Init();
 8000558:	f000 f894 	bl	8000684 <MX_RTC_Init>
  MX_TIM2_Init();
 800055c:	f000 f996 	bl	800088c <MX_TIM2_Init>
  MX_TIM14_Init();
 8000560:	f000 fa1a 	bl	8000998 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000564:	f000 fa3e 	bl	80009e4 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	e7fe      	b.n	8000568 <main+0x28>
	...

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b0a1      	sub	sp, #132	; 0x84
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	2448      	movs	r4, #72	; 0x48
 8000574:	193b      	adds	r3, r7, r4
 8000576:	0018      	movs	r0, r3
 8000578:	2338      	movs	r3, #56	; 0x38
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f003 fc89 	bl	8003e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000582:	2338      	movs	r3, #56	; 0x38
 8000584:	18fb      	adds	r3, r7, r3
 8000586:	0018      	movs	r0, r3
 8000588:	2310      	movs	r3, #16
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f003 fc81 	bl	8003e94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	0018      	movs	r0, r3
 8000596:	2334      	movs	r3, #52	; 0x34
 8000598:	001a      	movs	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f003 fc7a 	bl	8003e94 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fa55 	bl	8001a54 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005aa:	4b32      	ldr	r3, [pc, #200]	; (8000674 <SystemClock_Config+0x108>)
 80005ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <SystemClock_Config+0x108>)
 80005b0:	2118      	movs	r1, #24
 80005b2:	438a      	bics	r2, r1
 80005b4:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2206      	movs	r2, #6
 80005ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2201      	movs	r2, #1
 80005c0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	0052      	lsls	r2, r2, #1
 80005c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2240      	movs	r2, #64	; 0x40
 80005d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2202      	movs	r2, #2
 80005dc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2202      	movs	r2, #2
 80005e2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	220a      	movs	r2, #10
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0292      	lsls	r2, r2, #10
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0492      	lsls	r2, r2, #18
 80005fe:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	22e0      	movs	r2, #224	; 0xe0
 8000604:	0612      	lsls	r2, r2, #24
 8000606:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	187b      	adds	r3, r7, r1
 800060a:	0018      	movs	r0, r3
 800060c:	f001 fa62 	bl	8001ad4 <HAL_RCC_OscConfig>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000614:	f000 f830 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	2138      	movs	r1, #56	; 0x38
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2207      	movs	r2, #7
 800061e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2202      	movs	r2, #2
 8000624:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f001 fd6c 	bl	8002114 <HAL_RCC_ClockConfig>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000640:	f000 f81a 	bl	8000678 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM15;
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2284      	movs	r2, #132	; 0x84
 8000648:	03d2      	lsls	r2, r2, #15
 800064a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	0052      	lsls	r2, r2, #1
 8000658:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fee3 	bl	8002428 <HAL_RCCEx_PeriphCLKConfig>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8000666:	f000 f807 	bl	8000678 <Error_Handler>
  }
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b021      	add	sp, #132	; 0x84
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f003 fbfe 	bl	8003e94 <memset>
  RTC_DateTypeDef sDate = {0};
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <MX_RTC_Init+0xd0>)
 80006a0:	4a2d      	ldr	r2, [pc, #180]	; (8000758 <MX_RTC_Init+0xd4>)
 80006a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <MX_RTC_Init+0xd0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_RTC_Init+0xd0>)
 80006ac:	227f      	movs	r2, #127	; 0x7f
 80006ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <MX_RTC_Init+0xd0>)
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_RTC_Init+0xd0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <MX_RTC_Init+0xd0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_RTC_Init+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <MX_RTC_Init+0xd0>)
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	05d2      	lsls	r2, r2, #23
 80006ce:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_RTC_Init+0xd0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_RTC_Init+0xd0>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 f85d 	bl	8002798 <HAL_RTC_Init>
 80006de:	1e03      	subs	r3, r0, #0
 80006e0:	d001      	beq.n	80006e6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80006e2:	f7ff ffc9 	bl	8000678 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800070a:	1d39      	adds	r1, r7, #4
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_RTC_Init+0xd0>)
 800070e:	2201      	movs	r2, #1
 8000710:	0018      	movs	r0, r3
 8000712:	f002 f8d7 	bl	80028c4 <HAL_RTC_SetTime>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800071a:	f7ff ffad 	bl	8000678 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800071e:	003b      	movs	r3, r7
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000724:	003b      	movs	r3, r7
 8000726:	2201      	movs	r2, #1
 8000728:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800072a:	003b      	movs	r3, r7
 800072c:	2201      	movs	r2, #1
 800072e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000730:	003b      	movs	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000736:	0039      	movs	r1, r7
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_RTC_Init+0xd0>)
 800073a:	2201      	movs	r2, #1
 800073c:	0018      	movs	r0, r3
 800073e:	f002 f969 	bl	8002a14 <HAL_RTC_SetDate>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000746:	f7ff ff97 	bl	8000678 <Error_Handler>
  }

}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b006      	add	sp, #24
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	2000006c 	.word	0x2000006c
 8000758:	40002800 	.word	0x40002800

0800075c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <HAL_RTC_MspInit+0x44>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d114      	bne.n	8000798 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <HAL_RTC_MspInit+0x48>)
 8000770:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_RTC_MspInit+0x48>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0209      	lsls	r1, r1, #8
 8000778:	430a      	orrs	r2, r1
 800077a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_RTC_MspInit+0x48>)
 800077e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_RTC_MspInit+0x48>)
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	00c9      	lsls	r1, r1, #3
 8000786:	430a      	orrs	r2, r1
 8000788:	63da      	str	r2, [r3, #60]	; 0x3c
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_RTC_MspInit+0x48>)
 800078c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4013      	ands	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b004      	add	sp, #16
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40002800 	.word	0x40002800
 80007a4:	40021000 	.word	0x40021000

080007a8 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <LL_SYSCFG_DisableDBATT+0x1c>)
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <LL_SYSCFG_DisableDBATT+0x1c>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40010000 	.word	0x40010000

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_MspInit+0x5c>)
 80007d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_MspInit+0x5c>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	430a      	orrs	r2, r1
 80007d8:	641a      	str	r2, [r3, #64]	; 0x40
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_MspInit+0x5c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	2201      	movs	r2, #1
 80007e0:	4013      	ands	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x5c>)
 80007e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_MspInit+0x5c>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	0549      	lsls	r1, r1, #21
 80007f0:	430a      	orrs	r2, r1
 80007f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_MspInit+0x5c>)
 80007f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	055b      	lsls	r3, r3, #21
 80007fc:	4013      	ands	r3, r2
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale 
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 fb2c 	bl	8000e60 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
  /** Enable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000808:	f000 fb52 	bl	8000eb0 <HAL_SYSCFG_EnableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800080c:	2000      	movs	r0, #0
 800080e:	f000 fb3b 	bl	8000e88 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8000812:	23c0      	movs	r3, #192	; 0xc0
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff ffc6 	bl	80007a8 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b002      	add	sp, #8
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 faca 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <TIM14_IRQHandler+0x14>)
 8000862:	0018      	movs	r0, r3
 8000864:	f002 fae6 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20000118 	.word	0x20000118

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <SystemInit+0x14>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	0512      	lsls	r2, r2, #20
 800087e:	609a      	str	r2, [r3, #8]
#endif
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	2328      	movs	r3, #40	; 0x28
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	0018      	movs	r0, r3
 8000898:	2310      	movs	r3, #16
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f003 faf9 	bl	8003e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a2:	231c      	movs	r3, #28
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	0018      	movs	r0, r3
 80008a8:	230c      	movs	r3, #12
 80008aa:	001a      	movs	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f003 faf1 	bl	8003e94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	003b      	movs	r3, r7
 80008b4:	0018      	movs	r0, r3
 80008b6:	231c      	movs	r3, #28
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f003 faea 	bl	8003e94 <memset>

  htim2.Instance = TIM2;
 80008c0:	4b34      	ldr	r3, [pc, #208]	; (8000994 <MX_TIM2_Init+0x108>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	05d2      	lsls	r2, r2, #23
 80008c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80008c8:	4b32      	ldr	r3, [pc, #200]	; (8000994 <MX_TIM2_Init+0x108>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b31      	ldr	r3, [pc, #196]	; (8000994 <MX_TIM2_Init+0x108>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 44;
 80008d4:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <MX_TIM2_Init+0x108>)
 80008d6:	222c      	movs	r2, #44	; 0x2c
 80008d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <MX_TIM2_Init+0x108>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e0:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <MX_TIM2_Init+0x108>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_TIM2_Init+0x108>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 f9fe 	bl	8002cea <HAL_TIM_Base_Init>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008f2:	f7ff fec1 	bl	8000678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f6:	2128      	movs	r1, #40	; 0x28
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	0152      	lsls	r2, r2, #5
 80008fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000900:	187a      	adds	r2, r7, r1
 8000902:	4b24      	ldr	r3, [pc, #144]	; (8000994 <MX_TIM2_Init+0x108>)
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f002 fcc4 	bl	8003294 <HAL_TIM_ConfigClockSource>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000910:	f7ff feb2 	bl	8000678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM2_Init+0x108>)
 8000916:	0018      	movs	r0, r3
 8000918:	f002 fa13 	bl	8002d42 <HAL_TIM_PWM_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000920:	f7ff feaa 	bl	8000678 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_TIM2_Init+0x108>)
 8000926:	2108      	movs	r1, #8
 8000928:	0018      	movs	r0, r3
 800092a:	f002 fa3e 	bl	8002daa <HAL_TIM_OnePulse_Init>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000932:	f7ff fea1 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	211c      	movs	r1, #28
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000944:	187a      	adds	r2, r7, r1
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_TIM2_Init+0x108>)
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f003 f96a 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000954:	f7ff fe90 	bl	8000678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000958:	003b      	movs	r3, r7
 800095a:	2260      	movs	r2, #96	; 0x60
 800095c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 24;
 800095e:	003b      	movs	r3, r7
 8000960:	2218      	movs	r2, #24
 8000962:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000964:	003b      	movs	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096a:	003b      	movs	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	0039      	movs	r1, r7
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_TIM2_Init+0x108>)
 8000974:	2200      	movs	r2, #0
 8000976:	0018      	movs	r0, r3
 8000978:	f002 fb8e 	bl	8003098 <HAL_TIM_PWM_ConfigChannel>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8000980:	f7ff fe7a 	bl	8000678 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <MX_TIM2_Init+0x108>)
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f932 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b00e      	add	sp, #56	; 0x38
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000d8 	.word	0x200000d8

08000998 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_TIM14_Init+0x40>)
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <MX_TIM14_Init+0x44>)
 80009a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 19;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009a4:	2213      	movs	r2, #19
 80009a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009b0:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <MX_TIM14_Init+0x48>)
 80009b2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <MX_TIM14_Init+0x40>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 f991 	bl	8002cea <HAL_TIM_Base_Init>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80009cc:	f7ff fe54 	bl	8000678 <Error_Handler>
  }

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000118 	.word	0x20000118
 80009dc:	40002000 	.word	0x40002000
 80009e0:	00001387 	.word	0x00001387

080009e4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09c      	sub	sp, #112	; 0x70
 80009e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	2360      	movs	r3, #96	; 0x60
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	0018      	movs	r0, r3
 80009f0:	2310      	movs	r3, #16
 80009f2:	001a      	movs	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f003 fa4d 	bl	8003e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	2354      	movs	r3, #84	; 0x54
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	0018      	movs	r0, r3
 8000a00:	230c      	movs	r3, #12
 8000a02:	001a      	movs	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	f003 fa45 	bl	8003e94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0a:	2338      	movs	r3, #56	; 0x38
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	231c      	movs	r3, #28
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f003 fa3d 	bl	8003e94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2334      	movs	r3, #52	; 0x34
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f003 fa36 	bl	8003e94 <memset>

  htim15.Instance = TIM15;
 8000a28:	4b47      	ldr	r3, [pc, #284]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a2a:	4a48      	ldr	r2, [pc, #288]	; (8000b4c <MX_TIM15_Init+0x168>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 8000a2e:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a30:	2213      	movs	r2, #19
 8000a32:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b44      	ldr	r3, [pc, #272]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 249;
 8000a3a:	4b43      	ldr	r3, [pc, #268]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a3c:	22f9      	movs	r2, #249	; 0xf9
 8000a3e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000a46:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	4b3e      	ldr	r3, [pc, #248]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000a52:	4b3d      	ldr	r3, [pc, #244]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a54:	0018      	movs	r0, r3
 8000a56:	f002 f948 	bl	8002cea <HAL_TIM_Base_Init>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000a5e:	f7ff fe0b 	bl	8000678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a62:	2160      	movs	r1, #96	; 0x60
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	0152      	lsls	r2, r2, #5
 8000a6a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000a6c:	187a      	adds	r2, r7, r1
 8000a6e:	4b36      	ldr	r3, [pc, #216]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 fc0e 	bl	8003294 <HAL_TIM_ConfigClockSource>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000a7c:	f7ff fdfc 	bl	8000678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000a80:	4b31      	ldr	r3, [pc, #196]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 f95d 	bl	8002d42 <HAL_TIM_PWM_Init>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000a8c:	f7ff fdf4 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a90:	2154      	movs	r1, #84	; 0x54
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000a9e:	187a      	adds	r2, r7, r1
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f003 f8bd 	bl	8003c24 <HAL_TIMEx_MasterConfigSynchronization>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000aae:	f7ff fde3 	bl	8000678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab2:	2138      	movs	r1, #56	; 0x38
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2260      	movs	r2, #96	; 0x60
 8000ab8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 124;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	227c      	movs	r2, #124	; 0x7c
 8000abe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	1879      	adds	r1, r7, r1
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 fad7 	bl	8003098 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000aee:	f7ff fdc3 	bl	8000678 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	0192      	lsls	r2, r2, #6
 8000b16:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b24:	1d3a      	adds	r2, r7, #4
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000b28:	0011      	movs	r1, r2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f003 f8d0 	bl	8003cd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8000b34:	f7ff fda0 	bl	8000678 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <MX_TIM15_Init+0x164>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f858 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b01c      	add	sp, #112	; 0x70
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000098 	.word	0x20000098
 8000b4c:	40014000 	.word	0x40014000

08000b50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d10c      	bne.n	8000b7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b74:	2201      	movs	r2, #1
 8000b76:	4013      	ands	r3, r2
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000b7c:	e02e      	b.n	8000bdc <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM14)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_TIM_Base_MspInit+0x98>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d116      	bne.n	8000bb6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b8c:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	0209      	lsls	r1, r1, #8
 8000b92:	430a      	orrs	r2, r1
 8000b94:	641a      	str	r2, [r3, #64]	; 0x40
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	021b      	lsls	r3, r3, #8
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2013      	movs	r0, #19
 8000baa:	f000 fc5d 	bl	8001468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000bae:	2013      	movs	r0, #19
 8000bb0:	f000 fc6f 	bl	8001492 <HAL_NVIC_EnableIRQ>
}
 8000bb4:	e012      	b.n	8000bdc <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM15)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <HAL_TIM_Base_MspInit+0x9c>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d10d      	bne.n	8000bdc <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	0249      	lsls	r1, r1, #9
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_TIM_Base_MspInit+0x94>)
 8000bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	025b      	lsls	r3, r3, #9
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b006      	add	sp, #24
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40002000 	.word	0x40002000
 8000bec:	40014000 	.word	0x40014000

08000bf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	2314      	movs	r3, #20
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	2314      	movs	r3, #20
 8000c00:	001a      	movs	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f003 f946 	bl	8003e94 <memset>
  if(timHandle->Instance==TIM2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	05db      	lsls	r3, r3, #23
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d124      	bne.n	8000c5e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <HAL_TIM_MspPostInit+0xc8>)
 8000c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <HAL_TIM_MspPostInit+0xc8>)
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <HAL_TIM_MspPostInit+0xc8>)
 8000c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c24:	2201      	movs	r2, #1
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c2c:	2114      	movs	r1, #20
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	0212      	lsls	r2, r2, #8
 8000c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2202      	movs	r2, #2
 8000c3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	187a      	adds	r2, r7, r1
 8000c50:	23a0      	movs	r3, #160	; 0xa0
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	0011      	movs	r1, r2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fd7a 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000c5c:	e027      	b.n	8000cae <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM15)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <HAL_TIM_MspPostInit+0xcc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d122      	bne.n	8000cae <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_TIM_MspPostInit+0xc8>)
 8000c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_TIM_MspPostInit+0xc8>)
 8000c6e:	2101      	movs	r1, #1
 8000c70:	430a      	orrs	r2, r1
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_TIM_MspPostInit+0xc8>)
 8000c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LS_Pin;
 8000c80:	2114      	movs	r1, #20
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2204      	movs	r2, #4
 8000c86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LS_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	187a      	adds	r2, r7, r1
 8000ca2:	23a0      	movs	r3, #160	; 0xa0
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 fd51 	bl	8001750 <HAL_GPIO_Init>
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b00a      	add	sp, #40	; 0x28
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40014000 	.word	0x40014000

08000cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cc6:	e003      	b.n	8000cd0 <LoopCopyDataInit>

08000cc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000cca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ccc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cce:	3104      	adds	r1, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <LoopForever+0xa>)
  ldr r3, =_edata
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LoopForever+0xe>)
  adds r2, r0, r1
 8000cd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cd8:	d3f6      	bcc.n	8000cc8 <CopyDataInit>
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopForever+0x12>)
  b LoopFillZerobss
 8000cdc:	e002      	b.n	8000ce4 <LoopFillZerobss>

08000cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ce0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce2:	3204      	adds	r2, #4

08000ce4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <LoopForever+0x16>)
  cmp r2, r3
 8000ce6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ce8:	d3f9      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cea:	f7ff fdc3 	bl	8000874 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000cee:	f003 f8ad 	bl	8003e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf2:	f7ff fc25 	bl	8000540 <main>

08000cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   r0, =_estack
 8000cf8:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000cfc:	08003f58 	.word	0x08003f58
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d08:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d0c:	2000015c 	.word	0x2000015c

08000d10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_COMP_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x3c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_Init+0x3c>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0049      	lsls	r1, r1, #1
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f810 	bl	8000d54 <HAL_InitTick>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d38:	1dfb      	adds	r3, r7, #7
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e001      	b.n	8000d44 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fd42 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40022000 	.word	0x40022000

08000d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_InitTick+0x88>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d02b      	beq.n	8000dc4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_InitTick+0x8c>)
 8000d6e:	681c      	ldr	r4, [r3, #0]
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <HAL_InitTick+0x88>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	0019      	movs	r1, r3
 8000d76:	23fa      	movs	r3, #250	; 0xfa
 8000d78:	0098      	lsls	r0, r3, #2
 8000d7a:	f7ff f9c3 	bl	8000104 <__udivsi3>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	0019      	movs	r1, r3
 8000d82:	0020      	movs	r0, r4
 8000d84:	f7ff f9be 	bl	8000104 <__udivsi3>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fb91 	bl	80014b2 <HAL_SYSTICK_Config>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d112      	bne.n	8000dba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d80a      	bhi.n	8000db0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	425b      	negs	r3, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 fb60 	bl	8001468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_InitTick+0x90>)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e00d      	b.n	8000dcc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e008      	b.n	8000dcc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dba:	230f      	movs	r3, #15
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
 8000dc2:	e003      	b.n	8000dcc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b005      	add	sp, #20
 8000dd8:	bd90      	pop	{r4, r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <HAL_IncTick+0x18>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <HAL_IncTick+0x1c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	18d2      	adds	r2, r2, r3
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_IncTick+0x18>)
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000158 	.word	0x20000158
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <HAL_GetTick+0x10>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	20000158 	.word	0x20000158

08000e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e24:	f7ff fff0 	bl	8000e08 <HAL_GetTick>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	d004      	beq.n	8000e40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_Delay+0x40>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	f7ff ffe1 	bl	8000e08 <HAL_GetTick>
 8000e46:	0002      	movs	r2, r0
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d8f7      	bhi.n	8000e42 <HAL_Delay+0x26>
  {
  }
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b004      	add	sp, #16
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *         This parameter can be one of the following values:
  *         @arg @ref SYSCFG_VREFBUF_VoltageScale
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4393      	bics	r3, r2
 8000e70:	0019      	movs	r1, r3
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40010030 	.word	0x40010030

08000e88 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2202      	movs	r2, #2
 8000e96:	4393      	bics	r3, r2
 8000e98:	0019      	movs	r1, r3
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	40010030 	.word	0x40010030

08000eb0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8000ec2:	f7ff ffa1 	bl	8000e08 <HAL_GetTick>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	607b      	str	r3, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000eca:	e008      	b.n	8000ede <HAL_SYSCFG_EnableVREFBUF+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8000ecc:	f7ff ff9c 	bl	8000e08 <HAL_GetTick>
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b0a      	cmp	r3, #10
 8000ed8:	d901      	bls.n	8000ede <HAL_SYSCFG_EnableVREFBUF+0x2e>
    {
      return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e005      	b.n	8000eea <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d0f1      	beq.n	8000ecc <HAL_SYSCFG_EnableVREFBUF+0x1c>
    }
  }

  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40010030 	.word	0x40010030

08000ef8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <LL_EXTI_EnableIT_0_31+0x20>)
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	58d2      	ldr	r2, [r2, r3]
 8000f06:	4904      	ldr	r1, [pc, #16]	; (8000f18 <LL_EXTI_EnableIT_0_31+0x20>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	508b      	str	r3, [r1, r2]
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021800 	.word	0x40021800

08000f1c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <LL_EXTI_DisableIT_0_31+0x24>)
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	58d3      	ldr	r3, [r2, r3]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	43d2      	mvns	r2, r2
 8000f2e:	4904      	ldr	r1, [pc, #16]	; (8000f40 <LL_EXTI_DisableIT_0_31+0x24>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	508b      	str	r3, [r1, r2]
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40021800 	.word	0x40021800

08000f44 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000f4e:	2384      	movs	r3, #132	; 0x84
 8000f50:	58d2      	ldr	r2, [r2, r3]
 8000f52:	4904      	ldr	r1, [pc, #16]	; (8000f64 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	2284      	movs	r2, #132	; 0x84
 8000f5a:	508b      	str	r3, [r1, r2]

}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021800 	.word	0x40021800

08000f68 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000f72:	2384      	movs	r3, #132	; 0x84
 8000f74:	58d3      	ldr	r3, [r2, r3]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	43d2      	mvns	r2, r2
 8000f7a:	4904      	ldr	r1, [pc, #16]	; (8000f8c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2284      	movs	r2, #132	; 0x84
 8000f80:	508b      	str	r3, [r1, r2]
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	40021800 	.word	0x40021800

08000f90 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000f9a:	6819      	ldr	r1, [r3, #0]
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]

}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021800 	.word	0x40021800

08000fb0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	40021800 	.word	0x40021800

08000fd4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	605a      	str	r2, [r3, #4]
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021800 	.word	0x40021800

08000ff4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	43d9      	mvns	r1, r3
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001006:	400a      	ands	r2, r1
 8001008:	605a      	str	r2, [r3, #4]
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40021800 	.word	0x40021800

08001018 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	611a      	str	r2, [r3, #16]
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40021800 	.word	0x40021800

08001034 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	60da      	str	r2, [r3, #12]
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40021800 	.word	0x40021800

08001050 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800105c:	231f      	movs	r3, #31
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 800106a:	231f      	movs	r3, #31
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e13a      	b.n	80012ea <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	0fdb      	lsrs	r3, r3, #31
 800107c:	07da      	lsls	r2, r3, #31
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	061b      	lsls	r3, r3, #24
 8001082:	429a      	cmp	r2, r3
 8001084:	d104      	bne.n	8001090 <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8001086:	231f      	movs	r3, #31
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	e12c      	b.n	80012ea <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2229      	movs	r2, #41	; 0x29
 8001094:	5c9b      	ldrb	r3, [r3, r2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10a      	bne.n	80010b2 <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2228      	movs	r2, #40	; 0x28
 80010a0:	2100      	movs	r1, #0
 80010a2:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff f8e7 	bl	8000280 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2230      	movs	r2, #48	; 0x30
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80010de:	4313      	orrs	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a83      	ldr	r2, [pc, #524]	; (80012f8 <HAL_COMP_Init+0x2a8>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	0019      	movs	r1, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	430a      	orrs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	429a      	cmp	r2, r3
 8001102:	d10d      	bne.n	8001120 <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001104:	4b7d      	ldr	r3, [pc, #500]	; (80012fc <HAL_COMP_Init+0x2ac>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b7c      	ldr	r3, [pc, #496]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800110a:	497d      	ldr	r1, [pc, #500]	; (8001300 <HAL_COMP_Init+0x2b0>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001110:	4b7a      	ldr	r3, [pc, #488]	; (80012fc <HAL_COMP_Init+0x2ac>)
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4b79      	ldr	r3, [pc, #484]	; (80012fc <HAL_COMP_Init+0x2ac>)
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	0109      	lsls	r1, r1, #4
 800111a:	430a      	orrs	r2, r1
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	e01f      	b.n	8001160 <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	23c0      	movs	r3, #192	; 0xc0
 8001126:	015b      	lsls	r3, r3, #5
 8001128:	429a      	cmp	r2, r3
 800112a:	d10d      	bne.n	8001148 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800112c:	4b73      	ldr	r3, [pc, #460]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b72      	ldr	r3, [pc, #456]	; (80012fc <HAL_COMP_Init+0x2ac>)
 8001132:	2180      	movs	r1, #128	; 0x80
 8001134:	0109      	lsls	r1, r1, #4
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800113a:	4b70      	ldr	r3, [pc, #448]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <HAL_COMP_Init+0x2ac>)
 8001140:	496f      	ldr	r1, [pc, #444]	; (8001300 <HAL_COMP_Init+0x2b0>)
 8001142:	400a      	ands	r2, r1
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	e00b      	b.n	8001160 <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001148:	4b6c      	ldr	r3, [pc, #432]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800114e:	496c      	ldr	r1, [pc, #432]	; (8001300 <HAL_COMP_Init+0x2b0>)
 8001150:	400a      	ands	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001154:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_COMP_Init+0x2ac>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4b68      	ldr	r3, [pc, #416]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800115a:	4969      	ldr	r1, [pc, #420]	; (8001300 <HAL_COMP_Init+0x2b0>)
 800115c:	400a      	ands	r2, r1
 800115e:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	01d2      	lsls	r2, r2, #7
 8001168:	4293      	cmp	r3, r2
 800116a:	d006      	beq.n	800117a <HAL_COMP_Init+0x12a>
 800116c:	22a0      	movs	r2, #160	; 0xa0
 800116e:	01d2      	lsls	r2, r2, #7
 8001170:	4293      	cmp	r3, r2
 8001172:	d010      	beq.n	8001196 <HAL_COMP_Init+0x146>
 8001174:	2b01      	cmp	r3, #1
 8001176:	d01c      	beq.n	80011b2 <HAL_COMP_Init+0x162>
 8001178:	e02a      	b.n	80011d0 <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800117a:	4b60      	ldr	r3, [pc, #384]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b5f      	ldr	r3, [pc, #380]	; (80012fc <HAL_COMP_Init+0x2ac>)
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	01c9      	lsls	r1, r1, #7
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001188:	4b5c      	ldr	r3, [pc, #368]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b5b      	ldr	r3, [pc, #364]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800118e:	495d      	ldr	r1, [pc, #372]	; (8001304 <HAL_COMP_Init+0x2b4>)
 8001190:	400a      	ands	r2, r1
 8001192:	605a      	str	r2, [r3, #4]
        break;
 8001194:	e029      	b.n	80011ea <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001196:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_COMP_Init+0x2ac>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b58      	ldr	r3, [pc, #352]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800119c:	4959      	ldr	r1, [pc, #356]	; (8001304 <HAL_COMP_Init+0x2b4>)
 800119e:	400a      	ands	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80011a2:	4b56      	ldr	r3, [pc, #344]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4b55      	ldr	r3, [pc, #340]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	01c9      	lsls	r1, r1, #7
 80011ac:	430a      	orrs	r2, r1
 80011ae:	605a      	str	r2, [r3, #4]
        break;
 80011b0:	e01b      	b.n	80011ea <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80011b2:	4b52      	ldr	r3, [pc, #328]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b51      	ldr	r3, [pc, #324]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	01c9      	lsls	r1, r1, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80011c0:	4b4e      	ldr	r3, [pc, #312]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	01c9      	lsls	r1, r1, #7
 80011ca:	430a      	orrs	r2, r1
 80011cc:	605a      	str	r2, [r3, #4]
        break;
 80011ce:	e00c      	b.n	80011ea <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80011d0:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b49      	ldr	r3, [pc, #292]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011d6:	494b      	ldr	r1, [pc, #300]	; (8001304 <HAL_COMP_Init+0x2b4>)
 80011d8:	400a      	ands	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80011dc:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4b46      	ldr	r3, [pc, #280]	; (80012fc <HAL_COMP_Init+0x2ac>)
 80011e2:	4948      	ldr	r1, [pc, #288]	; (8001304 <HAL_COMP_Init+0x2b4>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	605a      	str	r2, [r3, #4]
        break;
 80011e8:	46c0      	nop			; (mov r8, r8)
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2230      	movs	r2, #48	; 0x30
 80011f2:	4013      	ands	r3, r2
 80011f4:	d016      	beq.n	8001224 <HAL_COMP_Init+0x1d4>
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d113      	bne.n	8001224 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80011fc:	4b42      	ldr	r3, [pc, #264]	; (8001308 <HAL_COMP_Init+0x2b8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4942      	ldr	r1, [pc, #264]	; (800130c <HAL_COMP_Init+0x2bc>)
 8001202:	0018      	movs	r0, r3
 8001204:	f7fe ff7e 	bl	8000104 <__udivsi3>
 8001208:	0003      	movs	r3, r0
 800120a:	001a      	movs	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	189b      	adds	r3, r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8001216:	e002      	b.n	800121e <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3b01      	subs	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f9      	bne.n	8001218 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a34      	ldr	r2, [pc, #208]	; (80012fc <HAL_COMP_Init+0x2ac>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d102      	bne.n	8001234 <HAL_COMP_Init+0x1e4>
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	e001      	b.n	8001238 <HAL_COMP_Init+0x1e8>
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	02db      	lsls	r3, r3, #11
 8001238:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	2203      	movs	r2, #3
 8001240:	4013      	ands	r3, r2
 8001242:	d040      	beq.n	80012c6 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	2210      	movs	r2, #16
 800124a:	4013      	ands	r3, r2
 800124c:	d004      	beq.n	8001258 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fe9d 	bl	8000f90 <LL_EXTI_EnableRisingTrig_0_31>
 8001256:	e003      	b.n	8001260 <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff fea8 	bl	8000fb0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	2220      	movs	r2, #32
 8001266:	4013      	ands	r3, r2
 8001268:	d004      	beq.n	8001274 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff feb1 	bl	8000fd4 <LL_EXTI_EnableFallingTrig_0_31>
 8001272:	e003      	b.n	800127c <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff febc 	bl	8000ff4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	0018      	movs	r0, r3
 8001280:	f7ff fed8 	bl	8001034 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff fec6 	bl	8001018 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d004      	beq.n	80012a0 <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff fe53 	bl	8000f44 <LL_EXTI_EnableEvent_0_31>
 800129e:	e003      	b.n	80012a8 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff fe60 	bl	8000f68 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	2201      	movs	r2, #1
 80012ae:	4013      	ands	r3, r2
 80012b0:	d004      	beq.n	80012bc <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff fe1f 	bl	8000ef8 <LL_EXTI_EnableIT_0_31>
 80012ba:	e00c      	b.n	80012d6 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fe2c 	bl	8000f1c <LL_EXTI_DisableIT_0_31>
 80012c4:	e007      	b.n	80012d6 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff fe4d 	bl	8000f68 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fe23 	bl	8000f1c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2229      	movs	r2, #41	; 0x29
 80012da:	5c9b      	ldrb	r3, [r3, r2]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2229      	movs	r2, #41	; 0x29
 80012e6:	2101      	movs	r1, #1
 80012e8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80012ea:	231f      	movs	r3, #31
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	781b      	ldrb	r3, [r3, #0]
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b008      	add	sp, #32
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	fe00740f 	.word	0xfe00740f
 80012fc:	40010200 	.word	0x40010200
 8001300:	fffff7ff 	.word	0xfffff7ff
 8001304:	ffffbfff 	.word	0xffffbfff
 8001308:	20000000 	.word	0x20000000
 800130c:	00030d40 	.word	0x00030d40

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	0002      	movs	r2, r0
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b7f      	cmp	r3, #127	; 0x7f
 8001322:	d809      	bhi.n	8001338 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001324:	1dfb      	adds	r3, r7, #7
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	001a      	movs	r2, r3
 800132a:	231f      	movs	r3, #31
 800132c:	401a      	ands	r2, r3
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_EnableIRQ+0x30>)
 8001330:	2101      	movs	r1, #1
 8001332:	4091      	lsls	r1, r2
 8001334:	000a      	movs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
  }
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}
 8001340:	e000e100 	.word	0xe000e100

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	0002      	movs	r2, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b7f      	cmp	r3, #127	; 0x7f
 8001358:	d828      	bhi.n	80013ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <__NVIC_SetPriority+0xd4>)
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	33c0      	adds	r3, #192	; 0xc0
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	589b      	ldr	r3, [r3, r2]
 800136a:	1dfa      	adds	r2, r7, #7
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	0011      	movs	r1, r2
 8001370:	2203      	movs	r2, #3
 8001372:	400a      	ands	r2, r1
 8001374:	00d2      	lsls	r2, r2, #3
 8001376:	21ff      	movs	r1, #255	; 0xff
 8001378:	4091      	lsls	r1, r2
 800137a:	000a      	movs	r2, r1
 800137c:	43d2      	mvns	r2, r2
 800137e:	401a      	ands	r2, r3
 8001380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	019b      	lsls	r3, r3, #6
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	401a      	ands	r2, r3
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	0018      	movs	r0, r3
 8001390:	2303      	movs	r3, #3
 8001392:	4003      	ands	r3, r0
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001398:	481f      	ldr	r0, [pc, #124]	; (8001418 <__NVIC_SetPriority+0xd4>)
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	430a      	orrs	r2, r1
 80013a4:	33c0      	adds	r3, #192	; 0xc0
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013aa:	e031      	b.n	8001410 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <__NVIC_SetPriority+0xd8>)
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	0019      	movs	r1, r3
 80013b4:	230f      	movs	r3, #15
 80013b6:	400b      	ands	r3, r1
 80013b8:	3b08      	subs	r3, #8
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3306      	adds	r3, #6
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	18d3      	adds	r3, r2, r3
 80013c2:	3304      	adds	r3, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	1dfa      	adds	r2, r7, #7
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	0011      	movs	r1, r2
 80013cc:	2203      	movs	r2, #3
 80013ce:	400a      	ands	r2, r1
 80013d0:	00d2      	lsls	r2, r2, #3
 80013d2:	21ff      	movs	r1, #255	; 0xff
 80013d4:	4091      	lsls	r1, r2
 80013d6:	000a      	movs	r2, r1
 80013d8:	43d2      	mvns	r2, r2
 80013da:	401a      	ands	r2, r3
 80013dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	401a      	ands	r2, r3
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	0018      	movs	r0, r3
 80013ec:	2303      	movs	r3, #3
 80013ee:	4003      	ands	r3, r0
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <__NVIC_SetPriority+0xd8>)
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	001c      	movs	r4, r3
 80013fc:	230f      	movs	r3, #15
 80013fe:	4023      	ands	r3, r4
 8001400:	3b08      	subs	r3, #8
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	430a      	orrs	r2, r1
 8001406:	3306      	adds	r3, #6
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	18c3      	adds	r3, r0, r3
 800140c:	3304      	adds	r3, #4
 800140e:	601a      	str	r2, [r3, #0]
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b003      	add	sp, #12
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <SysTick_Config+0x40>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e010      	b.n	8001458 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <SysTick_Config+0x44>)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	3a01      	subs	r2, #1
 800143c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	2301      	movs	r3, #1
 8001440:	425b      	negs	r3, r3
 8001442:	2103      	movs	r1, #3
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff ff7d 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SysTick_Config+0x44>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x44>)
 8001452:	2207      	movs	r2, #7
 8001454:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001456:	2300      	movs	r3, #0
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}
 8001460:	00ffffff 	.word	0x00ffffff
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	210f      	movs	r1, #15
 8001474:	187b      	adds	r3, r7, r1
 8001476:	1c02      	adds	r2, r0, #0
 8001478:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	187b      	adds	r3, r7, r1
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b25b      	sxtb	r3, r3
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	0002      	movs	r2, r0
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ff33 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b002      	add	sp, #8
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff ffaf 	bl	8001420 <SysTick_Config>
 80014c2:	0003      	movs	r3, r0
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b002      	add	sp, #8
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e015      	b.n	800150a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	791b      	ldrb	r3, [r3, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d106      	bne.n	80014f6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7fe ff31 	bl	8000358 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	795b      	ldrb	r3, [r3, #5]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_DAC_ConfigChannel+0x1c>
 800152c:	2302      	movs	r3, #2
 800152e:	e107      	b.n	8001740 <HAL_DAC_ConfigChannel+0x22c>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2202      	movs	r2, #2
 800153a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b04      	cmp	r3, #4
 8001542:	d000      	beq.n	8001546 <HAL_DAC_ConfigChannel+0x32>
 8001544:	e074      	b.n	8001630 <HAL_DAC_ConfigChannel+0x11c>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d138      	bne.n	80015be <HAL_DAC_ConfigChannel+0xaa>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800154c:	f7ff fc5c 	bl	8000e08 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	61fb      	str	r3, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001554:	e011      	b.n	800157a <HAL_DAC_ConfigChannel+0x66>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001556:	f7ff fc57 	bl	8000e08 <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d90a      	bls.n	800157a <HAL_DAC_ConfigChannel+0x66>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	2208      	movs	r2, #8
 800156a:	431a      	orrs	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2203      	movs	r2, #3
 8001574:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e0e2      	b.n	8001740 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	4013      	ands	r3, r2
 8001586:	d1e6      	bne.n	8001556 <HAL_DAC_ConfigChannel+0x42>
        }
      }
      HAL_Delay(1);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fc47 	bl	8000e1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	6992      	ldr	r2, [r2, #24]
 8001596:	641a      	str	r2, [r3, #64]	; 0x40
 8001598:	e01e      	b.n	80015d8 <HAL_DAC_ConfigChannel+0xc4>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800159a:	f7ff fc35 	bl	8000e08 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d90a      	bls.n	80015be <HAL_DAC_ConfigChannel+0xaa>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2208      	movs	r2, #8
 80015ae:	431a      	orrs	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2203      	movs	r2, #3
 80015b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0c0      	b.n	8001740 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dbe8      	blt.n	800159a <HAL_DAC_ConfigChannel+0x86>
        }
      }
      HAL_Delay(1U);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff fc27 	bl	8000e1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	6992      	ldr	r2, [r2, #24]
 80015d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	2110      	movs	r1, #16
 80015e2:	400a      	ands	r2, r1
 80015e4:	4958      	ldr	r1, [pc, #352]	; (8001748 <HAL_DAC_ConfigChannel+0x234>)
 80015e6:	4091      	lsls	r1, r2
 80015e8:	000a      	movs	r2, r1
 80015ea:	43d2      	mvns	r2, r2
 80015ec:	401a      	ands	r2, r3
 80015ee:	0011      	movs	r1, r2
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2010      	movs	r0, #16
 80015f8:	4003      	ands	r3, r0
 80015fa:	409a      	lsls	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	2110      	movs	r1, #16
 800160e:	400a      	ands	r2, r1
 8001610:	21ff      	movs	r1, #255	; 0xff
 8001612:	4091      	lsls	r1, r2
 8001614:	000a      	movs	r2, r1
 8001616:	43d2      	mvns	r2, r2
 8001618:	401a      	ands	r2, r3
 800161a:	0011      	movs	r1, r2
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2010      	movs	r0, #16
 8001624:	4003      	ands	r3, r0
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d11d      	bne.n	8001674 <HAL_DAC_ConfigChannel+0x160>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2210      	movs	r2, #16
 8001644:	4013      	ands	r3, r2
 8001646:	221f      	movs	r2, #31
 8001648:	409a      	lsls	r2, r3
 800164a:	0013      	movs	r3, r2
 800164c:	43da      	mvns	r2, r3
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2210      	movs	r2, #16
 800165e:	4013      	ands	r3, r2
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2210      	movs	r2, #16
 8001680:	4013      	ands	r3, r2
 8001682:	2207      	movs	r2, #7
 8001684:	409a      	lsls	r2, r3
 8001686:	0013      	movs	r3, r2
 8001688:	43da      	mvns	r2, r3
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	431a      	orrs	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2210      	movs	r2, #16
 80016a6:	4013      	ands	r3, r2
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2110      	movs	r1, #16
 80016c6:	400b      	ands	r3, r1
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	01c9      	lsls	r1, r1, #7
 80016cc:	4099      	lsls	r1, r3
 80016ce:	000b      	movs	r3, r1
 80016d0:	43d9      	mvns	r1, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	400a      	ands	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2210      	movs	r2, #16
 80016e6:	4013      	ands	r3, r2
 80016e8:	4a18      	ldr	r2, [pc, #96]	; (800174c <HAL_DAC_ConfigChannel+0x238>)
 80016ea:	409a      	lsls	r2, r3
 80016ec:	0013      	movs	r3, r2
 80016ee:	43da      	mvns	r2, r3
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2210      	movs	r2, #16
 8001700:	4013      	ands	r3, r2
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	409a      	lsls	r2, r3
 8001706:	0013      	movs	r3, r2
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2110      	movs	r1, #16
 8001720:	400b      	ands	r3, r1
 8001722:	21c0      	movs	r1, #192	; 0xc0
 8001724:	4099      	lsls	r1, r3
 8001726:	000b      	movs	r3, r1
 8001728:	43d9      	mvns	r1, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	400a      	ands	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2201      	movs	r2, #1
 8001736:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b008      	add	sp, #32
 8001746:	bd80      	pop	{r7, pc}
 8001748:	000003ff 	.word	0x000003ff
 800174c:	00000ffe 	.word	0x00000ffe

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175e:	e147      	b.n	80019f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2101      	movs	r1, #1
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4091      	lsls	r1, r2
 800176a:	000a      	movs	r2, r1
 800176c:	4013      	ands	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <HAL_GPIO_Init+0x28>
 8001776:	e138      	b.n	80019ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x38>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b12      	cmp	r3, #18
 8001786:	d123      	bne.n	80017d0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	08da      	lsrs	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3208      	adds	r2, #8
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	58d3      	ldr	r3, [r2, r3]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2207      	movs	r2, #7
 800179a:	4013      	ands	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	409a      	lsls	r2, r3
 80017a2:	0013      	movs	r3, r2
 80017a4:	43da      	mvns	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2107      	movs	r1, #7
 80017b4:	400b      	ands	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	08da      	lsrs	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3208      	adds	r2, #8
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	6939      	ldr	r1, [r7, #16]
 80017ce:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	409a      	lsls	r2, r3
 80017de:	0013      	movs	r3, r2
 80017e0:	43da      	mvns	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2203      	movs	r2, #3
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d00b      	beq.n	8001824 <HAL_GPIO_Init+0xd4>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001818:	2b11      	cmp	r3, #17
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b12      	cmp	r3, #18
 8001822:	d130      	bne.n	8001886 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	409a      	lsls	r2, r3
 8001832:	0013      	movs	r3, r2
 8001834:	43da      	mvns	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185a:	2201      	movs	r2, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	2201      	movs	r2, #1
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
 8001878:	0013      	movs	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	43da      	mvns	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	055b      	lsls	r3, r3, #21
 80018be:	4013      	ands	r3, r2
 80018c0:	d100      	bne.n	80018c4 <HAL_GPIO_Init+0x174>
 80018c2:	e092      	b.n	80019ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80018c4:	4a50      	ldr	r2, [pc, #320]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3318      	adds	r3, #24
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	589b      	ldr	r3, [r3, r2]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2203      	movs	r2, #3
 80018d6:	4013      	ands	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	220f      	movs	r2, #15
 80018dc:	409a      	lsls	r2, r3
 80018de:	0013      	movs	r3, r2
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	23a0      	movs	r3, #160	; 0xa0
 80018ec:	05db      	lsls	r3, r3, #23
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x1ca>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a45      	ldr	r2, [pc, #276]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x1c6>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a44      	ldr	r2, [pc, #272]	; (8001a10 <HAL_GPIO_Init+0x2c0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x1c2>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a43      	ldr	r2, [pc, #268]	; (8001a14 <HAL_GPIO_Init+0x2c4>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x1be>
 800190a:	2303      	movs	r3, #3
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x1cc>
 800190e:	2305      	movs	r3, #5
 8001910:	e004      	b.n	800191c <HAL_GPIO_Init+0x1cc>
 8001912:	2302      	movs	r3, #2
 8001914:	e002      	b.n	800191c <HAL_GPIO_Init+0x1cc>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_GPIO_Init+0x1cc>
 800191a:	2300      	movs	r3, #0
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	2103      	movs	r1, #3
 8001920:	400a      	ands	r2, r1
 8001922:	00d2      	lsls	r2, r2, #3
 8001924:	4093      	lsls	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800192c:	4936      	ldr	r1, [pc, #216]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3318      	adds	r3, #24
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800193a:	4a33      	ldr	r2, [pc, #204]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	58d3      	ldr	r3, [r2, r3]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43da      	mvns	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	4013      	ands	r3, r2
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001960:	4929      	ldr	r1, [pc, #164]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001968:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 800196a:	2384      	movs	r3, #132	; 0x84
 800196c:	58d3      	ldr	r3, [r2, r3]
 800196e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43da      	mvns	r2, r3
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	029b      	lsls	r3, r3, #10
 8001982:	4013      	ands	r3, r2
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800198e:	491e      	ldr	r1, [pc, #120]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 8001990:	2284      	movs	r2, #132	; 0x84
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43da      	mvns	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	035b      	lsls	r3, r3, #13
 80019ae:	4013      	ands	r3, r2
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43da      	mvns	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	039b      	lsls	r3, r3, #14
 80019d8:	4013      	ands	r3, r2
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	40da      	lsrs	r2, r3
 80019f8:	1e13      	subs	r3, r2, #0
 80019fa:	d000      	beq.n	80019fe <HAL_GPIO_Init+0x2ae>
 80019fc:	e6b0      	b.n	8001760 <HAL_GPIO_Init+0x10>
  }
}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b006      	add	sp, #24
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	50000400 	.word	0x50000400
 8001a10:	50000800 	.word	0x50000800
 8001a14:	50000c00 	.word	0x50000c00

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	0008      	movs	r0, r1
 8001a22:	0011      	movs	r1, r2
 8001a24:	1cbb      	adds	r3, r7, #2
 8001a26:	1c02      	adds	r2, r0, #0
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	1c7b      	adds	r3, r7, #1
 8001a2c:	1c0a      	adds	r2, r1, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a30:	1c7b      	adds	r3, r7, #1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a38:	1cbb      	adds	r3, r7, #2
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a42:	1cbb      	adds	r3, r7, #2
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d11f      	bne.n	8001ab8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	189b      	adds	r3, r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4912      	ldr	r1, [pc, #72]	; (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a86:	0018      	movs	r0, r3
 8001a88:	f7fe fb3c 	bl	8000104 <__udivsi3>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a92:	e008      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e001      	b.n	8001aa6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e009      	b.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	401a      	ands	r2, r3
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d0ed      	beq.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	fffff9ff 	.word	0xfffff9ff
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	000f4240 	.word	0x000f4240

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e304      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_OscConfig+0x1e>
 8001af0:	e07c      	b.n	8001bec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af2:	4bc3      	ldr	r3, [pc, #780]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2238      	movs	r2, #56	; 0x38
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001afc:	4bc0      	ldr	r3, [pc, #768]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2203      	movs	r2, #3
 8001b02:	4013      	ands	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0x3e>
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_OscConfig+0x44>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d10b      	bne.n	8001b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	4bb9      	ldr	r3, [pc, #740]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	029b      	lsls	r3, r3, #10
 8001b20:	4013      	ands	r3, r2
 8001b22:	d062      	beq.n	8001bea <HAL_RCC_OscConfig+0x116>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d15e      	bne.n	8001bea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e2df      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d107      	bne.n	8001b4c <HAL_RCC_OscConfig+0x78>
 8001b3c:	4bb0      	ldr	r3, [pc, #704]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4baf      	ldr	r3, [pc, #700]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0249      	lsls	r1, r1, #9
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e020      	b.n	8001b8e <HAL_RCC_OscConfig+0xba>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	23a0      	movs	r3, #160	; 0xa0
 8001b52:	02db      	lsls	r3, r3, #11
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d10e      	bne.n	8001b76 <HAL_RCC_OscConfig+0xa2>
 8001b58:	4ba9      	ldr	r3, [pc, #676]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4ba8      	ldr	r3, [pc, #672]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	02c9      	lsls	r1, r1, #11
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	4ba6      	ldr	r3, [pc, #664]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4ba5      	ldr	r3, [pc, #660]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0249      	lsls	r1, r1, #9
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0xba>
 8001b76:	4ba2      	ldr	r3, [pc, #648]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4ba1      	ldr	r3, [pc, #644]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	49a1      	ldr	r1, [pc, #644]	; (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b7e:	400a      	ands	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	4b9f      	ldr	r3, [pc, #636]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b9e      	ldr	r3, [pc, #632]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	499f      	ldr	r1, [pc, #636]	; (8001e08 <HAL_RCC_OscConfig+0x334>)
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d014      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff f937 	bl	8000e08 <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f932 	bl	8000e08 <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	; 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e29e      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb2:	4b93      	ldr	r3, [pc, #588]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	029b      	lsls	r3, r3, #10
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xcc>
 8001bbe:	e015      	b.n	8001bec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f922 	bl	8000e08 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bca:	f7ff f91d 	bl	8000e08 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b64      	cmp	r3, #100	; 0x64
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e289      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bdc:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	4013      	ands	r3, r2
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0xf6>
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d100      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x124>
 8001bf6:	e099      	b.n	8001d2c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf8:	4b81      	ldr	r3, [pc, #516]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2238      	movs	r2, #56	; 0x38
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2203      	movs	r2, #3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_OscConfig+0x144>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d002      	beq.n	8001c1e <HAL_RCC_OscConfig+0x14a>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d135      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1e:	4b78      	ldr	r3, [pc, #480]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4013      	ands	r3, r2
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x162>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e25c      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b72      	ldr	r3, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a74      	ldr	r2, [pc, #464]	; (8001e0c <HAL_RCC_OscConfig+0x338>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	0019      	movs	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	021a      	lsls	r2, r3, #8
 8001c46:	4b6e      	ldr	r3, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d112      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c52:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x33c>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c66:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0adb      	lsrs	r3, r3, #11
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	4013      	ands	r3, r2
 8001c70:	4a68      	ldr	r2, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x340>)
 8001c72:	40da      	lsrs	r2, r3
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_OscConfig+0x344>)
 8001c76:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c78:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <HAL_RCC_OscConfig+0x348>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff f869 	bl	8000d54 <HAL_InitTick>
 8001c82:	1e03      	subs	r3, r0, #0
 8001c84:	d051      	beq.n	8001d2a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e232      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d030      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c92:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <HAL_RCC_OscConfig+0x33c>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ca6:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cac:	2180      	movs	r1, #128	; 0x80
 8001cae:	0049      	lsls	r1, r1, #1
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f8a8 	bl	8000e08 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f8a3 	bl	8000e08 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e20f      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd0:	4b4b      	ldr	r3, [pc, #300]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_RCC_OscConfig+0x338>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	021a      	lsls	r2, r3, #8
 8001cec:	4b44      	ldr	r3, [pc, #272]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	e01b      	b.n	8001d2c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	4949      	ldr	r1, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x34c>)
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff f882 	bl	8000e08 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff f87d 	bl	8000e08 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1e9      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1c:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4013      	ands	r3, r2
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x236>
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2208      	movs	r2, #8
 8001d32:	4013      	ands	r3, r2
 8001d34:	d047      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2238      	movs	r2, #56	; 0x38
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b18      	cmp	r3, #24
 8001d40:	d10a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	2202      	movs	r2, #2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d03c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2f2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d138      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e1cb      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d019      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d64:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d66:	2101      	movs	r1, #1
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f84c 	bl	8000e08 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d76:	f7ff f847 	bl	8000e08 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1b3      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d0f1      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2a2>
 8001d92:	e018      	b.n	8001dc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f832 	bl	8000e08 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001daa:	f7ff f82d 	bl	8000e08 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e199      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d1f1      	bne.n	8001daa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2fe>
 8001dd0:	e0c6      	b.n	8001f60 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	231f      	movs	r3, #31
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2238      	movs	r2, #56	; 0x38
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	d11e      	bne.n	8001e24 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x31e>
 8001df0:	e0b6      	b.n	8001f60 <HAL_RCC_OscConfig+0x48c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d000      	beq.n	8001dfc <HAL_RCC_OscConfig+0x328>
 8001dfa:	e0b1      	b.n	8001f60 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e177      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	fffeffff 	.word	0xfffeffff
 8001e08:	fffbffff 	.word	0xfffbffff
 8001e0c:	ffff80ff 	.word	0xffff80ff
 8001e10:	ffffc7ff 	.word	0xffffc7ff
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	20000000 	.word	0x20000000
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e24:	4bb4      	ldr	r3, [pc, #720]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x360>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x362>
 8001e34:	2300      	movs	r3, #0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d011      	beq.n	8001e5e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4baf      	ldr	r3, [pc, #700]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e3e:	4bae      	ldr	r3, [pc, #696]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0549      	lsls	r1, r1, #21
 8001e44:	430a      	orrs	r2, r1
 8001e46:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e48:	4bab      	ldr	r3, [pc, #684]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	055b      	lsls	r3, r3, #21
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e56:	231f      	movs	r3, #31
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5e:	4ba7      	ldr	r3, [pc, #668]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	d11a      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e6a:	4ba4      	ldr	r3, [pc, #656]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4ba3      	ldr	r3, [pc, #652]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	0049      	lsls	r1, r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e78:	f7fe ffc6 	bl	8000e08 <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7fe ffc1 	bl	8000e08 <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e12d      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e94:	4b99      	ldr	r3, [pc, #612]	; (80020fc <HAL_RCC_OscConfig+0x628>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3e2>
 8001ea8:	4b93      	ldr	r3, [pc, #588]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eac:	4b92      	ldr	r3, [pc, #584]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x404>
 8001ebe:	4b8e      	ldr	r3, [pc, #568]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001ec0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ec2:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ece:	4b8a      	ldr	r3, [pc, #552]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x41c>
 8001ed8:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001edc:	4b86      	ldr	r3, [pc, #536]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001ede:	2101      	movs	r1, #1
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ee4:	4b84      	ldr	r3, [pc, #528]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001ee6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ee8:	4b83      	ldr	r3, [pc, #524]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001eea:	2104      	movs	r1, #4
 8001eec:	438a      	bics	r2, r1
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d014      	beq.n	8001f22 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ff86 	bl	8000e08 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f00:	e009      	b.n	8001f16 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7fe ff81 	bl	8000e08 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	4a7c      	ldr	r2, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x62c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0ec      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f16:	4b78      	ldr	r3, [pc, #480]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x42e>
 8001f20:	e013      	b.n	8001f4a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe ff71 	bl	8000e08 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2a:	e009      	b.n	8001f40 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7fe ff6c 	bl	8000e08 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	4a72      	ldr	r2, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x62c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0d7      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f40:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f4a:	231f      	movs	r3, #31
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f58:	4b67      	ldr	r3, [pc, #412]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001f5a:	496a      	ldr	r1, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x630>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d100      	bne.n	8001f6a <HAL_RCC_OscConfig+0x496>
 8001f68:	e0c1      	b.n	80020ee <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6a:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2238      	movs	r2, #56	; 0x38
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d100      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4a4>
 8001f76:	e081      	b.n	800207c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d156      	bne.n	800202e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f80:	4b5d      	ldr	r3, [pc, #372]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001f86:	4960      	ldr	r1, [pc, #384]	; (8002108 <HAL_RCC_OscConfig+0x634>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7fe ff3c 	bl	8000e08 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7fe ff37 	bl	8000e08 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0a3      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	049b      	lsls	r3, r3, #18
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a54      	ldr	r2, [pc, #336]	; (800210c <HAL_RCC_OscConfig+0x638>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	4b45      	ldr	r3, [pc, #276]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b42      	ldr	r3, [pc, #264]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0449      	lsls	r1, r1, #17
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0549      	lsls	r1, r1, #21
 8002000:	430a      	orrs	r2, r1
 8002002:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe ff00 	bl	8000e08 <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200e:	f7fe fefb 	bl	8000e08 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e067      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002020:	4b35      	ldr	r3, [pc, #212]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	049b      	lsls	r3, r3, #18
 8002028:	4013      	ands	r3, r2
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x53a>
 800202c:	e05f      	b.n	80020ee <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8002034:	4934      	ldr	r1, [pc, #208]	; (8002108 <HAL_RCC_OscConfig+0x634>)
 8002036:	400a      	ands	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8002040:	2103      	movs	r1, #3
 8002042:	438a      	bics	r2, r1
 8002044:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 800204c:	4930      	ldr	r1, [pc, #192]	; (8002110 <HAL_RCC_OscConfig+0x63c>)
 800204e:	400a      	ands	r2, r1
 8002050:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe fed9 	bl	8000e08 <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe fed4 	bl	8000e08 <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e040      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	049b      	lsls	r3, r3, #18
 8002076:	4013      	ands	r3, r2
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x588>
 800207a:	e038      	b.n	80020ee <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e033      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x624>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2203      	movs	r2, #3
 8002092:	401a      	ands	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	429a      	cmp	r2, r3
 800209a:	d126      	bne.n	80020ea <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2270      	movs	r2, #112	; 0x70
 80020a0:	401a      	ands	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d11f      	bne.n	80020ea <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	23fe      	movs	r3, #254	; 0xfe
 80020ae:	01db      	lsls	r3, r3, #7
 80020b0:	401a      	ands	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d116      	bne.n	80020ea <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	23f8      	movs	r3, #248	; 0xf8
 80020c0:	039b      	lsls	r3, r3, #14
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d10e      	bne.n	80020ea <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	23e0      	movs	r3, #224	; 0xe0
 80020d0:	051b      	lsls	r3, r3, #20
 80020d2:	401a      	ands	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	0f5b      	lsrs	r3, r3, #29
 80020e0:	075a      	lsls	r2, r3, #29
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b008      	add	sp, #32
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	00001388 	.word	0x00001388
 8002104:	efffffff 	.word	0xefffffff
 8002108:	feffffff 	.word	0xfeffffff
 800210c:	11c1808c 	.word	0x11c1808c
 8002110:	eefeffff 	.word	0xeefeffff

08002114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0e9      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002128:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2207      	movs	r2, #7
 800212e:	4013      	ands	r3, r2
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d91e      	bls.n	8002174 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2207      	movs	r2, #7
 800213c:	4393      	bics	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	4b70      	ldr	r3, [pc, #448]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002148:	f7fe fe5e 	bl	8000e08 <HAL_GetTick>
 800214c:	0003      	movs	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002150:	e009      	b.n	8002166 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002152:	f7fe fe59 	bl	8000e08 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	4a6a      	ldr	r2, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x1f4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0ca      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002166:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2207      	movs	r2, #7
 800216c:	4013      	ands	r3, r2
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d1ee      	bne.n	8002152 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2202      	movs	r2, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d015      	beq.n	80021aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2204      	movs	r2, #4
 8002184:	4013      	ands	r3, r2
 8002186:	d006      	beq.n	8002196 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002188:	4b60      	ldr	r3, [pc, #384]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 800218e:	21e0      	movs	r1, #224	; 0xe0
 8002190:	01c9      	lsls	r1, r1, #7
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <HAL_RCC_ClockConfig+0x1fc>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 80021a6:	430a      	orrs	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	4013      	ands	r3, r2
 80021b2:	d057      	beq.n	8002264 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	029b      	lsls	r3, r3, #10
 80021c4:	4013      	ands	r3, r2
 80021c6:	d12b      	bne.n	8002220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e097      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d4:	4b4d      	ldr	r3, [pc, #308]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	049b      	lsls	r3, r3, #18
 80021dc:	4013      	ands	r3, r2
 80021de:	d11f      	bne.n	8002220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e08b      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ec:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	4013      	ands	r3, r2
 80021f6:	d113      	bne.n	8002220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e07f      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d106      	bne.n	8002212 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002204:	4b41      	ldr	r3, [pc, #260]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 8002206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002208:	2202      	movs	r2, #2
 800220a:	4013      	ands	r3, r2
 800220c:	d108      	bne.n	8002220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e074      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e06d      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002220:	4b3a      	ldr	r3, [pc, #232]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2207      	movs	r2, #7
 8002226:	4393      	bics	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002234:	f7fe fde8 	bl	8000e08 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223c:	e009      	b.n	8002252 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223e:	f7fe fde3 	bl	8000e08 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	4a2f      	ldr	r2, [pc, #188]	; (8002308 <HAL_RCC_ClockConfig+0x1f4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e054      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2238      	movs	r2, #56	; 0x38
 8002258:	401a      	ands	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	429a      	cmp	r2, r3
 8002262:	d1ec      	bne.n	800223e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2207      	movs	r2, #7
 800226a:	4013      	ands	r3, r2
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d21e      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2207      	movs	r2, #7
 8002278:	4393      	bics	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	4b21      	ldr	r3, [pc, #132]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002284:	f7fe fdc0 	bl	8000e08 <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800228c:	e009      	b.n	80022a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228e:	f7fe fdbb 	bl	8000e08 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_RCC_ClockConfig+0x1f4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e02c      	b.n	80022fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_RCC_ClockConfig+0x1f0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2207      	movs	r2, #7
 80022a8:	4013      	ands	r3, r2
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1ee      	bne.n	800228e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2204      	movs	r2, #4
 80022b6:	4013      	ands	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_RCC_ClockConfig+0x200>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80022ce:	f000 f829 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022d2:	0001      	movs	r1, r0
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <HAL_RCC_ClockConfig+0x1f8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	220f      	movs	r2, #15
 80022dc:	401a      	ands	r2, r3
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_RCC_ClockConfig+0x204>)
 80022e0:	0092      	lsls	r2, r2, #2
 80022e2:	58d3      	ldr	r3, [r2, r3]
 80022e4:	221f      	movs	r2, #31
 80022e6:	4013      	ands	r3, r2
 80022e8:	000a      	movs	r2, r1
 80022ea:	40da      	lsrs	r2, r3
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_ClockConfig+0x208>)
 80022ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x20c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7fe fd2d 	bl	8000d54 <HAL_InitTick>
 80022fa:	0003      	movs	r3, r0
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b004      	add	sp, #16
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40022000 	.word	0x40022000
 8002308:	00001388 	.word	0x00001388
 800230c:	40021000 	.word	0x40021000
 8002310:	fffff0ff 	.word	0xfffff0ff
 8002314:	ffff8fff 	.word	0xffff8fff
 8002318:	08003ebc 	.word	0x08003ebc
 800231c:	20000000 	.word	0x20000000
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800232a:	4b3c      	ldr	r3, [pc, #240]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2238      	movs	r2, #56	; 0x38
 8002330:	4013      	ands	r3, r2
 8002332:	d10f      	bne.n	8002354 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002334:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0adb      	lsrs	r3, r3, #11
 800233a:	2207      	movs	r2, #7
 800233c:	4013      	ands	r3, r2
 800233e:	2201      	movs	r2, #1
 8002340:	409a      	lsls	r2, r3
 8002342:	0013      	movs	r3, r2
 8002344:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002346:	6839      	ldr	r1, [r7, #0]
 8002348:	4835      	ldr	r0, [pc, #212]	; (8002420 <HAL_RCC_GetSysClockFreq+0xfc>)
 800234a:	f7fd fedb 	bl	8000104 <__udivsi3>
 800234e:	0003      	movs	r3, r0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e05d      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002354:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2238      	movs	r2, #56	; 0x38
 800235a:	4013      	ands	r3, r2
 800235c:	2b08      	cmp	r3, #8
 800235e:	d102      	bne.n	8002366 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002360:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_GetSysClockFreq+0x100>)
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	e054      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2238      	movs	r2, #56	; 0x38
 800236c:	4013      	ands	r3, r2
 800236e:	2b10      	cmp	r3, #16
 8002370:	d138      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2203      	movs	r2, #3
 8002378:	4013      	ands	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	2207      	movs	r2, #7
 8002384:	4013      	ands	r3, r2
 8002386:	3301      	adds	r3, #1
 8002388:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d10d      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	4824      	ldr	r0, [pc, #144]	; (8002424 <HAL_RCC_GetSysClockFreq+0x100>)
 8002394:	f7fd feb6 	bl	8000104 <__udivsi3>
 8002398:	0003      	movs	r3, r0
 800239a:	0019      	movs	r1, r3
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	227f      	movs	r2, #127	; 0x7f
 80023a4:	4013      	ands	r3, r2
 80023a6:	434b      	muls	r3, r1
 80023a8:	617b      	str	r3, [r7, #20]
        break;
 80023aa:	e00d      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	481c      	ldr	r0, [pc, #112]	; (8002420 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023b0:	f7fd fea8 	bl	8000104 <__udivsi3>
 80023b4:	0003      	movs	r3, r0
 80023b6:	0019      	movs	r1, r3
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	227f      	movs	r2, #127	; 0x7f
 80023c0:	4013      	ands	r3, r2
 80023c2:	434b      	muls	r3, r1
 80023c4:	617b      	str	r3, [r7, #20]
        break;
 80023c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0f5b      	lsrs	r3, r3, #29
 80023ce:	2207      	movs	r2, #7
 80023d0:	4013      	ands	r3, r2
 80023d2:	3301      	adds	r3, #1
 80023d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	6978      	ldr	r0, [r7, #20]
 80023da:	f7fd fe93 	bl	8000104 <__udivsi3>
 80023de:	0003      	movs	r3, r0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	e015      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2238      	movs	r2, #56	; 0x38
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d103      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2238      	movs	r2, #56	; 0x38
 80023fe:	4013      	ands	r3, r2
 8002400:	2b18      	cmp	r3, #24
 8002402:	d103      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002404:	23fa      	movs	r3, #250	; 0xfa
 8002406:	01db      	lsls	r3, r3, #7
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e001      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002410:	693b      	ldr	r3, [r7, #16]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b006      	add	sp, #24
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	40021000 	.word	0x40021000
 8002420:	00f42400 	.word	0x00f42400
 8002424:	007a1200 	.word	0x007a1200

08002428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002430:	2313      	movs	r3, #19
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002438:	2312      	movs	r3, #18
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	4013      	ands	r3, r2
 800244a:	d100      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800244c:	e0a4      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2311      	movs	r3, #17
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4bc3      	ldr	r3, [pc, #780]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	055b      	lsls	r3, r3, #21
 800245e:	4013      	ands	r3, r2
 8002460:	d111      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4bc0      	ldr	r3, [pc, #768]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002466:	4bbf      	ldr	r3, [pc, #764]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0549      	lsls	r1, r1, #21
 800246c:	430a      	orrs	r2, r1
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002470:	4bbc      	ldr	r3, [pc, #752]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	055b      	lsls	r3, r3, #21
 8002478:	4013      	ands	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2311      	movs	r3, #17
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	2201      	movs	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002486:	4bb8      	ldr	r3, [pc, #736]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4bb7      	ldr	r3, [pc, #732]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	0049      	lsls	r1, r1, #1
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002494:	f7fe fcb8 	bl	8000e08 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800249c:	e00b      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7fe fcb3 	bl	8000e08 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d904      	bls.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80024ac:	2313      	movs	r3, #19
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2203      	movs	r2, #3
 80024b2:	701a      	strb	r2, [r3, #0]
        break;
 80024b4:	e005      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024b6:	4bac      	ldr	r3, [pc, #688]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	d0ed      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80024c2:	2313      	movs	r3, #19
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d154      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024cc:	4ba5      	ldr	r3, [pc, #660]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024d0:	23c0      	movs	r3, #192	; 0xc0
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4013      	ands	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d019      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d014      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e8:	4b9e      	ldr	r3, [pc, #632]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	4a9f      	ldr	r2, [pc, #636]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	4b9c      	ldr	r3, [pc, #624]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024f6:	4b9b      	ldr	r3, [pc, #620]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0249      	lsls	r1, r1, #9
 80024fc:	430a      	orrs	r2, r1
 80024fe:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002500:	4b98      	ldr	r3, [pc, #608]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002504:	4b97      	ldr	r3, [pc, #604]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002506:	499a      	ldr	r1, [pc, #616]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002508:	400a      	ands	r2, r1
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800250c:	4b95      	ldr	r3, [pc, #596]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	d016      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe fc75 	bl	8000e08 <HAL_GetTick>
 800251e:	0003      	movs	r3, r0
 8002520:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002522:	e00c      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fe fc70 	bl	8000e08 <HAL_GetTick>
 8002528:	0002      	movs	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	4a91      	ldr	r2, [pc, #580]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d904      	bls.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002534:	2313      	movs	r3, #19
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2203      	movs	r2, #3
 800253a:	701a      	strb	r2, [r3, #0]
            break;
 800253c:	e004      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	2202      	movs	r2, #2
 8002544:	4013      	ands	r3, r2
 8002546:	d0ed      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002548:	2313      	movs	r3, #19
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002552:	4b84      	ldr	r3, [pc, #528]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	4a85      	ldr	r2, [pc, #532]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002560:	4b80      	ldr	r3, [pc, #512]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002562:	430a      	orrs	r2, r1
 8002564:	65da      	str	r2, [r3, #92]	; 0x5c
 8002566:	e00c      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002568:	2312      	movs	r3, #18
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2213      	movs	r2, #19
 800256e:	18ba      	adds	r2, r7, r2
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e005      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002576:	2312      	movs	r3, #18
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2213      	movs	r2, #19
 800257c:	18ba      	adds	r2, r7, r2
 800257e:	7812      	ldrb	r2, [r2, #0]
 8002580:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002582:	2311      	movs	r3, #17
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258c:	4b75      	ldr	r3, [pc, #468]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800258e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002590:	4b74      	ldr	r3, [pc, #464]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002592:	4979      	ldr	r1, [pc, #484]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002594:	400a      	ands	r2, r1
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a2:	4b70      	ldr	r3, [pc, #448]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	2203      	movs	r2, #3
 80025a8:	4393      	bics	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4b6c      	ldr	r3, [pc, #432]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2202      	movs	r2, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d009      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c0:	4b68      	ldr	r3, [pc, #416]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	220c      	movs	r2, #12
 80025c6:	4393      	bics	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	4b65      	ldr	r3, [pc, #404]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025d0:	430a      	orrs	r2, r1
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2220      	movs	r2, #32
 80025da:	4013      	ands	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025de:	4b61      	ldr	r3, [pc, #388]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	4a66      	ldr	r2, [pc, #408]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025fe:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	4a5f      	ldr	r2, [pc, #380]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699a      	ldr	r2, [r3, #24]
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800260e:	430a      	orrs	r2, r1
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4013      	ands	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800261e:	4b51      	ldr	r3, [pc, #324]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800262e:	430a      	orrs	r2, r1
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	4013      	ands	r3, r2
 800263a:	d009      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800263c:	4b49      	ldr	r3, [pc, #292]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	4a51      	ldr	r2, [pc, #324]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	4b46      	ldr	r3, [pc, #280]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264c:	430a      	orrs	r2, r1
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	01db      	lsls	r3, r3, #7
 8002658:	4013      	ands	r3, r2
 800265a:	d015      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800265c:	4b41      	ldr	r3, [pc, #260]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	0899      	lsrs	r1, r3, #2
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1a      	ldr	r2, [r3, #32]
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266a:	430a      	orrs	r2, r1
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	05db      	lsls	r3, r3, #23
 8002676:	429a      	cmp	r2, r3
 8002678:	d106      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800267a:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	0249      	lsls	r1, r1, #9
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	4013      	ands	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002694:	4b33      	ldr	r3, [pc, #204]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	4393      	bics	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	039b      	lsls	r3, r3, #14
 80026b0:	4013      	ands	r3, r2
 80026b2:	d016      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	4a34      	ldr	r2, [pc, #208]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026c4:	430a      	orrs	r2, r1
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	03db      	lsls	r3, r3, #15
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d106      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	0449      	lsls	r1, r1, #17
 80026de:	430a      	orrs	r2, r1
 80026e0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	03db      	lsls	r3, r3, #15
 80026ea:	4013      	ands	r3, r2
 80026ec:	d016      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026fe:	430a      	orrs	r2, r1
 8002700:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	045b      	lsls	r3, r3, #17
 800270a:	429a      	cmp	r2, r3
 800270c:	d106      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0449      	lsls	r1, r1, #17
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	4013      	ands	r3, r2
 8002726:	d016      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002738:	430a      	orrs	r2, r1
 800273a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	01db      	lsls	r3, r3, #7
 8002744:	429a      	cmp	r2, r3
 8002746:	d106      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800274e:	2180      	movs	r1, #128	; 0x80
 8002750:	0249      	lsls	r1, r1, #9
 8002752:	430a      	orrs	r2, r1
 8002754:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002756:	2312      	movs	r3, #18
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	781b      	ldrb	r3, [r3, #0]
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b006      	add	sp, #24
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
 800276c:	fffffcff 	.word	0xfffffcff
 8002770:	fffeffff 	.word	0xfffeffff
 8002774:	00001388 	.word	0x00001388
 8002778:	efffffff 	.word	0xefffffff
 800277c:	fffff3ff 	.word	0xfffff3ff
 8002780:	fff3ffff 	.word	0xfff3ffff
 8002784:	ffcfffff 	.word	0xffcfffff
 8002788:	ffffcfff 	.word	0xffffcfff
 800278c:	ffbfffff 	.word	0xffbfffff
 8002790:	feffffff 	.word	0xfeffffff
 8002794:	ffff3fff 	.word	0xffff3fff

08002798 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027a0:	230f      	movs	r3, #15
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d100      	bne.n	80027b0 <HAL_RTC_Init+0x18>
 80027ae:	e07f      	b.n	80028b0 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2229      	movs	r2, #41	; 0x29
 80027b4:	5c9b      	ldrb	r3, [r3, r2]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10b      	bne.n	80027d4 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2228      	movs	r2, #40	; 0x28
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2288      	movs	r2, #136	; 0x88
 80027c8:	0212      	lsls	r2, r2, #8
 80027ca:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fd ffc4 	bl	800075c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2229      	movs	r2, #41	; 0x29
 80027d8:	2102      	movs	r1, #2
 80027da:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	22ca      	movs	r2, #202	; 0xca
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2253      	movs	r2, #83	; 0x53
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80027ec:	250f      	movs	r5, #15
 80027ee:	197c      	adds	r4, r7, r5
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f9c7 	bl	8002b86 <RTC_EnterInitMode>
 80027f8:	0003      	movs	r3, r0
 80027fa:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 80027fc:	197b      	adds	r3, r7, r5
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d148      	bne.n	8002896 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	492c      	ldr	r1, [pc, #176]	; (80028c0 <HAL_RTC_Init+0x128>)
 8002810:	400a      	ands	r2, r1
 8002812:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6999      	ldr	r1, [r3, #24]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6912      	ldr	r2, [r2, #16]
 800283a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6919      	ldr	r1, [r3, #16]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	041a      	lsls	r2, r3, #16
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002850:	250f      	movs	r5, #15
 8002852:	197c      	adds	r4, r7, r5
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0018      	movs	r0, r3
 8002858:	f000 f9d8 	bl	8002c0c <RTC_ExitInitMode>
 800285c:	0003      	movs	r3, r0
 800285e:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8002860:	197b      	adds	r3, r7, r5
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	00d2      	lsls	r2, r2, #3
 8002874:	08d2      	lsrs	r2, r2, #3
 8002876:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6999      	ldr	r1, [r3, #24]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	22ff      	movs	r2, #255	; 0xff
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800289e:	230f      	movs	r3, #15
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2229      	movs	r2, #41	; 0x29
 80028ac:	2101      	movs	r1, #1
 80028ae:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80028b0:	230f      	movs	r3, #15
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bdb0      	pop	{r4, r5, r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	fb8fffbf 	.word	0xfb8fffbf

080028c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80028c4:	b5b0      	push	{r4, r5, r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2228      	movs	r2, #40	; 0x28
 80028d4:	5c9b      	ldrb	r3, [r3, r2]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_RTC_SetTime+0x1a>
 80028da:	2302      	movs	r3, #2
 80028dc:	e092      	b.n	8002a04 <HAL_RTC_SetTime+0x140>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2228      	movs	r2, #40	; 0x28
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2229      	movs	r2, #41	; 0x29
 80028ea:	2102      	movs	r1, #2
 80028ec:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	22ca      	movs	r2, #202	; 0xca
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2253      	movs	r2, #83	; 0x53
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80028fe:	2513      	movs	r5, #19
 8002900:	197c      	adds	r4, r7, r5
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f93e 	bl	8002b86 <RTC_EnterInitMode>
 800290a:	0003      	movs	r3, r0
 800290c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800290e:	197b      	adds	r3, r7, r5
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d162      	bne.n	80029dc <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d125      	bne.n	8002968 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	4013      	ands	r3, r2
 8002926:	d102      	bne.n	800292e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f9b0 	bl	8002c98 <RTC_ByteToBcd2>
 8002938:	0003      	movs	r3, r0
 800293a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	785b      	ldrb	r3, [r3, #1]
 8002940:	0018      	movs	r0, r3
 8002942:	f000 f9a9 	bl	8002c98 <RTC_ByteToBcd2>
 8002946:	0003      	movs	r3, r0
 8002948:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800294a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	789b      	ldrb	r3, [r3, #2]
 8002950:	0018      	movs	r0, r3
 8002952:	f000 f9a1 	bl	8002c98 <RTC_ByteToBcd2>
 8002956:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002958:	0022      	movs	r2, r4
 800295a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	78db      	ldrb	r3, [r3, #3]
 8002960:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e017      	b.n	8002998 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2240      	movs	r2, #64	; 0x40
 8002970:	4013      	ands	r3, r2
 8002972:	d102      	bne.n	800297a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002986:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800298c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	78db      	ldrb	r3, [r3, #3]
 8002992:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RTC_SetTime+0x148>)
 80029a0:	400a      	ands	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4918      	ldr	r1, [pc, #96]	; (8002a10 <HAL_RTC_SetTime+0x14c>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6999      	ldr	r1, [r3, #24]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029cc:	2313      	movs	r3, #19
 80029ce:	18fc      	adds	r4, r7, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f91a 	bl	8002c0c <RTC_ExitInitMode>
 80029d8:	0003      	movs	r3, r0
 80029da:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80029e4:	2313      	movs	r3, #19
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2229      	movs	r2, #41	; 0x29
 80029f2:	2101      	movs	r1, #1
 80029f4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2228      	movs	r2, #40	; 0x28
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]

  return status;
 80029fe:	2313      	movs	r3, #19
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	781b      	ldrb	r3, [r3, #0]
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b006      	add	sp, #24
 8002a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a0c:	007f7f7f 	.word	0x007f7f7f
 8002a10:	fffbffff 	.word	0xfffbffff

08002a14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a14:	b5b0      	push	{r4, r5, r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2228      	movs	r2, #40	; 0x28
 8002a24:	5c9b      	ldrb	r3, [r3, r2]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_RTC_SetDate+0x1a>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e07e      	b.n	8002b2c <HAL_RTC_SetDate+0x118>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2228      	movs	r2, #40	; 0x28
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2229      	movs	r2, #41	; 0x29
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10e      	bne.n	8002a62 <HAL_RTC_SetDate+0x4e>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	001a      	movs	r2, r3
 8002a4a:	2310      	movs	r3, #16
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d008      	beq.n	8002a62 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	2210      	movs	r2, #16
 8002a56:	4393      	bics	r3, r2
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	330a      	adds	r3, #10
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11c      	bne.n	8002aa2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	78db      	ldrb	r3, [r3, #3]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f000 f913 	bl	8002c98 <RTC_ByteToBcd2>
 8002a72:	0003      	movs	r3, r0
 8002a74:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f90c 	bl	8002c98 <RTC_ByteToBcd2>
 8002a80:	0003      	movs	r3, r0
 8002a82:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a84:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	789b      	ldrb	r3, [r3, #2]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 f904 	bl	8002c98 <RTC_ByteToBcd2>
 8002a90:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a92:	0022      	movs	r2, r4
 8002a94:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	78db      	ldrb	r3, [r3, #3]
 8002aa6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002aae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ab4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	22ca      	movs	r2, #202	; 0xca
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2253      	movs	r2, #83	; 0x53
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ad0:	2513      	movs	r5, #19
 8002ad2:	197c      	adds	r4, r7, r5
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 f855 	bl	8002b86 <RTC_EnterInitMode>
 8002adc:	0003      	movs	r3, r0
 8002ade:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002ae0:	197b      	adds	r3, r7, r5
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4911      	ldr	r1, [pc, #68]	; (8002b34 <HAL_RTC_SetDate+0x120>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002af4:	2313      	movs	r3, #19
 8002af6:	18fc      	adds	r4, r7, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 f886 	bl	8002c0c <RTC_ExitInitMode>
 8002b00:	0003      	movs	r3, r0
 8002b02:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002b0c:	2313      	movs	r3, #19
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2229      	movs	r2, #41	; 0x29
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2228      	movs	r2, #40	; 0x28
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]

  return status;
 8002b26:	2313      	movs	r3, #19
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b006      	add	sp, #24
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}
 8002b34:	00ffff3f 	.word	0x00ffff3f

08002b38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	21a0      	movs	r1, #160	; 0xa0
 8002b4c:	438a      	bics	r2, r1
 8002b4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002b50:	f7fe f95a 	bl	8000e08 <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002b58:	e00a      	b.n	8002b70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b5a:	f7fe f955 	bl	8000e08 <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad2      	subs	r2, r2, r3
 8002b64:	23fa      	movs	r3, #250	; 0xfa
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d901      	bls.n	8002b70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e006      	b.n	8002b7e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d0ee      	beq.n	8002b5a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	0018      	movs	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b004      	add	sp, #16
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002b8e:	230f      	movs	r3, #15
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2240      	movs	r2, #64	; 0x40
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d12d      	bne.n	8002bfe <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002bb2:	f7fe f929 	bl	8000e08 <HAL_GetTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bba:	e015      	b.n	8002be8 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bbc:	f7fe f924 	bl	8000e08 <HAL_GetTick>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad2      	subs	r2, r2, r3
 8002bc6:	210f      	movs	r1, #15
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	1879      	adds	r1, r7, r1
 8002bcc:	7809      	ldrb	r1, [r1, #0]
 8002bce:	7019      	strb	r1, [r3, #0]
 8002bd0:	23fa      	movs	r3, #250	; 0xfa
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d907      	bls.n	8002be8 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8002bd8:	230f      	movs	r3, #15
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2203      	movs	r2, #3
 8002bde:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2229      	movs	r2, #41	; 0x29
 8002be4:	2103      	movs	r1, #3
 8002be6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2240      	movs	r2, #64	; 0x40
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d104      	bne.n	8002bfe <RTC_EnterInitMode+0x78>
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d1de      	bne.n	8002bbc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002bfe:	230f      	movs	r3, #15
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b004      	add	sp, #16
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c14:	230f      	movs	r3, #15
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <RTC_ExitInitMode+0x88>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <RTC_ExitInitMode+0x88>)
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	438a      	bics	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c28:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <RTC_ExitInitMode+0x88>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d10e      	bne.n	8002c50 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff ff7f 	bl	8002b38 <HAL_RTC_WaitForSynchro>
 8002c3a:	1e03      	subs	r3, r0, #0
 8002c3c:	d022      	beq.n	8002c84 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2229      	movs	r2, #41	; 0x29
 8002c42:	2103      	movs	r1, #3
 8002c44:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002c46:	230f      	movs	r3, #15
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e019      	b.n	8002c84 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <RTC_ExitInitMode+0x88>)
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <RTC_ExitInitMode+0x88>)
 8002c56:	2120      	movs	r1, #32
 8002c58:	438a      	bics	r2, r1
 8002c5a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff ff6a 	bl	8002b38 <HAL_RTC_WaitForSynchro>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d007      	beq.n	8002c78 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2229      	movs	r2, #41	; 0x29
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002c70:	230f      	movs	r3, #15
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2203      	movs	r2, #3
 8002c76:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <RTC_ExitInitMode+0x88>)
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <RTC_ExitInitMode+0x88>)
 8002c7e:	2120      	movs	r1, #32
 8002c80:	430a      	orrs	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002c84:	230f      	movs	r3, #15
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	40002800 	.word	0x40002800

08002c98 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002ca8:	230b      	movs	r3, #11
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	1dfa      	adds	r2, r7, #7
 8002cae:	7812      	ldrb	r2, [r2, #0]
 8002cb0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002cb2:	e008      	b.n	8002cc6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002cba:	220b      	movs	r2, #11
 8002cbc:	18bb      	adds	r3, r7, r2
 8002cbe:	18ba      	adds	r2, r7, r2
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	3a0a      	subs	r2, #10
 8002cc4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002cc6:	230b      	movs	r3, #11
 8002cc8:	18fb      	adds	r3, r7, r3
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d8f1      	bhi.n	8002cb4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	230b      	movs	r3, #11
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b2db      	uxtb	r3, r3
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01e      	b.n	8002d3a <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	223d      	movs	r2, #61	; 0x3d
 8002d00:	5c9b      	ldrb	r3, [r3, r2]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	223c      	movs	r2, #60	; 0x3c
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7fd ff1c 	bl	8000b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	223d      	movs	r2, #61	; 0x3d
 8002d1c:	2102      	movs	r1, #2
 8002d1e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	0019      	movs	r1, r3
 8002d2a:	0010      	movs	r0, r2
 8002d2c:	f000 fb9a 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	223d      	movs	r2, #61	; 0x3d
 8002d34:	2101      	movs	r1, #1
 8002d36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e01e      	b.n	8002d92 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	223d      	movs	r2, #61	; 0x3d
 8002d58:	5c9b      	ldrb	r3, [r3, r2]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	223c      	movs	r2, #60	; 0x3c
 8002d64:	2100      	movs	r1, #0
 8002d66:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 f815 	bl	8002d9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	223d      	movs	r2, #61	; 0x3d
 8002d74:	2102      	movs	r1, #2
 8002d76:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	0019      	movs	r1, r3
 8002d82:	0010      	movs	r0, r2
 8002d84:	f000 fb6e 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	223d      	movs	r2, #61	; 0x3d
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e02e      	b.n	8002e1c <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	223d      	movs	r2, #61	; 0x3d
 8002dc2:	5c9b      	ldrb	r3, [r3, r2]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	223c      	movs	r2, #60	; 0x3c
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 f825 	bl	8002e24 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	223d      	movs	r2, #61	; 0x3d
 8002dde:	2102      	movs	r1, #2
 8002de0:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	0019      	movs	r1, r3
 8002dec:	0010      	movs	r0, r2
 8002dee:	f000 fb39 	bl	8003464 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2108      	movs	r1, #8
 8002dfe:	438a      	bics	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	223d      	movs	r2, #61	; 0x3d
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b002      	add	sp, #8
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b002      	add	sp, #8
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d124      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2202      	movs	r2, #2
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11d      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	4252      	negs	r2, r2
 8002e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 fadc 	bl	8003434 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e007      	b.n	8002e8e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 facf 	bl	8003424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 fadb 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d125      	bne.n	8002eee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d11e      	bne.n	8002eee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2205      	movs	r2, #5
 8002eb6:	4252      	negs	r2, r2
 8002eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	23c0      	movs	r3, #192	; 0xc0
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 faaf 	bl	8003434 <HAL_TIM_IC_CaptureCallback>
 8002ed6:	e007      	b.n	8002ee8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 faa2 	bl	8003424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f000 faae 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d124      	bne.n	8002f46 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2208      	movs	r2, #8
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d11d      	bne.n	8002f46 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2209      	movs	r2, #9
 8002f10:	4252      	negs	r2, r2
 8002f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2204      	movs	r2, #4
 8002f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	2203      	movs	r2, #3
 8002f22:	4013      	ands	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 fa83 	bl	8003434 <HAL_TIM_IC_CaptureCallback>
 8002f2e:	e007      	b.n	8002f40 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fa76 	bl	8003424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 fa82 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d125      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d11e      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2211      	movs	r2, #17
 8002f68:	4252      	negs	r2, r2
 8002f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2208      	movs	r2, #8
 8002f70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	23c0      	movs	r3, #192	; 0xc0
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d004      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fa56 	bl	8003434 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e007      	b.n	8002f9a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 fa49 	bl	8003424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fa55 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d10f      	bne.n	8002fce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d108      	bne.n	8002fce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4252      	negs	r2, r2
 8002fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 fa23 	bl	8003414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d10f      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b80      	cmp	r3, #128	; 0x80
 8002fe8:	d108      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2281      	movs	r2, #129	; 0x81
 8002ff0:	4252      	negs	r2, r2
 8002ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 ff18 	bl	8003e2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	2380      	movs	r3, #128	; 0x80
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	401a      	ands	r2, r3
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	429a      	cmp	r2, r3
 800300e:	d10e      	bne.n	800302e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2280      	movs	r2, #128	; 0x80
 8003018:	4013      	ands	r3, r2
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d107      	bne.n	800302e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_TIM_IRQHandler+0x260>)
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 ff07 	bl	8003e3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2240      	movs	r2, #64	; 0x40
 8003036:	4013      	ands	r3, r2
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d10f      	bne.n	800305c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	4013      	ands	r3, r2
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d108      	bne.n	800305c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2241      	movs	r2, #65	; 0x41
 8003050:	4252      	negs	r2, r2
 8003052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 f9fc 	bl	8003454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2220      	movs	r2, #32
 8003064:	4013      	ands	r3, r2
 8003066:	2b20      	cmp	r3, #32
 8003068:	d10f      	bne.n	800308a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	4013      	ands	r3, r2
 8003074:	2b20      	cmp	r3, #32
 8003076:	d108      	bne.n	800308a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2221      	movs	r2, #33	; 0x21
 800307e:	4252      	negs	r2, r2
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 fec9 	bl	8003e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	fffffeff 	.word	0xfffffeff

08003098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	223c      	movs	r2, #60	; 0x3c
 80030a8:	5c9b      	ldrb	r3, [r3, r2]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0e7      	b.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	223c      	movs	r2, #60	; 0x3c
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	223d      	movs	r2, #61	; 0x3d
 80030be:	2102      	movs	r1, #2
 80030c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b14      	cmp	r3, #20
 80030c6:	d900      	bls.n	80030ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80030c8:	e0d1      	b.n	800326e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	009a      	lsls	r2, r3, #2
 80030ce:	4b6f      	ldr	r3, [pc, #444]	; (800328c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80030d0:	18d3      	adds	r3, r2, r3
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	0011      	movs	r1, r2
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 fa40 	bl	8003564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2108      	movs	r1, #8
 80030f0:	430a      	orrs	r2, r1
 80030f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2104      	movs	r1, #4
 8003100:	438a      	bics	r2, r1
 8003102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6999      	ldr	r1, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	619a      	str	r2, [r3, #24]
      break;
 8003116:	e0ab      	b.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	0011      	movs	r1, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f000 faa9 	bl	8003678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	0109      	lsls	r1, r1, #4
 8003134:	430a      	orrs	r2, r1
 8003136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4953      	ldr	r1, [pc, #332]	; (8003290 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003144:	400a      	ands	r2, r1
 8003146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6999      	ldr	r1, [r3, #24]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	619a      	str	r2, [r3, #24]
      break;
 800315c:	e088      	b.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	0011      	movs	r1, r2
 8003166:	0018      	movs	r0, r3
 8003168:	f000 fb0a 	bl	8003780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2108      	movs	r1, #8
 8003178:	430a      	orrs	r2, r1
 800317a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2104      	movs	r1, #4
 8003188:	438a      	bics	r2, r1
 800318a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69d9      	ldr	r1, [r3, #28]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	61da      	str	r2, [r3, #28]
      break;
 800319e:	e067      	b.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	0011      	movs	r1, r2
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 fb71 	bl	8003890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69da      	ldr	r2, [r3, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	0109      	lsls	r1, r1, #4
 80031bc:	430a      	orrs	r2, r1
 80031be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4931      	ldr	r1, [pc, #196]	; (8003290 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69d9      	ldr	r1, [r3, #28]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	021a      	lsls	r2, r3, #8
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	61da      	str	r2, [r3, #28]
      break;
 80031e4:	e044      	b.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	0011      	movs	r1, r2
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fbb8 	bl	8003964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2108      	movs	r1, #8
 8003200:	430a      	orrs	r2, r1
 8003202:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2104      	movs	r1, #4
 8003210:	438a      	bics	r2, r1
 8003212:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003226:	e023      	b.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	0011      	movs	r1, r2
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fbf7 	bl	8003a24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	0109      	lsls	r1, r1, #4
 8003244:	430a      	orrs	r2, r1
 8003246:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	490f      	ldr	r1, [pc, #60]	; (8003290 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003254:	400a      	ands	r2, r1
 8003256:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800326c:	e000      	b.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 800326e:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	223d      	movs	r2, #61	; 0x3d
 8003274:	2101      	movs	r1, #1
 8003276:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	223c      	movs	r2, #60	; 0x3c
 800327c:	2100      	movs	r1, #0
 800327e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b004      	add	sp, #16
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	08003efc 	.word	0x08003efc
 8003290:	fffffbff 	.word	0xfffffbff

08003294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	223c      	movs	r2, #60	; 0x3c
 80032a2:	5c9b      	ldrb	r3, [r3, r2]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_TIM_ConfigClockSource+0x18>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e0ab      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x170>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	223c      	movs	r2, #60	; 0x3c
 80032b0:	2101      	movs	r1, #1
 80032b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	223d      	movs	r2, #61	; 0x3d
 80032b8:	2102      	movs	r1, #2
 80032ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a51      	ldr	r2, [pc, #324]	; (800340c <HAL_TIM_ConfigClockSource+0x178>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a50      	ldr	r2, [pc, #320]	; (8003410 <HAL_TIM_ConfigClockSource+0x17c>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	d100      	bne.n	80032e6 <HAL_TIM_ConfigClockSource+0x52>
 80032e4:	e06b      	b.n	80033be <HAL_TIM_ConfigClockSource+0x12a>
 80032e6:	d80e      	bhi.n	8003306 <HAL_TIM_ConfigClockSource+0x72>
 80032e8:	2b10      	cmp	r3, #16
 80032ea:	d100      	bne.n	80032ee <HAL_TIM_ConfigClockSource+0x5a>
 80032ec:	e077      	b.n	80033de <HAL_TIM_ConfigClockSource+0x14a>
 80032ee:	d803      	bhi.n	80032f8 <HAL_TIM_ConfigClockSource+0x64>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d100      	bne.n	80032f6 <HAL_TIM_ConfigClockSource+0x62>
 80032f4:	e073      	b.n	80033de <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80032f6:	e07c      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d100      	bne.n	80032fe <HAL_TIM_ConfigClockSource+0x6a>
 80032fc:	e06f      	b.n	80033de <HAL_TIM_ConfigClockSource+0x14a>
 80032fe:	2b30      	cmp	r3, #48	; 0x30
 8003300:	d100      	bne.n	8003304 <HAL_TIM_ConfigClockSource+0x70>
 8003302:	e06c      	b.n	80033de <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003304:	e075      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003306:	2b70      	cmp	r3, #112	; 0x70
 8003308:	d00e      	beq.n	8003328 <HAL_TIM_ConfigClockSource+0x94>
 800330a:	d804      	bhi.n	8003316 <HAL_TIM_ConfigClockSource+0x82>
 800330c:	2b50      	cmp	r3, #80	; 0x50
 800330e:	d036      	beq.n	800337e <HAL_TIM_ConfigClockSource+0xea>
 8003310:	2b60      	cmp	r3, #96	; 0x60
 8003312:	d044      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003314:	e06d      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	0152      	lsls	r2, r2, #5
 800331a:	4293      	cmp	r3, r2
 800331c:	d068      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x15c>
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	0192      	lsls	r2, r2, #6
 8003322:	4293      	cmp	r3, r2
 8003324:	d017      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003326:	e064      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6899      	ldr	r1, [r3, #8]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f000 fc54 	bl	8003be4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2277      	movs	r2, #119	; 0x77
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]
      break;
 8003354:	e04d      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 fc3d 	bl	8003be4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	01c9      	lsls	r1, r1, #7
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
      break;
 800337c:	e039      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	001a      	movs	r2, r3
 800338c:	f000 fbae 	bl	8003aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2150      	movs	r1, #80	; 0x50
 8003396:	0018      	movs	r0, r3
 8003398:	f000 fc08 	bl	8003bac <TIM_ITRx_SetConfig>
      break;
 800339c:	e029      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	001a      	movs	r2, r3
 80033ac:	f000 fbcc 	bl	8003b48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2160      	movs	r1, #96	; 0x60
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 fbf8 	bl	8003bac <TIM_ITRx_SetConfig>
      break;
 80033bc:	e019      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	001a      	movs	r2, r3
 80033cc:	f000 fb8e 	bl	8003aec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 fbe8 	bl	8003bac <TIM_ITRx_SetConfig>
      break;
 80033dc:	e009      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	0019      	movs	r1, r3
 80033e8:	0010      	movs	r0, r2
 80033ea:	f000 fbdf 	bl	8003bac <TIM_ITRx_SetConfig>
      break;
 80033ee:	e000      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80033f0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	223d      	movs	r2, #61	; 0x3d
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223c      	movs	r2, #60	; 0x3c
 80033fe:	2100      	movs	r1, #0
 8003400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b004      	add	sp, #16
 800340a:	bd80      	pop	{r7, pc}
 800340c:	ffceff88 	.word	0xffceff88
 8003410:	ffff00ff 	.word	0xffff00ff

08003414 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b002      	add	sp, #8
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800345c:	46c0      	nop			; (mov r8, r8)
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a34      	ldr	r2, [pc, #208]	; (8003548 <TIM_Base_SetConfig+0xe4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d008      	beq.n	800348e <TIM_Base_SetConfig+0x2a>
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	05db      	lsls	r3, r3, #23
 8003482:	429a      	cmp	r2, r3
 8003484:	d003      	beq.n	800348e <TIM_Base_SetConfig+0x2a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a30      	ldr	r2, [pc, #192]	; (800354c <TIM_Base_SetConfig+0xe8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d108      	bne.n	80034a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2270      	movs	r2, #112	; 0x70
 8003492:	4393      	bics	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a29      	ldr	r2, [pc, #164]	; (8003548 <TIM_Base_SetConfig+0xe4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d018      	beq.n	80034da <TIM_Base_SetConfig+0x76>
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	05db      	lsls	r3, r3, #23
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d013      	beq.n	80034da <TIM_Base_SetConfig+0x76>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a25      	ldr	r2, [pc, #148]	; (800354c <TIM_Base_SetConfig+0xe8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00f      	beq.n	80034da <TIM_Base_SetConfig+0x76>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a24      	ldr	r2, [pc, #144]	; (8003550 <TIM_Base_SetConfig+0xec>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00b      	beq.n	80034da <TIM_Base_SetConfig+0x76>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <TIM_Base_SetConfig+0xf0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <TIM_Base_SetConfig+0x76>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a22      	ldr	r2, [pc, #136]	; (8003558 <TIM_Base_SetConfig+0xf4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d003      	beq.n	80034da <TIM_Base_SetConfig+0x76>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a21      	ldr	r2, [pc, #132]	; (800355c <TIM_Base_SetConfig+0xf8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d108      	bne.n	80034ec <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <TIM_Base_SetConfig+0xfc>)
 80034de:	4013      	ands	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2280      	movs	r2, #128	; 0x80
 80034f0:	4393      	bics	r3, r2
 80034f2:	001a      	movs	r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <TIM_Base_SetConfig+0xe4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00b      	beq.n	8003532 <TIM_Base_SetConfig+0xce>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <TIM_Base_SetConfig+0xf0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <TIM_Base_SetConfig+0xce>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <TIM_Base_SetConfig+0xf4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_Base_SetConfig+0xce>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a0b      	ldr	r2, [pc, #44]	; (800355c <TIM_Base_SetConfig+0xf8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d103      	bne.n	800353a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	615a      	str	r2, [r3, #20]
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40000400 	.word	0x40000400
 8003550:	40002000 	.word	0x40002000
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800
 8003560:	fffffcff 	.word	0xfffffcff

08003564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	2201      	movs	r2, #1
 8003574:	4393      	bics	r3, r2
 8003576:	001a      	movs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a32      	ldr	r2, [pc, #200]	; (800365c <TIM_OC1_SetConfig+0xf8>)
 8003592:	4013      	ands	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2203      	movs	r2, #3
 800359a:	4393      	bics	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2202      	movs	r2, #2
 80035ac:	4393      	bics	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a28      	ldr	r2, [pc, #160]	; (8003660 <TIM_OC1_SetConfig+0xfc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00b      	beq.n	80035da <TIM_OC1_SetConfig+0x76>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a27      	ldr	r2, [pc, #156]	; (8003664 <TIM_OC1_SetConfig+0x100>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <TIM_OC1_SetConfig+0x76>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a26      	ldr	r2, [pc, #152]	; (8003668 <TIM_OC1_SetConfig+0x104>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_OC1_SetConfig+0x76>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a25      	ldr	r2, [pc, #148]	; (800366c <TIM_OC1_SetConfig+0x108>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d10c      	bne.n	80035f4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2208      	movs	r2, #8
 80035de:	4393      	bics	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2204      	movs	r2, #4
 80035f0:	4393      	bics	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a1a      	ldr	r2, [pc, #104]	; (8003660 <TIM_OC1_SetConfig+0xfc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00b      	beq.n	8003614 <TIM_OC1_SetConfig+0xb0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a19      	ldr	r2, [pc, #100]	; (8003664 <TIM_OC1_SetConfig+0x100>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <TIM_OC1_SetConfig+0xb0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a18      	ldr	r2, [pc, #96]	; (8003668 <TIM_OC1_SetConfig+0x104>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_OC1_SetConfig+0xb0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a17      	ldr	r2, [pc, #92]	; (800366c <TIM_OC1_SetConfig+0x108>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d111      	bne.n	8003638 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <TIM_OC1_SetConfig+0x10c>)
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <TIM_OC1_SetConfig+0x110>)
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b006      	add	sp, #24
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	fffeff8f 	.word	0xfffeff8f
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40014000 	.word	0x40014000
 8003668:	40014400 	.word	0x40014400
 800366c:	40014800 	.word	0x40014800
 8003670:	fffffeff 	.word	0xfffffeff
 8003674:	fffffdff 	.word	0xfffffdff

08003678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	2210      	movs	r2, #16
 8003688:	4393      	bics	r3, r2
 800368a:	001a      	movs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a2e      	ldr	r2, [pc, #184]	; (8003760 <TIM_OC2_SetConfig+0xe8>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a2d      	ldr	r2, [pc, #180]	; (8003764 <TIM_OC2_SetConfig+0xec>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2220      	movs	r2, #32
 80036c2:	4393      	bics	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a24      	ldr	r2, [pc, #144]	; (8003768 <TIM_OC2_SetConfig+0xf0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10d      	bne.n	80036f6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	4393      	bics	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2240      	movs	r2, #64	; 0x40
 80036f2:	4393      	bics	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <TIM_OC2_SetConfig+0xf0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00b      	beq.n	8003716 <TIM_OC2_SetConfig+0x9e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1a      	ldr	r2, [pc, #104]	; (800376c <TIM_OC2_SetConfig+0xf4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <TIM_OC2_SetConfig+0x9e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a19      	ldr	r2, [pc, #100]	; (8003770 <TIM_OC2_SetConfig+0xf8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_OC2_SetConfig+0x9e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <TIM_OC2_SetConfig+0xfc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d113      	bne.n	800373e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4a17      	ldr	r2, [pc, #92]	; (8003778 <TIM_OC2_SetConfig+0x100>)
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4a16      	ldr	r2, [pc, #88]	; (800377c <TIM_OC2_SetConfig+0x104>)
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	feff8fff 	.word	0xfeff8fff
 8003764:	fffffcff 	.word	0xfffffcff
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400
 8003774:	40014800 	.word	0x40014800
 8003778:	fffffbff 	.word	0xfffffbff
 800377c:	fffff7ff 	.word	0xfffff7ff

08003780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	4a35      	ldr	r2, [pc, #212]	; (8003864 <TIM_OC3_SetConfig+0xe4>)
 8003790:	401a      	ands	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a2f      	ldr	r2, [pc, #188]	; (8003868 <TIM_OC3_SetConfig+0xe8>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2203      	movs	r2, #3
 80037b4:	4393      	bics	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4a29      	ldr	r2, [pc, #164]	; (800386c <TIM_OC3_SetConfig+0xec>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a25      	ldr	r2, [pc, #148]	; (8003870 <TIM_OC3_SetConfig+0xf0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d10d      	bne.n	80037fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <TIM_OC3_SetConfig+0xf4>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <TIM_OC3_SetConfig+0xf8>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <TIM_OC3_SetConfig+0xf0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00b      	beq.n	800381a <TIM_OC3_SetConfig+0x9a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1d      	ldr	r2, [pc, #116]	; (800387c <TIM_OC3_SetConfig+0xfc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d007      	beq.n	800381a <TIM_OC3_SetConfig+0x9a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1c      	ldr	r2, [pc, #112]	; (8003880 <TIM_OC3_SetConfig+0x100>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d003      	beq.n	800381a <TIM_OC3_SetConfig+0x9a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1b      	ldr	r2, [pc, #108]	; (8003884 <TIM_OC3_SetConfig+0x104>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d113      	bne.n	8003842 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <TIM_OC3_SetConfig+0x108>)
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4a19      	ldr	r2, [pc, #100]	; (800388c <TIM_OC3_SetConfig+0x10c>)
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	621a      	str	r2, [r3, #32]
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b006      	add	sp, #24
 8003862:	bd80      	pop	{r7, pc}
 8003864:	fffffeff 	.word	0xfffffeff
 8003868:	fffeff8f 	.word	0xfffeff8f
 800386c:	fffffdff 	.word	0xfffffdff
 8003870:	40012c00 	.word	0x40012c00
 8003874:	fffff7ff 	.word	0xfffff7ff
 8003878:	fffffbff 	.word	0xfffffbff
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800
 8003888:	ffffefff 	.word	0xffffefff
 800388c:	ffffdfff 	.word	0xffffdfff

08003890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4a28      	ldr	r2, [pc, #160]	; (8003940 <TIM_OC4_SetConfig+0xb0>)
 80038a0:	401a      	ands	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a22      	ldr	r2, [pc, #136]	; (8003944 <TIM_OC4_SetConfig+0xb4>)
 80038bc:	4013      	ands	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a21      	ldr	r2, [pc, #132]	; (8003948 <TIM_OC4_SetConfig+0xb8>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4a1d      	ldr	r2, [pc, #116]	; (800394c <TIM_OC4_SetConfig+0xbc>)
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	031b      	lsls	r3, r3, #12
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a19      	ldr	r2, [pc, #100]	; (8003950 <TIM_OC4_SetConfig+0xc0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00b      	beq.n	8003908 <TIM_OC4_SetConfig+0x78>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a18      	ldr	r2, [pc, #96]	; (8003954 <TIM_OC4_SetConfig+0xc4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <TIM_OC4_SetConfig+0x78>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <TIM_OC4_SetConfig+0xc8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_OC4_SetConfig+0x78>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a16      	ldr	r2, [pc, #88]	; (800395c <TIM_OC4_SetConfig+0xcc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d109      	bne.n	800391c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <TIM_OC4_SetConfig+0xd0>)
 800390c:	4013      	ands	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	019b      	lsls	r3, r3, #6
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	621a      	str	r2, [r3, #32]
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b006      	add	sp, #24
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	ffffefff 	.word	0xffffefff
 8003944:	feff8fff 	.word	0xfeff8fff
 8003948:	fffffcff 	.word	0xfffffcff
 800394c:	ffffdfff 	.word	0xffffdfff
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40014000 	.word	0x40014000
 8003958:	40014400 	.word	0x40014400
 800395c:	40014800 	.word	0x40014800
 8003960:	ffffbfff 	.word	0xffffbfff

08003964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <TIM_OC5_SetConfig+0xa4>)
 8003974:	401a      	ands	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <TIM_OC5_SetConfig+0xa8>)
 8003990:	4013      	ands	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <TIM_OC5_SetConfig+0xac>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	041b      	lsls	r3, r3, #16
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <TIM_OC5_SetConfig+0xb0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_OC5_SetConfig+0x6e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <TIM_OC5_SetConfig+0xb4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <TIM_OC5_SetConfig+0x6e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <TIM_OC5_SetConfig+0xb8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC5_SetConfig+0x6e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <TIM_OC5_SetConfig+0xbc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d109      	bne.n	80039e6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4a0c      	ldr	r2, [pc, #48]	; (8003a08 <TIM_OC5_SetConfig+0xa4>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	621a      	str	r2, [r3, #32]
}
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b006      	add	sp, #24
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	fffeffff 	.word	0xfffeffff
 8003a0c:	fffeff8f 	.word	0xfffeff8f
 8003a10:	fffdffff 	.word	0xfffdffff
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a26      	ldr	r2, [pc, #152]	; (8003acc <TIM_OC6_SetConfig+0xa8>)
 8003a34:	401a      	ands	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <TIM_OC6_SetConfig+0xac>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <TIM_OC6_SetConfig+0xb0>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	051b      	lsls	r3, r3, #20
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <TIM_OC6_SetConfig+0xb4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <TIM_OC6_SetConfig+0x70>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <TIM_OC6_SetConfig+0xb8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_OC6_SetConfig+0x70>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a16      	ldr	r2, [pc, #88]	; (8003ae0 <TIM_OC6_SetConfig+0xbc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_OC6_SetConfig+0x70>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a15      	ldr	r2, [pc, #84]	; (8003ae4 <TIM_OC6_SetConfig+0xc0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d109      	bne.n	8003aa8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <TIM_OC6_SetConfig+0xc4>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	029b      	lsls	r3, r3, #10
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b006      	add	sp, #24
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	ffefffff 	.word	0xffefffff
 8003ad0:	feff8fff 	.word	0xfeff8fff
 8003ad4:	ffdfffff 	.word	0xffdfffff
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40014000 	.word	0x40014000
 8003ae0:	40014400 	.word	0x40014400
 8003ae4:	40014800 	.word	0x40014800
 8003ae8:	fffbffff 	.word	0xfffbffff

08003aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	2201      	movs	r2, #1
 8003b04:	4393      	bics	r3, r2
 8003b06:	001a      	movs	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	22f0      	movs	r2, #240	; 0xf0
 8003b16:	4393      	bics	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	220a      	movs	r2, #10
 8003b28:	4393      	bics	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b006      	add	sp, #24
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	2210      	movs	r2, #16
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	001a      	movs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <TIM_TI2_ConfigInputStage+0x60>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	031b      	lsls	r3, r3, #12
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	22a0      	movs	r2, #160	; 0xa0
 8003b84:	4393      	bics	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	621a      	str	r2, [r3, #32]
}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	b006      	add	sp, #24
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	ffff0fff 	.word	0xffff0fff

08003bac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <TIM_ITRx_SetConfig+0x34>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	2207      	movs	r2, #7
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	609a      	str	r2, [r3, #8]
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	ffcfff8f 	.word	0xffcfff8f

08003be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <TIM_ETR_SetConfig+0x3c>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	021a      	lsls	r2, r3, #8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	609a      	str	r2, [r3, #8]
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b006      	add	sp, #24
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	ffff00ff 	.word	0xffff00ff

08003c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	223c      	movs	r2, #60	; 0x3c
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e040      	b.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	223c      	movs	r2, #60	; 0x3c
 8003c40:	2101      	movs	r1, #1
 8003c42:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	223d      	movs	r2, #61	; 0x3d
 8003c48:	2102      	movs	r1, #2
 8003c4a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2270      	movs	r2, #112	; 0x70
 8003c7c:	4393      	bics	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	4393      	bics	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	223d      	movs	r2, #61	; 0x3d
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	223c      	movs	r2, #60	; 0x3c
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	ff0fffff 	.word	0xff0fffff

08003cd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	223c      	movs	r2, #60	; 0x3c
 8003ce2:	5c9b      	ldrb	r3, [r3, r2]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e079      	b.n	8003de0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	223c      	movs	r2, #60	; 0x3c
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	22ff      	movs	r2, #255	; 0xff
 8003cf8:	4393      	bics	r3, r2
 8003cfa:	001a      	movs	r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a38      	ldr	r2, [pc, #224]	; (8003de8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003d08:	401a      	ands	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a35      	ldr	r2, [pc, #212]	; (8003dec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003d16:	401a      	ands	r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a33      	ldr	r2, [pc, #204]	; (8003df0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003d24:	401a      	ands	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a30      	ldr	r2, [pc, #192]	; (8003df4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003d32:	401a      	ands	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4a2e      	ldr	r2, [pc, #184]	; (8003df8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003d40:	401a      	ands	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003d4e:	401a      	ands	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d106      	bne.n	8003d80 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4a24      	ldr	r2, [pc, #144]	; (8003e08 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8003d76:	401a      	ands	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d121      	bne.n	8003dce <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003d8e:	401a      	ands	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	051b      	lsls	r3, r3, #20
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003d9e:	401a      	ands	r2, r3
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	; (8003e14 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003dac:	401a      	ands	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d106      	bne.n	8003dce <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	223c      	movs	r2, #60	; 0x3c
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	fffffcff 	.word	0xfffffcff
 8003dec:	fffffbff 	.word	0xfffffbff
 8003df0:	fffff7ff 	.word	0xfffff7ff
 8003df4:	ffffefff 	.word	0xffffefff
 8003df8:	ffffdfff 	.word	0xffffdfff
 8003dfc:	ffffbfff 	.word	0xffffbfff
 8003e00:	fff0ffff 	.word	0xfff0ffff
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	efffffff 	.word	0xefffffff
 8003e0c:	ff0fffff 	.word	0xff0fffff
 8003e10:	feffffff 	.word	0xfeffffff
 8003e14:	fdffffff 	.word	0xfdffffff
 8003e18:	dfffffff 	.word	0xdfffffff

08003e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b002      	add	sp, #8
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <__libc_init_array>:
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	2600      	movs	r6, #0
 8003e50:	4d0c      	ldr	r5, [pc, #48]	; (8003e84 <__libc_init_array+0x38>)
 8003e52:	4c0d      	ldr	r4, [pc, #52]	; (8003e88 <__libc_init_array+0x3c>)
 8003e54:	1b64      	subs	r4, r4, r5
 8003e56:	10a4      	asrs	r4, r4, #2
 8003e58:	42a6      	cmp	r6, r4
 8003e5a:	d109      	bne.n	8003e70 <__libc_init_array+0x24>
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	f000 f821 	bl	8003ea4 <_init>
 8003e62:	4d0a      	ldr	r5, [pc, #40]	; (8003e8c <__libc_init_array+0x40>)
 8003e64:	4c0a      	ldr	r4, [pc, #40]	; (8003e90 <__libc_init_array+0x44>)
 8003e66:	1b64      	subs	r4, r4, r5
 8003e68:	10a4      	asrs	r4, r4, #2
 8003e6a:	42a6      	cmp	r6, r4
 8003e6c:	d105      	bne.n	8003e7a <__libc_init_array+0x2e>
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	00b3      	lsls	r3, r6, #2
 8003e72:	58eb      	ldr	r3, [r5, r3]
 8003e74:	4798      	blx	r3
 8003e76:	3601      	adds	r6, #1
 8003e78:	e7ee      	b.n	8003e58 <__libc_init_array+0xc>
 8003e7a:	00b3      	lsls	r3, r6, #2
 8003e7c:	58eb      	ldr	r3, [r5, r3]
 8003e7e:	4798      	blx	r3
 8003e80:	3601      	adds	r6, #1
 8003e82:	e7f2      	b.n	8003e6a <__libc_init_array+0x1e>
 8003e84:	08003f50 	.word	0x08003f50
 8003e88:	08003f50 	.word	0x08003f50
 8003e8c:	08003f50 	.word	0x08003f50
 8003e90:	08003f54 	.word	0x08003f54

08003e94 <memset>:
 8003e94:	0003      	movs	r3, r0
 8003e96:	1812      	adds	r2, r2, r0
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d100      	bne.n	8003e9e <memset+0xa>
 8003e9c:	4770      	bx	lr
 8003e9e:	7019      	strb	r1, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	e7f9      	b.n	8003e98 <memset+0x4>

08003ea4 <_init>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr

08003eb0 <_fini>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr
