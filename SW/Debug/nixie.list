
nixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b60  08004b60  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004b60  08004b60  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b60  08004b60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000010  08004b78  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08004b78  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecf6  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002790  00000000  00000000  0002ed2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f02  00000000  00000000  00033008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd4c  00000000  00000000  0004cf0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a14e8  00000000  00000000  0005ac56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fc13e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003160  00000000  00000000  000fc1bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004a8c 	.word	0x08004a8c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004a8c 	.word	0x08004a8c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <MX_COMP2_Init+0x58>)
 8000222:	4a15      	ldr	r2, [pc, #84]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000224:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8000226:	4b13      	ldr	r3, [pc, #76]	; (8000274 <MX_COMP2_Init+0x58>)
 8000228:	2280      	movs	r2, #128	; 0x80
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_COMP2_Init+0x58>)
 8000230:	2250      	movs	r2, #80	; 0x50
 8000232:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <MX_COMP2_Init+0x58>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_COMP2_Init+0x58>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_COMP2_Init+0x58>)
 8000242:	2200      	movs	r2, #0
 8000244:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_COMP2_Init+0x58>)
 8000248:	2200      	movs	r2, #0
 800024a:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_COMP2_Init+0x58>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_COMP2_Init+0x58>)
 8000254:	2200      	movs	r2, #0
 8000256:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_COMP2_Init+0x58>)
 800025a:	2200      	movs	r2, #0
 800025c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <MX_COMP2_Init+0x58>)
 8000260:	0018      	movs	r0, r3
 8000262:	f001 fa6d 	bl	8001740 <HAL_COMP_Init>
 8000266:	1e03      	subs	r3, r0, #0
 8000268:	d001      	beq.n	800026e <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 800026a:	f000 fb41 	bl	80008f0 <Error_Handler>
  }

}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000034 	.word	0x20000034
 8000278:	40010204 	.word	0x40010204

0800027c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	230c      	movs	r3, #12
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f004 fbf4 	bl	8004a7c <memset>
  if(compHandle->Instance==COMP2)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <HAL_COMP_MspInit+0x64>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d11c      	bne.n	80002d8 <HAL_COMP_MspInit+0x5c>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	430a      	orrs	r2, r1
 80002a8:	635a      	str	r2, [r3, #52]	; 0x34
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ae:	2201      	movs	r2, #1
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
 80002b4:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80002b6:	210c      	movs	r1, #12
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2208      	movs	r2, #8
 80002bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2203      	movs	r2, #3
 80002c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ca:	187a      	adds	r2, r7, r1
 80002cc:	23a0      	movs	r3, #160	; 0xa0
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 fe84 	bl	8001fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b008      	add	sp, #32
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40010204 	.word	0x40010204
 80002e4:	40021000 	.word	0x40021000

080002e8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2324      	movs	r3, #36	; 0x24
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f004 fbc0 	bl	8004a7c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_DAC1_Init+0x64>)
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <MX_DAC1_Init+0x68>)
 8000300:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_DAC1_Init+0x64>)
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fcb9 	bl	8001c7c <HAL_DAC_Init>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800030e:	f000 faef 	bl	80008f0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2202      	movs	r2, #2
 8000322:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2201      	movs	r2, #1
 8000328:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000330:	1d39      	adds	r1, r7, #4
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_DAC1_Init+0x64>)
 8000334:	2210      	movs	r2, #16
 8000336:	0018      	movs	r0, r3
 8000338:	f001 fd34 	bl	8001da4 <HAL_DAC_ConfigChannel>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000340:	f000 fad6 	bl	80008f0 <Error_Handler>
  }

}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b00a      	add	sp, #40	; 0x28
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000064 	.word	0x20000064
 8000350:	40007400 	.word	0x40007400

08000354 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <HAL_DAC_MspInit+0x38>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d10d      	bne.n	8000382 <HAL_DAC_MspInit+0x2e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 8000368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 800036c:	2180      	movs	r1, #128	; 0x80
 800036e:	0589      	lsls	r1, r1, #22
 8000370:	430a      	orrs	r2, r1
 8000372:	63da      	str	r2, [r3, #60]	; 0x3c
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 8000376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	059b      	lsls	r3, r3, #22
 800037c:	4013      	ands	r3, r2
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b004      	add	sp, #16
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	40007400 	.word	0x40007400
 8000390:	40021000 	.word	0x40021000

08000394 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	683a      	ldr	r2, [r7, #0]
 80003a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b002      	add	sp, #8
 80003aa:	bd80      	pop	{r7, pc}

080003ac <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <LL_IOP_GRP1_EnableClock+0x28>)
 80003b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <LL_IOP_GRP1_EnableClock+0x28>)
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	430a      	orrs	r2, r1
 80003be:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <LL_IOP_GRP1_EnableClock+0x28>)
 80003c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4013      	ands	r3, r2
 80003c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ca:	68fb      	ldr	r3, [r7, #12]
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b004      	add	sp, #16
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000

080003d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	003b      	movs	r3, r7
 80003e0:	0018      	movs	r0, r3
 80003e2:	2318      	movs	r3, #24
 80003e4:	001a      	movs	r2, r3
 80003e6:	2100      	movs	r1, #0
 80003e8:	f004 fb48 	bl	8004a7c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80003ec:	2004      	movs	r0, #4
 80003ee:	f7ff ffdd 	bl	80003ac <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 80003f2:	2020      	movs	r0, #32
 80003f4:	f7ff ffda 	bl	80003ac <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f7ff ffd7 	bl	80003ac <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 80003fe:	2008      	movs	r0, #8
 8000400:	f7ff ffd4 	bl	80003ac <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000404:	2002      	movs	r0, #2
 8000406:	f7ff ffd1 	bl	80003ac <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GN1_GPIO_Port, GN1_Pin);
 800040a:	23a0      	movs	r3, #160	; 0xa0
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	2101      	movs	r1, #1
 8000410:	0018      	movs	r0, r3
 8000412:	f7ff ffbf 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN2_GPIO_Port, GN2_Pin);
 8000416:	23a0      	movs	r3, #160	; 0xa0
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	2102      	movs	r1, #2
 800041c:	0018      	movs	r0, r3
 800041e:	f7ff ffb9 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G1_GPIO_Port, G1_Pin);
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2110      	movs	r1, #16
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ffb3 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GDOT_GPIO_Port, GDOT_Pin);
 800042e:	23a0      	movs	r3, #160	; 0xa0
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2120      	movs	r1, #32
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff ffad 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G3_GPIO_Port, G3_Pin);
 800043a:	23a0      	movs	r3, #160	; 0xa0
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2140      	movs	r1, #64	; 0x40
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff ffa7 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN3_GPIO_Port, GN3_Pin);
 8000446:	4bd5      	ldr	r3, [pc, #852]	; (800079c <MX_GPIO_Init+0x3c4>)
 8000448:	2102      	movs	r1, #2
 800044a:	0018      	movs	r0, r3
 800044c:	f7ff ffa2 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G2_GPIO_Port, G2_Pin);
 8000450:	4bd2      	ldr	r3, [pc, #840]	; (800079c <MX_GPIO_Init+0x3c4>)
 8000452:	2104      	movs	r1, #4
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff9d 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G4_GPIO_Port, G4_Pin);
 800045a:	4bd0      	ldr	r3, [pc, #832]	; (800079c <MX_GPIO_Init+0x3c4>)
 800045c:	2108      	movs	r1, #8
 800045e:	0018      	movs	r0, r3
 8000460:	f7ff ff98 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G5_GPIO_Port, G5_Pin);
 8000464:	4bce      	ldr	r3, [pc, #824]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 8000466:	2108      	movs	r1, #8
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ff93 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G6_GPIO_Port, G6_Pin);
 800046e:	4bcc      	ldr	r3, [pc, #816]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 8000470:	2110      	movs	r1, #16
 8000472:	0018      	movs	r0, r3
 8000474:	f7ff ff8e 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN4_GPIO_Port, GN4_Pin);
 8000478:	4bc9      	ldr	r3, [pc, #804]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 800047a:	2120      	movs	r1, #32
 800047c:	0018      	movs	r0, r3
 800047e:	f7ff ff89 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G0_GPIO_Port, G0_Pin);
 8000482:	4bc7      	ldr	r3, [pc, #796]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff ff84 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G9_GPIO_Port, G9_Pin);
 800048c:	4bc4      	ldr	r3, [pc, #784]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 800048e:	2180      	movs	r1, #128	; 0x80
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff ff7f 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G8_GPIO_Port, G8_Pin);
 8000496:	2380      	movs	r3, #128	; 0x80
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	4ac1      	ldr	r2, [pc, #772]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 800049c:	0019      	movs	r1, r3
 800049e:	0010      	movs	r0, r2
 80004a0:	f7ff ff78 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G7_GPIO_Port, G7_Pin);
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	4abd      	ldr	r2, [pc, #756]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 80004aa:	0019      	movs	r1, r3
 80004ac:	0010      	movs	r0, r2
 80004ae:	f7ff ff71 	bl	8000394 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S2_Pin;
 80004b2:	003b      	movs	r3, r7
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	0192      	lsls	r2, r2, #6
 80004b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2201      	movs	r2, #1
 80004c4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 80004c6:	003b      	movs	r3, r7
 80004c8:	4ab6      	ldr	r2, [pc, #728]	; (80007a4 <MX_GPIO_Init+0x3cc>)
 80004ca:	0019      	movs	r1, r3
 80004cc:	0010      	movs	r0, r2
 80004ce:	f004 fa4d 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NRST_Pin;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2204      	movs	r2, #4
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 80004e4:	003b      	movs	r3, r7
 80004e6:	4ab0      	ldr	r2, [pc, #704]	; (80007a8 <MX_GPIO_Init+0x3d0>)
 80004e8:	0019      	movs	r1, r3
 80004ea:	0010      	movs	r0, r2
 80004ec:	f004 fa3e 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN1_Pin;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004f6:	003b      	movs	r3, r7
 80004f8:	2201      	movs	r2, #1
 80004fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004fc:	003b      	movs	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000502:	003b      	movs	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN1_GPIO_Port, &GPIO_InitStruct);
 800050e:	003a      	movs	r2, r7
 8000510:	23a0      	movs	r3, #160	; 0xa0
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	0011      	movs	r1, r2
 8000516:	0018      	movs	r0, r3
 8000518:	f004 fa28 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN2_Pin;
 800051c:	003b      	movs	r3, r7
 800051e:	2202      	movs	r2, #2
 8000520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000522:	003b      	movs	r3, r7
 8000524:	2201      	movs	r2, #1
 8000526:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000528:	003b      	movs	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800052e:	003b      	movs	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000534:	003b      	movs	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN2_GPIO_Port, &GPIO_InitStruct);
 800053a:	003a      	movs	r2, r7
 800053c:	23a0      	movs	r3, #160	; 0xa0
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f004 fa12 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G1_Pin;
 8000548:	003b      	movs	r3, r7
 800054a:	2210      	movs	r2, #16
 800054c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800054e:	003b      	movs	r3, r7
 8000550:	2201      	movs	r2, #1
 8000552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000554:	003b      	movs	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800055a:	003b      	movs	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G1_GPIO_Port, &GPIO_InitStruct);
 8000566:	003a      	movs	r2, r7
 8000568:	23a0      	movs	r3, #160	; 0xa0
 800056a:	05db      	lsls	r3, r3, #23
 800056c:	0011      	movs	r1, r2
 800056e:	0018      	movs	r0, r3
 8000570:	f004 f9fc 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GDOT_Pin;
 8000574:	003b      	movs	r3, r7
 8000576:	2220      	movs	r2, #32
 8000578:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800057a:	003b      	movs	r3, r7
 800057c:	2201      	movs	r2, #1
 800057e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000580:	003b      	movs	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000586:	003b      	movs	r3, r7
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800058c:	003b      	movs	r3, r7
 800058e:	2202      	movs	r2, #2
 8000590:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GDOT_GPIO_Port, &GPIO_InitStruct);
 8000592:	003a      	movs	r2, r7
 8000594:	23a0      	movs	r3, #160	; 0xa0
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f004 f9e6 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G3_Pin;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2240      	movs	r2, #64	; 0x40
 80005a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2201      	movs	r2, #1
 80005aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 80005be:	003a      	movs	r2, r7
 80005c0:	23a0      	movs	r3, #160	; 0xa0
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	0011      	movs	r1, r2
 80005c6:	0018      	movs	r0, r3
 80005c8:	f004 f9d0 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S1_Pin;
 80005cc:	003b      	movs	r3, r7
 80005ce:	2201      	movs	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80005d2:	003b      	movs	r3, r7
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80005d8:	003b      	movs	r3, r7
 80005da:	2201      	movs	r2, #1
 80005dc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80005de:	003b      	movs	r3, r7
 80005e0:	4a6e      	ldr	r2, [pc, #440]	; (800079c <MX_GPIO_Init+0x3c4>)
 80005e2:	0019      	movs	r1, r3
 80005e4:	0010      	movs	r0, r2
 80005e6:	f004 f9c1 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN3_Pin;
 80005ea:	003b      	movs	r3, r7
 80005ec:	2202      	movs	r2, #2
 80005ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005f0:	003b      	movs	r3, r7
 80005f2:	2201      	movs	r2, #1
 80005f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005f6:	003b      	movs	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005fc:	003b      	movs	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000602:	003b      	movs	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN3_GPIO_Port, &GPIO_InitStruct);
 8000608:	003b      	movs	r3, r7
 800060a:	4a64      	ldr	r2, [pc, #400]	; (800079c <MX_GPIO_Init+0x3c4>)
 800060c:	0019      	movs	r1, r3
 800060e:	0010      	movs	r0, r2
 8000610:	f004 f9ac 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G2_Pin;
 8000614:	003b      	movs	r3, r7
 8000616:	2204      	movs	r2, #4
 8000618:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800061a:	003b      	movs	r3, r7
 800061c:	2201      	movs	r2, #1
 800061e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000620:	003b      	movs	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000626:	003b      	movs	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800062c:	003b      	movs	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G2_GPIO_Port, &GPIO_InitStruct);
 8000632:	003b      	movs	r3, r7
 8000634:	4a59      	ldr	r2, [pc, #356]	; (800079c <MX_GPIO_Init+0x3c4>)
 8000636:	0019      	movs	r1, r3
 8000638:	0010      	movs	r0, r2
 800063a:	f004 f997 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G4_Pin;
 800063e:	003b      	movs	r3, r7
 8000640:	2208      	movs	r2, #8
 8000642:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000644:	003b      	movs	r3, r7
 8000646:	2201      	movs	r2, #1
 8000648:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800064a:	003b      	movs	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000650:	003b      	movs	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000656:	003b      	movs	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G4_GPIO_Port, &GPIO_InitStruct);
 800065c:	003b      	movs	r3, r7
 800065e:	4a4f      	ldr	r2, [pc, #316]	; (800079c <MX_GPIO_Init+0x3c4>)
 8000660:	0019      	movs	r1, r3
 8000662:	0010      	movs	r0, r2
 8000664:	f004 f982 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G5_Pin;
 8000668:	003b      	movs	r3, r7
 800066a:	2208      	movs	r2, #8
 800066c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800066e:	003b      	movs	r3, r7
 8000670:	2201      	movs	r2, #1
 8000672:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000674:	003b      	movs	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800067a:	003b      	movs	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000680:	003b      	movs	r3, r7
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G5_GPIO_Port, &GPIO_InitStruct);
 8000686:	003b      	movs	r3, r7
 8000688:	4a45      	ldr	r2, [pc, #276]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 800068a:	0019      	movs	r1, r3
 800068c:	0010      	movs	r0, r2
 800068e:	f004 f96d 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G6_Pin;
 8000692:	003b      	movs	r3, r7
 8000694:	2210      	movs	r2, #16
 8000696:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000698:	003b      	movs	r3, r7
 800069a:	2201      	movs	r2, #1
 800069c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800069e:	003b      	movs	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G6_GPIO_Port, &GPIO_InitStruct);
 80006b0:	003b      	movs	r3, r7
 80006b2:	4a3b      	ldr	r2, [pc, #236]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f004 f958 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN4_Pin;
 80006bc:	003b      	movs	r3, r7
 80006be:	2220      	movs	r2, #32
 80006c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2201      	movs	r2, #1
 80006c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN4_GPIO_Port, &GPIO_InitStruct);
 80006da:	003b      	movs	r3, r7
 80006dc:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f004 f943 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G0_Pin;
 80006e6:	003b      	movs	r3, r7
 80006e8:	2240      	movs	r2, #64	; 0x40
 80006ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2201      	movs	r2, #1
 80006f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G0_GPIO_Port, &GPIO_InitStruct);
 8000704:	003b      	movs	r3, r7
 8000706:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 8000708:	0019      	movs	r1, r3
 800070a:	0010      	movs	r0, r2
 800070c:	f004 f92e 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G9_Pin;
 8000710:	003b      	movs	r3, r7
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000716:	003b      	movs	r3, r7
 8000718:	2201      	movs	r2, #1
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G9_GPIO_Port, &GPIO_InitStruct);
 800072e:	003b      	movs	r3, r7
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 8000732:	0019      	movs	r1, r3
 8000734:	0010      	movs	r0, r2
 8000736:	f004 f919 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G8_Pin;
 800073a:	003b      	movs	r3, r7
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000742:	003b      	movs	r3, r7
 8000744:	2201      	movs	r2, #1
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000748:	003b      	movs	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800074e:	003b      	movs	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000754:	003b      	movs	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G8_GPIO_Port, &GPIO_InitStruct);
 800075a:	003b      	movs	r3, r7
 800075c:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 800075e:	0019      	movs	r1, r3
 8000760:	0010      	movs	r0, r2
 8000762:	f004 f903 	bl	800496c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G7_Pin;
 8000766:	003b      	movs	r3, r7
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0092      	lsls	r2, r2, #2
 800076c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800076e:	003b      	movs	r3, r7
 8000770:	2201      	movs	r2, #1
 8000772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000774:	003b      	movs	r3, r7
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800077a:	003b      	movs	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000780:	003b      	movs	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8000786:	003b      	movs	r3, r7
 8000788:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <MX_GPIO_Init+0x3c8>)
 800078a:	0019      	movs	r1, r3
 800078c:	0010      	movs	r0, r2
 800078e:	f004 f8ed 	bl	800496c <LL_GPIO_Init>

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b006      	add	sp, #24
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	50000c00 	.word	0x50000c00
 80007a0:	50000400 	.word	0x50000400
 80007a4:	50000800 	.word	0x50000800
 80007a8:	50001400 	.word	0x50001400

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 fe52 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f816 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f7ff fe0e 	bl	80003d8 <MX_GPIO_Init>
  MX_COMP2_Init();
 80007bc:	f7ff fd2e 	bl	800021c <MX_COMP2_Init>
  MX_DAC1_Init();
 80007c0:	f7ff fd92 	bl	80002e8 <MX_DAC1_Init>
  MX_RTC_Init();
 80007c4:	f000 fa9a 	bl	8000cfc <MX_RTC_Init>
  MX_TIM2_Init();
 80007c8:	f000 fbb2 	bl	8000f30 <MX_TIM2_Init>
  MX_TIM14_Init();
 80007cc:	f000 fc36 	bl	800103c <MX_TIM14_Init>
  MX_TIM15_Init();
 80007d0:	f000 fc5a 	bl	8001088 <MX_TIM15_Init>
  MX_TIM16_Init();
 80007d4:	f000 fd0e 	bl	80011f4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  nixie_init();
 80007d8:	f000 f924 	bl	8000a24 <nixie_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  boost_op();
 80007dc:	f000 f958 	bl	8000a90 <boost_op>
 80007e0:	e7fc      	b.n	80007dc <main+0x30>
	...

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b0a1      	sub	sp, #132	; 0x84
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	2448      	movs	r4, #72	; 0x48
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	0018      	movs	r0, r3
 80007f0:	2338      	movs	r3, #56	; 0x38
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f004 f941 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fa:	2338      	movs	r3, #56	; 0x38
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	0018      	movs	r0, r3
 8000800:	2310      	movs	r3, #16
 8000802:	001a      	movs	r2, r3
 8000804:	2100      	movs	r1, #0
 8000806:	f004 f939 	bl	8004a7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	0018      	movs	r0, r3
 800080e:	2334      	movs	r3, #52	; 0x34
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f004 f932 	bl	8004a7c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	0018      	movs	r0, r3
 800081e:	f001 fd61 	bl	80022e4 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000822:	4b32      	ldr	r3, [pc, #200]	; (80008ec <SystemClock_Config+0x108>)
 8000824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <SystemClock_Config+0x108>)
 8000828:	2118      	movs	r1, #24
 800082a:	438a      	bics	r2, r1
 800082c:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2206      	movs	r2, #6
 8000832:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2201      	movs	r2, #1
 8000838:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2240      	movs	r2, #64	; 0x40
 800084e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2202      	movs	r2, #2
 8000854:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2202      	movs	r2, #2
 800085a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2208      	movs	r2, #8
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	0292      	lsls	r2, r2, #10
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	0492      	lsls	r2, r2, #18
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	0592      	lsls	r2, r2, #22
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	187b      	adds	r3, r7, r1
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fd6e 	bl	8002364 <HAL_RCC_OscConfig>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800088c:	f000 f830 	bl	80008f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	2138      	movs	r1, #56	; 0x38
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2202      	movs	r2, #2
 800089c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2102      	movs	r1, #2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 f878 	bl	80029a4 <HAL_RCC_ClockConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80008b8:	f000 f81a 	bl	80008f0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM15;
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2284      	movs	r2, #132	; 0x84
 80008c0:	03d2      	lsls	r2, r2, #15
 80008c2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 f9ef 	bl	8002cb8 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80008de:	f000 f807 	bl	80008f0 <Error_Handler>
  }
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b021      	add	sp, #132	; 0x84
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <LL_GPIO_SetPinPull>:
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	68d9      	ldr	r1, [r3, #12]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	68ba      	ldr	r2, [r7, #8]
 800090e:	435a      	muls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	189b      	adds	r3, r3, r2
 8000916:	43db      	mvns	r3, r3
 8000918:	400b      	ands	r3, r1
 800091a:	001a      	movs	r2, r3
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	68b9      	ldr	r1, [r7, #8]
 8000920:	434b      	muls	r3, r1
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	434b      	muls	r3, r1
 8000926:	431a      	orrs	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	60da      	str	r2, [r3, #12]
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b004      	add	sp, #16
 8000932:	bd80      	pop	{r7, pc}

08000934 <HAL_TIM_PeriodElapsedCallback>:
static void nixie_display();
static void nixie_display_reset_all();
static void nixie_display_set_anode(uint8_t n);

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d103      	bne.n	8000950 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//End of boost converter pulse. Set flag to poll the feedback comparator of boost converter again
		poll_comp = true;
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
		if(hours < 24)
			hours++;
		else hours = 0;
	}
	//DEBUG END
}
 800094e:	e050      	b.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0xbe>
	else if(htim->Instance == htim14.Instance)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	d114      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x52>
		nixie_display();
 800095c:	f000 f8ba 	bl	8000ad4 <nixie_display>
		if(dac_value < DAC_TARGET)
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a29      	ldr	r2, [pc, #164]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d843      	bhi.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0xbe>
			dac_value = dac_value + 10;
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	330a      	adds	r3, #10
 8000970:	001a      	movs	r2, r3
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000974:	601a      	str	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4825      	ldr	r0, [pc, #148]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800097c:	2200      	movs	r2, #0
 800097e:	2110      	movs	r1, #16
 8000980:	f001 f9ee 	bl	8001d60 <HAL_DAC_SetValue>
}
 8000984:	e035      	b.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0xbe>
	else if(htim->Instance == htim16.Instance)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	429a      	cmp	r2, r3
 8000990:	d12f      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0xbe>
		if(minutes < 59)
 8000992:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b3a      	cmp	r3, #58	; 0x3a
 800099a:	d807      	bhi.n	80009ac <HAL_TIM_PeriodElapsedCallback+0x78>
			minutes++;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e002      	b.n	80009b2 <HAL_TIM_PeriodElapsedCallback+0x7e>
			minutes = 0;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
		if(seconds < 59)
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b3a      	cmp	r3, #58	; 0x3a
 80009ba:	d807      	bhi.n	80009cc <HAL_TIM_PeriodElapsedCallback+0x98>
			seconds++;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e002      	b.n	80009d2 <HAL_TIM_PeriodElapsedCallback+0x9e>
			seconds = 0;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
		if(hours < 24)
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2b17      	cmp	r3, #23
 80009da:	d807      	bhi.n	80009ec <HAL_TIM_PeriodElapsedCallback+0xb8>
			hours++;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	3301      	adds	r3, #1
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009e8:	701a      	strb	r2, [r3, #0]
}
 80009ea:	e002      	b.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0xbe>
		else hours = 0;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	200000e4 	.word	0x200000e4
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000124 	.word	0x20000124
 8000a08:	2000002c 	.word	0x2000002c
 8000a0c:	00000a27 	.word	0x00000a27
 8000a10:	20000064 	.word	0x20000064
 8000a14:	20000164 	.word	0x20000164
 8000a18:	20000032 	.word	0x20000032
 8000a1c:	20000033 	.word	0x20000033
 8000a20:	20000031 	.word	0x20000031

08000a24 <nixie_init>:

void nixie_init()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	//Start DAC for feedback voltage of boost converter
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <nixie_init+0x54>)
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 f948 	bl	8001cc2 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <nixie_init+0x58>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4810      	ldr	r0, [pc, #64]	; (8000a78 <nixie_init+0x54>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	f001 f990 	bl	8001d60 <HAL_DAC_SetValue>
	//Start comparator for boost converter
	HAL_COMP_Start(&hcomp2);
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <nixie_init+0x5c>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 ffdc 	bl	8001a00 <HAL_COMP_Start>
	//Enable one pulse mode for boost converter. Trigger by software trough HAL_TIM_Base_Start
	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_1);
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <nixie_init+0x60>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fe65 	bl	800371c <HAL_TIM_OnePulse_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <nixie_init+0x60>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <nixie_init+0x60>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	60da      	str	r2, [r3, #12]
	//Start timer and period elapsed event of multiplex timer for nixie tubes
	HAL_TIM_Base_Start_IT(&htim14);
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <nixie_init+0x64>)
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 fdb5 	bl	80035d4 <HAL_TIM_Base_Start_IT>

	//XXX For debug 1s interrupt
	HAL_TIM_Base_Start_IT(&htim16);
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <nixie_init+0x68>)
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 fdb1 	bl	80035d4 <HAL_TIM_Base_Start_IT>
	//DEBUG END
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000064 	.word	0x20000064
 8000a7c:	2000002c 	.word	0x2000002c
 8000a80:	20000034 	.word	0x20000034
 8000a84:	200000e4 	.word	0x200000e4
 8000a88:	20000124 	.word	0x20000124
 8000a8c:	20000164 	.word	0x20000164

08000a90 <boost_op>:

void boost_op()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	if(poll_comp)
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <boost_op+0x38>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d010      	beq.n	8000ac0 <boost_op+0x30>
	{
		//If voltage lower than feedback, activate next pulse of boost converter and switch off polling the comparator
		if(HAL_COMP_GetOutputLevel(&hcomp2) == COMP_OUTPUT_LEVEL_LOW)
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <boost_op+0x3c>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 ffff 	bl	8001aa4 <HAL_COMP_GetOutputLevel>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d10a      	bne.n	8000ac0 <boost_op+0x30>
		{
			poll_comp = false;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <boost_op+0x38>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_ENABLE(&htim2);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <boost_op+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <boost_op+0x40>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2101      	movs	r1, #1
 8000abc:	430a      	orrs	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000034 	.word	0x20000034
 8000ad0:	200000e4 	.word	0x200000e4

08000ad4 <nixie_display>:
	minutes = m;
	seconds = s;
}

static void nixie_display()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	nixie_display_reset_all();
 8000ad8:	f000 f88e 	bl	8000bf8 <nixie_display_reset_all>
	switch(digit)
 8000adc:	4b40      	ldr	r3, [pc, #256]	; (8000be0 <nixie_display+0x10c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d01f      	beq.n	8000b26 <nixie_display+0x52>
 8000ae6:	dc02      	bgt.n	8000aee <nixie_display+0x1a>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d005      	beq.n	8000af8 <nixie_display+0x24>
 8000aec:	e05e      	b.n	8000bac <nixie_display+0xd8>
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d030      	beq.n	8000b54 <nixie_display+0x80>
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d044      	beq.n	8000b80 <nixie_display+0xac>
 8000af6:	e059      	b.n	8000bac <nixie_display+0xd8>
	{
	case 0:
		nixie_display_set_anode(hours/10);
 8000af8:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <nixie_display+0x110>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	210a      	movs	r1, #10
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff faff 	bl	8000104 <__udivsi3>
 8000b06:	0003      	movs	r3, r0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f892 	bl	8000c34 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN1_GPIO_Port, GN1_Pin, GPIO_PIN_SET);
 8000b10:	23a0      	movs	r3, #160	; 0xa0
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	2201      	movs	r2, #1
 8000b16:	2101      	movs	r1, #1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 fbc5 	bl	80022a8 <HAL_GPIO_WritePin>
		digit = 1;
 8000b1e:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <nixie_display+0x10c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
		break;
 8000b24:	e042      	b.n	8000bac <nixie_display+0xd8>
	case 1:
		nixie_display_set_anode(hours%10);
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <nixie_display+0x110>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	210a      	movs	r1, #10
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fb6e 	bl	8000210 <__aeabi_uidivmod>
 8000b34:	000b      	movs	r3, r1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 f87b 	bl	8000c34 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN2_GPIO_Port, GN2_Pin, GPIO_PIN_SET);
 8000b3e:	23a0      	movs	r3, #160	; 0xa0
 8000b40:	05db      	lsls	r3, r3, #23
 8000b42:	2201      	movs	r2, #1
 8000b44:	2102      	movs	r1, #2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f001 fbae 	bl	80022a8 <HAL_GPIO_WritePin>
		digit = 2;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <nixie_display+0x10c>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	701a      	strb	r2, [r3, #0]
		break;
 8000b52:	e02b      	b.n	8000bac <nixie_display+0xd8>
	case 2:
		nixie_display_set_anode(minutes/10);
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <nixie_display+0x114>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	210a      	movs	r1, #10
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff fad1 	bl	8000104 <__udivsi3>
 8000b62:	0003      	movs	r3, r0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f864 	bl	8000c34 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN3_GPIO_Port, GN3_Pin, GPIO_PIN_SET);
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <nixie_display+0x118>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2102      	movs	r1, #2
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fb98 	bl	80022a8 <HAL_GPIO_WritePin>
		digit = 3;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <nixie_display+0x10c>)
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	701a      	strb	r2, [r3, #0]
		break;
 8000b7e:	e015      	b.n	8000bac <nixie_display+0xd8>
	case 3:
		nixie_display_set_anode(minutes%10);
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <nixie_display+0x114>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	210a      	movs	r1, #10
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff fb41 	bl	8000210 <__aeabi_uidivmod>
 8000b8e:	000b      	movs	r3, r1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 f84e 	bl	8000c34 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN4_GPIO_Port, GN4_Pin, GPIO_PIN_SET);
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <nixie_display+0x11c>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fb82 	bl	80022a8 <HAL_GPIO_WritePin>
		digit = 0;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <nixie_display+0x10c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
		break;
 8000baa:	46c0      	nop			; (mov r8, r8)
	}

	/*TODO: PA4 and PA5 can’t be used in output mode when DAC1_OUT1 or
	DAC1_OUT2 respectively is connected to on-chip peripherals*/
	if(seconds%2)
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <nixie_display+0x120>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d007      	beq.n	8000bcc <nixie_display+0xf8>
	{
		//HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_SET);
		//Workaround: use LL library and use pullup oder -down resistor instaed of output
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLUP);
 8000bbc:	23a0      	movs	r3, #160	; 0xa0
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff fe98 	bl	80008fa <LL_GPIO_SetPinPull>
	{
		//HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_RESET);
		//Workaround: use LL library and use pullup oder -down resistor instaed of output
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLDOWN);
	}
}
 8000bca:	e006      	b.n	8000bda <nixie_display+0x106>
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLDOWN);
 8000bcc:	23a0      	movs	r3, #160	; 0xa0
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fe90 	bl	80008fa <LL_GPIO_SetPinPull>
}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000030 	.word	0x20000030
 8000be4:	20000031 	.word	0x20000031
 8000be8:	20000032 	.word	0x20000032
 8000bec:	50000c00 	.word	0x50000c00
 8000bf0:	50000400 	.word	0x50000400
 8000bf4:	20000033 	.word	0x20000033

08000bf8 <nixie_display_reset_all>:

static void nixie_display_reset_all()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GN1_Pin|GN2_Pin|G1_Pin|G3_Pin, GPIO_PIN_RESET);
 8000bfc:	23a0      	movs	r3, #160	; 0xa0
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	2200      	movs	r2, #0
 8000c02:	2153      	movs	r1, #83	; 0x53
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 fb4f 	bl	80022a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GN3_Pin|G2_Pin|G4_Pin, GPIO_PIN_RESET);
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <nixie_display_reset_all+0x34>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	210e      	movs	r1, #14
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fb49 	bl	80022a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G5_Pin|G6_Pin|GN4_Pin|G0_Pin|G9_Pin|G8_Pin|G7_Pin, GPIO_PIN_RESET);
 8000c16:	23fe      	movs	r3, #254	; 0xfe
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <nixie_display_reset_all+0x38>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	0019      	movs	r1, r3
 8000c20:	f001 fb42 	bl	80022a8 <HAL_GPIO_WritePin>
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	50000c00 	.word	0x50000c00
 8000c30:	50000400 	.word	0x50000400

08000c34 <nixie_display_set_anode>:

static void nixie_display_set_anode(uint8_t n)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	0002      	movs	r2, r0
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	701a      	strb	r2, [r3, #0]
	switch(n)
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b09      	cmp	r3, #9
 8000c46:	d84e      	bhi.n	8000ce6 <nixie_display_set_anode+0xb2>
 8000c48:	009a      	lsls	r2, r3, #2
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <nixie_display_set_anode+0xbc>)
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	469f      	mov	pc, r3
	{
	case 0:
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 8000c52:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <nixie_display_set_anode+0xc0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f001 fb25 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000c5e:	e042      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 1:
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	2201      	movs	r2, #1
 8000c66:	2110      	movs	r1, #16
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 fb1d 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000c6e:	e03a      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 2:
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8000c70:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <nixie_display_set_anode+0xc4>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	2104      	movs	r1, #4
 8000c76:	0018      	movs	r0, r3
 8000c78:	f001 fb16 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000c7c:	e033      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 3:
		HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_SET);
 8000c7e:	23a0      	movs	r3, #160	; 0xa0
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	2201      	movs	r2, #1
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	0018      	movs	r0, r3
 8000c88:	f001 fb0e 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000c8c:	e02b      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 4:
		HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_SET);
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <nixie_display_set_anode+0xc4>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	2108      	movs	r1, #8
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 fb07 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000c9a:	e024      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 5:
		HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_SET);
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <nixie_display_set_anode+0xc0>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fb00 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000ca8:	e01d      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 6:
		HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_SET);
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <nixie_display_set_anode+0xc0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	2110      	movs	r1, #16
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f001 faf9 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000cb6:	e016      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 7:
		HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_SET);
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <nixie_display_set_anode+0xc0>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	f001 faf1 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000cc6:	e00e      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 8:
		HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_SET);
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <nixie_display_set_anode+0xc0>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	f001 fae9 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000cd6:	e006      	b.n	8000ce6 <nixie_display_set_anode+0xb2>
	case 9:
		HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_SET);
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <nixie_display_set_anode+0xc0>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f001 fae2 	bl	80022a8 <HAL_GPIO_WritePin>
		break;
 8000ce4:	46c0      	nop			; (mov r8, r8)
	}
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	08004aa4 	.word	0x08004aa4
 8000cf4:	50000400 	.word	0x50000400
 8000cf8:	50000c00 	.word	0x50000c00

08000cfc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	0018      	movs	r0, r3
 8000d06:	2314      	movs	r3, #20
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f003 feb6 	bl	8004a7c <memset>
  RTC_DateTypeDef sDate = {0};
 8000d10:	003b      	movs	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d18:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <MX_RTC_Init+0xd4>)
 8000d1a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d24:	227f      	movs	r2, #127	; 0x7f
 8000d26:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d2a:	22ff      	movs	r2, #255	; 0xff
 8000d2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	05d2      	lsls	r2, r2, #23
 8000d46:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 f969 	bl	8003028 <HAL_RTC_Init>
 8000d56:	1e03      	subs	r3, r0, #0
 8000d58:	d001      	beq.n	8000d5e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000d5a:	f7ff fdc9 	bl	80008f0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d82:	1d39      	adds	r1, r7, #4
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f002 f9e3 	bl	8003154 <HAL_RTC_SetTime>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000d92:	f7ff fdad 	bl	80008f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d9c:	003b      	movs	r3, r7
 8000d9e:	2201      	movs	r2, #1
 8000da0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2201      	movs	r2, #1
 8000da6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000dae:	0039      	movs	r1, r7
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_RTC_Init+0xd0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	0018      	movs	r0, r3
 8000db6:	f002 fa75 	bl	80032a4 <HAL_RTC_SetDate>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000dbe:	f7ff fd97 	bl	80008f0 <Error_Handler>
  }

}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b006      	add	sp, #24
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000078 	.word	0x20000078
 8000dd0:	40002800 	.word	0x40002800

08000dd4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_RTC_MspInit+0x44>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d114      	bne.n	8000e10 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_RTC_MspInit+0x48>)
 8000de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_RTC_MspInit+0x48>)
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0209      	lsls	r1, r1, #8
 8000df0:	430a      	orrs	r2, r1
 8000df2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_RTC_MspInit+0x48>)
 8000df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_RTC_MspInit+0x48>)
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	00c9      	lsls	r1, r1, #3
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_RTC_MspInit+0x48>)
 8000e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b004      	add	sp, #16
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40002800 	.word	0x40002800
 8000e1c:	40021000 	.word	0x40021000

08000e20 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <LL_SYSCFG_DisableDBATT+0x1c>)
 8000e2a:	6819      	ldr	r1, [r3, #0]
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <LL_SYSCFG_DisableDBATT+0x1c>)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40010000 	.word	0x40010000

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_MspInit+0x58>)
 8000e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_MspInit+0x58>)
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_MspInit+0x58>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	2201      	movs	r2, #1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_MspInit+0x58>)
 8000e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_MspInit+0x58>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0549      	lsls	r1, r1, #21
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x58>)
 8000e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	055b      	lsls	r3, r3, #21
 8000e74:	4013      	ands	r3, r2
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_DisableVREFBUF();
 8000e7a:	f000 fba7 	bl	80015cc <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f000 fb90 	bl	80015a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8000e84:	23c0      	movs	r3, #192	; 0xc0
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ffc9 	bl	8000e20 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40021000 	.word	0x40021000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec4:	f000 fb32 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <TIM2_IRQHandler+0x14>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f002 fc62 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	200000e4 	.word	0x200000e4

08000ee8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <TIM14_IRQHandler+0x14>)
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f002 fc56 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	20000124 	.word	0x20000124

08000f00 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <TIM16_IRQHandler+0x14>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f002 fc4a 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000164 	.word	0x20000164

08000f18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <SystemInit+0x14>)
 8000f1e:	2280      	movs	r2, #128	; 0x80
 8000f20:	0512      	lsls	r2, r2, #20
 8000f22:	609a      	str	r2, [r3, #8]
#endif
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	2328      	movs	r3, #40	; 0x28
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	001a      	movs	r2, r3
 8000f40:	2100      	movs	r1, #0
 8000f42:	f003 fd9b 	bl	8004a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	231c      	movs	r3, #28
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	001a      	movs	r2, r3
 8000f50:	2100      	movs	r1, #0
 8000f52:	f003 fd93 	bl	8004a7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f56:	003b      	movs	r3, r7
 8000f58:	0018      	movs	r0, r3
 8000f5a:	231c      	movs	r3, #28
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f003 fd8c 	bl	8004a7c <memset>

  htim2.Instance = TIM2;
 8000f64:	4b34      	ldr	r3, [pc, #208]	; (8001038 <MX_TIM2_Init+0x108>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	05d2      	lsls	r2, r2, #23
 8000f6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <MX_TIM2_Init+0x108>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b31      	ldr	r3, [pc, #196]	; (8001038 <MX_TIM2_Init+0x108>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 224;
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MX_TIM2_Init+0x108>)
 8000f7a:	22e0      	movs	r2, #224	; 0xe0
 8000f7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_TIM2_Init+0x108>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_TIM2_Init+0x108>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f8a:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <MX_TIM2_Init+0x108>)
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f002 faf4 	bl	800357a <HAL_TIM_Base_Init>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f96:	f7ff fcab 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	2128      	movs	r1, #40	; 0x28
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	0152      	lsls	r2, r2, #5
 8000fa2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa4:	187a      	adds	r2, r7, r1
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_TIM2_Init+0x108>)
 8000fa8:	0011      	movs	r1, r2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f002 fe28 	bl	8003c00 <HAL_TIM_ConfigClockSource>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000fb4:	f7ff fc9c 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_TIM2_Init+0x108>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f002 fb34 	bl	8003628 <HAL_TIM_PWM_Init>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000fc4:	f7ff fc94 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_TIM2_Init+0x108>)
 8000fca:	2108      	movs	r1, #8
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f002 fb5f 	bl	8003690 <HAL_TIM_OnePulse_Init>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000fd6:	f7ff fc8b 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fda:	211c      	movs	r1, #28
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe8:	187a      	adds	r2, r7, r1
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_TIM2_Init+0x108>)
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f003 faea 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff4:	1e03      	subs	r3, r0, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000ff8:	f7ff fc7a 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ffc:	003b      	movs	r3, r7
 8000ffe:	2270      	movs	r2, #112	; 0x70
 8001000:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 8001002:	003b      	movs	r3, r7
 8001004:	2201      	movs	r2, #1
 8001006:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001008:	003b      	movs	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800100e:	003b      	movs	r3, r7
 8001010:	2204      	movs	r2, #4
 8001012:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001014:	0039      	movs	r1, r7
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_TIM2_Init+0x108>)
 8001018:	2200      	movs	r2, #0
 800101a:	0018      	movs	r0, r3
 800101c:	f002 fcf2 	bl	8003a04 <HAL_TIM_PWM_ConfigChannel>
 8001020:	1e03      	subs	r3, r0, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001024:	f7ff fc64 	bl	80008f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <MX_TIM2_Init+0x108>)
 800102a:	0018      	movs	r0, r3
 800102c:	f000 f982 	bl	8001334 <HAL_TIM_MspPostInit>

}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	b00e      	add	sp, #56	; 0x38
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200000e4 	.word	0x200000e4

0800103c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_TIM14_Init+0x40>)
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <MX_TIM14_Init+0x44>)
 8001044:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <MX_TIM14_Init+0x40>)
 8001048:	223f      	movs	r2, #63	; 0x3f
 800104a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_TIM14_Init+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_TIM14_Init+0x40>)
 8001054:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <MX_TIM14_Init+0x48>)
 8001056:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_TIM14_Init+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_TIM14_Init+0x40>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <MX_TIM14_Init+0x40>)
 8001066:	0018      	movs	r0, r3
 8001068:	f002 fa87 	bl	800357a <HAL_TIM_Base_Init>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001070:	f7ff fc3e 	bl	80008f0 <Error_Handler>
  }

}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	20000124 	.word	0x20000124
 8001080:	40002000 	.word	0x40002000
 8001084:	00001388 	.word	0x00001388

08001088 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09c      	sub	sp, #112	; 0x70
 800108c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108e:	2360      	movs	r3, #96	; 0x60
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	0018      	movs	r0, r3
 8001094:	2310      	movs	r3, #16
 8001096:	001a      	movs	r2, r3
 8001098:	2100      	movs	r1, #0
 800109a:	f003 fcef 	bl	8004a7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109e:	2354      	movs	r3, #84	; 0x54
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	0018      	movs	r0, r3
 80010a4:	230c      	movs	r3, #12
 80010a6:	001a      	movs	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	f003 fce7 	bl	8004a7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	2338      	movs	r3, #56	; 0x38
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	0018      	movs	r0, r3
 80010b4:	231c      	movs	r3, #28
 80010b6:	001a      	movs	r2, r3
 80010b8:	2100      	movs	r1, #0
 80010ba:	f003 fcdf 	bl	8004a7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	0018      	movs	r0, r3
 80010c2:	2334      	movs	r3, #52	; 0x34
 80010c4:	001a      	movs	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	f003 fcd8 	bl	8004a7c <memset>

  htim15.Instance = TIM15;
 80010cc:	4b47      	ldr	r3, [pc, #284]	; (80011ec <MX_TIM15_Init+0x164>)
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <MX_TIM15_Init+0x168>)
 80010d0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <MX_TIM15_Init+0x164>)
 80010d4:	223f      	movs	r2, #63	; 0x3f
 80010d6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b44      	ldr	r3, [pc, #272]	; (80011ec <MX_TIM15_Init+0x164>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 249;
 80010de:	4b43      	ldr	r3, [pc, #268]	; (80011ec <MX_TIM15_Init+0x164>)
 80010e0:	22f9      	movs	r2, #249	; 0xf9
 80010e2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b41      	ldr	r3, [pc, #260]	; (80011ec <MX_TIM15_Init+0x164>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010ea:	4b40      	ldr	r3, [pc, #256]	; (80011ec <MX_TIM15_Init+0x164>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <MX_TIM15_Init+0x164>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <MX_TIM15_Init+0x164>)
 80010f8:	0018      	movs	r0, r3
 80010fa:	f002 fa3e 	bl	800357a <HAL_TIM_Base_Init>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8001102:	f7ff fbf5 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001106:	2160      	movs	r1, #96	; 0x60
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2280      	movs	r2, #128	; 0x80
 800110c:	0152      	lsls	r2, r2, #5
 800110e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001110:	187a      	adds	r2, r7, r1
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <MX_TIM15_Init+0x164>)
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f002 fd72 	bl	8003c00 <HAL_TIM_ConfigClockSource>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001120:	f7ff fbe6 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <MX_TIM15_Init+0x164>)
 8001126:	0018      	movs	r0, r3
 8001128:	f002 fa7e 	bl	8003628 <HAL_TIM_PWM_Init>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001130:	f7ff fbde 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2154      	movs	r1, #84	; 0x54
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001142:	187a      	adds	r2, r7, r1
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_TIM15_Init+0x164>)
 8001146:	0011      	movs	r1, r2
 8001148:	0018      	movs	r0, r3
 800114a:	f003 fa3d 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	1e03      	subs	r3, r0, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001152:	f7ff fbcd 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001156:	2138      	movs	r1, #56	; 0x38
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2260      	movs	r2, #96	; 0x60
 800115c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 124;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	227c      	movs	r2, #124	; 0x7c
 8001162:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001182:	1879      	adds	r1, r7, r1
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_TIM15_Init+0x164>)
 8001186:	2200      	movs	r2, #0
 8001188:	0018      	movs	r0, r3
 800118a:	f002 fc3b 	bl	8003a04 <HAL_TIM_PWM_ConfigChannel>
 800118e:	1e03      	subs	r3, r0, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001192:	f7ff fbad 	bl	80008f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	0192      	lsls	r2, r2, #6
 80011ba:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80011c8:	1d3a      	adds	r2, r7, #4
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_TIM15_Init+0x164>)
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f003 fa50 	bl	8004674 <HAL_TIMEx_ConfigBreakDeadTime>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 80011d8:	f7ff fb8a 	bl	80008f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <MX_TIM15_Init+0x164>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 f8a8 	bl	8001334 <HAL_TIM_MspPostInit>

}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b01c      	add	sp, #112	; 0x70
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200000a4 	.word	0x200000a4
 80011f0:	40014000 	.word	0x40014000

080011f4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_TIM16_Init+0x48>)
 80011fa:	4a11      	ldr	r2, [pc, #68]	; (8001240 <MX_TIM16_Init+0x4c>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63999;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_TIM16_Init+0x48>)
 8001200:	4a10      	ldr	r2, [pc, #64]	; (8001244 <MX_TIM16_Init+0x50>)
 8001202:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_TIM16_Init+0x48>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_TIM16_Init+0x48>)
 800120c:	22fa      	movs	r2, #250	; 0xfa
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_TIM16_Init+0x48>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_TIM16_Init+0x48>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_TIM16_Init+0x48>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <MX_TIM16_Init+0x48>)
 8001226:	0018      	movs	r0, r3
 8001228:	f002 f9a7 	bl	800357a <HAL_TIM_Base_Init>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001230:	f7ff fb5e 	bl	80008f0 <Error_Handler>
  }

}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000164 	.word	0x20000164
 8001240:	40014400 	.word	0x40014400
 8001244:	0000f9ff 	.word	0x0000f9ff

08001248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	429a      	cmp	r2, r3
 800125a:	d114      	bne.n	8001286 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 800125e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 800126a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126c:	2201      	movs	r2, #1
 800126e:	4013      	ands	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	200f      	movs	r0, #15
 800127a:	f000 fccd 	bl	8001c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800127e:	200f      	movs	r0, #15
 8001280:	f000 fcdf 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001284:	e04a      	b.n	800131c <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM14)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a27      	ldr	r2, [pc, #156]	; (8001328 <HAL_TIM_Base_MspInit+0xe0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d116      	bne.n	80012be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 8001292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	0209      	lsls	r1, r1, #8
 800129a:	430a      	orrs	r2, r1
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 80012a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2013      	movs	r0, #19
 80012b2:	f000 fcb1 	bl	8001c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80012b6:	2013      	movs	r0, #19
 80012b8:	f000 fcc3 	bl	8001c42 <HAL_NVIC_EnableIRQ>
}
 80012bc:	e02e      	b.n	800131c <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM15)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <HAL_TIM_Base_MspInit+0xe4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d10e      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 80012ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	0249      	lsls	r1, r1, #9
 80012d2:	430a      	orrs	r2, r1
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 80012d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	025b      	lsls	r3, r3, #9
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	e01a      	b.n	800131c <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM16)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a11      	ldr	r2, [pc, #68]	; (8001330 <HAL_TIM_Base_MspInit+0xe8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d115      	bne.n	800131c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 80012f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	0289      	lsls	r1, r1, #10
 80012fa:	430a      	orrs	r2, r1
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_TIM_Base_MspInit+0xdc>)
 8001300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	029b      	lsls	r3, r3, #10
 8001306:	4013      	ands	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2015      	movs	r0, #21
 8001312:	f000 fc81 	bl	8001c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001316:	2015      	movs	r0, #21
 8001318:	f000 fc93 	bl	8001c42 <HAL_NVIC_EnableIRQ>
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b006      	add	sp, #24
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	40002000 	.word	0x40002000
 800132c:	40014000 	.word	0x40014000
 8001330:	40014400 	.word	0x40014400

08001334 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	2314      	movs	r3, #20
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	0018      	movs	r0, r3
 8001342:	2314      	movs	r3, #20
 8001344:	001a      	movs	r2, r3
 8001346:	2100      	movs	r1, #0
 8001348:	f003 fb98 	bl	8004a7c <memset>
  if(timHandle->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	429a      	cmp	r2, r3
 8001356:	d124      	bne.n	80013a2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_TIM_MspPostInit+0xc8>)
 800135a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_TIM_MspPostInit+0xc8>)
 800135e:	2101      	movs	r1, #1
 8001360:	430a      	orrs	r2, r1
 8001362:	635a      	str	r2, [r3, #52]	; 0x34
 8001364:	4b25      	ldr	r3, [pc, #148]	; (80013fc <HAL_TIM_MspPostInit+0xc8>)
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	2201      	movs	r2, #1
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001370:	2114      	movs	r1, #20
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2280      	movs	r2, #128	; 0x80
 8001376:	0212      	lsls	r2, r2, #8
 8001378:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2202      	movs	r2, #2
 800137e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2201      	movs	r2, #1
 800138a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2202      	movs	r2, #2
 8001390:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	187a      	adds	r2, r7, r1
 8001394:	23a0      	movs	r3, #160	; 0xa0
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	0011      	movs	r1, r2
 800139a:	0018      	movs	r0, r3
 800139c:	f000 fe20 	bl	8001fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80013a0:	e027      	b.n	80013f2 <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM15)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a16      	ldr	r2, [pc, #88]	; (8001400 <HAL_TIM_MspPostInit+0xcc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d122      	bne.n	80013f2 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_TIM_MspPostInit+0xc8>)
 80013ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_TIM_MspPostInit+0xc8>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	430a      	orrs	r2, r1
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_TIM_MspPostInit+0xc8>)
 80013ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c4:	2114      	movs	r1, #20
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2204      	movs	r2, #4
 80013ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2202      	movs	r2, #2
 80013d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2202      	movs	r2, #2
 80013d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2205      	movs	r2, #5
 80013e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	187a      	adds	r2, r7, r1
 80013e6:	23a0      	movs	r3, #160	; 0xa0
 80013e8:	05db      	lsls	r3, r3, #23
 80013ea:	0011      	movs	r1, r2
 80013ec:	0018      	movs	r0, r3
 80013ee:	f000 fdf7 	bl	8001fe0 <HAL_GPIO_Init>
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b00a      	add	sp, #40	; 0x28
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	40021000 	.word	0x40021000
 8001400:	40014000 	.word	0x40014000

08001404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001406:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001408:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800140a:	e003      	b.n	8001414 <LoopCopyDataInit>

0800140c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800140e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001410:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001412:	3104      	adds	r1, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopForever+0xa>)
  ldr r3, =_edata
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <LoopForever+0xe>)
  adds r2, r0, r1
 8001418:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800141a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800141c:	d3f6      	bcc.n	800140c <CopyDataInit>
  ldr r2, =_sbss
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <LoopForever+0x12>)
  b LoopFillZerobss
 8001420:	e002      	b.n	8001428 <LoopFillZerobss>

08001422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  str  r3, [r2]
 8001424:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001426:	3204      	adds	r2, #4

08001428 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <LoopForever+0x16>)
  cmp r2, r3
 800142a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800142c:	d3f9      	bcc.n	8001422 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800142e:	f7ff fd73 	bl	8000f18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001432:	f003 faff 	bl	8004a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001436:	f7ff f9b9 	bl	80007ac <main>

0800143a <LoopForever>:

LoopForever:
    b LoopForever
 800143a:	e7fe      	b.n	800143a <LoopForever>
  ldr   r0, =_estack
 800143c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001440:	08004b68 	.word	0x08004b68
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001448:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800144c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001450:	200001a8 	.word	0x200001a8

08001454 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC1_COMP_IRQHandler>
	...

08001458 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_Init+0x3c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_Init+0x3c>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0049      	lsls	r1, r1, #1
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f810 	bl	8001498 <HAL_InitTick>
 8001478:	1e03      	subs	r3, r0, #0
 800147a:	d003      	beq.n	8001484 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	e001      	b.n	8001488 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001484:	f7ff fcdc 	bl	8000e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	781b      	ldrb	r3, [r3, #0]
}
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40022000 	.word	0x40022000

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	230f      	movs	r3, #15
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_InitTick+0x88>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d02b      	beq.n	8001508 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80014b0:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_InitTick+0x8c>)
 80014b2:	681c      	ldr	r4, [r3, #0]
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_InitTick+0x88>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0019      	movs	r1, r3
 80014ba:	23fa      	movs	r3, #250	; 0xfa
 80014bc:	0098      	lsls	r0, r3, #2
 80014be:	f7fe fe21 	bl	8000104 <__udivsi3>
 80014c2:	0003      	movs	r3, r0
 80014c4:	0019      	movs	r1, r3
 80014c6:	0020      	movs	r0, r4
 80014c8:	f7fe fe1c 	bl	8000104 <__udivsi3>
 80014cc:	0003      	movs	r3, r0
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 fbc7 	bl	8001c62 <HAL_SYSTICK_Config>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d112      	bne.n	80014fe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d80a      	bhi.n	80014f4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	2301      	movs	r3, #1
 80014e2:	425b      	negs	r3, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 fb96 	bl	8001c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_InitTick+0x90>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e00d      	b.n	8001510 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80014f4:	230f      	movs	r3, #15
 80014f6:	18fb      	adds	r3, r7, r3
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e008      	b.n	8001510 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014fe:	230f      	movs	r3, #15
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e003      	b.n	8001510 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001508:	230f      	movs	r3, #15
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	781b      	ldrb	r3, [r3, #0]
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	b005      	add	sp, #20
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	2000000c 	.word	0x2000000c
 8001524:	20000004 	.word	0x20000004
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <HAL_IncTick+0x18>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <HAL_IncTick+0x1c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	18d2      	adds	r2, r2, r3
 800153a:	4b02      	ldr	r3, [pc, #8]	; (8001544 <HAL_IncTick+0x18>)
 800153c:	601a      	str	r2, [r3, #0]
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200001a4 	.word	0x200001a4
 8001548:	2000000c 	.word	0x2000000c

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <HAL_GetTick+0x10>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	200001a4 	.word	0x200001a4

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff fff0 	bl	800154c <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	d004      	beq.n	8001584 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_Delay+0x40>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	18d3      	adds	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	f7ff ffe1 	bl	800154c <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	429a      	cmp	r2, r3
 8001594:	d8f7      	bhi.n	8001586 <HAL_Delay+0x26>
  {
  }
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b004      	add	sp, #16
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	2000000c 	.word	0x2000000c

080015a4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2202      	movs	r2, #2
 80015b2:	4393      	bics	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	40010030 	.word	0x40010030

080015cc <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	438a      	bics	r2, r1
 80015da:	601a      	str	r2, [r3, #0]
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	40010030 	.word	0x40010030

080015e8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <LL_EXTI_EnableIT_0_31+0x20>)
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	58d2      	ldr	r2, [r2, r3]
 80015f6:	4904      	ldr	r1, [pc, #16]	; (8001608 <LL_EXTI_EnableIT_0_31+0x20>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	508b      	str	r3, [r1, r2]
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021800 	.word	0x40021800

0800160c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <LL_EXTI_DisableIT_0_31+0x24>)
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	58d3      	ldr	r3, [r2, r3]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	43d2      	mvns	r2, r2
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <LL_EXTI_DisableIT_0_31+0x24>)
 8001620:	4013      	ands	r3, r2
 8001622:	2280      	movs	r2, #128	; 0x80
 8001624:	508b      	str	r3, [r1, r2]
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	40021800 	.word	0x40021800

08001634 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800163c:	4a05      	ldr	r2, [pc, #20]	; (8001654 <LL_EXTI_EnableEvent_0_31+0x20>)
 800163e:	2384      	movs	r3, #132	; 0x84
 8001640:	58d2      	ldr	r2, [r2, r3]
 8001642:	4904      	ldr	r1, [pc, #16]	; (8001654 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4313      	orrs	r3, r2
 8001648:	2284      	movs	r2, #132	; 0x84
 800164a:	508b      	str	r3, [r1, r2]

}
 800164c:	46c0      	nop			; (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021800 	.word	0x40021800

08001658 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001662:	2384      	movs	r3, #132	; 0x84
 8001664:	58d3      	ldr	r3, [r2, r3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	43d2      	mvns	r2, r2
 800166a:	4904      	ldr	r1, [pc, #16]	; (800167c <LL_EXTI_DisableEvent_0_31+0x24>)
 800166c:	4013      	ands	r3, r2
 800166e:	2284      	movs	r2, #132	; 0x84
 8001670:	508b      	str	r3, [r1, r2]
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40021800 	.word	0x40021800

08001680 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

}
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021800 	.word	0x40021800

080016a0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80016b2:	400a      	ands	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]

}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	40021800 	.word	0x40021800

080016c4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021800 	.word	0x40021800

080016e4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80016f6:	400a      	ands	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40021800 	.word	0x40021800

08001708 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8001710:	4b03      	ldr	r3, [pc, #12]	; (8001720 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	611a      	str	r2, [r3, #16]
}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b002      	add	sp, #8
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	40021800 	.word	0x40021800

08001724 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	60da      	str	r2, [r3, #12]
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	40021800 	.word	0x40021800

08001740 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800174c:	231f      	movs	r3, #31
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d104      	bne.n	8001764 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 800175a:	231f      	movs	r3, #31
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e13a      	b.n	80019da <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0fdb      	lsrs	r3, r3, #31
 800176c:	07da      	lsls	r2, r3, #31
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	429a      	cmp	r2, r3
 8001774:	d104      	bne.n	8001780 <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8001776:	231f      	movs	r3, #31
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	e12c      	b.n	80019da <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2229      	movs	r2, #41	; 0x29
 8001784:	5c9b      	ldrb	r3, [r3, r2]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10a      	bne.n	80017a2 <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2228      	movs	r2, #40	; 0x28
 8001790:	2100      	movs	r1, #0
 8001792:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0018      	movs	r0, r3
 800179e:	f7fe fd6d 	bl	800027c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2230      	movs	r2, #48	; 0x30
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80017ce:	4313      	orrs	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a83      	ldr	r2, [pc, #524]	; (80019e8 <HAL_COMP_Init+0x2a8>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d10d      	bne.n	8001810 <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80017f4:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80017fa:	497d      	ldr	r1, [pc, #500]	; (80019f0 <HAL_COMP_Init+0x2b0>)
 80017fc:	400a      	ands	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001800:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4b79      	ldr	r3, [pc, #484]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0109      	lsls	r1, r1, #4
 800180a:	430a      	orrs	r2, r1
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e01f      	b.n	8001850 <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	23c0      	movs	r3, #192	; 0xc0
 8001816:	015b      	lsls	r3, r3, #5
 8001818:	429a      	cmp	r2, r3
 800181a:	d10d      	bne.n	8001838 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800181c:	4b73      	ldr	r3, [pc, #460]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b72      	ldr	r3, [pc, #456]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0109      	lsls	r1, r1, #4
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800182a:	4b70      	ldr	r3, [pc, #448]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001830:	496f      	ldr	r1, [pc, #444]	; (80019f0 <HAL_COMP_Init+0x2b0>)
 8001832:	400a      	ands	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	e00b      	b.n	8001850 <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b6b      	ldr	r3, [pc, #428]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800183e:	496c      	ldr	r1, [pc, #432]	; (80019f0 <HAL_COMP_Init+0x2b0>)
 8001840:	400a      	ands	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001844:	4b69      	ldr	r3, [pc, #420]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4b68      	ldr	r3, [pc, #416]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800184a:	4969      	ldr	r1, [pc, #420]	; (80019f0 <HAL_COMP_Init+0x2b0>)
 800184c:	400a      	ands	r2, r1
 800184e:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	01d2      	lsls	r2, r2, #7
 8001858:	4293      	cmp	r3, r2
 800185a:	d006      	beq.n	800186a <HAL_COMP_Init+0x12a>
 800185c:	22a0      	movs	r2, #160	; 0xa0
 800185e:	01d2      	lsls	r2, r2, #7
 8001860:	4293      	cmp	r3, r2
 8001862:	d010      	beq.n	8001886 <HAL_COMP_Init+0x146>
 8001864:	2b01      	cmp	r3, #1
 8001866:	d01c      	beq.n	80018a2 <HAL_COMP_Init+0x162>
 8001868:	e02a      	b.n	80018c0 <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800186a:	4b60      	ldr	r3, [pc, #384]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	01c9      	lsls	r1, r1, #7
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001878:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800187e:	495d      	ldr	r1, [pc, #372]	; (80019f4 <HAL_COMP_Init+0x2b4>)
 8001880:	400a      	ands	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
        break;
 8001884:	e029      	b.n	80018da <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001886:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4b58      	ldr	r3, [pc, #352]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800188c:	4959      	ldr	r1, [pc, #356]	; (80019f4 <HAL_COMP_Init+0x2b4>)
 800188e:	400a      	ands	r2, r1
 8001890:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001892:	4b56      	ldr	r3, [pc, #344]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4b55      	ldr	r3, [pc, #340]	; (80019ec <HAL_COMP_Init+0x2ac>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	01c9      	lsls	r1, r1, #7
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
        break;
 80018a0:	e01b      	b.n	80018da <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80018a2:	4b52      	ldr	r3, [pc, #328]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b51      	ldr	r3, [pc, #324]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	01c9      	lsls	r1, r1, #7
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80018b0:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	01c9      	lsls	r1, r1, #7
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
        break;
 80018be:	e00c      	b.n	80018da <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80018c6:	494b      	ldr	r1, [pc, #300]	; (80019f4 <HAL_COMP_Init+0x2b4>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80018cc:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	4b46      	ldr	r3, [pc, #280]	; (80019ec <HAL_COMP_Init+0x2ac>)
 80018d2:	4948      	ldr	r1, [pc, #288]	; (80019f4 <HAL_COMP_Init+0x2b4>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	605a      	str	r2, [r3, #4]
        break;
 80018d8:	46c0      	nop			; (mov r8, r8)
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2230      	movs	r2, #48	; 0x30
 80018e2:	4013      	ands	r3, r2
 80018e4:	d016      	beq.n	8001914 <HAL_COMP_Init+0x1d4>
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d113      	bne.n	8001914 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <HAL_COMP_Init+0x2b8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4942      	ldr	r1, [pc, #264]	; (80019fc <HAL_COMP_Init+0x2bc>)
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7fe fc06 	bl	8000104 <__udivsi3>
 80018f8:	0003      	movs	r3, r0
 80018fa:	001a      	movs	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	189b      	adds	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8001906:	e002      	b.n	800190e <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f9      	bne.n	8001908 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a34      	ldr	r2, [pc, #208]	; (80019ec <HAL_COMP_Init+0x2ac>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d102      	bne.n	8001924 <HAL_COMP_Init+0x1e4>
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	029b      	lsls	r3, r3, #10
 8001922:	e001      	b.n	8001928 <HAL_COMP_Init+0x1e8>
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	02db      	lsls	r3, r3, #11
 8001928:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2203      	movs	r2, #3
 8001930:	4013      	ands	r3, r2
 8001932:	d040      	beq.n	80019b6 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	2210      	movs	r2, #16
 800193a:	4013      	ands	r3, r2
 800193c:	d004      	beq.n	8001948 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff fe9d 	bl	8001680 <LL_EXTI_EnableRisingTrig_0_31>
 8001946:	e003      	b.n	8001950 <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff fea8 	bl	80016a0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	2220      	movs	r2, #32
 8001956:	4013      	ands	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff feb1 	bl	80016c4 <LL_EXTI_EnableFallingTrig_0_31>
 8001962:	e003      	b.n	800196c <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff febc 	bl	80016e4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	0018      	movs	r0, r3
 8001970:	f7ff fed8 	bl	8001724 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff fec6 	bl	8001708 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d004      	beq.n	8001990 <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff fe53 	bl	8001634 <LL_EXTI_EnableEvent_0_31>
 800198e:	e003      	b.n	8001998 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	0018      	movs	r0, r3
 8001994:	f7ff fe60 	bl	8001658 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff fe1f 	bl	80015e8 <LL_EXTI_EnableIT_0_31>
 80019aa:	e00c      	b.n	80019c6 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7ff fe2c 	bl	800160c <LL_EXTI_DisableIT_0_31>
 80019b4:	e007      	b.n	80019c6 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff fe4d 	bl	8001658 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff fe23 	bl	800160c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2229      	movs	r2, #41	; 0x29
 80019ca:	5c9b      	ldrb	r3, [r3, r2]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2229      	movs	r2, #41	; 0x29
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80019da:	231f      	movs	r3, #31
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	781b      	ldrb	r3, [r3, #0]
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b008      	add	sp, #32
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	fe00740f 	.word	0xfe00740f
 80019ec:	40010200 	.word	0x40010200
 80019f0:	fffff7ff 	.word	0xfffff7ff
 80019f4:	ffffbfff 	.word	0xffffbfff
 80019f8:	20000004 	.word	0x20000004
 80019fc:	00030d40 	.word	0x00030d40

08001a00 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d104      	bne.n	8001a24 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e034      	b.n	8001a8e <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0fdb      	lsrs	r3, r3, #31
 8001a2c:	07da      	lsls	r2, r3, #31
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d104      	bne.n	8001a40 <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 8001a36:	230f      	movs	r3, #15
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e026      	b.n	8001a8e <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2229      	movs	r2, #41	; 0x29
 8001a44:	5c9b      	ldrb	r3, [r3, r2]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d11c      	bne.n	8001a86 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2229      	movs	r2, #41	; 0x29
 8001a60:	2102      	movs	r1, #2
 8001a62:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_COMP_Start+0x9c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	490d      	ldr	r1, [pc, #52]	; (8001aa0 <HAL_COMP_Start+0xa0>)
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7fe fb4a 	bl	8000104 <__udivsi3>
 8001a70:	0003      	movs	r3, r0
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001a76:	e002      	b.n	8001a7e <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <HAL_COMP_Start+0x78>
 8001a84:	e003      	b.n	8001a8e <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a86:	230f      	movs	r3, #15
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001a8e:	230f      	movs	r3, #15
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	00030d40 	.word	0x00030d40

08001aa4 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0f9b      	lsrs	r3, r3, #30
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4013      	ands	r3, r2
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ad2:	d809      	bhi.n	8001ae8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	001a      	movs	r2, r3
 8001ada:	231f      	movs	r3, #31
 8001adc:	401a      	ands	r2, r3
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_EnableIRQ+0x30>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4091      	lsls	r1, r2
 8001ae4:	000a      	movs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
  }
}
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	0002      	movs	r2, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b7f      	cmp	r3, #127	; 0x7f
 8001b08:	d828      	bhi.n	8001b5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <__NVIC_SetPriority+0xd4>)
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	33c0      	adds	r3, #192	; 0xc0
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	589b      	ldr	r3, [r3, r2]
 8001b1a:	1dfa      	adds	r2, r7, #7
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	0011      	movs	r1, r2
 8001b20:	2203      	movs	r2, #3
 8001b22:	400a      	ands	r2, r1
 8001b24:	00d2      	lsls	r2, r2, #3
 8001b26:	21ff      	movs	r1, #255	; 0xff
 8001b28:	4091      	lsls	r1, r2
 8001b2a:	000a      	movs	r2, r1
 8001b2c:	43d2      	mvns	r2, r2
 8001b2e:	401a      	ands	r2, r3
 8001b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	019b      	lsls	r3, r3, #6
 8001b36:	22ff      	movs	r2, #255	; 0xff
 8001b38:	401a      	ands	r2, r3
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	2303      	movs	r3, #3
 8001b42:	4003      	ands	r3, r0
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b48:	481f      	ldr	r0, [pc, #124]	; (8001bc8 <__NVIC_SetPriority+0xd4>)
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	430a      	orrs	r2, r1
 8001b54:	33c0      	adds	r3, #192	; 0xc0
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b5a:	e031      	b.n	8001bc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <__NVIC_SetPriority+0xd8>)
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	0019      	movs	r1, r3
 8001b64:	230f      	movs	r3, #15
 8001b66:	400b      	ands	r3, r1
 8001b68:	3b08      	subs	r3, #8
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3306      	adds	r3, #6
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	18d3      	adds	r3, r2, r3
 8001b72:	3304      	adds	r3, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1dfa      	adds	r2, r7, #7
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	400a      	ands	r2, r1
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	21ff      	movs	r1, #255	; 0xff
 8001b84:	4091      	lsls	r1, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	43d2      	mvns	r2, r2
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	22ff      	movs	r2, #255	; 0xff
 8001b94:	401a      	ands	r2, r3
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	4003      	ands	r3, r0
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba4:	4809      	ldr	r0, [pc, #36]	; (8001bcc <__NVIC_SetPriority+0xd8>)
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	001c      	movs	r4, r3
 8001bac:	230f      	movs	r3, #15
 8001bae:	4023      	ands	r3, r4
 8001bb0:	3b08      	subs	r3, #8
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	3306      	adds	r3, #6
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	18c3      	adds	r3, r0, r3
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b003      	add	sp, #12
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <SysTick_Config+0x40>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e010      	b.n	8001c08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <SysTick_Config+0x44>)
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	3a01      	subs	r2, #1
 8001bec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	2103      	movs	r1, #3
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff ff7d 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <SysTick_Config+0x44>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x44>)
 8001c02:	2207      	movs	r2, #7
 8001c04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	00ffffff 	.word	0x00ffffff
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	210f      	movs	r1, #15
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	1c02      	adds	r2, r0, #0
 8001c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b004      	add	sp, #16
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	0002      	movs	r2, r0
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7ff ff33 	bl	8001ac0 <__NVIC_EnableIRQ>
}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff ffaf 	bl	8001bd0 <SysTick_Config>
 8001c72:	0003      	movs	r3, r0
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e015      	b.n	8001cba <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	791b      	ldrb	r3, [r3, #4]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d106      	bne.n	8001ca6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe fb57 	bl	8000354 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	795b      	ldrb	r3, [r3, #5]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_DAC_Start+0x16>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e03f      	b.n	8001d58 <HAL_DAC_Start+0x96>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2210      	movs	r2, #16
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10f      	bne.n	8001d22 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	223e      	movs	r2, #62	; 0x3e
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d11c      	bne.n	8001d4a <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	e013      	b.n	8001d4a <HAL_DAC_Start+0x88>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	23f8      	movs	r3, #248	; 0xf8
 8001d2a:	039b      	lsls	r3, r3, #14
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	2102      	movs	r1, #2
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4099      	lsls	r1, r3
 8001d34:	000b      	movs	r3, r1
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d107      	bne.n	8001d4a <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2102      	movs	r1, #2
 8001d46:	430a      	orrs	r2, r1
 8001d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	18d3      	adds	r3, r2, r3
 8001d84:	3308      	adds	r3, #8
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e004      	b.n	8001d94 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	18d3      	adds	r3, r2, r3
 8001d90:	3314      	adds	r3, #20
 8001d92:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b006      	add	sp, #24
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	795b      	ldrb	r3, [r3, #5]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_DAC_ConfigChannel+0x1c>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e107      	b.n	8001fd0 <HAL_DAC_ConfigChannel+0x22c>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d000      	beq.n	8001dd6 <HAL_DAC_ConfigChannel+0x32>
 8001dd4:	e074      	b.n	8001ec0 <HAL_DAC_ConfigChannel+0x11c>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d138      	bne.n	8001e4e <HAL_DAC_ConfigChannel+0xaa>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fbb6 	bl	800154c <HAL_GetTick>
 8001de0:	0003      	movs	r3, r0
 8001de2:	61fb      	str	r3, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001de4:	e011      	b.n	8001e0a <HAL_DAC_ConfigChannel+0x66>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001de6:	f7ff fbb1 	bl	800154c <HAL_GetTick>
 8001dea:	0002      	movs	r2, r0
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d90a      	bls.n	8001e0a <HAL_DAC_ConfigChannel+0x66>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2208      	movs	r2, #8
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2203      	movs	r2, #3
 8001e04:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0e2      	b.n	8001fd0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1e6      	bne.n	8001de6 <HAL_DAC_ConfigChannel+0x42>
        }
      }
      HAL_Delay(1);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7ff fba1 	bl	8001560 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	6992      	ldr	r2, [r2, #24]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
 8001e28:	e01e      	b.n	8001e68 <HAL_DAC_ConfigChannel+0xc4>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e2a:	f7ff fb8f 	bl	800154c <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d90a      	bls.n	8001e4e <HAL_DAC_ConfigChannel+0xaa>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2203      	movs	r2, #3
 8001e48:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e0c0      	b.n	8001fd0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	dbe8      	blt.n	8001e2a <HAL_DAC_ConfigChannel+0x86>
        }
      }
      HAL_Delay(1U);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f7ff fb81 	bl	8001560 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	6992      	ldr	r2, [r2, #24]
 8001e66:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	2110      	movs	r1, #16
 8001e72:	400a      	ands	r2, r1
 8001e74:	4958      	ldr	r1, [pc, #352]	; (8001fd8 <HAL_DAC_ConfigChannel+0x234>)
 8001e76:	4091      	lsls	r1, r2
 8001e78:	000a      	movs	r2, r1
 8001e7a:	43d2      	mvns	r2, r2
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	0011      	movs	r1, r2
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2010      	movs	r0, #16
 8001e88:	4003      	ands	r3, r0
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	21ff      	movs	r1, #255	; 0xff
 8001ea2:	4091      	lsls	r1, r2
 8001ea4:	000a      	movs	r2, r1
 8001ea6:	43d2      	mvns	r2, r2
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	0011      	movs	r1, r2
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2010      	movs	r0, #16
 8001eb4:	4003      	ands	r3, r0
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d11d      	bne.n	8001f04 <HAL_DAC_ConfigChannel+0x160>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	221f      	movs	r2, #31
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	0013      	movs	r3, r2
 8001edc:	43da      	mvns	r2, r3
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2210      	movs	r2, #16
 8001eee:	4013      	ands	r3, r2
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2210      	movs	r2, #16
 8001f10:	4013      	ands	r3, r2
 8001f12:	2207      	movs	r2, #7
 8001f14:	409a      	lsls	r2, r3
 8001f16:	0013      	movs	r3, r2
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2210      	movs	r2, #16
 8001f36:	4013      	ands	r3, r2
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2110      	movs	r1, #16
 8001f56:	400b      	ands	r3, r1
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	01c9      	lsls	r1, r1, #7
 8001f5c:	4099      	lsls	r1, r3
 8001f5e:	000b      	movs	r3, r1
 8001f60:	43d9      	mvns	r1, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	400a      	ands	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2210      	movs	r2, #16
 8001f76:	4013      	ands	r3, r2
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_DAC_ConfigChannel+0x238>)
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2210      	movs	r2, #16
 8001f90:	4013      	ands	r3, r2
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	409a      	lsls	r2, r3
 8001f96:	0013      	movs	r3, r2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2110      	movs	r1, #16
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	21c0      	movs	r1, #192	; 0xc0
 8001fb4:	4099      	lsls	r1, r3
 8001fb6:	000b      	movs	r3, r1
 8001fb8:	43d9      	mvns	r1, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b008      	add	sp, #32
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	000003ff 	.word	0x000003ff
 8001fdc:	00000ffe 	.word	0x00000ffe

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	e147      	b.n	8002280 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4091      	lsls	r1, r2
 8001ffa:	000a      	movs	r2, r1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d100      	bne.n	8002008 <HAL_GPIO_Init+0x28>
 8002006:	e138      	b.n	800227a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x38>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b12      	cmp	r3, #18
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	58d3      	ldr	r3, [r2, r3]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2207      	movs	r2, #7
 800202a:	4013      	ands	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	409a      	lsls	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	43da      	mvns	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2107      	movs	r1, #7
 8002044:	400b      	ands	r3, r1
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	409a      	lsls	r2, r3
 800204a:	0013      	movs	r3, r2
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	6939      	ldr	r1, [r7, #16]
 800205e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	409a      	lsls	r2, r3
 800206e:	0013      	movs	r3, r2
 8002070:	43da      	mvns	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	401a      	ands	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	0013      	movs	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d00b      	beq.n	80020b4 <HAL_GPIO_Init+0xd4>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d007      	beq.n	80020b4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a8:	2b11      	cmp	r3, #17
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b12      	cmp	r3, #18
 80020b2:	d130      	bne.n	8002116 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	409a      	lsls	r2, r3
 80020c2:	0013      	movs	r3, r2
 80020c4:	43da      	mvns	r2, r3
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	0013      	movs	r3, r2
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ea:	2201      	movs	r2, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
 80020f0:	0013      	movs	r3, r2
 80020f2:	43da      	mvns	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	2201      	movs	r2, #1
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
 8002108:	0013      	movs	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	409a      	lsls	r2, r3
 8002124:	0013      	movs	r3, r2
 8002126:	43da      	mvns	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	409a      	lsls	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	055b      	lsls	r3, r3, #21
 800214e:	4013      	ands	r3, r2
 8002150:	d100      	bne.n	8002154 <HAL_GPIO_Init+0x174>
 8002152:	e092      	b.n	800227a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002154:	4a50      	ldr	r2, [pc, #320]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3318      	adds	r3, #24
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	589b      	ldr	r3, [r3, r2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2203      	movs	r2, #3
 8002166:	4013      	ands	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	220f      	movs	r2, #15
 800216c:	409a      	lsls	r2, r3
 800216e:	0013      	movs	r3, r2
 8002170:	43da      	mvns	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	23a0      	movs	r3, #160	; 0xa0
 800217c:	05db      	lsls	r3, r3, #23
 800217e:	429a      	cmp	r2, r3
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0x1ca>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a45      	ldr	r2, [pc, #276]	; (800229c <HAL_GPIO_Init+0x2bc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_GPIO_Init+0x1c6>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a44      	ldr	r2, [pc, #272]	; (80022a0 <HAL_GPIO_Init+0x2c0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x1c2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a43      	ldr	r2, [pc, #268]	; (80022a4 <HAL_GPIO_Init+0x2c4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_GPIO_Init+0x1be>
 800219a:	2303      	movs	r3, #3
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x1cc>
 800219e:	2305      	movs	r3, #5
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x1cc>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x1cc>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x1cc>
 80021aa:	2300      	movs	r3, #0
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	2103      	movs	r1, #3
 80021b0:	400a      	ands	r2, r1
 80021b2:	00d2      	lsls	r2, r2, #3
 80021b4:	4093      	lsls	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021bc:	4936      	ldr	r1, [pc, #216]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3318      	adds	r3, #24
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ca:	4a33      	ldr	r2, [pc, #204]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	58d3      	ldr	r3, [r2, r3]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43da      	mvns	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	4013      	ands	r3, r2
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021f0:	4929      	ldr	r1, [pc, #164]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80021f8:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 80021fa:	2384      	movs	r3, #132	; 0x84
 80021fc:	58d3      	ldr	r3, [r2, r3]
 80021fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43da      	mvns	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	4013      	ands	r3, r2
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800221e:	491e      	ldr	r1, [pc, #120]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 8002220:	2284      	movs	r2, #132	; 0x84
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43da      	mvns	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	035b      	lsls	r3, r3, #13
 800223e:	4013      	ands	r3, r2
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	43da      	mvns	r2, r3
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	039b      	lsls	r3, r3, #14
 8002268:	4013      	ands	r3, r2
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_GPIO_Init+0x2b8>)
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	40da      	lsrs	r2, r3
 8002288:	1e13      	subs	r3, r2, #0
 800228a:	d000      	beq.n	800228e <HAL_GPIO_Init+0x2ae>
 800228c:	e6b0      	b.n	8001ff0 <HAL_GPIO_Init+0x10>
  }
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b006      	add	sp, #24
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	40021800 	.word	0x40021800
 800229c:	50000400 	.word	0x50000400
 80022a0:	50000800 	.word	0x50000800
 80022a4:	50000c00 	.word	0x50000c00

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	0008      	movs	r0, r1
 80022b2:	0011      	movs	r1, r2
 80022b4:	1cbb      	adds	r3, r7, #2
 80022b6:	1c02      	adds	r2, r0, #0
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	1c7b      	adds	r3, r7, #1
 80022bc:	1c0a      	adds	r2, r1, #0
 80022be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c0:	1c7b      	adds	r3, r7, #1
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022c8:	1cbb      	adds	r3, r7, #2
 80022ca:	881a      	ldrh	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d0:	e003      	b.n	80022da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022d2:	1cbb      	adds	r3, r7, #2
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d11f      	bne.n	8002348 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	0013      	movs	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	189b      	adds	r3, r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4912      	ldr	r1, [pc, #72]	; (8002360 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002316:	0018      	movs	r0, r3
 8002318:	f7fd fef4 	bl	8000104 <__udivsi3>
 800231c:	0003      	movs	r3, r0
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002322:	e008      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3b01      	subs	r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e001      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e009      	b.n	800234a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	401a      	ands	r2, r3
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	429a      	cmp	r2, r3
 8002346:	d0ed      	beq.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b004      	add	sp, #16
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	40007000 	.word	0x40007000
 8002358:	fffff9ff 	.word	0xfffff9ff
 800235c:	20000004 	.word	0x20000004
 8002360:	000f4240 	.word	0x000f4240

08002364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e304      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	d100      	bne.n	8002382 <HAL_RCC_OscConfig+0x1e>
 8002380:	e07c      	b.n	800247c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002382:	4bc3      	ldr	r3, [pc, #780]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2238      	movs	r2, #56	; 0x38
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800238c:	4bc0      	ldr	r3, [pc, #768]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2203      	movs	r2, #3
 8002392:	4013      	ands	r3, r2
 8002394:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b10      	cmp	r3, #16
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3e>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44>
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4bb9      	ldr	r3, [pc, #740]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	029b      	lsls	r3, r3, #10
 80023b0:	4013      	ands	r3, r2
 80023b2:	d062      	beq.n	800247a <HAL_RCC_OscConfig+0x116>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d15e      	bne.n	800247a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e2df      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x78>
 80023cc:	4bb0      	ldr	r3, [pc, #704]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4baf      	ldr	r3, [pc, #700]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	0249      	lsls	r1, r1, #9
 80023d6:	430a      	orrs	r2, r1
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e020      	b.n	800241e <HAL_RCC_OscConfig+0xba>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	23a0      	movs	r3, #160	; 0xa0
 80023e2:	02db      	lsls	r3, r3, #11
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10e      	bne.n	8002406 <HAL_RCC_OscConfig+0xa2>
 80023e8:	4ba9      	ldr	r3, [pc, #676]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4ba8      	ldr	r3, [pc, #672]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	02c9      	lsls	r1, r1, #11
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4ba6      	ldr	r3, [pc, #664]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4ba5      	ldr	r3, [pc, #660]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	0249      	lsls	r1, r1, #9
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0xba>
 8002406:	4ba2      	ldr	r3, [pc, #648]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800240c:	49a1      	ldr	r1, [pc, #644]	; (8002694 <HAL_RCC_OscConfig+0x330>)
 800240e:	400a      	ands	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	4b9f      	ldr	r3, [pc, #636]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b9e      	ldr	r3, [pc, #632]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002418:	499f      	ldr	r1, [pc, #636]	; (8002698 <HAL_RCC_OscConfig+0x334>)
 800241a:	400a      	ands	r2, r1
 800241c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d014      	beq.n	8002450 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002426:	f7ff f891 	bl	800154c <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff f88c 	bl	800154c <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e29e      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002442:	4b93      	ldr	r3, [pc, #588]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	029b      	lsls	r3, r3, #10
 800244a:	4013      	ands	r3, r2
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xcc>
 800244e:	e015      	b.n	800247c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff f87c 	bl	800154c <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800245a:	f7ff f877 	bl	800154c <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b64      	cmp	r3, #100	; 0x64
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e289      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800246c:	4b88      	ldr	r3, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	029b      	lsls	r3, r3, #10
 8002474:	4013      	ands	r3, r2
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0xf6>
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d100      	bne.n	8002488 <HAL_RCC_OscConfig+0x124>
 8002486:	e099      	b.n	80025bc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002488:	4b81      	ldr	r3, [pc, #516]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2238      	movs	r2, #56	; 0x38
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002492:	4b7f      	ldr	r3, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2203      	movs	r2, #3
 8002498:	4013      	ands	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d102      	bne.n	80024a8 <HAL_RCC_OscConfig+0x144>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d002      	beq.n	80024ae <HAL_RCC_OscConfig+0x14a>
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d135      	bne.n	800251a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ae:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4013      	ands	r3, r2
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x162>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e25c      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b72      	ldr	r3, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a74      	ldr	r2, [pc, #464]	; (800269c <HAL_RCC_OscConfig+0x338>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	021a      	lsls	r2, r3, #8
 80024d6:	4b6e      	ldr	r3, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d112      	bne.n	8002508 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024e2:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6e      	ldr	r2, [pc, #440]	; (80026a0 <HAL_RCC_OscConfig+0x33c>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	4b67      	ldr	r3, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024f6:	4b66      	ldr	r3, [pc, #408]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	0adb      	lsrs	r3, r3, #11
 80024fc:	2207      	movs	r2, #7
 80024fe:	4013      	ands	r3, r2
 8002500:	4a68      	ldr	r2, [pc, #416]	; (80026a4 <HAL_RCC_OscConfig+0x340>)
 8002502:	40da      	lsrs	r2, r3
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_OscConfig+0x344>)
 8002506:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002508:	4b68      	ldr	r3, [pc, #416]	; (80026ac <HAL_RCC_OscConfig+0x348>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0018      	movs	r0, r3
 800250e:	f7fe ffc3 	bl	8001498 <HAL_InitTick>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d051      	beq.n	80025ba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e232      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002522:	4b5b      	ldr	r3, [pc, #364]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <HAL_RCC_OscConfig+0x33c>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	4b57      	ldr	r3, [pc, #348]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002536:	4b56      	ldr	r3, [pc, #344]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b55      	ldr	r3, [pc, #340]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0049      	lsls	r1, r1, #1
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7ff f802 	bl	800154c <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe fffd 	bl	800154c <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e20f      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002560:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4013      	ands	r3, r2
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b48      	ldr	r3, [pc, #288]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a4a      	ldr	r2, [pc, #296]	; (800269c <HAL_RCC_OscConfig+0x338>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	021a      	lsls	r2, r3, #8
 800257c:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	e01b      	b.n	80025bc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002584:	4b42      	ldr	r3, [pc, #264]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800258a:	4949      	ldr	r1, [pc, #292]	; (80026b0 <HAL_RCC_OscConfig+0x34c>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe ffdc 	bl	800154c <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe ffd7 	bl	800154c <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1e9      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	4b38      	ldr	r3, [pc, #224]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x236>
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	4013      	ands	r3, r2
 80025c4:	d047      	beq.n	8002656 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80025c6:	4b32      	ldr	r3, [pc, #200]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2238      	movs	r2, #56	; 0x38
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b18      	cmp	r3, #24
 80025d0:	d10a      	bne.n	80025e8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	2202      	movs	r2, #2
 80025d8:	4013      	ands	r3, r2
 80025da:	d03c      	beq.n	8002656 <HAL_RCC_OscConfig+0x2f2>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d138      	bne.n	8002656 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e1cb      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d019      	beq.n	8002624 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025f0:	4b27      	ldr	r3, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	430a      	orrs	r2, r1
 80025fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe ffa6 	bl	800154c <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002606:	f7fe ffa1 	bl	800154c <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1b3      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800261a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261c:	2202      	movs	r2, #2
 800261e:	4013      	ands	r3, r2
 8002620:	d0f1      	beq.n	8002606 <HAL_RCC_OscConfig+0x2a2>
 8002622:	e018      	b.n	8002656 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002626:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800262a:	2101      	movs	r1, #1
 800262c:	438a      	bics	r2, r1
 800262e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe ff8c 	bl	800154c <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263a:	f7fe ff87 	bl	800154c <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e199      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800264e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002650:	2202      	movs	r2, #2
 8002652:	4013      	ands	r3, r2
 8002654:	d1f1      	bne.n	800263a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2204      	movs	r2, #4
 800265c:	4013      	ands	r3, r2
 800265e:	d100      	bne.n	8002662 <HAL_RCC_OscConfig+0x2fe>
 8002660:	e0c6      	b.n	80027f0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	231f      	movs	r3, #31
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2238      	movs	r2, #56	; 0x38
 8002670:	4013      	ands	r3, r2
 8002672:	2b20      	cmp	r3, #32
 8002674:	d11e      	bne.n	80026b4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_OscConfig+0x32c>)
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2202      	movs	r2, #2
 800267c:	4013      	ands	r3, r2
 800267e:	d100      	bne.n	8002682 <HAL_RCC_OscConfig+0x31e>
 8002680:	e0b6      	b.n	80027f0 <HAL_RCC_OscConfig+0x48c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d000      	beq.n	800268c <HAL_RCC_OscConfig+0x328>
 800268a:	e0b1      	b.n	80027f0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e177      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
 8002690:	40021000 	.word	0x40021000
 8002694:	fffeffff 	.word	0xfffeffff
 8002698:	fffbffff 	.word	0xfffbffff
 800269c:	ffff80ff 	.word	0xffff80ff
 80026a0:	ffffc7ff 	.word	0xffffc7ff
 80026a4:	00f42400 	.word	0x00f42400
 80026a8:	20000004 	.word	0x20000004
 80026ac:	20000008 	.word	0x20000008
 80026b0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026b4:	4bb4      	ldr	r3, [pc, #720]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80026b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_OscConfig+0x360>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x362>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d011      	beq.n	80026ee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026ca:	4baf      	ldr	r3, [pc, #700]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80026cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ce:	4bae      	ldr	r3, [pc, #696]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80026d0:	2180      	movs	r1, #128	; 0x80
 80026d2:	0549      	lsls	r1, r1, #21
 80026d4:	430a      	orrs	r2, r1
 80026d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80026d8:	4bab      	ldr	r3, [pc, #684]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80026da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	055b      	lsls	r3, r3, #21
 80026e0:	4013      	ands	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026e6:	231f      	movs	r3, #31
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	4ba7      	ldr	r3, [pc, #668]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	d11a      	bne.n	8002730 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026fa:	4ba4      	ldr	r3, [pc, #656]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4ba3      	ldr	r3, [pc, #652]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	0049      	lsls	r1, r1, #1
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002708:	f7fe ff20 	bl	800154c <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe ff1b 	bl	800154c <HAL_GetTick>
 8002716:	0002      	movs	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e12d      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002724:	4b99      	ldr	r3, [pc, #612]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4013      	ands	r3, r2
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x3e2>
 8002738:	4b93      	ldr	r3, [pc, #588]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800273a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800273e:	2101      	movs	r1, #1
 8002740:	430a      	orrs	r2, r1
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
 8002744:	e01c      	b.n	8002780 <HAL_RCC_OscConfig+0x41c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x404>
 800274e:	4b8e      	ldr	r3, [pc, #568]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002752:	4b8d      	ldr	r3, [pc, #564]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002754:	2104      	movs	r1, #4
 8002756:	430a      	orrs	r2, r1
 8002758:	65da      	str	r2, [r3, #92]	; 0x5c
 800275a:	4b8b      	ldr	r3, [pc, #556]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800275c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800275e:	4b8a      	ldr	r3, [pc, #552]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002760:	2101      	movs	r1, #1
 8002762:	430a      	orrs	r2, r1
 8002764:	65da      	str	r2, [r3, #92]	; 0x5c
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0x41c>
 8002768:	4b87      	ldr	r3, [pc, #540]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800276a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800276c:	4b86      	ldr	r3, [pc, #536]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800276e:	2101      	movs	r1, #1
 8002770:	438a      	bics	r2, r1
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c
 8002774:	4b84      	ldr	r3, [pc, #528]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002776:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002778:	4b83      	ldr	r3, [pc, #524]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800277a:	2104      	movs	r1, #4
 800277c:	438a      	bics	r2, r1
 800277e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d014      	beq.n	80027b2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fee0 	bl	800154c <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7fe fedb 	bl	800154c <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	4a7c      	ldr	r2, [pc, #496]	; (8002990 <HAL_RCC_OscConfig+0x62c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0ec      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a6:	4b78      	ldr	r3, [pc, #480]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x42e>
 80027b0:	e013      	b.n	80027da <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fecb 	bl	800154c <HAL_GetTick>
 80027b6:	0003      	movs	r3, r0
 80027b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ba:	e009      	b.n	80027d0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe fec6 	bl	800154c <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	4a72      	ldr	r2, [pc, #456]	; (8002990 <HAL_RCC_OscConfig+0x62c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0d7      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d0:	4b6d      	ldr	r3, [pc, #436]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	2202      	movs	r2, #2
 80027d6:	4013      	ands	r3, r2
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027da:	231f      	movs	r3, #31
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80027e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e8:	4b67      	ldr	r3, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80027ea:	496a      	ldr	r1, [pc, #424]	; (8002994 <HAL_RCC_OscConfig+0x630>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d100      	bne.n	80027fa <HAL_RCC_OscConfig+0x496>
 80027f8:	e0c1      	b.n	800297e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fa:	4b63      	ldr	r3, [pc, #396]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2238      	movs	r2, #56	; 0x38
 8002800:	4013      	ands	r3, r2
 8002802:	2b10      	cmp	r3, #16
 8002804:	d100      	bne.n	8002808 <HAL_RCC_OscConfig+0x4a4>
 8002806:	e081      	b.n	800290c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d156      	bne.n	80028be <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b5d      	ldr	r3, [pc, #372]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002816:	4960      	ldr	r1, [pc, #384]	; (8002998 <HAL_RCC_OscConfig+0x634>)
 8002818:	400a      	ands	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fe96 	bl	800154c <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002826:	f7fe fe91 	bl	800154c <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e0a3      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	4b53      	ldr	r3, [pc, #332]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	049b      	lsls	r3, r3, #18
 8002840:	4013      	ands	r3, r2
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002844:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_RCC_OscConfig+0x638>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1a      	ldr	r2, [r3, #32]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	431a      	orrs	r2, r3
 8002872:	4b45      	ldr	r3, [pc, #276]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002874:	430a      	orrs	r2, r1
 8002876:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002878:	4b43      	ldr	r3, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b42      	ldr	r3, [pc, #264]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	0449      	lsls	r1, r1, #17
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002886:	4b40      	ldr	r3, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0549      	lsls	r1, r1, #21
 8002890:	430a      	orrs	r2, r1
 8002892:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fe5a 	bl	800154c <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fe55 	bl	800154c <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e067      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b0:	4b35      	ldr	r3, [pc, #212]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	049b      	lsls	r3, r3, #18
 80028b8:	4013      	ands	r3, r2
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x53a>
 80028bc:	e05f      	b.n	800297e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028c4:	4934      	ldr	r1, [pc, #208]	; (8002998 <HAL_RCC_OscConfig+0x634>)
 80028c6:	400a      	ands	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80028ca:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028d0:	2103      	movs	r1, #3
 80028d2:	438a      	bics	r2, r1
 80028d4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80028d6:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028dc:	4930      	ldr	r1, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x63c>)
 80028de:	400a      	ands	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fe33 	bl	800154c <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fe2e 	bl	800154c <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e040      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	049b      	lsls	r3, r3, #18
 8002906:	4013      	ands	r3, r2
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x588>
 800290a:	e038      	b.n	800297e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e033      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2203      	movs	r2, #3
 8002922:	401a      	ands	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	429a      	cmp	r2, r3
 800292a:	d126      	bne.n	800297a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2270      	movs	r2, #112	; 0x70
 8002930:	401a      	ands	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d11f      	bne.n	800297a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	23fe      	movs	r3, #254	; 0xfe
 800293e:	01db      	lsls	r3, r3, #7
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d116      	bne.n	800297a <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	23f8      	movs	r3, #248	; 0xf8
 8002950:	039b      	lsls	r3, r3, #14
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d10e      	bne.n	800297a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	23e0      	movs	r3, #224	; 0xe0
 8002960:	051b      	lsls	r3, r3, #20
 8002962:	401a      	ands	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	0f5b      	lsrs	r3, r3, #29
 8002970:	075a      	lsls	r2, r3, #29
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b008      	add	sp, #32
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	40007000 	.word	0x40007000
 8002990:	00001388 	.word	0x00001388
 8002994:	efffffff 	.word	0xefffffff
 8002998:	feffffff 	.word	0xfeffffff
 800299c:	11c1808c 	.word	0x11c1808c
 80029a0:	eefeffff 	.word	0xeefeffff

080029a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0e9      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2207      	movs	r2, #7
 80029be:	4013      	ands	r3, r2
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d91e      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2207      	movs	r2, #7
 80029cc:	4393      	bics	r3, r2
 80029ce:	0019      	movs	r1, r3
 80029d0:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029d8:	f7fe fdb8 	bl	800154c <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f7fe fdb3 	bl	800154c <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	4a6a      	ldr	r2, [pc, #424]	; (8002b98 <HAL_RCC_ClockConfig+0x1f4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0ca      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2207      	movs	r2, #7
 80029fc:	4013      	ands	r3, r2
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1ee      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d015      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2204      	movs	r2, #4
 8002a14:	4013      	ands	r3, r2
 8002a16:	d006      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a18:	4b60      	ldr	r3, [pc, #384]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b5f      	ldr	r3, [pc, #380]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002a1e:	21e0      	movs	r1, #224	; 0xe0
 8002a20:	01c9      	lsls	r1, r1, #7
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a26:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	0019      	movs	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	d057      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4c:	4b53      	ldr	r3, [pc, #332]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	029b      	lsls	r3, r3, #10
 8002a54:	4013      	ands	r3, r2
 8002a56:	d12b      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e097      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a64:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	049b      	lsls	r3, r3, #18
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d11f      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e08b      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4013      	ands	r3, r2
 8002a86:	d113      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e07f      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a94:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	2202      	movs	r2, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d108      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e074      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa2:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e06d      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	4393      	bics	r3, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4b37      	ldr	r3, [pc, #220]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fd42 	bl	800154c <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002acc:	e009      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ace:	f7fe fd3d 	bl	800154c <HAL_GetTick>
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <HAL_RCC_ClockConfig+0x1f4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e054      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2238      	movs	r2, #56	; 0x38
 8002ae8:	401a      	ands	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1ec      	bne.n	8002ace <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2207      	movs	r2, #7
 8002afa:	4013      	ands	r3, r2
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d21e      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2207      	movs	r2, #7
 8002b08:	4393      	bics	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b14:	f7fe fd1a 	bl	800154c <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b1c:	e009      	b.n	8002b32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1e:	f7fe fd15 	bl	800154c <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <HAL_RCC_ClockConfig+0x1f4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e02c      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_RCC_ClockConfig+0x1f0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2207      	movs	r2, #7
 8002b38:	4013      	ands	r3, r2
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d1ee      	bne.n	8002b1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2204      	movs	r2, #4
 8002b46:	4013      	ands	r3, r2
 8002b48:	d009      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4a15      	ldr	r2, [pc, #84]	; (8002ba4 <HAL_RCC_ClockConfig+0x200>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b5e:	f000 f829 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002b62:	0001      	movs	r1, r0
 8002b64:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <HAL_RCC_ClockConfig+0x1f8>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_RCC_ClockConfig+0x204>)
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	58d3      	ldr	r3, [r2, r3]
 8002b74:	221f      	movs	r2, #31
 8002b76:	4013      	ands	r3, r2
 8002b78:	000a      	movs	r2, r1
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x208>)
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_ClockConfig+0x20c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7fe fc87 	bl	8001498 <HAL_InitTick>
 8002b8a:	0003      	movs	r3, r0
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b004      	add	sp, #16
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40022000 	.word	0x40022000
 8002b98:	00001388 	.word	0x00001388
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	fffff0ff 	.word	0xfffff0ff
 8002ba4:	ffff8fff 	.word	0xffff8fff
 8002ba8:	08004acc 	.word	0x08004acc
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	20000008 	.word	0x20000008

08002bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bba:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2238      	movs	r2, #56	; 0x38
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d10f      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0adb      	lsrs	r3, r3, #11
 8002bca:	2207      	movs	r2, #7
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2201      	movs	r2, #1
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	4835      	ldr	r0, [pc, #212]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bda:	f7fd fa93 	bl	8000104 <__udivsi3>
 8002bde:	0003      	movs	r3, r0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	e05d      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2238      	movs	r2, #56	; 0x38
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e054      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2238      	movs	r2, #56	; 0x38
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d138      	bne.n	8002c74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c02:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2203      	movs	r2, #3
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	2207      	movs	r2, #7
 8002c14:	4013      	ands	r3, r2
 8002c16:	3301      	adds	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d10d      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4824      	ldr	r0, [pc, #144]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002c24:	f7fd fa6e 	bl	8000104 <__udivsi3>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	227f      	movs	r2, #127	; 0x7f
 8002c34:	4013      	ands	r3, r2
 8002c36:	434b      	muls	r3, r1
 8002c38:	617b      	str	r3, [r7, #20]
        break;
 8002c3a:	e00d      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	481c      	ldr	r0, [pc, #112]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c40:	f7fd fa60 	bl	8000104 <__udivsi3>
 8002c44:	0003      	movs	r3, r0
 8002c46:	0019      	movs	r1, r3
 8002c48:	4b18      	ldr	r3, [pc, #96]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	227f      	movs	r2, #127	; 0x7f
 8002c50:	4013      	ands	r3, r2
 8002c52:	434b      	muls	r3, r1
 8002c54:	617b      	str	r3, [r7, #20]
        break;
 8002c56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	0f5b      	lsrs	r3, r3, #29
 8002c5e:	2207      	movs	r2, #7
 8002c60:	4013      	ands	r3, r2
 8002c62:	3301      	adds	r3, #1
 8002c64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	6978      	ldr	r0, [r7, #20]
 8002c6a:	f7fd fa4b 	bl	8000104 <__udivsi3>
 8002c6e:	0003      	movs	r3, r0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	e015      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002c74:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2238      	movs	r2, #56	; 0x38
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d103      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2238      	movs	r2, #56	; 0x38
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b18      	cmp	r3, #24
 8002c92:	d103      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c94:	23fa      	movs	r3, #250	; 0xfa
 8002c96:	01db      	lsls	r3, r3, #7
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	e001      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ca0:	693b      	ldr	r3, [r7, #16]
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b006      	add	sp, #24
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	007a1200 	.word	0x007a1200

08002cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002cc0:	2313      	movs	r3, #19
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc8:	2312      	movs	r3, #18
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d100      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002cdc:	e0a4      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cde:	2311      	movs	r3, #17
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce6:	4bc3      	ldr	r3, [pc, #780]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	055b      	lsls	r3, r3, #21
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d111      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4bc0      	ldr	r3, [pc, #768]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf6:	4bbf      	ldr	r3, [pc, #764]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	0549      	lsls	r1, r1, #21
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d00:	4bbc      	ldr	r3, [pc, #752]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	055b      	lsls	r3, r3, #21
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0e:	2311      	movs	r3, #17
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d16:	4bb8      	ldr	r3, [pc, #736]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4bb7      	ldr	r3, [pc, #732]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	0049      	lsls	r1, r1, #1
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d24:	f7fe fc12 	bl	800154c <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7fe fc0d 	bl	800154c <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d904      	bls.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002d3c:	2313      	movs	r3, #19
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	2203      	movs	r2, #3
 8002d42:	701a      	strb	r2, [r3, #0]
        break;
 8002d44:	e005      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d46:	4bac      	ldr	r3, [pc, #688]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d0ed      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002d52:	2313      	movs	r3, #19
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d154      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d5c:	4ba5      	ldr	r3, [pc, #660]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d60:	23c0      	movs	r3, #192	; 0xc0
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4013      	ands	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d019      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d014      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d78:	4b9e      	ldr	r3, [pc, #632]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	4a9f      	ldr	r2, [pc, #636]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d82:	4b9c      	ldr	r3, [pc, #624]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d86:	4b9b      	ldr	r3, [pc, #620]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	0249      	lsls	r1, r1, #9
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d90:	4b98      	ldr	r3, [pc, #608]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d94:	4b97      	ldr	r3, [pc, #604]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d96:	499a      	ldr	r1, [pc, #616]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d9c:	4b95      	ldr	r3, [pc, #596]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d016      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fbcf 	bl	800154c <HAL_GetTick>
 8002dae:	0003      	movs	r3, r0
 8002db0:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db2:	e00c      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe fbca 	bl	800154c <HAL_GetTick>
 8002db8:	0002      	movs	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	4a91      	ldr	r2, [pc, #580]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d904      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002dc4:	2313      	movs	r3, #19
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	2203      	movs	r2, #3
 8002dca:	701a      	strb	r2, [r3, #0]
            break;
 8002dcc:	e004      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dce:	4b89      	ldr	r3, [pc, #548]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d0ed      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002dd8:	2313      	movs	r3, #19
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de2:	4b84      	ldr	r3, [pc, #528]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	4a85      	ldr	r2, [pc, #532]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df0:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002df6:	e00c      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002df8:	2312      	movs	r3, #18
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2213      	movs	r2, #19
 8002dfe:	18ba      	adds	r2, r7, r2
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	701a      	strb	r2, [r3, #0]
 8002e04:	e005      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e06:	2312      	movs	r3, #18
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2213      	movs	r2, #19
 8002e0c:	18ba      	adds	r2, r7, r2
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e12:	2311      	movs	r3, #17
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d105      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1c:	4b75      	ldr	r3, [pc, #468]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e20:	4b74      	ldr	r3, [pc, #464]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e22:	4979      	ldr	r1, [pc, #484]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e32:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	2203      	movs	r2, #3
 8002e38:	4393      	bics	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4b6c      	ldr	r3, [pc, #432]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e42:	430a      	orrs	r2, r1
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	220c      	movs	r2, #12
 8002e56:	4393      	bics	r3, r2
 8002e58:	0019      	movs	r1, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	4b65      	ldr	r3, [pc, #404]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e60:	430a      	orrs	r2, r1
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e6e:	4b61      	ldr	r3, [pc, #388]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	4a66      	ldr	r2, [pc, #408]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e8e:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	4a5f      	ldr	r2, [pc, #380]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	4b55      	ldr	r3, [pc, #340]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eae:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	4b4d      	ldr	r3, [pc, #308]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d009      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ecc:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	4a51      	ldr	r2, [pc, #324]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002edc:	430a      	orrs	r2, r1
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	01db      	lsls	r3, r3, #7
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d015      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eec:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	0899      	lsrs	r1, r3, #2
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002efa:	430a      	orrs	r2, r1
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d106      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	4b39      	ldr	r3, [pc, #228]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f10:	2180      	movs	r1, #128	; 0x80
 8002f12:	0249      	lsls	r1, r1, #9
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	031b      	lsls	r3, r3, #12
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f24:	4b33      	ldr	r3, [pc, #204]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	2240      	movs	r2, #64	; 0x40
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f32:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	039b      	lsls	r3, r3, #14
 8002f40:	4013      	ands	r3, r2
 8002f42:	d016      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f44:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	4a34      	ldr	r2, [pc, #208]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f52:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	03db      	lsls	r3, r3, #15
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d106      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f64:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	0449      	lsls	r1, r1, #17
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	03db      	lsls	r3, r3, #15
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d016      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	4a27      	ldr	r2, [pc, #156]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	045b      	lsls	r3, r3, #17
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d106      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	0449      	lsls	r1, r1, #17
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d016      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	01db      	lsls	r3, r3, #7
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fde:	2180      	movs	r1, #128	; 0x80
 8002fe0:	0249      	lsls	r1, r1, #9
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002fe6:	2312      	movs	r3, #18
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	781b      	ldrb	r3, [r3, #0]
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b006      	add	sp, #24
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	fffffcff 	.word	0xfffffcff
 8003000:	fffeffff 	.word	0xfffeffff
 8003004:	00001388 	.word	0x00001388
 8003008:	efffffff 	.word	0xefffffff
 800300c:	fffff3ff 	.word	0xfffff3ff
 8003010:	fff3ffff 	.word	0xfff3ffff
 8003014:	ffcfffff 	.word	0xffcfffff
 8003018:	ffffcfff 	.word	0xffffcfff
 800301c:	ffbfffff 	.word	0xffbfffff
 8003020:	feffffff 	.word	0xfeffffff
 8003024:	ffff3fff 	.word	0xffff3fff

08003028 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003030:	230f      	movs	r3, #15
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d100      	bne.n	8003040 <HAL_RTC_Init+0x18>
 800303e:	e07f      	b.n	8003140 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2229      	movs	r2, #41	; 0x29
 8003044:	5c9b      	ldrb	r3, [r3, r2]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2228      	movs	r2, #40	; 0x28
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2288      	movs	r2, #136	; 0x88
 8003058:	0212      	lsls	r2, r2, #8
 800305a:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f7fd feb8 	bl	8000dd4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2229      	movs	r2, #41	; 0x29
 8003068:	2102      	movs	r1, #2
 800306a:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	22ca      	movs	r2, #202	; 0xca
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2253      	movs	r2, #83	; 0x53
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800307c:	250f      	movs	r5, #15
 800307e:	197c      	adds	r4, r7, r5
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f000 f9c7 	bl	8003416 <RTC_EnterInitMode>
 8003088:	0003      	movs	r3, r0
 800308a:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800308c:	197b      	adds	r3, r7, r5
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d148      	bne.n	8003126 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	492c      	ldr	r1, [pc, #176]	; (8003150 <HAL_RTC_Init+0x128>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6999      	ldr	r1, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6912      	ldr	r2, [r2, #16]
 80030ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	041a      	lsls	r2, r3, #16
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030e0:	250f      	movs	r5, #15
 80030e2:	197c      	adds	r4, r7, r5
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 f9d8 	bl	800349c <RTC_ExitInitMode>
 80030ec:	0003      	movs	r3, r0
 80030ee:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80030f0:	197b      	adds	r3, r7, r5
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d116      	bne.n	8003126 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	00d2      	lsls	r2, r2, #3
 8003104:	08d2      	lsrs	r2, r2, #3
 8003106:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6999      	ldr	r1, [r3, #24]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	22ff      	movs	r2, #255	; 0xff
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800312e:	230f      	movs	r3, #15
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2229      	movs	r2, #41	; 0x29
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003140:	230f      	movs	r3, #15
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
}
 8003146:	0018      	movs	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	b004      	add	sp, #16
 800314c:	bdb0      	pop	{r4, r5, r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	fb8fffbf 	.word	0xfb8fffbf

08003154 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003154:	b5b0      	push	{r4, r5, r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2228      	movs	r2, #40	; 0x28
 8003164:	5c9b      	ldrb	r3, [r3, r2]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_RTC_SetTime+0x1a>
 800316a:	2302      	movs	r3, #2
 800316c:	e092      	b.n	8003294 <HAL_RTC_SetTime+0x140>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2228      	movs	r2, #40	; 0x28
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2229      	movs	r2, #41	; 0x29
 800317a:	2102      	movs	r1, #2
 800317c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	22ca      	movs	r2, #202	; 0xca
 8003184:	625a      	str	r2, [r3, #36]	; 0x24
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2253      	movs	r2, #83	; 0x53
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800318e:	2513      	movs	r5, #19
 8003190:	197c      	adds	r4, r7, r5
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	0018      	movs	r0, r3
 8003196:	f000 f93e 	bl	8003416 <RTC_EnterInitMode>
 800319a:	0003      	movs	r3, r0
 800319c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800319e:	197b      	adds	r3, r7, r5
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d162      	bne.n	800326c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d125      	bne.n	80031f8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2240      	movs	r2, #64	; 0x40
 80031b4:	4013      	ands	r3, r2
 80031b6:	d102      	bne.n	80031be <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 f9b0 	bl	8003528 <RTC_ByteToBcd2>
 80031c8:	0003      	movs	r3, r0
 80031ca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	0018      	movs	r0, r3
 80031d2:	f000 f9a9 	bl	8003528 <RTC_ByteToBcd2>
 80031d6:	0003      	movs	r3, r0
 80031d8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031da:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	789b      	ldrb	r3, [r3, #2]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 f9a1 	bl	8003528 <RTC_ByteToBcd2>
 80031e6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031e8:	0022      	movs	r2, r4
 80031ea:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	78db      	ldrb	r3, [r3, #3]
 80031f0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e017      	b.n	8003228 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	4013      	ands	r3, r2
 8003202:	d102      	bne.n	800320a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003216:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800321c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	78db      	ldrb	r3, [r3, #3]
 8003222:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	491b      	ldr	r1, [pc, #108]	; (800329c <HAL_RTC_SetTime+0x148>)
 8003230:	400a      	ands	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4918      	ldr	r1, [pc, #96]	; (80032a0 <HAL_RTC_SetTime+0x14c>)
 8003240:	400a      	ands	r2, r1
 8003242:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6999      	ldr	r1, [r3, #24]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800325c:	2313      	movs	r3, #19
 800325e:	18fc      	adds	r4, r7, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	0018      	movs	r0, r3
 8003264:	f000 f91a 	bl	800349c <RTC_ExitInitMode>
 8003268:	0003      	movs	r3, r0
 800326a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	22ff      	movs	r2, #255	; 0xff
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003274:	2313      	movs	r3, #19
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2229      	movs	r2, #41	; 0x29
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2228      	movs	r2, #40	; 0x28
 800328a:	2100      	movs	r1, #0
 800328c:	5499      	strb	r1, [r3, r2]

  return status;
 800328e:	2313      	movs	r3, #19
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	781b      	ldrb	r3, [r3, #0]
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b006      	add	sp, #24
 800329a:	bdb0      	pop	{r4, r5, r7, pc}
 800329c:	007f7f7f 	.word	0x007f7f7f
 80032a0:	fffbffff 	.word	0xfffbffff

080032a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032a4:	b5b0      	push	{r4, r5, r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2228      	movs	r2, #40	; 0x28
 80032b4:	5c9b      	ldrb	r3, [r3, r2]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_RTC_SetDate+0x1a>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e07e      	b.n	80033bc <HAL_RTC_SetDate+0x118>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2228      	movs	r2, #40	; 0x28
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2229      	movs	r2, #41	; 0x29
 80032ca:	2102      	movs	r1, #2
 80032cc:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10e      	bne.n	80032f2 <HAL_RTC_SetDate+0x4e>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	001a      	movs	r2, r3
 80032da:	2310      	movs	r3, #16
 80032dc:	4013      	ands	r3, r2
 80032de:	d008      	beq.n	80032f2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2210      	movs	r2, #16
 80032e6:	4393      	bics	r3, r2
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	330a      	adds	r3, #10
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d11c      	bne.n	8003332 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	78db      	ldrb	r3, [r3, #3]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 f913 	bl	8003528 <RTC_ByteToBcd2>
 8003302:	0003      	movs	r3, r0
 8003304:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f90c 	bl	8003528 <RTC_ByteToBcd2>
 8003310:	0003      	movs	r3, r0
 8003312:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003314:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	789b      	ldrb	r3, [r3, #2]
 800331a:	0018      	movs	r0, r3
 800331c:	f000 f904 	bl	8003528 <RTC_ByteToBcd2>
 8003320:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003322:	0022      	movs	r2, r4
 8003324:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e00e      	b.n	8003350 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	78db      	ldrb	r3, [r3, #3]
 8003336:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800333e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003344:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	22ca      	movs	r2, #202	; 0xca
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2253      	movs	r2, #83	; 0x53
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003360:	2513      	movs	r5, #19
 8003362:	197c      	adds	r4, r7, r5
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f855 	bl	8003416 <RTC_EnterInitMode>
 800336c:	0003      	movs	r3, r0
 800336e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003370:	197b      	adds	r3, r7, r5
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4911      	ldr	r1, [pc, #68]	; (80033c4 <HAL_RTC_SetDate+0x120>)
 8003380:	400a      	ands	r2, r1
 8003382:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003384:	2313      	movs	r3, #19
 8003386:	18fc      	adds	r4, r7, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f886 	bl	800349c <RTC_ExitInitMode>
 8003390:	0003      	movs	r3, r0
 8003392:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800339c:	2313      	movs	r3, #19
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d103      	bne.n	80033ae <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2229      	movs	r2, #41	; 0x29
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2228      	movs	r2, #40	; 0x28
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]

  return status;
 80033b6:	2313      	movs	r3, #19
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	781b      	ldrb	r3, [r3, #0]
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bdb0      	pop	{r4, r5, r7, pc}
 80033c4:	00ffff3f 	.word	0x00ffff3f

080033c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	21a0      	movs	r1, #160	; 0xa0
 80033dc:	438a      	bics	r2, r1
 80033de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80033e0:	f7fe f8b4 	bl	800154c <HAL_GetTick>
 80033e4:	0003      	movs	r3, r0
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80033e8:	e00a      	b.n	8003400 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033ea:	f7fe f8af 	bl	800154c <HAL_GetTick>
 80033ee:	0002      	movs	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad2      	subs	r2, r2, r3
 80033f4:	23fa      	movs	r3, #250	; 0xfa
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d901      	bls.n	8003400 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e006      	b.n	800340e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	4013      	ands	r3, r2
 800340a:	d0ee      	beq.n	80033ea <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b004      	add	sp, #16
 8003414:	bd80      	pop	{r7, pc}

08003416 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b084      	sub	sp, #16
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800341e:	230f      	movs	r3, #15
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2240      	movs	r2, #64	; 0x40
 800342e:	4013      	ands	r3, r2
 8003430:	d12d      	bne.n	800348e <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	430a      	orrs	r2, r1
 8003440:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003442:	f7fe f883 	bl	800154c <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800344a:	e015      	b.n	8003478 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800344c:	f7fe f87e 	bl	800154c <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	1ad2      	subs	r2, r2, r3
 8003456:	210f      	movs	r1, #15
 8003458:	187b      	adds	r3, r7, r1
 800345a:	1879      	adds	r1, r7, r1
 800345c:	7809      	ldrb	r1, [r1, #0]
 800345e:	7019      	strb	r1, [r3, #0]
 8003460:	23fa      	movs	r3, #250	; 0xfa
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	429a      	cmp	r2, r3
 8003466:	d907      	bls.n	8003478 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8003468:	230f      	movs	r3, #15
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	2203      	movs	r2, #3
 800346e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2229      	movs	r2, #41	; 0x29
 8003474:	2103      	movs	r1, #3
 8003476:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	4013      	ands	r3, r2
 8003482:	d104      	bne.n	800348e <RTC_EnterInitMode+0x78>
 8003484:	230f      	movs	r3, #15
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d1de      	bne.n	800344c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800348e:	230f      	movs	r3, #15
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	781b      	ldrb	r3, [r3, #0]
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b004      	add	sp, #16
 800349a:	bd80      	pop	{r7, pc}

0800349c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	230f      	movs	r3, #15
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <RTC_ExitInitMode+0x88>)
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <RTC_ExitInitMode+0x88>)
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	438a      	bics	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <RTC_ExitInitMode+0x88>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2220      	movs	r2, #32
 80034be:	4013      	ands	r3, r2
 80034c0:	d10e      	bne.n	80034e0 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7ff ff7f 	bl	80033c8 <HAL_RTC_WaitForSynchro>
 80034ca:	1e03      	subs	r3, r0, #0
 80034cc:	d022      	beq.n	8003514 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2229      	movs	r2, #41	; 0x29
 80034d2:	2103      	movs	r1, #3
 80034d4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80034d6:	230f      	movs	r3, #15
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	2203      	movs	r2, #3
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e019      	b.n	8003514 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80034e0:	4b10      	ldr	r3, [pc, #64]	; (8003524 <RTC_ExitInitMode+0x88>)
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <RTC_ExitInitMode+0x88>)
 80034e6:	2120      	movs	r1, #32
 80034e8:	438a      	bics	r2, r1
 80034ea:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7ff ff6a 	bl	80033c8 <HAL_RTC_WaitForSynchro>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d007      	beq.n	8003508 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2229      	movs	r2, #41	; 0x29
 80034fc:	2103      	movs	r1, #3
 80034fe:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2203      	movs	r2, #3
 8003506:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <RTC_ExitInitMode+0x88>)
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <RTC_ExitInitMode+0x88>)
 800350e:	2120      	movs	r1, #32
 8003510:	430a      	orrs	r2, r1
 8003512:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003514:	230f      	movs	r3, #15
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	781b      	ldrb	r3, [r3, #0]
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b004      	add	sp, #16
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	40002800 	.word	0x40002800

08003528 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	0002      	movs	r2, r0
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003538:	230b      	movs	r3, #11
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	1dfa      	adds	r2, r7, #7
 800353e:	7812      	ldrb	r2, [r2, #0]
 8003540:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003542:	e008      	b.n	8003556 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3301      	adds	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800354a:	220b      	movs	r2, #11
 800354c:	18bb      	adds	r3, r7, r2
 800354e:	18ba      	adds	r2, r7, r2
 8003550:	7812      	ldrb	r2, [r2, #0]
 8003552:	3a0a      	subs	r2, #10
 8003554:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003556:	230b      	movs	r3, #11
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b09      	cmp	r3, #9
 800355e:	d8f1      	bhi.n	8003544 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	b2da      	uxtb	r2, r3
 8003568:	230b      	movs	r3, #11
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	b2db      	uxtb	r3, r3
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e01e      	b.n	80035ca <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	223d      	movs	r2, #61	; 0x3d
 8003590:	5c9b      	ldrb	r3, [r3, r2]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223c      	movs	r2, #60	; 0x3c
 800359c:	2100      	movs	r1, #0
 800359e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7fd fe50 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	223d      	movs	r2, #61	; 0x3d
 80035ac:	2102      	movs	r1, #2
 80035ae:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	0019      	movs	r1, r3
 80035ba:	0010      	movs	r0, r2
 80035bc:	f000 fc00 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	223d      	movs	r2, #61	; 0x3d
 80035c4:	2101      	movs	r1, #1
 80035c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	430a      	orrs	r2, r1
 80035ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <HAL_TIM_Base_Start_IT+0x50>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d00c      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x44>
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	025b      	lsls	r3, r3, #9
 8003604:	429a      	cmp	r2, r3
 8003606:	d007      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	430a      	orrs	r2, r1
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	00010007 	.word	0x00010007

08003628 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e01e      	b.n	8003678 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	223d      	movs	r2, #61	; 0x3d
 800363e:	5c9b      	ldrb	r3, [r3, r2]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d107      	bne.n	8003656 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	223c      	movs	r2, #60	; 0x3c
 800364a:	2100      	movs	r1, #0
 800364c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 f815 	bl	8003680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	223d      	movs	r2, #61	; 0x3d
 800365a:	2102      	movs	r1, #2
 800365c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	0019      	movs	r1, r3
 8003668:	0010      	movs	r0, r2
 800366a:	f000 fba9 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	223d      	movs	r2, #61	; 0x3d
 8003672:	2101      	movs	r1, #1
 8003674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e02e      	b.n	8003702 <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	223d      	movs	r2, #61	; 0x3d
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	223c      	movs	r2, #60	; 0x3c
 80036b4:	2100      	movs	r1, #0
 80036b6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f000 f825 	bl	800370a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	223d      	movs	r2, #61	; 0x3d
 80036c4:	2102      	movs	r1, #2
 80036c6:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3304      	adds	r3, #4
 80036d0:	0019      	movs	r1, r3
 80036d2:	0010      	movs	r0, r2
 80036d4:	f000 fb74 	bl	8003dc0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2108      	movs	r1, #8
 80036e4:	438a      	bics	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	223d      	movs	r2, #61	; 0x3d
 80036fc:	2101      	movs	r1, #1
 80036fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	2100      	movs	r1, #0
 800372e:	0018      	movs	r0, r3
 8003730:	f000 ff26 	bl	8004580 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2201      	movs	r2, #1
 800373a:	2104      	movs	r1, #4
 800373c:	0018      	movs	r0, r3
 800373e:	f000 ff1f 	bl	8004580 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a12      	ldr	r2, [pc, #72]	; (8003790 <HAL_TIM_OnePulse_Start+0x74>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00e      	beq.n	800376a <HAL_TIM_OnePulse_Start+0x4e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a10      	ldr	r2, [pc, #64]	; (8003794 <HAL_TIM_OnePulse_Start+0x78>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_TIM_OnePulse_Start+0x4e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_TIM_OnePulse_Start+0x7c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_TIM_OnePulse_Start+0x4e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0d      	ldr	r2, [pc, #52]	; (800379c <HAL_TIM_OnePulse_Start+0x80>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_TIM_OnePulse_Start+0x52>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_TIM_OnePulse_Start+0x54>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_TIM_OnePulse_Start+0x6a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	0209      	lsls	r1, r1, #8
 8003782:	430a      	orrs	r2, r1
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b002      	add	sp, #8
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40014000 	.word	0x40014000
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800

080037a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2202      	movs	r2, #2
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d124      	bne.n	8003800 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2202      	movs	r2, #2
 80037be:	4013      	ands	r3, r2
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d11d      	bne.n	8003800 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2203      	movs	r2, #3
 80037ca:	4252      	negs	r2, r2
 80037cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2203      	movs	r2, #3
 80037dc:	4013      	ands	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 fad4 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e007      	b.n	80037fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 fac7 	bl	8003d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 fad3 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2204      	movs	r2, #4
 8003808:	4013      	ands	r3, r2
 800380a:	2b04      	cmp	r3, #4
 800380c:	d125      	bne.n	800385a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2204      	movs	r2, #4
 8003816:	4013      	ands	r3, r2
 8003818:	2b04      	cmp	r3, #4
 800381a:	d11e      	bne.n	800385a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2205      	movs	r2, #5
 8003822:	4252      	negs	r2, r2
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	23c0      	movs	r3, #192	; 0xc0
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4013      	ands	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 faa7 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 8003842:	e007      	b.n	8003854 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fa9a 	bl	8003d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	0018      	movs	r0, r3
 8003850:	f000 faa6 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2208      	movs	r2, #8
 8003862:	4013      	ands	r3, r2
 8003864:	2b08      	cmp	r3, #8
 8003866:	d124      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2208      	movs	r2, #8
 8003870:	4013      	ands	r3, r2
 8003872:	2b08      	cmp	r3, #8
 8003874:	d11d      	bne.n	80038b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2209      	movs	r2, #9
 800387c:	4252      	negs	r2, r2
 800387e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2204      	movs	r2, #4
 8003884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2203      	movs	r2, #3
 800388e:	4013      	ands	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 fa7b 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 800389a:	e007      	b.n	80038ac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 fa6e 	bl	8003d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 fa7a 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	2210      	movs	r2, #16
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d125      	bne.n	800390c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2210      	movs	r2, #16
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d11e      	bne.n	800390c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2211      	movs	r2, #17
 80038d4:	4252      	negs	r2, r2
 80038d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2208      	movs	r2, #8
 80038dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	23c0      	movs	r3, #192	; 0xc0
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4013      	ands	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 fa4e 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 80038f4:	e007      	b.n	8003906 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 fa41 	bl	8003d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	0018      	movs	r0, r3
 8003902:	f000 fa4d 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2201      	movs	r2, #1
 8003914:	4013      	ands	r3, r2
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10f      	bne.n	800393a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	4013      	ands	r3, r2
 8003924:	2b01      	cmp	r3, #1
 8003926:	d108      	bne.n	800393a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2202      	movs	r2, #2
 800392e:	4252      	negs	r2, r2
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	0018      	movs	r0, r3
 8003936:	f7fc fffd 	bl	8000934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	4013      	ands	r3, r2
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d10f      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	4013      	ands	r3, r2
 8003952:	2b80      	cmp	r3, #128	; 0x80
 8003954:	d108      	bne.n	8003968 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2281      	movs	r2, #129	; 0x81
 800395c:	4252      	negs	r2, r2
 800395e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 ff34 	bl	80047d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	401a      	ands	r2, r3
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	429a      	cmp	r2, r3
 800397a:	d10e      	bne.n	800399a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2280      	movs	r2, #128	; 0x80
 8003984:	4013      	ands	r3, r2
 8003986:	2b80      	cmp	r3, #128	; 0x80
 8003988:	d107      	bne.n	800399a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <HAL_TIM_IRQHandler+0x260>)
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 ff23 	bl	80047e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2240      	movs	r2, #64	; 0x40
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d10f      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d108      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2241      	movs	r2, #65	; 0x41
 80039bc:	4252      	negs	r2, r2
 80039be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 f9f4 	bl	8003db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2220      	movs	r2, #32
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d10f      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	4013      	ands	r3, r2
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d108      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2221      	movs	r2, #33	; 0x21
 80039ea:	4252      	negs	r2, r2
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 fee5 	bl	80047c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b002      	add	sp, #8
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	fffffeff 	.word	0xfffffeff

08003a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	223c      	movs	r2, #60	; 0x3c
 8003a14:	5c9b      	ldrb	r3, [r3, r2]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e0e7      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	223c      	movs	r2, #60	; 0x3c
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	223d      	movs	r2, #61	; 0x3d
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b14      	cmp	r3, #20
 8003a32:	d900      	bls.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a34:	e0d1      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	009a      	lsls	r2, r3, #2
 8003a3a:	4b6f      	ldr	r3, [pc, #444]	; (8003bf8 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8003a3c:	18d3      	adds	r3, r2, r3
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 fa38 	bl	8003ec0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2108      	movs	r1, #8
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	438a      	bics	r2, r1
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	619a      	str	r2, [r3, #24]
      break;
 8003a82:	e0ab      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	0011      	movs	r1, r2
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f000 faa1 	bl	8003fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2180      	movs	r1, #128	; 0x80
 8003a9e:	0109      	lsls	r1, r1, #4
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4953      	ldr	r1, [pc, #332]	; (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	619a      	str	r2, [r3, #24]
      break;
 8003ac8:	e088      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	0011      	movs	r1, r2
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 fb02 	bl	80040dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2108      	movs	r1, #8
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2104      	movs	r1, #4
 8003af4:	438a      	bics	r2, r1
 8003af6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69d9      	ldr	r1, [r3, #28]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	61da      	str	r2, [r3, #28]
      break;
 8003b0a:	e067      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	0011      	movs	r1, r2
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 fb69 	bl	80041ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	0109      	lsls	r1, r1, #4
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4931      	ldr	r1, [pc, #196]	; (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69d9      	ldr	r1, [r3, #28]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	021a      	lsls	r2, r3, #8
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	61da      	str	r2, [r3, #28]
      break;
 8003b50:	e044      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	0011      	movs	r1, r2
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f000 fbb0 	bl	80042c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2108      	movs	r1, #8
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b92:	e023      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	0011      	movs	r1, r2
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f000 fbef 	bl	8004380 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2180      	movs	r1, #128	; 0x80
 8003bae:	0109      	lsls	r1, r1, #4
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	490f      	ldr	r1, [pc, #60]	; (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	021a      	lsls	r2, r3, #8
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bd8:	e000      	b.n	8003bdc <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 8003bda:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	223d      	movs	r2, #61	; 0x3d
 8003be0:	2101      	movs	r1, #1
 8003be2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	223c      	movs	r2, #60	; 0x3c
 8003be8:	2100      	movs	r1, #0
 8003bea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	08004b0c 	.word	0x08004b0c
 8003bfc:	fffffbff 	.word	0xfffffbff

08003c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	223c      	movs	r2, #60	; 0x3c
 8003c0e:	5c9b      	ldrb	r3, [r3, r2]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIM_ConfigClockSource+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e0ab      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x170>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	223c      	movs	r2, #60	; 0x3c
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223d      	movs	r2, #61	; 0x3d
 8003c24:	2102      	movs	r1, #2
 8003c26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a51      	ldr	r2, [pc, #324]	; (8003d78 <HAL_TIM_ConfigClockSource+0x178>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a50      	ldr	r2, [pc, #320]	; (8003d7c <HAL_TIM_ConfigClockSource+0x17c>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d100      	bne.n	8003c52 <HAL_TIM_ConfigClockSource+0x52>
 8003c50:	e06b      	b.n	8003d2a <HAL_TIM_ConfigClockSource+0x12a>
 8003c52:	d80e      	bhi.n	8003c72 <HAL_TIM_ConfigClockSource+0x72>
 8003c54:	2b10      	cmp	r3, #16
 8003c56:	d100      	bne.n	8003c5a <HAL_TIM_ConfigClockSource+0x5a>
 8003c58:	e077      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x14a>
 8003c5a:	d803      	bhi.n	8003c64 <HAL_TIM_ConfigClockSource+0x64>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d100      	bne.n	8003c62 <HAL_TIM_ConfigClockSource+0x62>
 8003c60:	e073      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c62:	e07c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d100      	bne.n	8003c6a <HAL_TIM_ConfigClockSource+0x6a>
 8003c68:	e06f      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x14a>
 8003c6a:	2b30      	cmp	r3, #48	; 0x30
 8003c6c:	d100      	bne.n	8003c70 <HAL_TIM_ConfigClockSource+0x70>
 8003c6e:	e06c      	b.n	8003d4a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003c70:	e075      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c72:	2b70      	cmp	r3, #112	; 0x70
 8003c74:	d00e      	beq.n	8003c94 <HAL_TIM_ConfigClockSource+0x94>
 8003c76:	d804      	bhi.n	8003c82 <HAL_TIM_ConfigClockSource+0x82>
 8003c78:	2b50      	cmp	r3, #80	; 0x50
 8003c7a:	d036      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0xea>
 8003c7c:	2b60      	cmp	r3, #96	; 0x60
 8003c7e:	d044      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003c80:	e06d      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	0152      	lsls	r2, r2, #5
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d068      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0x15c>
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	0192      	lsls	r2, r2, #6
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d017      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003c92:	e064      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6899      	ldr	r1, [r3, #8]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f000 fc4c 	bl	8004540 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2277      	movs	r2, #119	; 0x77
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	609a      	str	r2, [r3, #8]
      break;
 8003cc0:	e04d      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f000 fc35 	bl	8004540 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	01c9      	lsls	r1, r1, #7
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
      break;
 8003ce8:	e039      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6859      	ldr	r1, [r3, #4]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	f000 fba6 	bl	8004448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2150      	movs	r1, #80	; 0x50
 8003d02:	0018      	movs	r0, r3
 8003d04:	f000 fc00 	bl	8004508 <TIM_ITRx_SetConfig>
      break;
 8003d08:	e029      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	001a      	movs	r2, r3
 8003d18:	f000 fbc4 	bl	80044a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2160      	movs	r1, #96	; 0x60
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 fbf0 	bl	8004508 <TIM_ITRx_SetConfig>
      break;
 8003d28:	e019      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	001a      	movs	r2, r3
 8003d38:	f000 fb86 	bl	8004448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	0018      	movs	r0, r3
 8003d44:	f000 fbe0 	bl	8004508 <TIM_ITRx_SetConfig>
      break;
 8003d48:	e009      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	0019      	movs	r1, r3
 8003d54:	0010      	movs	r0, r2
 8003d56:	f000 fbd7 	bl	8004508 <TIM_ITRx_SetConfig>
      break;
 8003d5a:	e000      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003d5c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	223d      	movs	r2, #61	; 0x3d
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	223c      	movs	r2, #60	; 0x3c
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b004      	add	sp, #16
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	ffceff88 	.word	0xffceff88
 8003d7c:	ffff00ff 	.word	0xffff00ff

08003d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a34      	ldr	r2, [pc, #208]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d008      	beq.n	8003dea <TIM_Base_SetConfig+0x2a>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	05db      	lsls	r3, r3, #23
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d003      	beq.n	8003dea <TIM_Base_SetConfig+0x2a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a30      	ldr	r2, [pc, #192]	; (8003ea8 <TIM_Base_SetConfig+0xe8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2270      	movs	r2, #112	; 0x70
 8003dee:	4393      	bics	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a29      	ldr	r2, [pc, #164]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <TIM_Base_SetConfig+0x76>
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	05db      	lsls	r3, r3, #23
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d013      	beq.n	8003e36 <TIM_Base_SetConfig+0x76>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <TIM_Base_SetConfig+0xe8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00f      	beq.n	8003e36 <TIM_Base_SetConfig+0x76>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a24      	ldr	r2, [pc, #144]	; (8003eac <TIM_Base_SetConfig+0xec>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <TIM_Base_SetConfig+0x76>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a23      	ldr	r2, [pc, #140]	; (8003eb0 <TIM_Base_SetConfig+0xf0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_Base_SetConfig+0x76>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a22      	ldr	r2, [pc, #136]	; (8003eb4 <TIM_Base_SetConfig+0xf4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_Base_SetConfig+0x76>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a21      	ldr	r2, [pc, #132]	; (8003eb8 <TIM_Base_SetConfig+0xf8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d108      	bne.n	8003e48 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <TIM_Base_SetConfig+0xfc>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	4393      	bics	r3, r2
 8003e4e:	001a      	movs	r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <TIM_Base_SetConfig+0xe4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <TIM_Base_SetConfig+0xce>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <TIM_Base_SetConfig+0xf0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <TIM_Base_SetConfig+0xce>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <TIM_Base_SetConfig+0xf4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_Base_SetConfig+0xce>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a0b      	ldr	r2, [pc, #44]	; (8003eb8 <TIM_Base_SetConfig+0xf8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d103      	bne.n	8003e96 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	615a      	str	r2, [r3, #20]
}
 8003e9c:	46c0      	nop			; (mov r8, r8)
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b004      	add	sp, #16
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40002000 	.word	0x40002000
 8003eb0:	40014000 	.word	0x40014000
 8003eb4:	40014400 	.word	0x40014400
 8003eb8:	40014800 	.word	0x40014800
 8003ebc:	fffffcff 	.word	0xfffffcff

08003ec0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4393      	bics	r3, r2
 8003ed2:	001a      	movs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a32      	ldr	r2, [pc, #200]	; (8003fb8 <TIM_OC1_SetConfig+0xf8>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	4393      	bics	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2202      	movs	r2, #2
 8003f08:	4393      	bics	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <TIM_OC1_SetConfig+0xfc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_OC1_SetConfig+0x76>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <TIM_OC1_SetConfig+0x100>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <TIM_OC1_SetConfig+0x76>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <TIM_OC1_SetConfig+0x104>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_OC1_SetConfig+0x76>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a25      	ldr	r2, [pc, #148]	; (8003fc8 <TIM_OC1_SetConfig+0x108>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10c      	bne.n	8003f50 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2208      	movs	r2, #8
 8003f3a:	4393      	bics	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	4393      	bics	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <TIM_OC1_SetConfig+0xfc>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00b      	beq.n	8003f70 <TIM_OC1_SetConfig+0xb0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <TIM_OC1_SetConfig+0x100>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d007      	beq.n	8003f70 <TIM_OC1_SetConfig+0xb0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <TIM_OC1_SetConfig+0x104>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_OC1_SetConfig+0xb0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <TIM_OC1_SetConfig+0x108>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d111      	bne.n	8003f94 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4a16      	ldr	r2, [pc, #88]	; (8003fcc <TIM_OC1_SetConfig+0x10c>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <TIM_OC1_SetConfig+0x110>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b006      	add	sp, #24
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	fffeff8f 	.word	0xfffeff8f
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40014400 	.word	0x40014400
 8003fc8:	40014800 	.word	0x40014800
 8003fcc:	fffffeff 	.word	0xfffffeff
 8003fd0:	fffffdff 	.word	0xfffffdff

08003fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	4393      	bics	r3, r2
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <TIM_OC2_SetConfig+0xe8>)
 8004002:	4013      	ands	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <TIM_OC2_SetConfig+0xec>)
 800400a:	4013      	ands	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2220      	movs	r2, #32
 800401e:	4393      	bics	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a24      	ldr	r2, [pc, #144]	; (80040c4 <TIM_OC2_SetConfig+0xf0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d10d      	bne.n	8004052 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	4393      	bics	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2240      	movs	r2, #64	; 0x40
 800404e:	4393      	bics	r3, r2
 8004050:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <TIM_OC2_SetConfig+0xf0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_OC2_SetConfig+0x9e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <TIM_OC2_SetConfig+0xf4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_OC2_SetConfig+0x9e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a19      	ldr	r2, [pc, #100]	; (80040cc <TIM_OC2_SetConfig+0xf8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_OC2_SetConfig+0x9e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <TIM_OC2_SetConfig+0xfc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d113      	bne.n	800409a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4a17      	ldr	r2, [pc, #92]	; (80040d4 <TIM_OC2_SetConfig+0x100>)
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <TIM_OC2_SetConfig+0x104>)
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	621a      	str	r2, [r3, #32]
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b006      	add	sp, #24
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	feff8fff 	.word	0xfeff8fff
 80040c0:	fffffcff 	.word	0xfffffcff
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40014000 	.word	0x40014000
 80040cc:	40014400 	.word	0x40014400
 80040d0:	40014800 	.word	0x40014800
 80040d4:	fffffbff 	.word	0xfffffbff
 80040d8:	fffff7ff 	.word	0xfffff7ff

080040dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4a35      	ldr	r2, [pc, #212]	; (80041c0 <TIM_OC3_SetConfig+0xe4>)
 80040ec:	401a      	ands	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a2f      	ldr	r2, [pc, #188]	; (80041c4 <TIM_OC3_SetConfig+0xe8>)
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2203      	movs	r2, #3
 8004110:	4393      	bics	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <TIM_OC3_SetConfig+0xec>)
 8004122:	4013      	ands	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	021b      	lsls	r3, r3, #8
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a25      	ldr	r2, [pc, #148]	; (80041cc <TIM_OC3_SetConfig+0xf0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10d      	bne.n	8004156 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	4a24      	ldr	r2, [pc, #144]	; (80041d0 <TIM_OC3_SetConfig+0xf4>)
 800413e:	4013      	ands	r3, r2
 8004140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	021b      	lsls	r3, r3, #8
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <TIM_OC3_SetConfig+0xf8>)
 8004152:	4013      	ands	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <TIM_OC3_SetConfig+0xf0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_OC3_SetConfig+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <TIM_OC3_SetConfig+0xfc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_OC3_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <TIM_OC3_SetConfig+0x100>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_OC3_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a1b      	ldr	r2, [pc, #108]	; (80041e0 <TIM_OC3_SetConfig+0x104>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d113      	bne.n	800419e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <TIM_OC3_SetConfig+0x108>)
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <TIM_OC3_SetConfig+0x10c>)
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	621a      	str	r2, [r3, #32]
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b006      	add	sp, #24
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	fffffeff 	.word	0xfffffeff
 80041c4:	fffeff8f 	.word	0xfffeff8f
 80041c8:	fffffdff 	.word	0xfffffdff
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	fffff7ff 	.word	0xfffff7ff
 80041d4:	fffffbff 	.word	0xfffffbff
 80041d8:	40014000 	.word	0x40014000
 80041dc:	40014400 	.word	0x40014400
 80041e0:	40014800 	.word	0x40014800
 80041e4:	ffffefff 	.word	0xffffefff
 80041e8:	ffffdfff 	.word	0xffffdfff

080041ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4a28      	ldr	r2, [pc, #160]	; (800429c <TIM_OC4_SetConfig+0xb0>)
 80041fc:	401a      	ands	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <TIM_OC4_SetConfig+0xb4>)
 8004218:	4013      	ands	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <TIM_OC4_SetConfig+0xb8>)
 8004220:	4013      	ands	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <TIM_OC4_SetConfig+0xbc>)
 8004234:	4013      	ands	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	031b      	lsls	r3, r3, #12
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a19      	ldr	r2, [pc, #100]	; (80042ac <TIM_OC4_SetConfig+0xc0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00b      	beq.n	8004264 <TIM_OC4_SetConfig+0x78>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <TIM_OC4_SetConfig+0xc4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d007      	beq.n	8004264 <TIM_OC4_SetConfig+0x78>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <TIM_OC4_SetConfig+0xc8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_OC4_SetConfig+0x78>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a16      	ldr	r2, [pc, #88]	; (80042b8 <TIM_OC4_SetConfig+0xcc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d109      	bne.n	8004278 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <TIM_OC4_SetConfig+0xd0>)
 8004268:	4013      	ands	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	019b      	lsls	r3, r3, #6
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	621a      	str	r2, [r3, #32]
}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	46bd      	mov	sp, r7
 8004296:	b006      	add	sp, #24
 8004298:	bd80      	pop	{r7, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	ffffefff 	.word	0xffffefff
 80042a0:	feff8fff 	.word	0xfeff8fff
 80042a4:	fffffcff 	.word	0xfffffcff
 80042a8:	ffffdfff 	.word	0xffffdfff
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800
 80042bc:	ffffbfff 	.word	0xffffbfff

080042c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4a25      	ldr	r2, [pc, #148]	; (8004364 <TIM_OC5_SetConfig+0xa4>)
 80042d0:	401a      	ands	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <TIM_OC5_SetConfig+0xa8>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4a1b      	ldr	r2, [pc, #108]	; (800436c <TIM_OC5_SetConfig+0xac>)
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	4313      	orrs	r3, r2
 800430c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a17      	ldr	r2, [pc, #92]	; (8004370 <TIM_OC5_SetConfig+0xb0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_OC5_SetConfig+0x6e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a16      	ldr	r2, [pc, #88]	; (8004374 <TIM_OC5_SetConfig+0xb4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <TIM_OC5_SetConfig+0x6e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a15      	ldr	r2, [pc, #84]	; (8004378 <TIM_OC5_SetConfig+0xb8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_OC5_SetConfig+0x6e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <TIM_OC5_SetConfig+0xbc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d109      	bne.n	8004342 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <TIM_OC5_SetConfig+0xa4>)
 8004332:	4013      	ands	r3, r2
 8004334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	621a      	str	r2, [r3, #32]
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b006      	add	sp, #24
 8004362:	bd80      	pop	{r7, pc}
 8004364:	fffeffff 	.word	0xfffeffff
 8004368:	fffeff8f 	.word	0xfffeff8f
 800436c:	fffdffff 	.word	0xfffdffff
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40014000 	.word	0x40014000
 8004378:	40014400 	.word	0x40014400
 800437c:	40014800 	.word	0x40014800

08004380 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4a26      	ldr	r2, [pc, #152]	; (8004428 <TIM_OC6_SetConfig+0xa8>)
 8004390:	401a      	ands	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a20      	ldr	r2, [pc, #128]	; (800442c <TIM_OC6_SetConfig+0xac>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <TIM_OC6_SetConfig+0xb0>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	051b      	lsls	r3, r3, #20
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a18      	ldr	r2, [pc, #96]	; (8004434 <TIM_OC6_SetConfig+0xb4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <TIM_OC6_SetConfig+0x70>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <TIM_OC6_SetConfig+0xb8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <TIM_OC6_SetConfig+0x70>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a16      	ldr	r2, [pc, #88]	; (800443c <TIM_OC6_SetConfig+0xbc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_OC6_SetConfig+0x70>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a15      	ldr	r2, [pc, #84]	; (8004440 <TIM_OC6_SetConfig+0xc0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d109      	bne.n	8004404 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4a14      	ldr	r2, [pc, #80]	; (8004444 <TIM_OC6_SetConfig+0xc4>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	029b      	lsls	r3, r3, #10
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b006      	add	sp, #24
 8004424:	bd80      	pop	{r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	ffefffff 	.word	0xffefffff
 800442c:	feff8fff 	.word	0xfeff8fff
 8004430:	ffdfffff 	.word	0xffdfffff
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800
 8004444:	fffbffff 	.word	0xfffbffff

08004448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	2201      	movs	r2, #1
 8004460:	4393      	bics	r3, r2
 8004462:	001a      	movs	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	22f0      	movs	r2, #240	; 0xf0
 8004472:	4393      	bics	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	220a      	movs	r2, #10
 8004484:	4393      	bics	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b006      	add	sp, #24
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	2210      	movs	r2, #16
 80044b6:	4393      	bics	r3, r2
 80044b8:	001a      	movs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4a0d      	ldr	r2, [pc, #52]	; (8004504 <TIM_TI2_ConfigInputStage+0x60>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	031b      	lsls	r3, r3, #12
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	22a0      	movs	r2, #160	; 0xa0
 80044e0:	4393      	bics	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b006      	add	sp, #24
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	ffff0fff 	.word	0xffff0fff

08004508 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a08      	ldr	r2, [pc, #32]	; (800453c <TIM_ITRx_SetConfig+0x34>)
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	2207      	movs	r2, #7
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	609a      	str	r2, [r3, #8]
}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	46bd      	mov	sp, r7
 8004536:	b004      	add	sp, #16
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	ffcfff8f 	.word	0xffcfff8f

08004540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <TIM_ETR_SetConfig+0x3c>)
 8004558:	4013      	ands	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	431a      	orrs	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4313      	orrs	r3, r2
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	609a      	str	r2, [r3, #8]
}
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46bd      	mov	sp, r7
 8004578:	b006      	add	sp, #24
 800457a:	bd80      	pop	{r7, pc}
 800457c:	ffff00ff 	.word	0xffff00ff

08004580 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	221f      	movs	r2, #31
 8004590:	4013      	ands	r3, r2
 8004592:	2201      	movs	r2, #1
 8004594:	409a      	lsls	r2, r3
 8004596:	0013      	movs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	43d2      	mvns	r2, r2
 80045a2:	401a      	ands	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1a      	ldr	r2, [r3, #32]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	211f      	movs	r1, #31
 80045b0:	400b      	ands	r3, r1
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	4099      	lsls	r1, r3
 80045b6:	000b      	movs	r3, r1
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b006      	add	sp, #24
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	223c      	movs	r2, #60	; 0x3c
 80045d6:	5c9b      	ldrb	r3, [r3, r2]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045dc:	2302      	movs	r3, #2
 80045de:	e040      	b.n	8004662 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	223c      	movs	r2, #60	; 0x3c
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	223d      	movs	r2, #61	; 0x3d
 80045ec:	2102      	movs	r1, #2
 80045ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d108      	bne.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800460e:	4013      	ands	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2270      	movs	r2, #112	; 0x70
 8004620:	4393      	bics	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2280      	movs	r2, #128	; 0x80
 8004632:	4393      	bics	r3, r2
 8004634:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	4313      	orrs	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	223d      	movs	r2, #61	; 0x3d
 8004654:	2101      	movs	r1, #1
 8004656:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	223c      	movs	r2, #60	; 0x3c
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b004      	add	sp, #16
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	40012c00 	.word	0x40012c00
 8004670:	ff0fffff 	.word	0xff0fffff

08004674 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	223c      	movs	r2, #60	; 0x3c
 8004686:	5c9b      	ldrb	r3, [r3, r2]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800468c:	2302      	movs	r3, #2
 800468e:	e079      	b.n	8004784 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	223c      	movs	r2, #60	; 0x3c
 8004694:	2101      	movs	r1, #1
 8004696:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	4393      	bics	r3, r2
 800469e:	001a      	movs	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a38      	ldr	r2, [pc, #224]	; (800478c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80046ac:	401a      	ands	r2, r3
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a35      	ldr	r2, [pc, #212]	; (8004790 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80046ba:	401a      	ands	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a33      	ldr	r2, [pc, #204]	; (8004794 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80046c8:	401a      	ands	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a30      	ldr	r2, [pc, #192]	; (8004798 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80046d6:	401a      	ands	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a2e      	ldr	r2, [pc, #184]	; (800479c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80046e4:	401a      	ands	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80046f2:	401a      	ands	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004700:	401a      	ands	r2, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	041b      	lsls	r3, r3, #16
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d106      	bne.n	8004724 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a24      	ldr	r2, [pc, #144]	; (80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800471a:	401a      	ands	r2, r3
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4313      	orrs	r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d121      	bne.n	8004772 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004732:	401a      	ands	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	051b      	lsls	r3, r3, #20
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004742:	401a      	ands	r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4a1a      	ldr	r2, [pc, #104]	; (80047b8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004750:	401a      	ands	r2, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d106      	bne.n	8004772 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a15      	ldr	r2, [pc, #84]	; (80047bc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004768:	401a      	ands	r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	223c      	movs	r2, #60	; 0x3c
 800477e:	2100      	movs	r1, #0
 8004780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	b004      	add	sp, #16
 800478a:	bd80      	pop	{r7, pc}
 800478c:	fffffcff 	.word	0xfffffcff
 8004790:	fffffbff 	.word	0xfffffbff
 8004794:	fffff7ff 	.word	0xfffff7ff
 8004798:	ffffefff 	.word	0xffffefff
 800479c:	ffffdfff 	.word	0xffffdfff
 80047a0:	ffffbfff 	.word	0xffffbfff
 80047a4:	fff0ffff 	.word	0xfff0ffff
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	efffffff 	.word	0xefffffff
 80047b0:	ff0fffff 	.word	0xff0fffff
 80047b4:	feffffff 	.word	0xfeffffff
 80047b8:	fdffffff 	.word	0xfdffffff
 80047bc:	dfffffff 	.word	0xdfffffff

080047c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c8:	46c0      	nop			; (mov r8, r8)
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b002      	add	sp, #8
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	b002      	add	sp, #8
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047e8:	46c0      	nop			; (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <LL_GPIO_SetPinMode>:
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	435a      	muls	r2, r3
 8004806:	0013      	movs	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	189b      	adds	r3, r3, r2
 800480c:	43db      	mvns	r3, r3
 800480e:	400b      	ands	r3, r1
 8004810:	001a      	movs	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	434b      	muls	r3, r1
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	434b      	muls	r3, r1
 800481c:	431a      	orrs	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}

0800482a <LL_GPIO_SetPinOutputType>:
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	60b9      	str	r1, [r7, #8]
 8004834:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	43d2      	mvns	r2, r2
 800483e:	401a      	ands	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	434b      	muls	r3, r1
 8004846:	431a      	orrs	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	605a      	str	r2, [r3, #4]
}
 800484c:	46c0      	nop			; (mov r8, r8)
 800484e:	46bd      	mov	sp, r7
 8004850:	b004      	add	sp, #16
 8004852:	bd80      	pop	{r7, pc}

08004854 <LL_GPIO_SetPinSpeed>:
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6899      	ldr	r1, [r3, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	435a      	muls	r2, r3
 800486a:	0013      	movs	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	189b      	adds	r3, r3, r2
 8004870:	43db      	mvns	r3, r3
 8004872:	400b      	ands	r3, r1
 8004874:	001a      	movs	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	68b9      	ldr	r1, [r7, #8]
 800487a:	434b      	muls	r3, r1
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	434b      	muls	r3, r1
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	609a      	str	r2, [r3, #8]
}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}

0800488e <LL_GPIO_SetPinPull>:
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	435a      	muls	r2, r3
 80048a4:	0013      	movs	r3, r2
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	43db      	mvns	r3, r3
 80048ac:	400b      	ands	r3, r1
 80048ae:	001a      	movs	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	434b      	muls	r3, r1
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	434b      	muls	r3, r1
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	60da      	str	r2, [r3, #12]
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <LL_GPIO_SetAFPin_0_7>:
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a19      	ldr	r1, [r3, #32]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4353      	muls	r3, r2
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	4353      	muls	r3, r2
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	435a      	muls	r2, r3
 80048e6:	0013      	movs	r3, r2
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	43db      	mvns	r3, r3
 80048ee:	400b      	ands	r3, r1
 80048f0:	001a      	movs	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	434b      	muls	r3, r1
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	434b      	muls	r3, r1
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	434b      	muls	r3, r1
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	434b      	muls	r3, r1
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	46bd      	mov	sp, r7
 800490e:	b004      	add	sp, #16
 8004910:	bd80      	pop	{r7, pc}

08004912 <LL_GPIO_SetAFPin_8_15>:
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	0a12      	lsrs	r2, r2, #8
 800492a:	4353      	muls	r3, r2
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	0a12      	lsrs	r2, r2, #8
 8004930:	4353      	muls	r3, r2
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	0a12      	lsrs	r2, r2, #8
 8004936:	435a      	muls	r2, r3
 8004938:	0013      	movs	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	43db      	mvns	r3, r3
 8004940:	400b      	ands	r3, r1
 8004942:	001a      	movs	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	0a09      	lsrs	r1, r1, #8
 800494c:	434b      	muls	r3, r1
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	0a09      	lsrs	r1, r1, #8
 8004952:	434b      	muls	r3, r1
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	0a09      	lsrs	r1, r1, #8
 8004958:	434b      	muls	r3, r1
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	434b      	muls	r3, r1
 800495e:	431a      	orrs	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b004      	add	sp, #16
 800496a:	bd80      	pop	{r7, pc}

0800496c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800497a:	e040      	b.n	80049fe <LL_GPIO_Init+0x92>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4091      	lsls	r1, r2
 8004986:	000a      	movs	r2, r1
 8004988:	4013      	ands	r3, r2
 800498a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d032      	beq.n	80049f8 <LL_GPIO_Init+0x8c>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	0018      	movs	r0, r3
 800499c:	f7ff ff28 	bl	80047f0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d003      	beq.n	80049b0 <LL_GPIO_Init+0x44>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d106      	bne.n	80049be <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7ff ff4b 	bl	8004854 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7ff ff61 	bl	800488e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d111      	bne.n	80049f8 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2bff      	cmp	r3, #255	; 0xff
 80049d8:	d807      	bhi.n	80049ea <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f7ff ff70 	bl	80048c8 <LL_GPIO_SetAFPin_0_7>
 80049e8:	e006      	b.n	80049f8 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7ff ff8d 	bl	8004912 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	40da      	lsrs	r2, r3
 8004a06:	1e13      	subs	r3, r2, #0
 8004a08:	d1b8      	bne.n	800497c <LL_GPIO_Init+0x10>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d003      	beq.n	8004a1a <LL_GPIO_Init+0xae>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d107      	bne.n	8004a2a <LL_GPIO_Init+0xbe>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7ff ff00 	bl	800482a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b004      	add	sp, #16
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <__libc_init_array>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	2600      	movs	r6, #0
 8004a38:	4d0c      	ldr	r5, [pc, #48]	; (8004a6c <__libc_init_array+0x38>)
 8004a3a:	4c0d      	ldr	r4, [pc, #52]	; (8004a70 <__libc_init_array+0x3c>)
 8004a3c:	1b64      	subs	r4, r4, r5
 8004a3e:	10a4      	asrs	r4, r4, #2
 8004a40:	42a6      	cmp	r6, r4
 8004a42:	d109      	bne.n	8004a58 <__libc_init_array+0x24>
 8004a44:	2600      	movs	r6, #0
 8004a46:	f000 f821 	bl	8004a8c <_init>
 8004a4a:	4d0a      	ldr	r5, [pc, #40]	; (8004a74 <__libc_init_array+0x40>)
 8004a4c:	4c0a      	ldr	r4, [pc, #40]	; (8004a78 <__libc_init_array+0x44>)
 8004a4e:	1b64      	subs	r4, r4, r5
 8004a50:	10a4      	asrs	r4, r4, #2
 8004a52:	42a6      	cmp	r6, r4
 8004a54:	d105      	bne.n	8004a62 <__libc_init_array+0x2e>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	00b3      	lsls	r3, r6, #2
 8004a5a:	58eb      	ldr	r3, [r5, r3]
 8004a5c:	4798      	blx	r3
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7ee      	b.n	8004a40 <__libc_init_array+0xc>
 8004a62:	00b3      	lsls	r3, r6, #2
 8004a64:	58eb      	ldr	r3, [r5, r3]
 8004a66:	4798      	blx	r3
 8004a68:	3601      	adds	r6, #1
 8004a6a:	e7f2      	b.n	8004a52 <__libc_init_array+0x1e>
 8004a6c:	08004b60 	.word	0x08004b60
 8004a70:	08004b60 	.word	0x08004b60
 8004a74:	08004b60 	.word	0x08004b60
 8004a78:	08004b64 	.word	0x08004b64

08004a7c <memset>:
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	1812      	adds	r2, r2, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	7019      	strb	r1, [r3, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
