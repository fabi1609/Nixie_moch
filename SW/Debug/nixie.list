
nixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005610  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005788  08005788  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005788  08005788  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005788  08005788  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000010  080057a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080057a0  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011753  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c83  00000000  00000000  0003178b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00034410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f50  00000000  00000000  000354e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a548  00000000  00000000  00036438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f4f1  00000000  00000000  00050980  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a213c  00000000  00000000  0005fe71  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  00102028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080056b4 	.word	0x080056b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080056b4 	.word	0x080056b4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <MX_COMP2_Init+0x58>)
 8000222:	4a15      	ldr	r2, [pc, #84]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000224:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8000226:	4b13      	ldr	r3, [pc, #76]	; (8000274 <MX_COMP2_Init+0x58>)
 8000228:	2280      	movs	r2, #128	; 0x80
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_COMP2_Init+0x58>)
 8000230:	2250      	movs	r2, #80	; 0x50
 8000232:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <MX_COMP2_Init+0x58>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_COMP2_Init+0x58>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_COMP2_Init+0x58>)
 8000242:	2200      	movs	r2, #0
 8000244:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_COMP2_Init+0x58>)
 8000248:	2200      	movs	r2, #0
 800024a:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_COMP2_Init+0x58>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_COMP2_Init+0x58>)
 8000254:	2200      	movs	r2, #0
 8000256:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_COMP2_Init+0x58>)
 800025a:	2200      	movs	r2, #0
 800025c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <MX_COMP2_Init+0x58>)
 8000260:	0018      	movs	r0, r3
 8000262:	f001 fe95 	bl	8001f90 <HAL_COMP_Init>
 8000266:	1e03      	subs	r3, r0, #0
 8000268:	d001      	beq.n	800026e <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 800026a:	f000 fe77 	bl	8000f5c <Error_Handler>
  }

}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000003c 	.word	0x2000003c
 8000278:	40010204 	.word	0x40010204

0800027c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	230c      	movs	r3, #12
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f005 fa08 	bl	80056a4 <memset>
  if(compHandle->Instance==COMP2)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <HAL_COMP_MspInit+0x64>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d11c      	bne.n	80002d8 <HAL_COMP_MspInit+0x5c>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	430a      	orrs	r2, r1
 80002a8:	635a      	str	r2, [r3, #52]	; 0x34
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ae:	2201      	movs	r2, #1
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
 80002b4:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80002b6:	210c      	movs	r1, #12
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2208      	movs	r2, #8
 80002bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2203      	movs	r2, #3
 80002c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ca:	187a      	adds	r2, r7, r1
 80002cc:	23a0      	movs	r3, #160	; 0xa0
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f002 faac 	bl	8002830 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b008      	add	sp, #32
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40010204 	.word	0x40010204
 80002e4:	40021000 	.word	0x40021000

080002e8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2324      	movs	r3, #36	; 0x24
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f005 f9d4 	bl	80056a4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_DAC1_Init+0x64>)
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <MX_DAC1_Init+0x68>)
 8000300:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_DAC1_Init+0x64>)
 8000304:	0018      	movs	r0, r3
 8000306:	f002 f8e1 	bl	80024cc <HAL_DAC_Init>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800030e:	f000 fe25 	bl	8000f5c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2202      	movs	r2, #2
 8000322:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2201      	movs	r2, #1
 8000328:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000330:	1d39      	adds	r1, r7, #4
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_DAC1_Init+0x64>)
 8000334:	2210      	movs	r2, #16
 8000336:	0018      	movs	r0, r3
 8000338:	f002 f95c 	bl	80025f4 <HAL_DAC_ConfigChannel>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000340:	f000 fe0c 	bl	8000f5c <Error_Handler>
  }

}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b00a      	add	sp, #40	; 0x28
 800034a:	bd80      	pop	{r7, pc}
 800034c:	2000006c 	.word	0x2000006c
 8000350:	40007400 	.word	0x40007400

08000354 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <HAL_DAC_MspInit+0x38>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d10d      	bne.n	8000382 <HAL_DAC_MspInit+0x2e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 8000368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 800036c:	2180      	movs	r1, #128	; 0x80
 800036e:	0589      	lsls	r1, r1, #22
 8000370:	430a      	orrs	r2, r1
 8000372:	63da      	str	r2, [r3, #60]	; 0x3c
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 8000376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	059b      	lsls	r3, r3, #22
 800037c:	4013      	ands	r3, r2
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b004      	add	sp, #16
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	40007400 	.word	0x40007400
 8000390:	40021000 	.word	0x40021000

08000394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	0002      	movs	r2, r0
 800039c:	1dfb      	adds	r3, r7, #7
 800039e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b7f      	cmp	r3, #127	; 0x7f
 80003a6:	d809      	bhi.n	80003bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a8:	1dfb      	adds	r3, r7, #7
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	001a      	movs	r2, r3
 80003ae:	231f      	movs	r3, #31
 80003b0:	401a      	ands	r2, r3
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <__NVIC_EnableIRQ+0x30>)
 80003b4:	2101      	movs	r1, #1
 80003b6:	4091      	lsls	r1, r2
 80003b8:	000a      	movs	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]
  }
}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b002      	add	sp, #8
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	e000e100 	.word	0xe000e100

080003c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c8:	b590      	push	{r4, r7, lr}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	0002      	movs	r2, r0
 80003d0:	6039      	str	r1, [r7, #0]
 80003d2:	1dfb      	adds	r3, r7, #7
 80003d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80003d6:	1dfb      	adds	r3, r7, #7
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b7f      	cmp	r3, #127	; 0x7f
 80003dc:	d828      	bhi.n	8000430 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003de:	4a2f      	ldr	r2, [pc, #188]	; (800049c <__NVIC_SetPriority+0xd4>)
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	b25b      	sxtb	r3, r3
 80003e6:	089b      	lsrs	r3, r3, #2
 80003e8:	33c0      	adds	r3, #192	; 0xc0
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	589b      	ldr	r3, [r3, r2]
 80003ee:	1dfa      	adds	r2, r7, #7
 80003f0:	7812      	ldrb	r2, [r2, #0]
 80003f2:	0011      	movs	r1, r2
 80003f4:	2203      	movs	r2, #3
 80003f6:	400a      	ands	r2, r1
 80003f8:	00d2      	lsls	r2, r2, #3
 80003fa:	21ff      	movs	r1, #255	; 0xff
 80003fc:	4091      	lsls	r1, r2
 80003fe:	000a      	movs	r2, r1
 8000400:	43d2      	mvns	r2, r2
 8000402:	401a      	ands	r2, r3
 8000404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	019b      	lsls	r3, r3, #6
 800040a:	22ff      	movs	r2, #255	; 0xff
 800040c:	401a      	ands	r2, r3
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	0018      	movs	r0, r3
 8000414:	2303      	movs	r3, #3
 8000416:	4003      	ands	r3, r0
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800041c:	481f      	ldr	r0, [pc, #124]	; (800049c <__NVIC_SetPriority+0xd4>)
 800041e:	1dfb      	adds	r3, r7, #7
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b25b      	sxtb	r3, r3
 8000424:	089b      	lsrs	r3, r3, #2
 8000426:	430a      	orrs	r2, r1
 8000428:	33c0      	adds	r3, #192	; 0xc0
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800042e:	e031      	b.n	8000494 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <__NVIC_SetPriority+0xd8>)
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	0019      	movs	r1, r3
 8000438:	230f      	movs	r3, #15
 800043a:	400b      	ands	r3, r1
 800043c:	3b08      	subs	r3, #8
 800043e:	089b      	lsrs	r3, r3, #2
 8000440:	3306      	adds	r3, #6
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	18d3      	adds	r3, r2, r3
 8000446:	3304      	adds	r3, #4
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	1dfa      	adds	r2, r7, #7
 800044c:	7812      	ldrb	r2, [r2, #0]
 800044e:	0011      	movs	r1, r2
 8000450:	2203      	movs	r2, #3
 8000452:	400a      	ands	r2, r1
 8000454:	00d2      	lsls	r2, r2, #3
 8000456:	21ff      	movs	r1, #255	; 0xff
 8000458:	4091      	lsls	r1, r2
 800045a:	000a      	movs	r2, r1
 800045c:	43d2      	mvns	r2, r2
 800045e:	401a      	ands	r2, r3
 8000460:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	019b      	lsls	r3, r3, #6
 8000466:	22ff      	movs	r2, #255	; 0xff
 8000468:	401a      	ands	r2, r3
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	0018      	movs	r0, r3
 8000470:	2303      	movs	r3, #3
 8000472:	4003      	ands	r3, r0
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000478:	4809      	ldr	r0, [pc, #36]	; (80004a0 <__NVIC_SetPriority+0xd8>)
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	001c      	movs	r4, r3
 8000480:	230f      	movs	r3, #15
 8000482:	4023      	ands	r3, r4
 8000484:	3b08      	subs	r3, #8
 8000486:	089b      	lsrs	r3, r3, #2
 8000488:	430a      	orrs	r2, r1
 800048a:	3306      	adds	r3, #6
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	18c3      	adds	r3, r0, r3
 8000490:	3304      	adds	r3, #4
 8000492:	601a      	str	r2, [r3, #0]
}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b003      	add	sp, #12
 800049a:	bd90      	pop	{r4, r7, pc}
 800049c:	e000e100 	.word	0xe000e100
 80004a0:	e000ed00 	.word	0xe000ed00

080004a4 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 80004ae:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <LL_EXTI_SetEXTISource+0x48>)
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	2103      	movs	r1, #3
 80004b4:	400b      	ands	r3, r1
 80004b6:	3318      	adds	r3, #24
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	589b      	ldr	r3, [r3, r2]
 80004bc:	683a      	ldr	r2, [r7, #0]
 80004be:	0c12      	lsrs	r2, r2, #16
 80004c0:	2107      	movs	r1, #7
 80004c2:	4091      	lsls	r1, r2
 80004c4:	000a      	movs	r2, r1
 80004c6:	43d2      	mvns	r2, r2
 80004c8:	401a      	ands	r2, r3
 80004ca:	0011      	movs	r1, r2
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	0c1b      	lsrs	r3, r3, #16
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	409a      	lsls	r2, r3
 80004d4:	4805      	ldr	r0, [pc, #20]	; (80004ec <LL_EXTI_SetEXTISource+0x48>)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	2403      	movs	r4, #3
 80004da:	4023      	ands	r3, r4
 80004dc:	430a      	orrs	r2, r1
 80004de:	3318      	adds	r3, #24
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	501a      	str	r2, [r3, r0]
}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b003      	add	sp, #12
 80004ea:	bd90      	pop	{r4, r7, pc}
 80004ec:	40021800 	.word	0x40021800

080004f0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	6819      	ldr	r1, [r3, #0]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	435a      	muls	r2, r3
 8000506:	0013      	movs	r3, r2
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	189b      	adds	r3, r3, r2
 800050c:	43db      	mvns	r3, r3
 800050e:	400b      	ands	r3, r1
 8000510:	001a      	movs	r2, r3
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	68b9      	ldr	r1, [r7, #8]
 8000516:	434b      	muls	r3, r1
 8000518:	6879      	ldr	r1, [r7, #4]
 800051a:	434b      	muls	r3, r1
 800051c:	431a      	orrs	r2, r3
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	601a      	str	r2, [r3, #0]
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b004      	add	sp, #16
 8000528:	bd80      	pop	{r7, pc}

0800052a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b084      	sub	sp, #16
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	68d9      	ldr	r1, [r3, #12]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	435a      	muls	r2, r3
 8000540:	0013      	movs	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	189b      	adds	r3, r3, r2
 8000546:	43db      	mvns	r3, r3
 8000548:	400b      	ands	r3, r1
 800054a:	001a      	movs	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	68b9      	ldr	r1, [r7, #8]
 8000550:	434b      	muls	r3, r1
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	434b      	muls	r3, r1
 8000556:	431a      	orrs	r2, r3
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	60da      	str	r2, [r3, #12]
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b004      	add	sp, #16
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	b002      	add	sp, #8
 800057a:	bd80      	pop	{r7, pc}

0800057c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000586:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <LL_IOP_GRP1_EnableClock+0x28>)
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	430a      	orrs	r2, r1
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b004      	add	sp, #16
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b590      	push	{r4, r7, lr}
 80005aa:	b08b      	sub	sp, #44	; 0x2c
 80005ac:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80005ae:	241c      	movs	r4, #28
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	0018      	movs	r0, r3
 80005b4:	230c      	movs	r3, #12
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f005 f873 	bl	80056a4 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	0018      	movs	r0, r3
 80005c2:	2318      	movs	r3, #24
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f005 f86c 	bl	80056a4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80005cc:	2004      	movs	r0, #4
 80005ce:	f7ff ffd5 	bl	800057c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 80005d2:	2020      	movs	r0, #32
 80005d4:	f7ff ffd2 	bl	800057c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff ffcf 	bl	800057c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80005de:	2002      	movs	r0, #2
 80005e0:	f7ff ffcc 	bl	800057c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 80005e4:	2008      	movs	r0, #8
 80005e6:	f7ff ffc9 	bl	800057c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_0);
 80005ea:	4bfe      	ldr	r3, [pc, #1016]	; (80009e4 <MX_GPIO_Init+0x43c>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ffb8 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_1);
 80005f4:	4bfb      	ldr	r3, [pc, #1004]	; (80009e4 <MX_GPIO_Init+0x43c>)
 80005f6:	2102      	movs	r1, #2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ffb3 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN1_GPIO_Port, GN1_Pin);
 80005fe:	23a0      	movs	r3, #160	; 0xa0
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2101      	movs	r1, #1
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ffad 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN2_GPIO_Port, GN2_Pin);
 800060a:	23a0      	movs	r3, #160	; 0xa0
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	2102      	movs	r1, #2
 8000610:	0018      	movs	r0, r3
 8000612:	f7ff ffa7 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G1_GPIO_Port, G1_Pin);
 8000616:	23a0      	movs	r3, #160	; 0xa0
 8000618:	05db      	lsls	r3, r3, #23
 800061a:	2110      	movs	r1, #16
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ffa1 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GDOT_GPIO_Port, GDOT_Pin);
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2120      	movs	r1, #32
 8000628:	0018      	movs	r0, r3
 800062a:	f7ff ff9b 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G3_GPIO_Port, G3_Pin);
 800062e:	23a0      	movs	r3, #160	; 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2140      	movs	r1, #64	; 0x40
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff95 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800063a:	23a0      	movs	r3, #160	; 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff ff8f 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000646:	4be8      	ldr	r3, [pc, #928]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000648:	2101      	movs	r1, #1
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ff8a 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000650:	4be5      	ldr	r3, [pc, #916]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000652:	2102      	movs	r1, #2
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff ff85 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 800065a:	4be3      	ldr	r3, [pc, #908]	; (80009e8 <MX_GPIO_Init+0x440>)
 800065c:	2104      	movs	r1, #4
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff ff80 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4adf      	ldr	r2, [pc, #892]	; (80009e8 <MX_GPIO_Init+0x440>)
 800066a:	0019      	movs	r1, r3
 800066c:	0010      	movs	r0, r2
 800066e:	f7ff ff79 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	4adc      	ldr	r2, [pc, #880]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000678:	0019      	movs	r1, r3
 800067a:	0010      	movs	r0, r2
 800067c:	f7ff ff72 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	015b      	lsls	r3, r3, #5
 8000684:	4ad8      	ldr	r2, [pc, #864]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000686:	0019      	movs	r1, r3
 8000688:	0010      	movs	r0, r2
 800068a:	f7ff ff6b 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	019b      	lsls	r3, r3, #6
 8000692:	4ad5      	ldr	r2, [pc, #852]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000694:	0019      	movs	r1, r3
 8000696:	0010      	movs	r0, r2
 8000698:	f7ff ff64 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14);
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	01db      	lsls	r3, r3, #7
 80006a0:	4ad1      	ldr	r2, [pc, #836]	; (80009e8 <MX_GPIO_Init+0x440>)
 80006a2:	0019      	movs	r1, r3
 80006a4:	0010      	movs	r0, r2
 80006a6:	f7ff ff5d 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	021b      	lsls	r3, r3, #8
 80006ae:	4ace      	ldr	r2, [pc, #824]	; (80009e8 <MX_GPIO_Init+0x440>)
 80006b0:	0019      	movs	r1, r3
 80006b2:	0010      	movs	r0, r2
 80006b4:	f7ff ff56 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	005a      	lsls	r2, r3, #1
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f7ff ff4e 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	009a      	lsls	r2, r3, #2
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ff46 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
 80006d8:	4bc4      	ldr	r3, [pc, #784]	; (80009ec <MX_GPIO_Init+0x444>)
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ff41 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 80006e2:	4bc2      	ldr	r3, [pc, #776]	; (80009ec <MX_GPIO_Init+0x444>)
 80006e4:	2180      	movs	r1, #128	; 0x80
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff ff3c 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	00da      	lsls	r2, r3, #3
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ff34 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	011a      	lsls	r2, r3, #4
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ff2c 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	015a      	lsls	r2, r3, #5
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff ff24 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN3_GPIO_Port, GN3_Pin);
 800071c:	4bb4      	ldr	r3, [pc, #720]	; (80009f0 <MX_GPIO_Init+0x448>)
 800071e:	2102      	movs	r1, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff1f 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G2_GPIO_Port, G2_Pin);
 8000726:	4bb2      	ldr	r3, [pc, #712]	; (80009f0 <MX_GPIO_Init+0x448>)
 8000728:	2104      	movs	r1, #4
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff ff1a 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G4_GPIO_Port, G4_Pin);
 8000730:	4baf      	ldr	r3, [pc, #700]	; (80009f0 <MX_GPIO_Init+0x448>)
 8000732:	2108      	movs	r1, #8
 8000734:	0018      	movs	r0, r3
 8000736:	f7ff ff15 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G5_GPIO_Port, G5_Pin);
 800073a:	4bab      	ldr	r3, [pc, #684]	; (80009e8 <MX_GPIO_Init+0x440>)
 800073c:	2108      	movs	r1, #8
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff ff10 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G6_GPIO_Port, G6_Pin);
 8000744:	4ba8      	ldr	r3, [pc, #672]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000746:	2110      	movs	r1, #16
 8000748:	0018      	movs	r0, r3
 800074a:	f7ff ff0b 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN4_GPIO_Port, GN4_Pin);
 800074e:	4ba6      	ldr	r3, [pc, #664]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000750:	2120      	movs	r1, #32
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ff06 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G0_GPIO_Port, G0_Pin);
 8000758:	4ba3      	ldr	r3, [pc, #652]	; (80009e8 <MX_GPIO_Init+0x440>)
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff ff01 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G9_GPIO_Port, G9_Pin);
 8000762:	4ba1      	ldr	r3, [pc, #644]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff fefc 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G8_GPIO_Port, G8_Pin);
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4a9d      	ldr	r2, [pc, #628]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000772:	0019      	movs	r1, r3
 8000774:	0010      	movs	r0, r2
 8000776:	f7ff fef5 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G7_GPIO_Port, G7_Pin);
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4a9a      	ldr	r2, [pc, #616]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f7ff feee 	bl	8000564 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S2_Pin;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0192      	lsls	r2, r2, #6
 800078e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2201      	movs	r2, #1
 800079a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4a93      	ldr	r2, [pc, #588]	; (80009ec <MX_GPIO_Init+0x444>)
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f004 fef6 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2201      	movs	r2, #1
 80007b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4a86      	ldr	r2, [pc, #536]	; (80009e4 <MX_GPIO_Init+0x43c>)
 80007ca:	0019      	movs	r1, r3
 80007cc:	0010      	movs	r0, r2
 80007ce:	f004 fee1 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2202      	movs	r2, #2
 80007d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2201      	movs	r2, #1
 80007dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4a7c      	ldr	r2, [pc, #496]	; (80009e4 <MX_GPIO_Init+0x43c>)
 80007f4:	0019      	movs	r1, r3
 80007f6:	0010      	movs	r0, r2
 80007f8:	f004 fecc 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN1_Pin;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2201      	movs	r2, #1
 8000806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN1_GPIO_Port, &GPIO_InitStruct);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f004 feb6 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN2_Pin;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2202      	movs	r2, #2
 800082c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2201      	movs	r2, #1
 8000832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN2_GPIO_Port, &GPIO_InitStruct);
 8000846:	1d3a      	adds	r2, r7, #4
 8000848:	23a0      	movs	r3, #160	; 0xa0
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f004 fea0 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G1_Pin;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2210      	movs	r2, #16
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G1_GPIO_Port, &GPIO_InitStruct);
 8000872:	1d3a      	adds	r2, r7, #4
 8000874:	23a0      	movs	r3, #160	; 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0011      	movs	r1, r2
 800087a:	0018      	movs	r0, r3
 800087c:	f004 fe8a 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GDOT_Pin;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2220      	movs	r2, #32
 8000884:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2201      	movs	r2, #1
 800088a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2202      	movs	r2, #2
 800089c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GDOT_GPIO_Port, &GPIO_InitStruct);
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	23a0      	movs	r3, #160	; 0xa0
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f004 fe74 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G3_Pin;
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2240      	movs	r2, #64	; 0x40
 80008b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2201      	movs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 80008ca:	1d3a      	adds	r2, r7, #4
 80008cc:	23a0      	movs	r3, #160	; 0xa0
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	0011      	movs	r1, r2
 80008d2:	0018      	movs	r0, r3
 80008d4:	f004 fe5e 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2201      	movs	r2, #1
 80008e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	1d3a      	adds	r2, r7, #4
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f004 fe48 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2201      	movs	r2, #1
 800090e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4a30      	ldr	r2, [pc, #192]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000926:	0019      	movs	r1, r3
 8000928:	0010      	movs	r0, r2
 800092a:	f004 fe33 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2202      	movs	r2, #2
 8000932:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2201      	movs	r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <MX_GPIO_Init+0x440>)
 8000950:	0019      	movs	r1, r3
 8000952:	0010      	movs	r0, r2
 8000954:	f004 fe1e 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2204      	movs	r2, #4
 800095c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2201      	movs	r2, #1
 8000962:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <MX_GPIO_Init+0x440>)
 800097a:	0019      	movs	r1, r3
 800097c:	0010      	movs	r0, r2
 800097e:	f004 fe09 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2201      	movs	r2, #1
 800098e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <MX_GPIO_Init+0x440>)
 80009a6:	0019      	movs	r1, r3
 80009a8:	0010      	movs	r0, r2
 80009aa:	f004 fdf3 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2201      	movs	r2, #1
 80009ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <MX_GPIO_Init+0x440>)
 80009d2:	0019      	movs	r1, r3
 80009d4:	0010      	movs	r0, r2
 80009d6:	f004 fddd 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0152      	lsls	r2, r2, #5
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e007      	b.n	80009f4 <MX_GPIO_Init+0x44c>
 80009e4:	50001400 	.word	0x50001400
 80009e8:	50000400 	.word	0x50000400
 80009ec:	50000800 	.word	0x50000800
 80009f0:	50000c00 	.word	0x50000c00
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2201      	movs	r2, #1
 80009f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4afa      	ldr	r2, [pc, #1000]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000a10:	0019      	movs	r1, r3
 8000a12:	0010      	movs	r0, r2
 8000a14:	f004 fdbe 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	0192      	lsls	r2, r2, #6
 8000a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2201      	movs	r2, #1
 8000a24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4aef      	ldr	r2, [pc, #956]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	0010      	movs	r0, r2
 8000a40:	f004 fda8 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	01d2      	lsls	r2, r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2201      	movs	r2, #1
 8000a50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4ae4      	ldr	r2, [pc, #912]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000a68:	0019      	movs	r1, r3
 8000a6a:	0010      	movs	r0, r2
 8000a6c:	f004 fd92 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	0212      	lsls	r2, r2, #8
 8000a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4ad9      	ldr	r2, [pc, #868]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000a94:	0019      	movs	r1, r3
 8000a96:	0010      	movs	r0, r2
 8000a98:	f004 fd7c 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	0052      	lsls	r2, r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	1d3a      	adds	r2, r7, #4
 8000abe:	23a0      	movs	r3, #160	; 0xa0
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f004 fd65 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	1d3a      	adds	r2, r7, #4
 8000aec:	23a0      	movs	r3, #160	; 0xa0
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f004 fd4e 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2201      	movs	r2, #1
 8000b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4ab8      	ldr	r2, [pc, #736]	; (8000dfc <MX_GPIO_Init+0x854>)
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	0010      	movs	r0, r2
 8000b1e:	f004 fd39 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2280      	movs	r2, #128	; 0x80
 8000b26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4aae      	ldr	r2, [pc, #696]	; (8000dfc <MX_GPIO_Init+0x854>)
 8000b44:	0019      	movs	r1, r3
 8000b46:	0010      	movs	r0, r2
 8000b48:	f004 fd24 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	00d2      	lsls	r2, r2, #3
 8000b52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2201      	movs	r2, #1
 8000b58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	1d3a      	adds	r2, r7, #4
 8000b6e:	23a0      	movs	r3, #160	; 0xa0
 8000b70:	05db      	lsls	r3, r3, #23
 8000b72:	0011      	movs	r1, r2
 8000b74:	0018      	movs	r0, r3
 8000b76:	f004 fd0d 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2201      	movs	r2, #1
 8000b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	1d3a      	adds	r2, r7, #4
 8000b9c:	23a0      	movs	r3, #160	; 0xa0
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f004 fcf6 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	0152      	lsls	r2, r2, #5
 8000bae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	1d3a      	adds	r2, r7, #4
 8000bca:	23a0      	movs	r3, #160	; 0xa0
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	0011      	movs	r1, r2
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f004 fcdf 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S1_Pin;
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2201      	movs	r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2201      	movs	r2, #1
 8000be6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4a85      	ldr	r2, [pc, #532]	; (8000e00 <MX_GPIO_Init+0x858>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	0010      	movs	r0, r2
 8000bf0:	f004 fcd0 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN3_Pin;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN3_GPIO_Port, &GPIO_InitStruct);
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4a7a      	ldr	r2, [pc, #488]	; (8000e00 <MX_GPIO_Init+0x858>)
 8000c16:	0019      	movs	r1, r3
 8000c18:	0010      	movs	r0, r2
 8000c1a:	f004 fcbb 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G2_Pin;
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2204      	movs	r2, #4
 8000c22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2201      	movs	r2, #1
 8000c28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G2_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4a70      	ldr	r2, [pc, #448]	; (8000e00 <MX_GPIO_Init+0x858>)
 8000c40:	0019      	movs	r1, r3
 8000c42:	0010      	movs	r0, r2
 8000c44:	f004 fca6 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G4_Pin;
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2208      	movs	r2, #8
 8000c4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2201      	movs	r2, #1
 8000c52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G4_GPIO_Port, &GPIO_InitStruct);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4a65      	ldr	r2, [pc, #404]	; (8000e00 <MX_GPIO_Init+0x858>)
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	f004 fc91 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G5_Pin;
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2208      	movs	r2, #8
 8000c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G5_GPIO_Port, &GPIO_InitStruct);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4a59      	ldr	r2, [pc, #356]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000c94:	0019      	movs	r1, r3
 8000c96:	0010      	movs	r0, r2
 8000c98:	f004 fc7c 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G6_Pin;
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G6_GPIO_Port, &GPIO_InitStruct);
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4a4e      	ldr	r2, [pc, #312]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	f004 fc67 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN4_Pin;
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2220      	movs	r2, #32
 8000cca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2201      	movs	r2, #1
 8000cd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN4_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4a44      	ldr	r2, [pc, #272]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000ce8:	0019      	movs	r1, r3
 8000cea:	0010      	movs	r0, r2
 8000cec:	f004 fc52 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G0_Pin;
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2240      	movs	r2, #64	; 0x40
 8000cf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G0_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4a39      	ldr	r2, [pc, #228]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000d12:	0019      	movs	r1, r3
 8000d14:	0010      	movs	r0, r2
 8000d16:	f004 fc3d 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G9_Pin;
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2201      	movs	r2, #1
 8000d24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G9_GPIO_Port, &GPIO_InitStruct);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f004 fc28 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G8_Pin;
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	0052      	lsls	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2201      	movs	r2, #1
 8000d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G8_GPIO_Port, &GPIO_InitStruct);
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0010      	movs	r0, r2
 8000d6c:	f004 fc12 	bl	8005594 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G7_Pin;
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	0092      	lsls	r2, r2, #2
 8000d76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <MX_GPIO_Init+0x850>)
 8000d94:	0019      	movs	r1, r3
 8000d96:	0010      	movs	r0, r2
 8000d98:	f004 fbfc 	bl	8005594 <LL_GPIO_Init>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTF, LL_EXTI_CONFIG_LINE2);
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	035b      	lsls	r3, r3, #13
 8000da0:	0019      	movs	r1, r3
 8000da2:	2005      	movs	r0, #5
 8000da4:	f7ff fb7e 	bl	80004a4 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000da8:	0021      	movs	r1, r4
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2204      	movs	r2, #4
 8000dae:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2201      	movs	r2, #1
 8000db4:	721a      	strb	r2, [r3, #8]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2200      	movs	r2, #0
 8000dba:	725a      	strb	r2, [r3, #9]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	729a      	strb	r2, [r3, #10]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f004 fa6b 	bl	80052a0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(DCF77_GPIO_Port, DCF77_Pin, LL_GPIO_PULL_DOWN);
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_GPIO_Init+0x85c>)
 8000dcc:	2202      	movs	r2, #2
 8000dce:	2104      	movs	r1, #4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff fbaa 	bl	800052a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(DCF77_GPIO_Port, DCF77_Pin, LL_GPIO_MODE_INPUT);
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_GPIO_Init+0x85c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2104      	movs	r1, #4
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fb87 	bl	80004f0 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI2_3_IRQn, 0);
 8000de2:	2100      	movs	r1, #0
 8000de4:	2006      	movs	r0, #6
 8000de6:	f7ff faef 	bl	80003c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000dea:	2006      	movs	r0, #6
 8000dec:	f7ff fad2 	bl	8000394 <__NVIC_EnableIRQ>

}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b00b      	add	sp, #44	; 0x2c
 8000df6:	e007      	b.n	8000e08 <MX_GPIO_Init+0x860>
 8000df8:	50000400 	.word	0x50000400
 8000dfc:	50000800 	.word	0x50000800
 8000e00:	50000c00 	.word	0x50000c00
 8000e04:	50001400 	.word	0x50001400
 8000e08:	bd90      	pop	{r4, r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 ff49 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f819 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f7ff fbc5 	bl	80005a8 <MX_GPIO_Init>
  MX_COMP2_Init();
 8000e1e:	f7ff f9fd 	bl	800021c <MX_COMP2_Init>
  MX_DAC1_Init();
 8000e22:	f7ff fa61 	bl	80002e8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000e26:	f000 fcd5 	bl	80017d4 <MX_TIM2_Init>
  MX_TIM14_Init();
 8000e2a:	f000 fd59 	bl	80018e0 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000e2e:	f000 fd7d 	bl	800192c <MX_TIM15_Init>
  MX_TIM1_Init();
 8000e32:	f000 fc5b 	bl	80016ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MY_OWN_MX_RTC_Init();
 8000e36:	f000 fad5 	bl	80013e4 <MY_OWN_MX_RTC_Init>
  //MX_RTC_Init();
  nixie_init();
 8000e3a:	f000 f96d 	bl	8001118 <nixie_init>
  //UB_DCF77_Init();
  DCF77_Status_t status;
  uint8_t old_sek=99;
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	2263      	movs	r2, #99	; 0x63
 8000e42:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  boost_op();
 8000e44:	f000 f998 	bl	8001178 <boost_op>
 8000e48:	e7fc      	b.n	8000e44 <main+0x38>
	...

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b0a1      	sub	sp, #132	; 0x84
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	2448      	movs	r4, #72	; 0x48
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	0018      	movs	r0, r3
 8000e58:	2338      	movs	r3, #56	; 0x38
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	f004 fc21 	bl	80056a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e62:	2338      	movs	r3, #56	; 0x38
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	0018      	movs	r0, r3
 8000e68:	2310      	movs	r3, #16
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f004 fc19 	bl	80056a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	0018      	movs	r0, r3
 8000e76:	2334      	movs	r3, #52	; 0x34
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f004 fc12 	bl	80056a4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 fe55 	bl	8002b34 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8000e8a:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <SystemClock_Config+0x10c>)
 8000e8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e8e:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <SystemClock_Config+0x10c>)
 8000e90:	2118      	movs	r1, #24
 8000e92:	430a      	orrs	r2, r1
 8000e94:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2206      	movs	r2, #6
 8000e9a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	0052      	lsls	r2, r2, #1
 8000ea8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000eaa:	0021      	movs	r1, r4
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2240      	movs	r2, #64	; 0x40
 8000eb6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2202      	movs	r2, #2
 8000ebc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	2210      	movs	r2, #16
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	0292      	lsls	r2, r2, #10
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0492      	lsls	r2, r2, #18
 8000ede:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	22c0      	movs	r2, #192	; 0xc0
 8000ee4:	05d2      	lsls	r2, r2, #23
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 fe62 	bl	8002bb4 <HAL_RCC_OscConfig>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ef4:	f000 f832 	bl	8000f5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	2138      	movs	r1, #56	; 0x38
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2202      	movs	r2, #2
 8000f04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2102      	movs	r1, #2
 8000f16:	0018      	movs	r0, r3
 8000f18:	f002 f96c 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000f20:	f000 f81c 	bl	8000f5c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM15
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	22c4      	movs	r2, #196	; 0xc4
 8000f28:	03d2      	lsls	r2, r2, #15
 8000f2a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	0052      	lsls	r2, r2, #1
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 fae0 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000f4c:	f000 f806 	bl	8000f5c <Error_Handler>
  }
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b021      	add	sp, #132	; 0x84
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <LL_GPIO_SetPinPull>:
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b084      	sub	sp, #16
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	68d9      	ldr	r1, [r3, #12]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	435a      	muls	r2, r3
 8000f7c:	0013      	movs	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	189b      	adds	r3, r3, r2
 8000f82:	43db      	mvns	r3, r3
 8000f84:	400b      	ands	r3, r1
 8000f86:	001a      	movs	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	434b      	muls	r3, r1
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	434b      	muls	r3, r1
 8000f92:	431a      	orrs	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	60da      	str	r2, [r3, #12]
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b004      	add	sp, #16
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_TIM_PeriodElapsedCallback>:

//DCF77
void P_Store_Value(uint8_t value, uint8_t pos);

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d103      	bne.n	8000fbc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//End of boost converter pulse. Set flag to poll the feedback comparator of boost converter again
		poll_comp = true;
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
		}
		else if(dcf77_int.mode==M77_Error) {
			dcf77_int.ok=0;
		}
	}
}
 8000fba:	e08e      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
	else if(htim->Instance == htim14.Instance)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d115      	bne.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x54>
		nixie_display();
 8000fc8:	f000 f8f8 	bl	80011bc <nixie_display>
		if(dac_value < DAC_TARGET)
 8000fcc:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a48      	ldr	r2, [pc, #288]	; (80010f4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d900      	bls.n	8000fd8 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000fd6:	e080      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
			dac_value = dac_value + 10;
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	330a      	adds	r3, #10
 8000fde:	001a      	movs	r2, r3
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000fe2:	601a      	str	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4843      	ldr	r0, [pc, #268]	; (80010f8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	2110      	movs	r1, #16
 8000fee:	f001 fadf 	bl	80025b0 <HAL_DAC_SetValue>
}
 8000ff2:	e072      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
	else if(htim->Instance == htim1.Instance)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d000      	beq.n	8001002 <HAL_TIM_PeriodElapsedCallback+0x62>
 8001000:	e06b      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
		dcf77_ms_counter++;
 8001002:	4b3f      	ldr	r3, [pc, #252]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	4b3d      	ldr	r3, [pc, #244]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800100a:	601a      	str	r2, [r3, #0]
		if(dcf77_ms_counter>=1000) {
 800100c:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a3c      	ldr	r2, [pc, #240]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d90c      	bls.n	8001030 <HAL_TIM_PeriodElapsedCallback+0x90>
			dcf77_ms_counter=0;
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
			if(DCF77_TIME.sek<59) DCF77_TIME.sek++;
 800101c:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b3a      	cmp	r3, #58	; 0x3a
 8001022:	d805      	bhi.n	8001030 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800102e:	701a      	strb	r2, [r3, #0]
		dcf77_1ms_value++;
 8001030:	4b36      	ldr	r3, [pc, #216]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001038:	601a      	str	r2, [r3, #0]
		if(dcf77_int.mode==M77_Init) {
 800103a:	4b35      	ldr	r3, [pc, #212]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_TIM_PeriodElapsedCallback+0xb0>
			dcf77_1ms_value=0;
 8001042:	4b32      	ldr	r3, [pc, #200]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
			dcf77_int.mode=M77_Wait4Signal;
 8001048:	4b31      	ldr	r3, [pc, #196]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
}
 800104e:	e044      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
		else if(dcf77_int.mode==M77_Wait4Signal) {
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d040      	beq.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
		else if(dcf77_int.mode==M77_Wait4Sync) {
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d10b      	bne.n	8001078 <HAL_TIM_PeriodElapsedCallback+0xd8>
			if(dcf77_1ms_value>DCF77_SYNC) {
 8001060:	4b2a      	ldr	r3, [pc, #168]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2b      	ldr	r2, [pc, #172]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d937      	bls.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
				dcf77_1ms_value=0;
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
				dcf77_int.mode=M77_SyncOk;
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001072:	2203      	movs	r2, #3
 8001074:	701a      	strb	r2, [r3, #0]
}
 8001076:	e030      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
		else if(dcf77_int.mode==M77_SyncOk) {
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d109      	bne.n	8001094 <HAL_TIM_PeriodElapsedCallback+0xf4>
			if(dcf77_1ms_value>DCF77_TIMOUT) dcf77_int.mode=M77_Error;
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	23fa      	movs	r3, #250	; 0xfa
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	429a      	cmp	r2, r3
 800108a:	d926      	bls.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800108e:	2206      	movs	r2, #6
 8001090:	701a      	strb	r2, [r3, #0]
}
 8001092:	e022      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
		else if(dcf77_int.mode==M77_Wait4Time) {
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d109      	bne.n	80010b0 <HAL_TIM_PeriodElapsedCallback+0x110>
			if(dcf77_1ms_value>DCF77_TIMOUT) dcf77_int.mode=M77_Error;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	23fa      	movs	r3, #250	; 0xfa
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d918      	bls.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010aa:	2206      	movs	r2, #6
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	e014      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
		else if(dcf77_int.mode==M77_Ready) {
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d109      	bne.n	80010cc <HAL_TIM_PeriodElapsedCallback+0x12c>
			if(dcf77_1ms_value>DCF77_TIMOUT) dcf77_int.mode=M77_Error;
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	23fa      	movs	r3, #250	; 0xfa
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d90a      	bls.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010c6:	2206      	movs	r2, #6
 80010c8:	701a      	strb	r2, [r3, #0]
}
 80010ca:	e006      	b.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
		else if(dcf77_int.mode==M77_Error) {
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d102      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x13a>
			dcf77_int.ok=0;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	705a      	strb	r2, [r3, #1]
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000154 	.word	0x20000154
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000194 	.word	0x20000194
 80010f0:	2000002c 	.word	0x2000002c
 80010f4:	00000a8b 	.word	0x00000a8b
 80010f8:	2000006c 	.word	0x2000006c
 80010fc:	20000114 	.word	0x20000114
 8001100:	20000038 	.word	0x20000038
 8001104:	000003e7 	.word	0x000003e7
 8001108:	20000084 	.word	0x20000084
 800110c:	20000034 	.word	0x20000034
 8001110:	200000a0 	.word	0x200000a0
 8001114:	000005dc 	.word	0x000005dc

08001118 <nixie_init>:

void nixie_init()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	//Start DAC for feedback voltage of boost converter
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <nixie_init+0x4c>)
 800111e:	2110      	movs	r1, #16
 8001120:	0018      	movs	r0, r3
 8001122:	f001 f9f6 	bl	8002512 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <nixie_init+0x50>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	480e      	ldr	r0, [pc, #56]	; (8001164 <nixie_init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	2110      	movs	r1, #16
 8001130:	f001 fa3e 	bl	80025b0 <HAL_DAC_SetValue>
	//Start comparator for boost converter
	HAL_COMP_Start(&hcomp2);
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <nixie_init+0x54>)
 8001136:	0018      	movs	r0, r3
 8001138:	f001 f88a 	bl	8002250 <HAL_COMP_Start>
	//Enable one pulse mode for boost converter. Trigger by software trough HAL_TIM_Base_Start
	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_1);
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <nixie_init+0x58>)
 800113e:	2100      	movs	r1, #0
 8001140:	0018      	movs	r0, r3
 8001142:	f002 ff67 	bl	8004014 <HAL_TIM_OnePulse_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <nixie_init+0x58>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <nixie_init+0x58>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
	//Start timer and period elapsed event of multiplex timer for nixie tubes
	HAL_TIM_Base_Start_IT(&htim14);
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <nixie_init+0x5c>)
 8001158:	0018      	movs	r0, r3
 800115a:	f002 feb7 	bl	8003ecc <HAL_TIM_Base_Start_IT>
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000006c 	.word	0x2000006c
 8001168:	2000002c 	.word	0x2000002c
 800116c:	2000003c 	.word	0x2000003c
 8001170:	20000154 	.word	0x20000154
 8001174:	20000194 	.word	0x20000194

08001178 <boost_op>:

void boost_op()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	if(poll_comp)
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <boost_op+0x38>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d010      	beq.n	80011a8 <boost_op+0x30>
	{
		//If voltage lower than feedback, activate next pulse of boost converter and switch off polling the comparator
		if(HAL_COMP_GetOutputLevel(&hcomp2) == COMP_OUTPUT_LEVEL_LOW)
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <boost_op+0x3c>)
 8001188:	0018      	movs	r0, r3
 800118a:	f001 f8b3 	bl	80022f4 <HAL_COMP_GetOutputLevel>
 800118e:	1e03      	subs	r3, r0, #0
 8001190:	d10a      	bne.n	80011a8 <boost_op+0x30>
		{
			poll_comp = false;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <boost_op+0x38>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_ENABLE(&htim2);
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <boost_op+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <boost_op+0x40>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2101      	movs	r1, #1
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000000 	.word	0x20000000
 80011b4:	2000003c 	.word	0x2000003c
 80011b8:	20000154 	.word	0x20000154

080011bc <nixie_display>:
	minutes = m;
	seconds = s;
}

static void nixie_display()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	nixie_display_reset_all();
 80011c0:	f000 f88e 	bl	80012e0 <nixie_display_reset_all>
	switch(digit)
 80011c4:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <nixie_display+0x10c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d01f      	beq.n	800120e <nixie_display+0x52>
 80011ce:	dc02      	bgt.n	80011d6 <nixie_display+0x1a>
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <nixie_display+0x24>
 80011d4:	e05e      	b.n	8001294 <nixie_display+0xd8>
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d030      	beq.n	800123c <nixie_display+0x80>
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d044      	beq.n	8001268 <nixie_display+0xac>
 80011de:	e059      	b.n	8001294 <nixie_display+0xd8>
	{
	case 0:
		nixie_display_set_anode(hours/10);
 80011e0:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <nixie_display+0x110>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	210a      	movs	r1, #10
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7fe ff8b 	bl	8000104 <__udivsi3>
 80011ee:	0003      	movs	r3, r0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 f892 	bl	800131c <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN1_GPIO_Port, GN1_Pin, GPIO_PIN_SET);
 80011f8:	23a0      	movs	r3, #160	; 0xa0
 80011fa:	05db      	lsls	r3, r3, #23
 80011fc:	2201      	movs	r2, #1
 80011fe:	2101      	movs	r1, #1
 8001200:	0018      	movs	r0, r3
 8001202:	f001 fc79 	bl	8002af8 <HAL_GPIO_WritePin>
		digit = 1;
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <nixie_display+0x10c>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
		break;
 800120c:	e042      	b.n	8001294 <nixie_display+0xd8>
	case 1:
		nixie_display_set_anode(hours%10);
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <nixie_display+0x110>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	210a      	movs	r1, #10
 8001216:	0018      	movs	r0, r3
 8001218:	f7fe fffa 	bl	8000210 <__aeabi_uidivmod>
 800121c:	000b      	movs	r3, r1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	0018      	movs	r0, r3
 8001222:	f000 f87b 	bl	800131c <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN2_GPIO_Port, GN2_Pin, GPIO_PIN_SET);
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	2201      	movs	r2, #1
 800122c:	2102      	movs	r1, #2
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fc62 	bl	8002af8 <HAL_GPIO_WritePin>
		digit = 2;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <nixie_display+0x10c>)
 8001236:	2202      	movs	r2, #2
 8001238:	701a      	strb	r2, [r3, #0]
		break;
 800123a:	e02b      	b.n	8001294 <nixie_display+0xd8>
	case 2:
		nixie_display_set_anode(minutes/10);
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <nixie_display+0x114>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	210a      	movs	r1, #10
 8001244:	0018      	movs	r0, r3
 8001246:	f7fe ff5d 	bl	8000104 <__udivsi3>
 800124a:	0003      	movs	r3, r0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	0018      	movs	r0, r3
 8001250:	f000 f864 	bl	800131c <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN3_GPIO_Port, GN3_Pin, GPIO_PIN_SET);
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <nixie_display+0x118>)
 8001256:	2201      	movs	r2, #1
 8001258:	2102      	movs	r1, #2
 800125a:	0018      	movs	r0, r3
 800125c:	f001 fc4c 	bl	8002af8 <HAL_GPIO_WritePin>
		digit = 3;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <nixie_display+0x10c>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
		break;
 8001266:	e015      	b.n	8001294 <nixie_display+0xd8>
	case 3:
		nixie_display_set_anode(minutes%10);
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <nixie_display+0x114>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	210a      	movs	r1, #10
 8001270:	0018      	movs	r0, r3
 8001272:	f7fe ffcd 	bl	8000210 <__aeabi_uidivmod>
 8001276:	000b      	movs	r3, r1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f84e 	bl	800131c <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN4_GPIO_Port, GN4_Pin, GPIO_PIN_SET);
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <nixie_display+0x11c>)
 8001282:	2201      	movs	r2, #1
 8001284:	2120      	movs	r1, #32
 8001286:	0018      	movs	r0, r3
 8001288:	f001 fc36 	bl	8002af8 <HAL_GPIO_WritePin>
		digit = 0;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <nixie_display+0x10c>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
		break;
 8001292:	46c0      	nop			; (mov r8, r8)
	}

	/*TODO: PA4 and PA5 can’t be used in output mode when DAC1_OUT1 or
	DAC1_OUT2 respectively is connected to on-chip peripherals*/
	if(seconds%2)
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <nixie_display+0x120>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2201      	movs	r2, #1
 800129c:	4013      	ands	r3, r2
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d007      	beq.n	80012b4 <nixie_display+0xf8>
	{
		//HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_SET);
		//Workaround: use LL library and use pullup oder -down resistor instaed of output
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLUP);
 80012a4:	23a0      	movs	r3, #160	; 0xa0
 80012a6:	05db      	lsls	r3, r3, #23
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	0018      	movs	r0, r3
 80012ae:	f7ff fe5a 	bl	8000f66 <LL_GPIO_SetPinPull>
	{
		//HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_RESET);
		//Workaround: use LL library and use pullup oder -down resistor instaed of output
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLDOWN);
	}
}
 80012b2:	e006      	b.n	80012c2 <nixie_display+0x106>
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLDOWN);
 80012b4:	23a0      	movs	r3, #160	; 0xa0
 80012b6:	05db      	lsls	r3, r3, #23
 80012b8:	2202      	movs	r2, #2
 80012ba:	2120      	movs	r1, #32
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff fe52 	bl	8000f66 <LL_GPIO_SetPinPull>
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000030 	.word	0x20000030
 80012cc:	20000031 	.word	0x20000031
 80012d0:	20000032 	.word	0x20000032
 80012d4:	50000c00 	.word	0x50000c00
 80012d8:	50000400 	.word	0x50000400
 80012dc:	20000033 	.word	0x20000033

080012e0 <nixie_display_reset_all>:

static void nixie_display_reset_all()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GN1_Pin|GN2_Pin|G1_Pin|G3_Pin, GPIO_PIN_RESET);
 80012e4:	23a0      	movs	r3, #160	; 0xa0
 80012e6:	05db      	lsls	r3, r3, #23
 80012e8:	2200      	movs	r2, #0
 80012ea:	2153      	movs	r1, #83	; 0x53
 80012ec:	0018      	movs	r0, r3
 80012ee:	f001 fc03 	bl	8002af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GN3_Pin|G2_Pin|G4_Pin, GPIO_PIN_RESET);
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <nixie_display_reset_all+0x34>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	210e      	movs	r1, #14
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 fbfd 	bl	8002af8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G5_Pin|G6_Pin|GN4_Pin|G0_Pin|G9_Pin|G8_Pin|G7_Pin, GPIO_PIN_RESET);
 80012fe:	23fe      	movs	r3, #254	; 0xfe
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <nixie_display_reset_all+0x38>)
 8001304:	2200      	movs	r2, #0
 8001306:	0019      	movs	r1, r3
 8001308:	f001 fbf6 	bl	8002af8 <HAL_GPIO_WritePin>
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	50000c00 	.word	0x50000c00
 8001318:	50000400 	.word	0x50000400

0800131c <nixie_display_set_anode>:

static void nixie_display_set_anode(uint8_t n)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	0002      	movs	r2, r0
 8001324:	1dfb      	adds	r3, r7, #7
 8001326:	701a      	strb	r2, [r3, #0]
	switch(n)
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b09      	cmp	r3, #9
 800132e:	d84e      	bhi.n	80013ce <nixie_display_set_anode+0xb2>
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <nixie_display_set_anode+0xbc>)
 8001334:	18d3      	adds	r3, r2, r3
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	469f      	mov	pc, r3
	{
	case 0:
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <nixie_display_set_anode+0xc0>)
 800133c:	2201      	movs	r2, #1
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	0018      	movs	r0, r3
 8001342:	f001 fbd9 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 8001346:	e042      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 1:
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8001348:	23a0      	movs	r3, #160	; 0xa0
 800134a:	05db      	lsls	r3, r3, #23
 800134c:	2201      	movs	r2, #1
 800134e:	2110      	movs	r1, #16
 8001350:	0018      	movs	r0, r3
 8001352:	f001 fbd1 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 8001356:	e03a      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 2:
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <nixie_display_set_anode+0xc4>)
 800135a:	2201      	movs	r2, #1
 800135c:	2104      	movs	r1, #4
 800135e:	0018      	movs	r0, r3
 8001360:	f001 fbca 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 8001364:	e033      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 3:
		HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_SET);
 8001366:	23a0      	movs	r3, #160	; 0xa0
 8001368:	05db      	lsls	r3, r3, #23
 800136a:	2201      	movs	r2, #1
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	0018      	movs	r0, r3
 8001370:	f001 fbc2 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 8001374:	e02b      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 4:
		HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_SET);
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <nixie_display_set_anode+0xc4>)
 8001378:	2201      	movs	r2, #1
 800137a:	2108      	movs	r1, #8
 800137c:	0018      	movs	r0, r3
 800137e:	f001 fbbb 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 8001382:	e024      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 5:
		HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_SET);
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <nixie_display_set_anode+0xc0>)
 8001386:	2201      	movs	r2, #1
 8001388:	2108      	movs	r1, #8
 800138a:	0018      	movs	r0, r3
 800138c:	f001 fbb4 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 8001390:	e01d      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 6:
		HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_SET);
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <nixie_display_set_anode+0xc0>)
 8001394:	2201      	movs	r2, #1
 8001396:	2110      	movs	r1, #16
 8001398:	0018      	movs	r0, r3
 800139a:	f001 fbad 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 800139e:	e016      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 7:
		HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_SET);
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <nixie_display_set_anode+0xc0>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	0019      	movs	r1, r3
 80013aa:	f001 fba5 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 80013ae:	e00e      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 8:
		HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_SET);
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <nixie_display_set_anode+0xc0>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	0019      	movs	r1, r3
 80013ba:	f001 fb9d 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 80013be:	e006      	b.n	80013ce <nixie_display_set_anode+0xb2>
	case 9:
		HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_SET);
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <nixie_display_set_anode+0xc0>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 fb96 	bl	8002af8 <HAL_GPIO_WritePin>
		break;
 80013cc:	46c0      	nop			; (mov r8, r8)
	}
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b002      	add	sp, #8
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	080056cc 	.word	0x080056cc
 80013dc:	50000400 	.word	0x50000400
 80013e0:	50000c00 	.word	0x50000c00

080013e4 <MY_OWN_MX_RTC_Init>:
#include "rtc.h"

/* USER CODE BEGIN 0 */
/* Own RTC init function */
void MY_OWN_MX_RTC_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
  RTC_AlarmTypeDef sAlarm = {0};
 80013ea:	003b      	movs	r3, r7
 80013ec:	0018      	movs	r0, r3
 80013ee:	2328      	movs	r3, #40	; 0x28
 80013f0:	001a      	movs	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	f004 f956 	bl	80056a4 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 80013fa:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <MY_OWN_MX_RTC_Init+0xc8>)
 80013fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001404:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 8001406:	227f      	movs	r2, #127	; 0x7f
 8001408:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 800140c:	22ff      	movs	r2, #255	; 0xff
 800140e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800141c:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	05d2      	lsls	r2, r2, #23
 8001428:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 8001432:	0018      	movs	r0, r3
 8001434:	f002 fa20 	bl	8003878 <HAL_RTC_Init>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d001      	beq.n	8001440 <MY_OWN_MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800143c:	f7ff fd8e 	bl	8000f5c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001440:	003b      	movs	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001446:	003b      	movs	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800144c:	003b      	movs	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001452:	003b      	movs	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001458:	003b      	movs	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_SET;
 800145e:	003b      	movs	r3, r7
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	02d2      	lsls	r2, r2, #11
 8001464:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001466:	003b      	movs	r3, r7
 8001468:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <MY_OWN_MX_RTC_Init+0xcc>)
 800146a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800146c:	003b      	movs	r3, r7
 800146e:	22f0      	movs	r2, #240	; 0xf0
 8001470:	0512      	lsls	r2, r2, #20
 8001472:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001474:	003b      	movs	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800147a:	003b      	movs	r3, r7
 800147c:	2220      	movs	r2, #32
 800147e:	2101      	movs	r1, #1
 8001480:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001482:	003b      	movs	r3, r7
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	0052      	lsls	r2, r2, #1
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800148a:	0039      	movs	r1, r7
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MY_OWN_MX_RTC_Init+0xc4>)
 800148e:	2200      	movs	r2, #0
 8001490:	0018      	movs	r0, r3
 8001492:	f002 fa87 	bl	80039a4 <HAL_RTC_SetAlarm_IT>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d001      	beq.n	800149e <MY_OWN_MX_RTC_Init+0xba>
  {
    Error_Handler();
 800149a:	f7ff fd5f 	bl	8000f5c <Error_Handler>
  }

}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b00a      	add	sp, #40	; 0x28
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	200000a8 	.word	0x200000a8
 80014ac:	40002800 	.word	0x40002800
 80014b0:	80808080 	.word	0x80808080

080014b4 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_RTC_MspInit+0x54>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d11c      	bne.n	8001500 <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_RTC_MspInit+0x58>)
 80014c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_RTC_MspInit+0x58>)
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0209      	lsls	r1, r1, #8
 80014d0:	430a      	orrs	r2, r1
 80014d2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_RTC_MspInit+0x58>)
 80014d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_RTC_MspInit+0x58>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	00c9      	lsls	r1, r1, #3
 80014de:	430a      	orrs	r2, r1
 80014e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <HAL_RTC_MspInit+0x58>)
 80014e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4013      	ands	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	2002      	movs	r0, #2
 80014f6:	f000 ffb7 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80014fa:	2002      	movs	r0, #2
 80014fc:	f000 ffc9 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b004      	add	sp, #16
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40002800 	.word	0x40002800
 800150c:	40021000 	.word	0x40021000

08001510 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <LL_SYSCFG_DisableDBATT+0x1c>)
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <LL_SYSCFG_DisableDBATT+0x1c>)
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40010000 	.word	0x40010000

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <HAL_MspInit+0x58>)
 8001538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_MspInit+0x58>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_MspInit+0x58>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_MspInit+0x58>)
 8001550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_MspInit+0x58>)
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	0549      	lsls	r1, r1, #21
 8001558:	430a      	orrs	r2, r1
 800155a:	63da      	str	r2, [r3, #60]	; 0x3c
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_MspInit+0x58>)
 800155e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	055b      	lsls	r3, r3, #21
 8001564:	4013      	ands	r3, r2
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_DisableVREFBUF();
 800156a:	f000 fc57 	bl	8001e1c <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 800156e:	2002      	movs	r0, #2
 8001570:	f000 fc40 	bl	8001df4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8001574:	23c0      	movs	r3, #192	; 0xc0
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ffc9 	bl	8001510 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40021000 	.word	0x40021000

0800158c <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4013      	ands	r3, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d101      	bne.n	80015a6 <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021800 	.word	0x40021800

080015b4 <LL_EXTI_ClearFallingFlag_0_31>:
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	611a      	str	r2, [r3, #16]
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40021800 	.word	0x40021800

080015d0 <LL_EXTI_IsActiveRisingFlag_0_31>:
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <LL_EXTI_IsActiveRisingFlag_0_31+0x24>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d101      	bne.n	80015ea <LL_EXTI_IsActiveRisingFlag_0_31+0x1a>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <LL_EXTI_IsActiveRisingFlag_0_31+0x1c>
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021800 	.word	0x40021800

080015f8 <LL_EXTI_ClearRisingFlag_0_31>:
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	60da      	str	r2, [r3, #12]
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40021800 	.word	0x40021800

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163c:	f000 fb9e 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <RTC_TAMP_IRQHandler+0x14>)
 800164e:	0018      	movs	r0, r3
 8001650:	f002 fae8 	bl	8003c24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8001654:	46c0      	nop			; (mov r8, r8)
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	200000a8 	.word	0x200000a8

08001660 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001664:	2004      	movs	r0, #4
 8001666:	f7ff ff91 	bl	800158c <LL_EXTI_IsActiveFallingFlag_0_31>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d002      	beq.n	8001674 <EXTI2_3_IRQHandler+0x14>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_2);
 800166e:	2004      	movs	r0, #4
 8001670:	f7ff ffa0 	bl	80015b4 <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_2_FALLING */
    
    /* USER CODE END LL_EXTI_LINE_2_FALLING */
  }
  if (LL_EXTI_IsActiveRisingFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001674:	2004      	movs	r0, #4
 8001676:	f7ff ffab 	bl	80015d0 <LL_EXTI_IsActiveRisingFlag_0_31>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d002      	beq.n	8001684 <EXTI2_3_IRQHandler+0x24>
  {
    LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_2);
 800167e:	2004      	movs	r0, #4
 8001680:	f7ff ffba 	bl	80015f8 <LL_EXTI_ClearRisingFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2_RISING */
  }
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001692:	0018      	movs	r0, r3
 8001694:	f002 fd00 	bl	8004098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	20000114 	.word	0x20000114

080016a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <TIM2_IRQHandler+0x14>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f002 fcf4 	bl	8004098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	20000154 	.word	0x20000154

080016bc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <TIM14_IRQHandler+0x14>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f002 fce8 	bl	8004098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	20000194 	.word	0x20000194

080016d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <SystemInit+0x14>)
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	0512      	lsls	r2, r2, #20
 80016de:	609a      	str	r2, [r3, #8]
#endif
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b094      	sub	sp, #80	; 0x50
 80016f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	2340      	movs	r3, #64	; 0x40
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	0018      	movs	r0, r3
 80016f8:	2310      	movs	r3, #16
 80016fa:	001a      	movs	r2, r3
 80016fc:	2100      	movs	r1, #0
 80016fe:	f003 ffd1 	bl	80056a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001702:	2334      	movs	r3, #52	; 0x34
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	0018      	movs	r0, r3
 8001708:	230c      	movs	r3, #12
 800170a:	001a      	movs	r2, r3
 800170c:	2100      	movs	r1, #0
 800170e:	f003 ffc9 	bl	80056a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001712:	003b      	movs	r3, r7
 8001714:	0018      	movs	r0, r3
 8001716:	2334      	movs	r3, #52	; 0x34
 8001718:	001a      	movs	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	f003 ffc2 	bl	80056a4 <memset>

  htim1.Instance = TIM1;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <MX_TIM1_Init+0xdc>)
 8001722:	4a2a      	ldr	r2, [pc, #168]	; (80017cc <MX_TIM1_Init+0xe0>)
 8001724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <MX_TIM1_Init+0xdc>)
 8001728:	223f      	movs	r2, #63	; 0x3f
 800172a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <MX_TIM1_Init+0xdc>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_TIM1_Init+0xdc>)
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <MX_TIM1_Init+0xe4>)
 8001736:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <MX_TIM1_Init+0xdc>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_TIM1_Init+0xdc>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_TIM1_Init+0xdc>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_TIM1_Init+0xdc>)
 800174c:	0018      	movs	r0, r3
 800174e:	f002 fb90 	bl	8003e72 <HAL_TIM_Base_Init>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001756:	f7ff fc01 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175a:	2140      	movs	r1, #64	; 0x40
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0152      	lsls	r2, r2, #5
 8001762:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001764:	187a      	adds	r2, r7, r1
 8001766:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM1_Init+0xdc>)
 8001768:	0011      	movs	r1, r2
 800176a:	0018      	movs	r0, r3
 800176c:	f002 fec4 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001774:	f7ff fbf2 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001778:	2134      	movs	r1, #52	; 0x34
 800177a:	187b      	adds	r3, r7, r1
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001780:	187b      	adds	r3, r7, r1
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178c:	187a      	adds	r2, r7, r1
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_TIM1_Init+0xdc>)
 8001790:	0011      	movs	r1, r2
 8001792:	0018      	movs	r0, r3
 8001794:	f003 fb94 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800179c:	f7ff fbde 	bl	8000f5c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017a0:	003b      	movs	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017a6:	003b      	movs	r3, r7
 80017a8:	2200      	movs	r2, #0
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017ac:	003a      	movs	r2, r7
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_TIM1_Init+0xdc>)
 80017b0:	0011      	movs	r1, r2
 80017b2:	0018      	movs	r0, r3
 80017b4:	f003 fbda 	bl	8004f6c <HAL_TIMEx_ConfigBreakDeadTime>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80017bc:	f7ff fbce 	bl	8000f5c <Error_Handler>
  }

}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b014      	add	sp, #80	; 0x50
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000114 	.word	0x20000114
 80017cc:	40012c00 	.word	0x40012c00
 80017d0:	000003e7 	.word	0x000003e7

080017d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	; 0x38
 80017d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017da:	2328      	movs	r3, #40	; 0x28
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	0018      	movs	r0, r3
 80017e0:	2310      	movs	r3, #16
 80017e2:	001a      	movs	r2, r3
 80017e4:	2100      	movs	r1, #0
 80017e6:	f003 ff5d 	bl	80056a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	231c      	movs	r3, #28
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	0018      	movs	r0, r3
 80017f0:	230c      	movs	r3, #12
 80017f2:	001a      	movs	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	f003 ff55 	bl	80056a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fa:	003b      	movs	r3, r7
 80017fc:	0018      	movs	r0, r3
 80017fe:	231c      	movs	r3, #28
 8001800:	001a      	movs	r2, r3
 8001802:	2100      	movs	r1, #0
 8001804:	f003 ff4e 	bl	80056a4 <memset>

  htim2.Instance = TIM2;
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <MX_TIM2_Init+0x108>)
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	05d2      	lsls	r2, r2, #23
 800180e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <MX_TIM2_Init+0x108>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <MX_TIM2_Init+0x108>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 224;
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <MX_TIM2_Init+0x108>)
 800181e:	22e0      	movs	r2, #224	; 0xe0
 8001820:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <MX_TIM2_Init+0x108>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001828:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <MX_TIM2_Init+0x108>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <MX_TIM2_Init+0x108>)
 8001830:	0018      	movs	r0, r3
 8001832:	f002 fb1e 	bl	8003e72 <HAL_TIM_Base_Init>
 8001836:	1e03      	subs	r3, r0, #0
 8001838:	d001      	beq.n	800183e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800183a:	f7ff fb8f 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183e:	2128      	movs	r1, #40	; 0x28
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	0152      	lsls	r2, r2, #5
 8001846:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001848:	187a      	adds	r2, r7, r1
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <MX_TIM2_Init+0x108>)
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f002 fe52 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 8001854:	1e03      	subs	r3, r0, #0
 8001856:	d001      	beq.n	800185c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001858:	f7ff fb80 	bl	8000f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MX_TIM2_Init+0x108>)
 800185e:	0018      	movs	r0, r3
 8001860:	f002 fb5e 	bl	8003f20 <HAL_TIM_PWM_Init>
 8001864:	1e03      	subs	r3, r0, #0
 8001866:	d001      	beq.n	800186c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001868:	f7ff fb78 	bl	8000f5c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_TIM2_Init+0x108>)
 800186e:	2108      	movs	r1, #8
 8001870:	0018      	movs	r0, r3
 8001872:	f002 fb89 	bl	8003f88 <HAL_TIM_OnePulse_Init>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800187a:	f7ff fb6f 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	211c      	movs	r1, #28
 8001880:	187b      	adds	r3, r7, r1
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	187b      	adds	r3, r7, r1
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188c:	187a      	adds	r2, r7, r1
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_TIM2_Init+0x108>)
 8001890:	0011      	movs	r1, r2
 8001892:	0018      	movs	r0, r3
 8001894:	f003 fb14 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	1e03      	subs	r3, r0, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800189c:	f7ff fb5e 	bl	8000f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80018a0:	003b      	movs	r3, r7
 80018a2:	2270      	movs	r2, #112	; 0x70
 80018a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 80018a6:	003b      	movs	r3, r7
 80018a8:	2201      	movs	r2, #1
 80018aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ac:	003b      	movs	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80018b2:	003b      	movs	r3, r7
 80018b4:	2204      	movs	r2, #4
 80018b6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b8:	0039      	movs	r1, r7
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_TIM2_Init+0x108>)
 80018bc:	2200      	movs	r2, #0
 80018be:	0018      	movs	r0, r3
 80018c0:	f002 fd1c 	bl	80042fc <HAL_TIM_PWM_ConfigChannel>
 80018c4:	1e03      	subs	r3, r0, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80018c8:	f7ff fb48 	bl	8000f5c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <MX_TIM2_Init+0x108>)
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 f958 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b00e      	add	sp, #56	; 0x38
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000154 	.word	0x20000154

080018e0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_TIM14_Init+0x40>)
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <MX_TIM14_Init+0x44>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <MX_TIM14_Init+0x40>)
 80018ec:	223f      	movs	r2, #63	; 0x3f
 80018ee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_TIM14_Init+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_TIM14_Init+0x40>)
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <MX_TIM14_Init+0x48>)
 80018fa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_TIM14_Init+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_TIM14_Init+0x40>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <MX_TIM14_Init+0x40>)
 800190a:	0018      	movs	r0, r3
 800190c:	f002 fab1 	bl	8003e72 <HAL_TIM_Base_Init>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001914:	f7ff fb22 	bl	8000f5c <Error_Handler>
  }

}
 8001918:	46c0      	nop			; (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	20000194 	.word	0x20000194
 8001924:	40002000 	.word	0x40002000
 8001928:	00001388 	.word	0x00001388

0800192c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b09c      	sub	sp, #112	; 0x70
 8001930:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	2360      	movs	r3, #96	; 0x60
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	0018      	movs	r0, r3
 8001938:	2310      	movs	r3, #16
 800193a:	001a      	movs	r2, r3
 800193c:	2100      	movs	r1, #0
 800193e:	f003 feb1 	bl	80056a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001942:	2354      	movs	r3, #84	; 0x54
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	0018      	movs	r0, r3
 8001948:	230c      	movs	r3, #12
 800194a:	001a      	movs	r2, r3
 800194c:	2100      	movs	r1, #0
 800194e:	f003 fea9 	bl	80056a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001952:	2338      	movs	r3, #56	; 0x38
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	0018      	movs	r0, r3
 8001958:	231c      	movs	r3, #28
 800195a:	001a      	movs	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	f003 fea1 	bl	80056a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	0018      	movs	r0, r3
 8001966:	2334      	movs	r3, #52	; 0x34
 8001968:	001a      	movs	r2, r3
 800196a:	2100      	movs	r1, #0
 800196c:	f003 fe9a 	bl	80056a4 <memset>

  htim15.Instance = TIM15;
 8001970:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <MX_TIM15_Init+0x164>)
 8001972:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <MX_TIM15_Init+0x168>)
 8001974:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8001976:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <MX_TIM15_Init+0x164>)
 8001978:	223f      	movs	r2, #63	; 0x3f
 800197a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <MX_TIM15_Init+0x164>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 249;
 8001982:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <MX_TIM15_Init+0x164>)
 8001984:	22f9      	movs	r2, #249	; 0xf9
 8001986:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001988:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <MX_TIM15_Init+0x164>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800198e:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <MX_TIM15_Init+0x164>)
 8001990:	2200      	movs	r2, #0
 8001992:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <MX_TIM15_Init+0x164>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <MX_TIM15_Init+0x164>)
 800199c:	0018      	movs	r0, r3
 800199e:	f002 fa68 	bl	8003e72 <HAL_TIM_Base_Init>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80019a6:	f7ff fad9 	bl	8000f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	2160      	movs	r1, #96	; 0x60
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	0152      	lsls	r2, r2, #5
 80019b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019b4:	187a      	adds	r2, r7, r1
 80019b6:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <MX_TIM15_Init+0x164>)
 80019b8:	0011      	movs	r1, r2
 80019ba:	0018      	movs	r0, r3
 80019bc:	f002 fd9c 	bl	80044f8 <HAL_TIM_ConfigClockSource>
 80019c0:	1e03      	subs	r3, r0, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80019c4:	f7ff faca 	bl	8000f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <MX_TIM15_Init+0x164>)
 80019ca:	0018      	movs	r0, r3
 80019cc:	f002 faa8 	bl	8003f20 <HAL_TIM_PWM_Init>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80019d4:	f7ff fac2 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d8:	2154      	movs	r1, #84	; 0x54
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80019e6:	187a      	adds	r2, r7, r1
 80019e8:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <MX_TIM15_Init+0x164>)
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f003 fa67 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80019f6:	f7ff fab1 	bl	8000f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2138      	movs	r1, #56	; 0x38
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2260      	movs	r2, #96	; 0x60
 8001a00:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 124;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	227c      	movs	r2, #124	; 0x7c
 8001a06:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a26:	1879      	adds	r1, r7, r1
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MX_TIM15_Init+0x164>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f002 fc65 	bl	80042fc <HAL_TIM_PWM_ConfigChannel>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001a36:	f7ff fa91 	bl	8000f5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2280      	movs	r2, #128	; 0x80
 8001a5c:	0192      	lsls	r2, r2, #6
 8001a5e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a6c:	1d3a      	adds	r2, r7, #4
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MX_TIM15_Init+0x164>)
 8001a70:	0011      	movs	r1, r2
 8001a72:	0018      	movs	r0, r3
 8001a74:	f003 fa7a 	bl	8004f6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a78:	1e03      	subs	r3, r0, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8001a7c:	f7ff fa6e 	bl	8000f5c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <MX_TIM15_Init+0x164>)
 8001a82:	0018      	movs	r0, r3
 8001a84:	f000 f87e 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b01c      	add	sp, #112	; 0x70
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200000d4 	.word	0x200000d4
 8001a94:	40014000 	.word	0x40014000

08001a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a33      	ldr	r2, [pc, #204]	; (8001b74 <HAL_TIM_Base_MspInit+0xdc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d116      	bne.n	8001ad8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aaa:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0109      	lsls	r1, r1, #4
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	200d      	movs	r0, #13
 8001acc:	f000 fccc 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001ad0:	200d      	movs	r0, #13
 8001ad2:	f000 fcde 	bl	8002492 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8001ad6:	e049      	b.n	8001b6c <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	05db      	lsls	r3, r3, #23
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d114      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	200f      	movs	r0, #15
 8001b02:	f000 fcb1 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 fcc3 	bl	8002492 <HAL_NVIC_EnableIRQ>
}
 8001b0c:	e02e      	b.n	8001b6c <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM14)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_TIM_Base_MspInit+0xe4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d116      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	0209      	lsls	r1, r1, #8
 8001b22:	430a      	orrs	r2, r1
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2013      	movs	r0, #19
 8001b3a:	f000 fc95 	bl	8002468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001b3e:	2013      	movs	r0, #19
 8001b40:	f000 fca7 	bl	8002492 <HAL_NVIC_EnableIRQ>
}
 8001b44:	e012      	b.n	8001b6c <HAL_TIM_Base_MspInit+0xd4>
  else if(tim_baseHandle->Instance==TIM15)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_TIM_Base_MspInit+0xe8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10d      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0249      	lsls	r1, r1, #9
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_TIM_Base_MspInit+0xe0>)
 8001b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	025b      	lsls	r3, r3, #9
 8001b66:	4013      	ands	r3, r2
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b006      	add	sp, #24
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40012c00 	.word	0x40012c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40002000 	.word	0x40002000
 8001b80:	40014000 	.word	0x40014000

08001b84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	2314      	movs	r3, #20
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	0018      	movs	r0, r3
 8001b92:	2314      	movs	r3, #20
 8001b94:	001a      	movs	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	f003 fd84 	bl	80056a4 <memset>
  if(timHandle->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	05db      	lsls	r3, r3, #23
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d124      	bne.n	8001bf2 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_TIM_MspPostInit+0xc8>)
 8001baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_TIM_MspPostInit+0xc8>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_TIM_MspPostInit+0xc8>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bc0:	2114      	movs	r1, #20
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0212      	lsls	r2, r2, #8
 8001bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2202      	movs	r2, #2
 8001bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2201      	movs	r2, #1
 8001bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2202      	movs	r2, #2
 8001be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be2:	187a      	adds	r2, r7, r1
 8001be4:	23a0      	movs	r3, #160	; 0xa0
 8001be6:	05db      	lsls	r3, r3, #23
 8001be8:	0011      	movs	r1, r2
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 fe20 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001bf0:	e027      	b.n	8001c42 <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM15)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_TIM_MspPostInit+0xcc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d122      	bne.n	8001c42 <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_TIM_MspPostInit+0xc8>)
 8001bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_TIM_MspPostInit+0xc8>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	430a      	orrs	r2, r1
 8001c06:	635a      	str	r2, [r3, #52]	; 0x34
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_TIM_MspPostInit+0xc8>)
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c14:	2114      	movs	r1, #20
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2204      	movs	r2, #4
 8001c1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2202      	movs	r2, #2
 8001c20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2202      	movs	r2, #2
 8001c26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2205      	movs	r2, #5
 8001c32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	187a      	adds	r2, r7, r1
 8001c36:	23a0      	movs	r3, #160	; 0xa0
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 fdf7 	bl	8002830 <HAL_GPIO_Init>
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b00a      	add	sp, #40	; 0x28
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40014000 	.word	0x40014000

08001c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c5a:	e003      	b.n	8001c64 <LoopCopyDataInit>

08001c5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001c5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c62:	3104      	adds	r1, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <LoopForever+0xa>)
  ldr r3, =_edata
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <LoopForever+0xe>)
  adds r2, r0, r1
 8001c68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c6c:	d3f6      	bcc.n	8001c5c <CopyDataInit>
  ldr r2, =_sbss
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <LoopForever+0x12>)
  b LoopFillZerobss
 8001c70:	e002      	b.n	8001c78 <LoopFillZerobss>

08001c72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  str  r3, [r2]
 8001c74:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c76:	3204      	adds	r2, #4

08001c78 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <LoopForever+0x16>)
  cmp r2, r3
 8001c7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c7c:	d3f9      	bcc.n	8001c72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c7e:	f7ff fd29 	bl	80016d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001c82:	f003 fceb 	bl	800565c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c86:	f7ff f8c1 	bl	8000e0c <main>

08001c8a <LoopForever>:

LoopForever:
    b LoopForever
 8001c8a:	e7fe      	b.n	8001c8a <LoopForever>
  ldr   r0, =_estack
 8001c8c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001c90:	08005790 	.word	0x08005790
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c98:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001c9c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001ca0:	200001d8 	.word	0x200001d8

08001ca4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC1_COMP_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_Init+0x3c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_Init+0x3c>)
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	0049      	lsls	r1, r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f810 	bl	8001ce8 <HAL_InitTick>
 8001cc8:	1e03      	subs	r3, r0, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e001      	b.n	8001cd8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff fc2c 	bl	8001530 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	781b      	ldrb	r3, [r3, #0]
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	18fb      	adds	r3, r7, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_InitTick+0x88>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d02b      	beq.n	8001d58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <HAL_InitTick+0x8c>)
 8001d02:	681c      	ldr	r4, [r3, #0]
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <HAL_InitTick+0x88>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0019      	movs	r1, r3
 8001d0a:	23fa      	movs	r3, #250	; 0xfa
 8001d0c:	0098      	lsls	r0, r3, #2
 8001d0e:	f7fe f9f9 	bl	8000104 <__udivsi3>
 8001d12:	0003      	movs	r3, r0
 8001d14:	0019      	movs	r1, r3
 8001d16:	0020      	movs	r0, r4
 8001d18:	f7fe f9f4 	bl	8000104 <__udivsi3>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 fbc7 	bl	80024b2 <HAL_SYSTICK_Config>
 8001d24:	1e03      	subs	r3, r0, #0
 8001d26:	d112      	bne.n	8001d4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d80a      	bhi.n	8001d44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	2301      	movs	r3, #1
 8001d32:	425b      	negs	r3, r3
 8001d34:	2200      	movs	r2, #0
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 fb96 	bl	8002468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_InitTick+0x90>)
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e00d      	b.n	8001d60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d44:	230f      	movs	r3, #15
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e008      	b.n	8001d60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d4e:	230f      	movs	r3, #15
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e003      	b.n	8001d60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d60:	230f      	movs	r3, #15
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	781b      	ldrb	r3, [r3, #0]
}
 8001d66:	0018      	movs	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b005      	add	sp, #20
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	2000000c 	.word	0x2000000c
 8001d74:	20000004 	.word	0x20000004
 8001d78:	20000008 	.word	0x20000008

08001d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <HAL_IncTick+0x18>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_IncTick+0x1c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	18d2      	adds	r2, r2, r3
 8001d8a:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <HAL_IncTick+0x18>)
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200001d4 	.word	0x200001d4
 8001d98:	2000000c 	.word	0x2000000c

08001d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <HAL_GetTick+0x10>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	200001d4 	.word	0x200001d4

08001db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	d004      	beq.n	8001dd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_Delay+0x40>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	18d3      	adds	r3, r2, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	f7ff ffe1 	bl	8001d9c <HAL_GetTick>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d8f7      	bhi.n	8001dd6 <HAL_Delay+0x26>
  {
  }
}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	46bd      	mov	sp, r7
 8001dea:	b004      	add	sp, #16
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	2000000c 	.word	0x2000000c

08001df4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2202      	movs	r2, #2
 8001e02:	4393      	bics	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	40010030 	.word	0x40010030

08001e1c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	438a      	bics	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	40010030 	.word	0x40010030

08001e38 <LL_EXTI_EnableIT_0_31>:
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001e40:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <LL_EXTI_EnableIT_0_31+0x20>)
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	58d2      	ldr	r2, [r2, r3]
 8001e46:	4904      	ldr	r1, [pc, #16]	; (8001e58 <LL_EXTI_EnableIT_0_31+0x20>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	508b      	str	r3, [r1, r2]
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b002      	add	sp, #8
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021800 	.word	0x40021800

08001e5c <LL_EXTI_DisableIT_0_31>:
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <LL_EXTI_DisableIT_0_31+0x24>)
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	58d3      	ldr	r3, [r2, r3]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	43d2      	mvns	r2, r2
 8001e6e:	4904      	ldr	r1, [pc, #16]	; (8001e80 <LL_EXTI_DisableIT_0_31+0x24>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	508b      	str	r3, [r1, r2]
}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b002      	add	sp, #8
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40021800 	.word	0x40021800

08001e84 <LL_EXTI_EnableEvent_0_31>:
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001e8c:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001e8e:	2384      	movs	r3, #132	; 0x84
 8001e90:	58d2      	ldr	r2, [r2, r3]
 8001e92:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	2284      	movs	r2, #132	; 0x84
 8001e9a:	508b      	str	r3, [r1, r2]
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021800 	.word	0x40021800

08001ea8 <LL_EXTI_DisableEvent_0_31>:
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <LL_EXTI_DisableEvent_0_31+0x24>)
 8001eb2:	2384      	movs	r3, #132	; 0x84
 8001eb4:	58d3      	ldr	r3, [r2, r3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	43d2      	mvns	r2, r2
 8001eba:	4904      	ldr	r1, [pc, #16]	; (8001ecc <LL_EXTI_DisableEvent_0_31+0x24>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2284      	movs	r2, #132	; 0x84
 8001ec0:	508b      	str	r3, [r1, r2]
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	40021800 	.word	0x40021800

08001ed0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021800 	.word	0x40021800

08001ef0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b002      	add	sp, #8
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021800 	.word	0x40021800

08001f14 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	605a      	str	r2, [r3, #4]
}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021800 	.word	0x40021800

08001f34 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40021800 	.word	0x40021800

08001f58 <LL_EXTI_ClearFallingFlag_0_31>:
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
}
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b002      	add	sp, #8
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	40021800 	.word	0x40021800

08001f74 <LL_EXTI_ClearRisingFlag_0_31>:
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	60da      	str	r2, [r3, #12]
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	b002      	add	sp, #8
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	40021800 	.word	0x40021800

08001f90 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	231f      	movs	r3, #31
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 8001faa:	231f      	movs	r3, #31
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	e13a      	b.n	800222a <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0fdb      	lsrs	r3, r3, #31
 8001fbc:	07da      	lsls	r2, r3, #31
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	061b      	lsls	r3, r3, #24
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d104      	bne.n	8001fd0 <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8001fc6:	231f      	movs	r3, #31
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e12c      	b.n	800222a <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2229      	movs	r2, #41	; 0x29
 8001fd4:	5c9b      	ldrb	r3, [r3, r2]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2228      	movs	r2, #40	; 0x28
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7fe f945 	bl	800027c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2230      	movs	r2, #48	; 0x30
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a83      	ldr	r2, [pc, #524]	; (8002238 <HAL_COMP_Init+0x2a8>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	429a      	cmp	r2, r3
 8002042:	d10d      	bne.n	8002060 <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002044:	4b7d      	ldr	r3, [pc, #500]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b7c      	ldr	r3, [pc, #496]	; (800223c <HAL_COMP_Init+0x2ac>)
 800204a:	497d      	ldr	r1, [pc, #500]	; (8002240 <HAL_COMP_Init+0x2b0>)
 800204c:	400a      	ands	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002050:	4b7a      	ldr	r3, [pc, #488]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4b79      	ldr	r3, [pc, #484]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	0109      	lsls	r1, r1, #4
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	e01f      	b.n	80020a0 <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	23c0      	movs	r3, #192	; 0xc0
 8002066:	015b      	lsls	r3, r3, #5
 8002068:	429a      	cmp	r2, r3
 800206a:	d10d      	bne.n	8002088 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800206c:	4b73      	ldr	r3, [pc, #460]	; (800223c <HAL_COMP_Init+0x2ac>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b72      	ldr	r3, [pc, #456]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	0109      	lsls	r1, r1, #4
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800207a:	4b70      	ldr	r3, [pc, #448]	; (800223c <HAL_COMP_Init+0x2ac>)
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4b6f      	ldr	r3, [pc, #444]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002080:	496f      	ldr	r1, [pc, #444]	; (8002240 <HAL_COMP_Init+0x2b0>)
 8002082:	400a      	ands	r2, r1
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	e00b      	b.n	80020a0 <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002088:	4b6c      	ldr	r3, [pc, #432]	; (800223c <HAL_COMP_Init+0x2ac>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <HAL_COMP_Init+0x2ac>)
 800208e:	496c      	ldr	r1, [pc, #432]	; (8002240 <HAL_COMP_Init+0x2b0>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002094:	4b69      	ldr	r3, [pc, #420]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <HAL_COMP_Init+0x2ac>)
 800209a:	4969      	ldr	r1, [pc, #420]	; (8002240 <HAL_COMP_Init+0x2b0>)
 800209c:	400a      	ands	r2, r1
 800209e:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	01d2      	lsls	r2, r2, #7
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d006      	beq.n	80020ba <HAL_COMP_Init+0x12a>
 80020ac:	22a0      	movs	r2, #160	; 0xa0
 80020ae:	01d2      	lsls	r2, r2, #7
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d010      	beq.n	80020d6 <HAL_COMP_Init+0x146>
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d01c      	beq.n	80020f2 <HAL_COMP_Init+0x162>
 80020b8:	e02a      	b.n	8002110 <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80020ba:	4b60      	ldr	r3, [pc, #384]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	01c9      	lsls	r1, r1, #7
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80020c8:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4b5b      	ldr	r3, [pc, #364]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020ce:	495d      	ldr	r1, [pc, #372]	; (8002244 <HAL_COMP_Init+0x2b4>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
        break;
 80020d4:	e029      	b.n	800212a <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80020d6:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b58      	ldr	r3, [pc, #352]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020dc:	4959      	ldr	r1, [pc, #356]	; (8002244 <HAL_COMP_Init+0x2b4>)
 80020de:	400a      	ands	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80020e2:	4b56      	ldr	r3, [pc, #344]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4b55      	ldr	r3, [pc, #340]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	01c9      	lsls	r1, r1, #7
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
        break;
 80020f0:	e01b      	b.n	800212a <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80020f2:	4b52      	ldr	r3, [pc, #328]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <HAL_COMP_Init+0x2ac>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	01c9      	lsls	r1, r1, #7
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002100:	4b4e      	ldr	r3, [pc, #312]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4b4d      	ldr	r3, [pc, #308]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002106:	2180      	movs	r1, #128	; 0x80
 8002108:	01c9      	lsls	r1, r1, #7
 800210a:	430a      	orrs	r2, r1
 800210c:	605a      	str	r2, [r3, #4]
        break;
 800210e:	e00c      	b.n	800212a <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002110:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b49      	ldr	r3, [pc, #292]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002116:	494b      	ldr	r1, [pc, #300]	; (8002244 <HAL_COMP_Init+0x2b4>)
 8002118:	400a      	ands	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800211c:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_COMP_Init+0x2ac>)
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_COMP_Init+0x2ac>)
 8002122:	4948      	ldr	r1, [pc, #288]	; (8002244 <HAL_COMP_Init+0x2b4>)
 8002124:	400a      	ands	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
        break;
 8002128:	46c0      	nop			; (mov r8, r8)
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2230      	movs	r2, #48	; 0x30
 8002132:	4013      	ands	r3, r2
 8002134:	d016      	beq.n	8002164 <HAL_COMP_Init+0x1d4>
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d113      	bne.n	8002164 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800213c:	4b42      	ldr	r3, [pc, #264]	; (8002248 <HAL_COMP_Init+0x2b8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4942      	ldr	r1, [pc, #264]	; (800224c <HAL_COMP_Init+0x2bc>)
 8002142:	0018      	movs	r0, r3
 8002144:	f7fd ffde 	bl	8000104 <__udivsi3>
 8002148:	0003      	movs	r3, r0
 800214a:	001a      	movs	r2, r3
 800214c:	0013      	movs	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	189b      	adds	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002156:	e002      	b.n	800215e <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3b01      	subs	r3, #1
 800215c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f9      	bne.n	8002158 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_COMP_Init+0x2ac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d102      	bne.n	8002174 <HAL_COMP_Init+0x1e4>
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	029b      	lsls	r3, r3, #10
 8002172:	e001      	b.n	8002178 <HAL_COMP_Init+0x1e8>
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	02db      	lsls	r3, r3, #11
 8002178:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	2203      	movs	r2, #3
 8002180:	4013      	ands	r3, r2
 8002182:	d040      	beq.n	8002206 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2210      	movs	r2, #16
 800218a:	4013      	ands	r3, r2
 800218c:	d004      	beq.n	8002198 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff fe9d 	bl	8001ed0 <LL_EXTI_EnableRisingTrig_0_31>
 8002196:	e003      	b.n	80021a0 <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	0018      	movs	r0, r3
 800219c:	f7ff fea8 	bl	8001ef0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	2220      	movs	r2, #32
 80021a6:	4013      	ands	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff feb1 	bl	8001f14 <LL_EXTI_EnableFallingTrig_0_31>
 80021b2:	e003      	b.n	80021bc <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7ff febc 	bl	8001f34 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	0018      	movs	r0, r3
 80021c0:	f7ff fed8 	bl	8001f74 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff fec6 	bl	8001f58 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2202      	movs	r2, #2
 80021d2:	4013      	ands	r3, r2
 80021d4:	d004      	beq.n	80021e0 <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	0018      	movs	r0, r3
 80021da:	f7ff fe53 	bl	8001e84 <LL_EXTI_EnableEvent_0_31>
 80021de:	e003      	b.n	80021e8 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff fe60 	bl	8001ea8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff fe1f 	bl	8001e38 <LL_EXTI_EnableIT_0_31>
 80021fa:	e00c      	b.n	8002216 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff fe2c 	bl	8001e5c <LL_EXTI_DisableIT_0_31>
 8002204:	e007      	b.n	8002216 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	0018      	movs	r0, r3
 800220a:	f7ff fe4d 	bl	8001ea8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	0018      	movs	r0, r3
 8002212:	f7ff fe23 	bl	8001e5c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2229      	movs	r2, #41	; 0x29
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2229      	movs	r2, #41	; 0x29
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800222a:	231f      	movs	r3, #31
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	781b      	ldrb	r3, [r3, #0]
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b008      	add	sp, #32
 8002236:	bd80      	pop	{r7, pc}
 8002238:	fe00740f 	.word	0xfe00740f
 800223c:	40010200 	.word	0x40010200
 8002240:	fffff7ff 	.word	0xfffff7ff
 8002244:	ffffbfff 	.word	0xffffbfff
 8002248:	20000004 	.word	0x20000004
 800224c:	00030d40 	.word	0x00030d40

08002250 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800225c:	230f      	movs	r3, #15
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d104      	bne.n	8002274 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 800226a:	230f      	movs	r3, #15
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e034      	b.n	80022de <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0fdb      	lsrs	r3, r3, #31
 800227c:	07da      	lsls	r2, r3, #31
 800227e:	2380      	movs	r3, #128	; 0x80
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	429a      	cmp	r2, r3
 8002284:	d104      	bne.n	8002290 <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 8002286:	230f      	movs	r3, #15
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e026      	b.n	80022de <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2229      	movs	r2, #41	; 0x29
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d11c      	bne.n	80022d6 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2229      	movs	r2, #41	; 0x29
 80022b0:	2102      	movs	r1, #2
 80022b2:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_COMP_Start+0x9c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	490d      	ldr	r1, [pc, #52]	; (80022f0 <HAL_COMP_Start+0xa0>)
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7fd ff22 	bl	8000104 <__udivsi3>
 80022c0:	0003      	movs	r3, r0
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80022c6:	e002      	b.n	80022ce <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <HAL_COMP_Start+0x78>
 80022d4:	e003      	b.n	80022de <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022d6:	230f      	movs	r3, #15
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80022de:	230f      	movs	r3, #15
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	781b      	ldrb	r3, [r3, #0]
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000004 	.word	0x20000004
 80022f0:	00030d40 	.word	0x00030d40

080022f4 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0f9b      	lsrs	r3, r3, #30
 8002304:	2201      	movs	r2, #1
 8002306:	4013      	ands	r3, r2
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}

08002310 <__NVIC_EnableIRQ>:
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	0002      	movs	r2, r0
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b7f      	cmp	r3, #127	; 0x7f
 8002322:	d809      	bhi.n	8002338 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	001a      	movs	r2, r3
 800232a:	231f      	movs	r3, #31
 800232c:	401a      	ands	r2, r3
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_EnableIRQ+0x30>)
 8002330:	2101      	movs	r1, #1
 8002332:	4091      	lsls	r1, r2
 8002334:	000a      	movs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	0002      	movs	r2, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b7f      	cmp	r3, #127	; 0x7f
 8002358:	d828      	bhi.n	80023ac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <__NVIC_SetPriority+0xd4>)
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b25b      	sxtb	r3, r3
 8002362:	089b      	lsrs	r3, r3, #2
 8002364:	33c0      	adds	r3, #192	; 0xc0
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	589b      	ldr	r3, [r3, r2]
 800236a:	1dfa      	adds	r2, r7, #7
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	0011      	movs	r1, r2
 8002370:	2203      	movs	r2, #3
 8002372:	400a      	ands	r2, r1
 8002374:	00d2      	lsls	r2, r2, #3
 8002376:	21ff      	movs	r1, #255	; 0xff
 8002378:	4091      	lsls	r1, r2
 800237a:	000a      	movs	r2, r1
 800237c:	43d2      	mvns	r2, r2
 800237e:	401a      	ands	r2, r3
 8002380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	019b      	lsls	r3, r3, #6
 8002386:	22ff      	movs	r2, #255	; 0xff
 8002388:	401a      	ands	r2, r3
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	0018      	movs	r0, r3
 8002390:	2303      	movs	r3, #3
 8002392:	4003      	ands	r3, r0
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002398:	481f      	ldr	r0, [pc, #124]	; (8002418 <__NVIC_SetPriority+0xd4>)
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b25b      	sxtb	r3, r3
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	430a      	orrs	r2, r1
 80023a4:	33c0      	adds	r3, #192	; 0xc0
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	501a      	str	r2, [r3, r0]
}
 80023aa:	e031      	b.n	8002410 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ac:	4a1b      	ldr	r2, [pc, #108]	; (800241c <__NVIC_SetPriority+0xd8>)
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	0019      	movs	r1, r3
 80023b4:	230f      	movs	r3, #15
 80023b6:	400b      	ands	r3, r1
 80023b8:	3b08      	subs	r3, #8
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3306      	adds	r3, #6
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	18d3      	adds	r3, r2, r3
 80023c2:	3304      	adds	r3, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1dfa      	adds	r2, r7, #7
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	0011      	movs	r1, r2
 80023cc:	2203      	movs	r2, #3
 80023ce:	400a      	ands	r2, r1
 80023d0:	00d2      	lsls	r2, r2, #3
 80023d2:	21ff      	movs	r1, #255	; 0xff
 80023d4:	4091      	lsls	r1, r2
 80023d6:	000a      	movs	r2, r1
 80023d8:	43d2      	mvns	r2, r2
 80023da:	401a      	ands	r2, r3
 80023dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	22ff      	movs	r2, #255	; 0xff
 80023e4:	401a      	ands	r2, r3
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	0018      	movs	r0, r3
 80023ec:	2303      	movs	r3, #3
 80023ee:	4003      	ands	r3, r0
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f4:	4809      	ldr	r0, [pc, #36]	; (800241c <__NVIC_SetPriority+0xd8>)
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	001c      	movs	r4, r3
 80023fc:	230f      	movs	r3, #15
 80023fe:	4023      	ands	r3, r4
 8002400:	3b08      	subs	r3, #8
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	430a      	orrs	r2, r1
 8002406:	3306      	adds	r3, #6
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	18c3      	adds	r3, r0, r3
 800240c:	3304      	adds	r3, #4
 800240e:	601a      	str	r2, [r3, #0]
}
 8002410:	46c0      	nop			; (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b003      	add	sp, #12
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <SysTick_Config+0x40>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002432:	2301      	movs	r3, #1
 8002434:	e010      	b.n	8002458 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <SysTick_Config+0x44>)
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	3a01      	subs	r2, #1
 800243c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243e:	2301      	movs	r3, #1
 8002440:	425b      	negs	r3, r3
 8002442:	2103      	movs	r1, #3
 8002444:	0018      	movs	r0, r3
 8002446:	f7ff ff7d 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <SysTick_Config+0x44>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x44>)
 8002452:	2207      	movs	r2, #7
 8002454:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002456:	2300      	movs	r3, #0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}
 8002460:	00ffffff 	.word	0x00ffffff
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	210f      	movs	r1, #15
 8002474:	187b      	adds	r3, r7, r1
 8002476:	1c02      	adds	r2, r0, #0
 8002478:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	187b      	adds	r3, r7, r1
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b25b      	sxtb	r3, r3
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff ff5d 	bl	8002344 <__NVIC_SetPriority>
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b004      	add	sp, #16
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	0002      	movs	r2, r0
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b25b      	sxtb	r3, r3
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff ff33 	bl	8002310 <__NVIC_EnableIRQ>
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff ffaf 	bl	8002420 <SysTick_Config>
 80024c2:	0003      	movs	r3, r0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e015      	b.n	800250a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	791b      	ldrb	r3, [r3, #4]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f7fd ff2f 	bl	8000354 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b002      	add	sp, #8
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	795b      	ldrb	r3, [r3, #5]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_DAC_Start+0x16>
 8002524:	2302      	movs	r3, #2
 8002526:	e03f      	b.n	80025a8 <HAL_DAC_Start+0x96>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2210      	movs	r2, #16
 800253e:	4013      	ands	r3, r2
 8002540:	2201      	movs	r2, #1
 8002542:	409a      	lsls	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	223e      	movs	r2, #62	; 0x3e
 800255a:	4013      	ands	r3, r2
 800255c:	2b02      	cmp	r3, #2
 800255e:	d11c      	bne.n	800259a <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2101      	movs	r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	e013      	b.n	800259a <HAL_DAC_Start+0x88>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	23f8      	movs	r3, #248	; 0xf8
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	401a      	ands	r2, r3
 800257e:	2102      	movs	r1, #2
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4099      	lsls	r1, r3
 8002584:	000b      	movs	r3, r1
 8002586:	429a      	cmp	r2, r3
 8002588:	d107      	bne.n	800259a <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2102      	movs	r1, #2
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	18d3      	adds	r3, r2, r3
 80025d4:	3308      	adds	r3, #8
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e004      	b.n	80025e4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	18d3      	adds	r3, r2, r3
 80025e0:	3314      	adds	r3, #20
 80025e2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b006      	add	sp, #24
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	795b      	ldrb	r3, [r3, #5]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_DAC_ConfigChannel+0x1c>
 800260c:	2302      	movs	r3, #2
 800260e:	e107      	b.n	8002820 <HAL_DAC_ConfigChannel+0x22c>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2202      	movs	r2, #2
 800261a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d000      	beq.n	8002626 <HAL_DAC_ConfigChannel+0x32>
 8002624:	e074      	b.n	8002710 <HAL_DAC_ConfigChannel+0x11c>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d138      	bne.n	800269e <HAL_DAC_ConfigChannel+0xaa>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800262c:	f7ff fbb6 	bl	8001d9c <HAL_GetTick>
 8002630:	0003      	movs	r3, r0
 8002632:	61fb      	str	r3, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002634:	e011      	b.n	800265a <HAL_DAC_ConfigChannel+0x66>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002636:	f7ff fbb1 	bl	8001d9c <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d90a      	bls.n	800265a <HAL_DAC_ConfigChannel+0x66>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2208      	movs	r2, #8
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2203      	movs	r2, #3
 8002654:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0e2      	b.n	8002820 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	4013      	ands	r3, r2
 8002666:	d1e6      	bne.n	8002636 <HAL_DAC_ConfigChannel+0x42>
        }
      }
      HAL_Delay(1);
 8002668:	2001      	movs	r0, #1
 800266a:	f7ff fba1 	bl	8001db0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	6992      	ldr	r2, [r2, #24]
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
 8002678:	e01e      	b.n	80026b8 <HAL_DAC_ConfigChannel+0xc4>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800267a:	f7ff fb8f 	bl	8001d9c <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d90a      	bls.n	800269e <HAL_DAC_ConfigChannel+0xaa>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	2208      	movs	r2, #8
 800268e:	431a      	orrs	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2203      	movs	r2, #3
 8002698:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0c0      	b.n	8002820 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	dbe8      	blt.n	800267a <HAL_DAC_ConfigChannel+0x86>
        }
      }
      HAL_Delay(1U);
 80026a8:	2001      	movs	r0, #1
 80026aa:	f7ff fb81 	bl	8001db0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	6992      	ldr	r2, [r2, #24]
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	2110      	movs	r1, #16
 80026c2:	400a      	ands	r2, r1
 80026c4:	4958      	ldr	r1, [pc, #352]	; (8002828 <HAL_DAC_ConfigChannel+0x234>)
 80026c6:	4091      	lsls	r1, r2
 80026c8:	000a      	movs	r2, r1
 80026ca:	43d2      	mvns	r2, r2
 80026cc:	401a      	ands	r2, r3
 80026ce:	0011      	movs	r1, r2
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2010      	movs	r0, #16
 80026d8:	4003      	ands	r3, r0
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	2110      	movs	r1, #16
 80026ee:	400a      	ands	r2, r1
 80026f0:	21ff      	movs	r1, #255	; 0xff
 80026f2:	4091      	lsls	r1, r2
 80026f4:	000a      	movs	r2, r1
 80026f6:	43d2      	mvns	r2, r2
 80026f8:	401a      	ands	r2, r3
 80026fa:	0011      	movs	r1, r2
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2010      	movs	r0, #16
 8002704:	4003      	ands	r3, r0
 8002706:	409a      	lsls	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d11d      	bne.n	8002754 <HAL_DAC_ConfigChannel+0x160>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2210      	movs	r2, #16
 8002724:	4013      	ands	r3, r2
 8002726:	221f      	movs	r2, #31
 8002728:	409a      	lsls	r2, r3
 800272a:	0013      	movs	r3, r2
 800272c:	43da      	mvns	r2, r3
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2210      	movs	r2, #16
 800273e:	4013      	ands	r3, r2
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	409a      	lsls	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2210      	movs	r2, #16
 8002760:	4013      	ands	r3, r2
 8002762:	2207      	movs	r2, #7
 8002764:	409a      	lsls	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	43da      	mvns	r2, r3
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	431a      	orrs	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2210      	movs	r2, #16
 8002786:	4013      	ands	r3, r2
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	409a      	lsls	r2, r3
 800278c:	0013      	movs	r3, r2
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2110      	movs	r1, #16
 80027a6:	400b      	ands	r3, r1
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	01c9      	lsls	r1, r1, #7
 80027ac:	4099      	lsls	r1, r3
 80027ae:	000b      	movs	r3, r1
 80027b0:	43d9      	mvns	r1, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	400a      	ands	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2210      	movs	r2, #16
 80027c6:	4013      	ands	r3, r2
 80027c8:	4a18      	ldr	r2, [pc, #96]	; (800282c <HAL_DAC_ConfigChannel+0x238>)
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	43da      	mvns	r2, r3
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2210      	movs	r2, #16
 80027e0:	4013      	ands	r3, r2
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	409a      	lsls	r2, r3
 80027e6:	0013      	movs	r3, r2
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2110      	movs	r1, #16
 8002800:	400b      	ands	r3, r1
 8002802:	21c0      	movs	r1, #192	; 0xc0
 8002804:	4099      	lsls	r1, r3
 8002806:	000b      	movs	r3, r1
 8002808:	43d9      	mvns	r1, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	400a      	ands	r2, r1
 8002810:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b008      	add	sp, #32
 8002826:	bd80      	pop	{r7, pc}
 8002828:	000003ff 	.word	0x000003ff
 800282c:	00000ffe 	.word	0x00000ffe

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283e:	e147      	b.n	8002ad0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4091      	lsls	r1, r2
 800284a:	000a      	movs	r2, r1
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d100      	bne.n	8002858 <HAL_GPIO_Init+0x28>
 8002856:	e138      	b.n	8002aca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x38>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	58d3      	ldr	r3, [r2, r3]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2207      	movs	r2, #7
 800287a:	4013      	ands	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	409a      	lsls	r2, r3
 8002882:	0013      	movs	r3, r2
 8002884:	43da      	mvns	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2107      	movs	r1, #7
 8002894:	400b      	ands	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	409a      	lsls	r2, r3
 800289a:	0013      	movs	r3, r2
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	6939      	ldr	r1, [r7, #16]
 80028ae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	409a      	lsls	r2, r3
 80028be:	0013      	movs	r3, r2
 80028c0:	43da      	mvns	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2203      	movs	r2, #3
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	409a      	lsls	r2, r3
 80028d6:	0013      	movs	r3, r2
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d00b      	beq.n	8002904 <HAL_GPIO_Init+0xd4>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d007      	beq.n	8002904 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f8:	2b11      	cmp	r3, #17
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b12      	cmp	r3, #18
 8002902:	d130      	bne.n	8002966 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	409a      	lsls	r2, r3
 8002912:	0013      	movs	r3, r2
 8002914:	43da      	mvns	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	0013      	movs	r3, r2
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800293a:	2201      	movs	r2, #1
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
 8002940:	0013      	movs	r3, r2
 8002942:	43da      	mvns	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	2201      	movs	r2, #1
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
 8002958:	0013      	movs	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	2203      	movs	r2, #3
 8002972:	409a      	lsls	r2, r3
 8002974:	0013      	movs	r3, r2
 8002976:	43da      	mvns	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	409a      	lsls	r2, r3
 8002988:	0013      	movs	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	055b      	lsls	r3, r3, #21
 800299e:	4013      	ands	r3, r2
 80029a0:	d100      	bne.n	80029a4 <HAL_GPIO_Init+0x174>
 80029a2:	e092      	b.n	8002aca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80029a4:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3318      	adds	r3, #24
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	589b      	ldr	r3, [r3, r2]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2203      	movs	r2, #3
 80029b6:	4013      	ands	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	220f      	movs	r2, #15
 80029bc:	409a      	lsls	r2, r3
 80029be:	0013      	movs	r3, r2
 80029c0:	43da      	mvns	r2, r3
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	23a0      	movs	r3, #160	; 0xa0
 80029cc:	05db      	lsls	r3, r3, #23
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x1ca>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a45      	ldr	r2, [pc, #276]	; (8002aec <HAL_GPIO_Init+0x2bc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x1c6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a44      	ldr	r2, [pc, #272]	; (8002af0 <HAL_GPIO_Init+0x2c0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x1c2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a43      	ldr	r2, [pc, #268]	; (8002af4 <HAL_GPIO_Init+0x2c4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x1be>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e006      	b.n	80029fc <HAL_GPIO_Init+0x1cc>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e004      	b.n	80029fc <HAL_GPIO_Init+0x1cc>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e002      	b.n	80029fc <HAL_GPIO_Init+0x1cc>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <HAL_GPIO_Init+0x1cc>
 80029fa:	2300      	movs	r3, #0
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	2103      	movs	r1, #3
 8002a00:	400a      	ands	r2, r1
 8002a02:	00d2      	lsls	r2, r2, #3
 8002a04:	4093      	lsls	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002a0c:	4936      	ldr	r1, [pc, #216]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	089b      	lsrs	r3, r3, #2
 8002a12:	3318      	adds	r3, #24
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a1a:	4a33      	ldr	r2, [pc, #204]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	58d3      	ldr	r3, [r2, r3]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	43da      	mvns	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	025b      	lsls	r3, r3, #9
 8002a34:	4013      	ands	r3, r2
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a40:	4929      	ldr	r1, [pc, #164]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002a48:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002a4a:	2384      	movs	r3, #132	; 0x84
 8002a4c:	58d3      	ldr	r3, [r2, r3]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43da      	mvns	r2, r3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	4013      	ands	r3, r2
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a6e:	491e      	ldr	r1, [pc, #120]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002a70:	2284      	movs	r2, #132	; 0x84
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	035b      	lsls	r3, r3, #13
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	039b      	lsls	r3, r3, #14
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_GPIO_Init+0x2b8>)
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	40da      	lsrs	r2, r3
 8002ad8:	1e13      	subs	r3, r2, #0
 8002ada:	d000      	beq.n	8002ade <HAL_GPIO_Init+0x2ae>
 8002adc:	e6b0      	b.n	8002840 <HAL_GPIO_Init+0x10>
  }
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b006      	add	sp, #24
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	50000400 	.word	0x50000400
 8002af0:	50000800 	.word	0x50000800
 8002af4:	50000c00 	.word	0x50000c00

08002af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	0008      	movs	r0, r1
 8002b02:	0011      	movs	r1, r2
 8002b04:	1cbb      	adds	r3, r7, #2
 8002b06:	1c02      	adds	r2, r0, #0
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	1c7b      	adds	r3, r7, #1
 8002b0c:	1c0a      	adds	r2, r1, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b10:	1c7b      	adds	r3, r7, #1
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b18:	1cbb      	adds	r3, r7, #2
 8002b1a:	881a      	ldrh	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b22:	1cbb      	adds	r3, r7, #2
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d11f      	bne.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	189b      	adds	r3, r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4912      	ldr	r1, [pc, #72]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7fd facc 	bl	8000104 <__udivsi3>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b72:	e008      	b.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e001      	b.n	8002b86 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e009      	b.n	8002b9a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d0ed      	beq.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b004      	add	sp, #16
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	fffff9ff 	.word	0xfffff9ff
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	000f4240 	.word	0x000f4240

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e304      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d100      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1e>
 8002bd0:	e07c      	b.n	8002ccc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd2:	4bc3      	ldr	r3, [pc, #780]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2238      	movs	r2, #56	; 0x38
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bdc:	4bc0      	ldr	r3, [pc, #768]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2203      	movs	r2, #3
 8002be2:	4013      	ands	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d102      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3e>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x44>
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d10b      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	4bb9      	ldr	r3, [pc, #740]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	029b      	lsls	r3, r3, #10
 8002c00:	4013      	ands	r3, r2
 8002c02:	d062      	beq.n	8002cca <HAL_RCC_OscConfig+0x116>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d15e      	bne.n	8002cca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e2df      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	025b      	lsls	r3, r3, #9
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_OscConfig+0x78>
 8002c1c:	4bb0      	ldr	r3, [pc, #704]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4baf      	ldr	r3, [pc, #700]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	0249      	lsls	r1, r1, #9
 8002c26:	430a      	orrs	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e020      	b.n	8002c6e <HAL_RCC_OscConfig+0xba>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	23a0      	movs	r3, #160	; 0xa0
 8002c32:	02db      	lsls	r3, r3, #11
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d10e      	bne.n	8002c56 <HAL_RCC_OscConfig+0xa2>
 8002c38:	4ba9      	ldr	r3, [pc, #676]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4ba8      	ldr	r3, [pc, #672]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	02c9      	lsls	r1, r1, #11
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	4ba6      	ldr	r3, [pc, #664]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4ba5      	ldr	r3, [pc, #660]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c4c:	2180      	movs	r1, #128	; 0x80
 8002c4e:	0249      	lsls	r1, r1, #9
 8002c50:	430a      	orrs	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e00b      	b.n	8002c6e <HAL_RCC_OscConfig+0xba>
 8002c56:	4ba2      	ldr	r3, [pc, #648]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4ba1      	ldr	r3, [pc, #644]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c5c:	49a1      	ldr	r1, [pc, #644]	; (8002ee4 <HAL_RCC_OscConfig+0x330>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	4b9f      	ldr	r3, [pc, #636]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b9e      	ldr	r3, [pc, #632]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c68:	499f      	ldr	r1, [pc, #636]	; (8002ee8 <HAL_RCC_OscConfig+0x334>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d014      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7ff f891 	bl	8001d9c <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff f88c 	bl	8001d9c <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	; 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e29e      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c92:	4b93      	ldr	r3, [pc, #588]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	029b      	lsls	r3, r3, #10
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0xcc>
 8002c9e:	e015      	b.n	8002ccc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7ff f87c 	bl	8001d9c <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002caa:	f7ff f877 	bl	8001d9c <HAL_GetTick>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e289      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cbc:	4b88      	ldr	r3, [pc, #544]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	029b      	lsls	r3, r3, #10
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0xf6>
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d100      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x124>
 8002cd6:	e099      	b.n	8002e0c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd8:	4b81      	ldr	r3, [pc, #516]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2238      	movs	r2, #56	; 0x38
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ce2:	4b7f      	ldr	r3, [pc, #508]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x144>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d002      	beq.n	8002cfe <HAL_RCC_OscConfig+0x14a>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d135      	bne.n	8002d6a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cfe:	4b78      	ldr	r3, [pc, #480]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4013      	ands	r3, r2
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x162>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e25c      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b72      	ldr	r3, [pc, #456]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a74      	ldr	r2, [pc, #464]	; (8002eec <HAL_RCC_OscConfig+0x338>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	4b6e      	ldr	r3, [pc, #440]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d32:	4b6b      	ldr	r3, [pc, #428]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6e      	ldr	r2, [pc, #440]	; (8002ef0 <HAL_RCC_OscConfig+0x33c>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	4b67      	ldr	r3, [pc, #412]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002d46:	4b66      	ldr	r3, [pc, #408]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0adb      	lsrs	r3, r3, #11
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	4013      	ands	r3, r2
 8002d50:	4a68      	ldr	r2, [pc, #416]	; (8002ef4 <HAL_RCC_OscConfig+0x340>)
 8002d52:	40da      	lsrs	r2, r3
 8002d54:	4b68      	ldr	r3, [pc, #416]	; (8002ef8 <HAL_RCC_OscConfig+0x344>)
 8002d56:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d58:	4b68      	ldr	r3, [pc, #416]	; (8002efc <HAL_RCC_OscConfig+0x348>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7fe ffc3 	bl	8001ce8 <HAL_InitTick>
 8002d62:	1e03      	subs	r3, r0, #0
 8002d64:	d051      	beq.n	8002e0a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e232      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d030      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d72:	4b5b      	ldr	r3, [pc, #364]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a5e      	ldr	r2, [pc, #376]	; (8002ef0 <HAL_RCC_OscConfig+0x33c>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	4b57      	ldr	r3, [pc, #348]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002d86:	4b56      	ldr	r3, [pc, #344]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b55      	ldr	r3, [pc, #340]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	0049      	lsls	r1, r1, #1
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7ff f802 	bl	8001d9c <HAL_GetTick>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7fe fffd 	bl	8001d9c <HAL_GetTick>
 8002da2:	0002      	movs	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e20f      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4013      	ands	r3, r2
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b48      	ldr	r3, [pc, #288]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <HAL_RCC_OscConfig+0x338>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	021a      	lsls	r2, r3, #8
 8002dcc:	4b44      	ldr	r3, [pc, #272]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	e01b      	b.n	8002e0c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002dd4:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002dda:	4949      	ldr	r1, [pc, #292]	; (8002f00 <HAL_RCC_OscConfig+0x34c>)
 8002ddc:	400a      	ands	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe ffdc 	bl	8001d9c <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fe ffd7 	bl	8001d9c <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1e9      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dfc:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4013      	ands	r3, r2
 8002e06:	d1f0      	bne.n	8002dea <HAL_RCC_OscConfig+0x236>
 8002e08:	e000      	b.n	8002e0c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2208      	movs	r2, #8
 8002e12:	4013      	ands	r3, r2
 8002e14:	d047      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002e16:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2238      	movs	r2, #56	; 0x38
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b18      	cmp	r3, #24
 8002e20:	d10a      	bne.n	8002e38 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002e22:	4b2f      	ldr	r3, [pc, #188]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e26:	2202      	movs	r2, #2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d03c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d138      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e1cb      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d019      	beq.n	8002e74 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002e40:	4b27      	ldr	r3, [pc, #156]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe ffa6 	bl	8001d9c <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e56:	f7fe ffa1 	bl	8001d9c <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1b3      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d0f1      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2a2>
 8002e72:	e018      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	438a      	bics	r2, r1
 8002e7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe ff8c 	bl	8001d9c <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe ff87 	bl	8001d9c <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e199      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e9c:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d1f1      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4013      	ands	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2fe>
 8002eb0:	e0c6      	b.n	8003040 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	231f      	movs	r3, #31
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2238      	movs	r2, #56	; 0x38
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d11e      	bne.n	8002f04 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_RCC_OscConfig+0x32c>)
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x31e>
 8002ed0:	e0b6      	b.n	8003040 <HAL_RCC_OscConfig+0x48c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d000      	beq.n	8002edc <HAL_RCC_OscConfig+0x328>
 8002eda:	e0b1      	b.n	8003040 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e177      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	fffeffff 	.word	0xfffeffff
 8002ee8:	fffbffff 	.word	0xfffbffff
 8002eec:	ffff80ff 	.word	0xffff80ff
 8002ef0:	ffffc7ff 	.word	0xffffc7ff
 8002ef4:	00f42400 	.word	0x00f42400
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	20000008 	.word	0x20000008
 8002f00:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f04:	4bb4      	ldr	r3, [pc, #720]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	055b      	lsls	r3, r3, #21
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x360>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x362>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d011      	beq.n	8002f3e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	4baf      	ldr	r3, [pc, #700]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f1e:	4bae      	ldr	r3, [pc, #696]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	0549      	lsls	r1, r1, #21
 8002f24:	430a      	orrs	r2, r1
 8002f26:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f28:	4bab      	ldr	r3, [pc, #684]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	055b      	lsls	r3, r3, #21
 8002f30:	4013      	ands	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002f36:	231f      	movs	r3, #31
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3e:	4ba7      	ldr	r3, [pc, #668]	; (80031dc <HAL_RCC_OscConfig+0x628>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	d11a      	bne.n	8002f80 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f4a:	4ba4      	ldr	r3, [pc, #656]	; (80031dc <HAL_RCC_OscConfig+0x628>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4ba3      	ldr	r3, [pc, #652]	; (80031dc <HAL_RCC_OscConfig+0x628>)
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	0049      	lsls	r1, r1, #1
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002f58:	f7fe ff20 	bl	8001d9c <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe ff1b 	bl	8001d9c <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e12d      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f74:	4b99      	ldr	r3, [pc, #612]	; (80031dc <HAL_RCC_OscConfig+0x628>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3e2>
 8002f88:	4b93      	ldr	r3, [pc, #588]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002f8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f8c:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002f8e:	2101      	movs	r1, #1
 8002f90:	430a      	orrs	r2, r1
 8002f92:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x41c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x404>
 8002f9e:	4b8e      	ldr	r3, [pc, #568]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002fa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fa2:	4b8d      	ldr	r3, [pc, #564]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002faa:	4b8b      	ldr	r3, [pc, #556]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002fac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fae:	4b8a      	ldr	r3, [pc, #552]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x41c>
 8002fb8:	4b87      	ldr	r3, [pc, #540]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fbc:	4b86      	ldr	r3, [pc, #536]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	438a      	bics	r2, r1
 8002fc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fc4:	4b84      	ldr	r3, [pc, #528]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002fc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fc8:	4b83      	ldr	r3, [pc, #524]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002fca:	2104      	movs	r1, #4
 8002fcc:	438a      	bics	r2, r1
 8002fce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d014      	beq.n	8003002 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe fee0 	bl	8001d9c <HAL_GetTick>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe0:	e009      	b.n	8002ff6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fe fedb 	bl	8001d9c <HAL_GetTick>
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	4a7c      	ldr	r2, [pc, #496]	; (80031e0 <HAL_RCC_OscConfig+0x62c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0ec      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff6:	4b78      	ldr	r3, [pc, #480]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x42e>
 8003000:	e013      	b.n	800302a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fe fecb 	bl	8001d9c <HAL_GetTick>
 8003006:	0003      	movs	r3, r0
 8003008:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800300a:	e009      	b.n	8003020 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe fec6 	bl	8001d9c <HAL_GetTick>
 8003010:	0002      	movs	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	4a72      	ldr	r2, [pc, #456]	; (80031e0 <HAL_RCC_OscConfig+0x62c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0d7      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003020:	4b6d      	ldr	r3, [pc, #436]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	2202      	movs	r2, #2
 8003026:	4013      	ands	r3, r2
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800302a:	231f      	movs	r3, #31
 800302c:	18fb      	adds	r3, r7, r3
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003038:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 800303a:	496a      	ldr	r1, [pc, #424]	; (80031e4 <HAL_RCC_OscConfig+0x630>)
 800303c:	400a      	ands	r2, r1
 800303e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d100      	bne.n	800304a <HAL_RCC_OscConfig+0x496>
 8003048:	e0c1      	b.n	80031ce <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2238      	movs	r2, #56	; 0x38
 8003050:	4013      	ands	r3, r2
 8003052:	2b10      	cmp	r3, #16
 8003054:	d100      	bne.n	8003058 <HAL_RCC_OscConfig+0x4a4>
 8003056:	e081      	b.n	800315c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d156      	bne.n	800310e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003060:	4b5d      	ldr	r3, [pc, #372]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b5c      	ldr	r3, [pc, #368]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003066:	4960      	ldr	r1, [pc, #384]	; (80031e8 <HAL_RCC_OscConfig+0x634>)
 8003068:	400a      	ands	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fe96 	bl	8001d9c <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fe91 	bl	8001d9c <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0a3      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003088:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	049b      	lsls	r3, r3, #18
 8003090:	4013      	ands	r3, r2
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003094:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a54      	ldr	r2, [pc, #336]	; (80031ec <HAL_RCC_OscConfig+0x638>)
 800309a:	4013      	ands	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	431a      	orrs	r2, r3
 80030c2:	4b45      	ldr	r3, [pc, #276]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c8:	4b43      	ldr	r3, [pc, #268]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	0449      	lsls	r1, r1, #17
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80030d6:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b3f      	ldr	r3, [pc, #252]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0549      	lsls	r1, r1, #21
 80030e0:	430a      	orrs	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fe5a 	bl	8001d9c <HAL_GetTick>
 80030e8:	0003      	movs	r3, r0
 80030ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe fe55 	bl	8001d9c <HAL_GetTick>
 80030f2:	0002      	movs	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e067      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003100:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	049b      	lsls	r3, r3, #18
 8003108:	4013      	ands	r3, r2
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x53a>
 800310c:	e05f      	b.n	80031ce <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003114:	4934      	ldr	r1, [pc, #208]	; (80031e8 <HAL_RCC_OscConfig+0x634>)
 8003116:	400a      	ands	r2, r1
 8003118:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800311a:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003120:	2103      	movs	r1, #3
 8003122:	438a      	bics	r2, r1
 8003124:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 800312c:	4930      	ldr	r1, [pc, #192]	; (80031f0 <HAL_RCC_OscConfig+0x63c>)
 800312e:	400a      	ands	r2, r1
 8003130:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003132:	f7fe fe33 	bl	8001d9c <HAL_GetTick>
 8003136:	0003      	movs	r3, r0
 8003138:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fe2e 	bl	8001d9c <HAL_GetTick>
 8003140:	0002      	movs	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e040      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	049b      	lsls	r3, r3, #18
 8003156:	4013      	ands	r3, r2
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x588>
 800315a:	e038      	b.n	80031ce <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e033      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x624>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2203      	movs	r2, #3
 8003172:	401a      	ands	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	429a      	cmp	r2, r3
 800317a:	d126      	bne.n	80031ca <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2270      	movs	r2, #112	; 0x70
 8003180:	401a      	ands	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	429a      	cmp	r2, r3
 8003188:	d11f      	bne.n	80031ca <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	23fe      	movs	r3, #254	; 0xfe
 800318e:	01db      	lsls	r3, r3, #7
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d116      	bne.n	80031ca <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	23f8      	movs	r3, #248	; 0xf8
 80031a0:	039b      	lsls	r3, r3, #14
 80031a2:	401a      	ands	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d10e      	bne.n	80031ca <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	23e0      	movs	r3, #224	; 0xe0
 80031b0:	051b      	lsls	r3, r3, #20
 80031b2:	401a      	ands	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	0f5b      	lsrs	r3, r3, #29
 80031c0:	075a      	lsls	r2, r3, #29
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b008      	add	sp, #32
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
 80031e0:	00001388 	.word	0x00001388
 80031e4:	efffffff 	.word	0xefffffff
 80031e8:	feffffff 	.word	0xfeffffff
 80031ec:	11c1808c 	.word	0x11c1808c
 80031f0:	eefeffff 	.word	0xeefeffff

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0e9      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <HAL_RCC_ClockConfig+0x1f0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2207      	movs	r2, #7
 800320e:	4013      	ands	r3, r2
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d91e      	bls.n	8003254 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2207      	movs	r2, #7
 800321c:	4393      	bics	r3, r2
 800321e:	0019      	movs	r1, r3
 8003220:	4b70      	ldr	r3, [pc, #448]	; (80033e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003228:	f7fe fdb8 	bl	8001d9c <HAL_GetTick>
 800322c:	0003      	movs	r3, r0
 800322e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003230:	e009      	b.n	8003246 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003232:	f7fe fdb3 	bl	8001d9c <HAL_GetTick>
 8003236:	0002      	movs	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	4a6a      	ldr	r2, [pc, #424]	; (80033e8 <HAL_RCC_ClockConfig+0x1f4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0ca      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2207      	movs	r2, #7
 800324c:	4013      	ands	r3, r2
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
 800325c:	d015      	beq.n	800328a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	d006      	beq.n	8003276 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003268:	4b60      	ldr	r3, [pc, #384]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 800326e:	21e0      	movs	r1, #224	; 0xe0
 8003270:	01c9      	lsls	r1, r1, #7
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003276:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4a5d      	ldr	r2, [pc, #372]	; (80033f0 <HAL_RCC_ClockConfig+0x1fc>)
 800327c:	4013      	ands	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	4013      	ands	r3, r2
 8003292:	d057      	beq.n	8003344 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	029b      	lsls	r3, r3, #10
 80032a4:	4013      	ands	r3, r2
 80032a6:	d12b      	bne.n	8003300 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e097      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d107      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b4:	4b4d      	ldr	r3, [pc, #308]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	049b      	lsls	r3, r3, #18
 80032bc:	4013      	ands	r3, r2
 80032be:	d11f      	bne.n	8003300 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e08b      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032cc:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4013      	ands	r3, r2
 80032d6:	d113      	bne.n	8003300 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e07f      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032e4:	4b41      	ldr	r3, [pc, #260]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 80032e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e8:	2202      	movs	r2, #2
 80032ea:	4013      	ands	r3, r2
 80032ec:	d108      	bne.n	8003300 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e074      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2202      	movs	r2, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e06d      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2207      	movs	r2, #7
 8003306:	4393      	bics	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003314:	f7fe fd42 	bl	8001d9c <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331c:	e009      	b.n	8003332 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331e:	f7fe fd3d 	bl	8001d9c <HAL_GetTick>
 8003322:	0002      	movs	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	4a2f      	ldr	r2, [pc, #188]	; (80033e8 <HAL_RCC_ClockConfig+0x1f4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e054      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2e      	ldr	r3, [pc, #184]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2238      	movs	r2, #56	; 0x38
 8003338:	401a      	ands	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	429a      	cmp	r2, r3
 8003342:	d1ec      	bne.n	800331e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2207      	movs	r2, #7
 800334a:	4013      	ands	r3, r2
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d21e      	bcs.n	8003390 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2207      	movs	r2, #7
 8003358:	4393      	bics	r3, r2
 800335a:	0019      	movs	r1, r3
 800335c:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <HAL_RCC_ClockConfig+0x1f0>)
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003364:	f7fe fd1a 	bl	8001d9c <HAL_GetTick>
 8003368:	0003      	movs	r3, r0
 800336a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800336c:	e009      	b.n	8003382 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336e:	f7fe fd15 	bl	8001d9c <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_RCC_ClockConfig+0x1f4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e02c      	b.n	80033dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2207      	movs	r2, #7
 8003388:	4013      	ands	r3, r2
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d1ee      	bne.n	800336e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2204      	movs	r2, #4
 8003396:	4013      	ands	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <HAL_RCC_ClockConfig+0x200>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	0019      	movs	r1, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80033ae:	f000 f829 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80033b2:	0001      	movs	r1, r0
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_RCC_ClockConfig+0x1f8>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	220f      	movs	r2, #15
 80033bc:	401a      	ands	r2, r3
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_RCC_ClockConfig+0x204>)
 80033c0:	0092      	lsls	r2, r2, #2
 80033c2:	58d3      	ldr	r3, [r2, r3]
 80033c4:	221f      	movs	r2, #31
 80033c6:	4013      	ands	r3, r2
 80033c8:	000a      	movs	r2, r1
 80033ca:	40da      	lsrs	r2, r3
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_ClockConfig+0x208>)
 80033ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_ClockConfig+0x20c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fe fc87 	bl	8001ce8 <HAL_InitTick>
 80033da:	0003      	movs	r3, r0
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b004      	add	sp, #16
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40022000 	.word	0x40022000
 80033e8:	00001388 	.word	0x00001388
 80033ec:	40021000 	.word	0x40021000
 80033f0:	fffff0ff 	.word	0xfffff0ff
 80033f4:	ffff8fff 	.word	0xffff8fff
 80033f8:	080056f4 	.word	0x080056f4
 80033fc:	20000004 	.word	0x20000004
 8003400:	20000008 	.word	0x20000008

08003404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800340a:	4b3c      	ldr	r3, [pc, #240]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2238      	movs	r2, #56	; 0x38
 8003410:	4013      	ands	r3, r2
 8003412:	d10f      	bne.n	8003434 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003414:	4b39      	ldr	r3, [pc, #228]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0adb      	lsrs	r3, r3, #11
 800341a:	2207      	movs	r2, #7
 800341c:	4013      	ands	r3, r2
 800341e:	2201      	movs	r2, #1
 8003420:	409a      	lsls	r2, r3
 8003422:	0013      	movs	r3, r2
 8003424:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	4835      	ldr	r0, [pc, #212]	; (8003500 <HAL_RCC_GetSysClockFreq+0xfc>)
 800342a:	f7fc fe6b 	bl	8000104 <__udivsi3>
 800342e:	0003      	movs	r3, r0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e05d      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003434:	4b31      	ldr	r3, [pc, #196]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2238      	movs	r2, #56	; 0x38
 800343a:	4013      	ands	r3, r2
 800343c:	2b08      	cmp	r3, #8
 800343e:	d102      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003440:	4b30      	ldr	r3, [pc, #192]	; (8003504 <HAL_RCC_GetSysClockFreq+0x100>)
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	e054      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003446:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2238      	movs	r2, #56	; 0x38
 800344c:	4013      	ands	r3, r2
 800344e:	2b10      	cmp	r3, #16
 8003450:	d138      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2203      	movs	r2, #3
 8003458:	4013      	ands	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	2207      	movs	r2, #7
 8003464:	4013      	ands	r3, r2
 8003466:	3301      	adds	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d10d      	bne.n	800348c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4824      	ldr	r0, [pc, #144]	; (8003504 <HAL_RCC_GetSysClockFreq+0x100>)
 8003474:	f7fc fe46 	bl	8000104 <__udivsi3>
 8003478:	0003      	movs	r3, r0
 800347a:	0019      	movs	r1, r3
 800347c:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	227f      	movs	r2, #127	; 0x7f
 8003484:	4013      	ands	r3, r2
 8003486:	434b      	muls	r3, r1
 8003488:	617b      	str	r3, [r7, #20]
        break;
 800348a:	e00d      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	481c      	ldr	r0, [pc, #112]	; (8003500 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003490:	f7fc fe38 	bl	8000104 <__udivsi3>
 8003494:	0003      	movs	r3, r0
 8003496:	0019      	movs	r1, r3
 8003498:	4b18      	ldr	r3, [pc, #96]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	0a1b      	lsrs	r3, r3, #8
 800349e:	227f      	movs	r2, #127	; 0x7f
 80034a0:	4013      	ands	r3, r2
 80034a2:	434b      	muls	r3, r1
 80034a4:	617b      	str	r3, [r7, #20]
        break;
 80034a6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0f5b      	lsrs	r3, r3, #29
 80034ae:	2207      	movs	r2, #7
 80034b0:	4013      	ands	r3, r2
 80034b2:	3301      	adds	r3, #1
 80034b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	6978      	ldr	r0, [r7, #20]
 80034ba:	f7fc fe23 	bl	8000104 <__udivsi3>
 80034be:	0003      	movs	r3, r0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	e015      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2238      	movs	r2, #56	; 0x38
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d103      	bne.n	80034d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e00b      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2238      	movs	r2, #56	; 0x38
 80034de:	4013      	ands	r3, r2
 80034e0:	2b18      	cmp	r3, #24
 80034e2:	d103      	bne.n	80034ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80034e4:	23fa      	movs	r3, #250	; 0xfa
 80034e6:	01db      	lsls	r3, r3, #7
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	e001      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034f0:	693b      	ldr	r3, [r7, #16]
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b006      	add	sp, #24
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40021000 	.word	0x40021000
 8003500:	00f42400 	.word	0x00f42400
 8003504:	007a1200 	.word	0x007a1200

08003508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003510:	2313      	movs	r3, #19
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003518:	2312      	movs	r3, #18
 800351a:	18fb      	adds	r3, r7, r3
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	029b      	lsls	r3, r3, #10
 8003528:	4013      	ands	r3, r2
 800352a:	d100      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800352c:	e0a4      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352e:	2311      	movs	r3, #17
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003536:	4bc3      	ldr	r3, [pc, #780]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	055b      	lsls	r3, r3, #21
 800353e:	4013      	ands	r3, r2
 8003540:	d111      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003542:	4bc0      	ldr	r3, [pc, #768]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003546:	4bbf      	ldr	r3, [pc, #764]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	0549      	lsls	r1, r1, #21
 800354c:	430a      	orrs	r2, r1
 800354e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003550:	4bbc      	ldr	r3, [pc, #752]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	055b      	lsls	r3, r3, #21
 8003558:	4013      	ands	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800355e:	2311      	movs	r3, #17
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003566:	4bb8      	ldr	r3, [pc, #736]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4bb7      	ldr	r3, [pc, #732]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	0049      	lsls	r1, r1, #1
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003574:	f7fe fc12 	bl	8001d9c <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800357c:	e00b      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357e:	f7fe fc0d 	bl	8001d9c <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d904      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 800358c:	2313      	movs	r3, #19
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2203      	movs	r2, #3
 8003592:	701a      	strb	r2, [r3, #0]
        break;
 8003594:	e005      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003596:	4bac      	ldr	r3, [pc, #688]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4013      	ands	r3, r2
 80035a0:	d0ed      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80035a2:	2313      	movs	r3, #19
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d154      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ac:	4ba5      	ldr	r3, [pc, #660]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d019      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d014      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035c8:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035cc:	4a9f      	ldr	r2, [pc, #636]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035d2:	4b9c      	ldr	r3, [pc, #624]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035d6:	4b9b      	ldr	r3, [pc, #620]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	0249      	lsls	r1, r1, #9
 80035dc:	430a      	orrs	r2, r1
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035e0:	4b98      	ldr	r3, [pc, #608]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035e4:	4b97      	ldr	r3, [pc, #604]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035e6:	499a      	ldr	r1, [pc, #616]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035ec:	4b95      	ldr	r3, [pc, #596]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	d016      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fe fbcf 	bl	8001d9c <HAL_GetTick>
 80035fe:	0003      	movs	r3, r0
 8003600:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003602:	e00c      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003604:	f7fe fbca 	bl	8001d9c <HAL_GetTick>
 8003608:	0002      	movs	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	4a91      	ldr	r2, [pc, #580]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d904      	bls.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8003614:	2313      	movs	r3, #19
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2203      	movs	r2, #3
 800361a:	701a      	strb	r2, [r3, #0]
            break;
 800361c:	e004      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361e:	4b89      	ldr	r3, [pc, #548]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	2202      	movs	r2, #2
 8003624:	4013      	ands	r3, r2
 8003626:	d0ed      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8003628:	2313      	movs	r3, #19
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003632:	4b84      	ldr	r3, [pc, #528]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	4a85      	ldr	r2, [pc, #532]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	4b80      	ldr	r3, [pc, #512]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003642:	430a      	orrs	r2, r1
 8003644:	65da      	str	r2, [r3, #92]	; 0x5c
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003648:	2312      	movs	r3, #18
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2213      	movs	r2, #19
 800364e:	18ba      	adds	r2, r7, r2
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e005      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003656:	2312      	movs	r3, #18
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	2213      	movs	r2, #19
 800365c:	18ba      	adds	r2, r7, r2
 800365e:	7812      	ldrb	r2, [r2, #0]
 8003660:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003662:	2311      	movs	r3, #17
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b75      	ldr	r3, [pc, #468]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800366e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003670:	4b74      	ldr	r3, [pc, #464]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003672:	4979      	ldr	r1, [pc, #484]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003674:	400a      	ands	r2, r1
 8003676:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2201      	movs	r2, #1
 800367e:	4013      	ands	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003682:	4b70      	ldr	r3, [pc, #448]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	2203      	movs	r2, #3
 8003688:	4393      	bics	r3, r2
 800368a:	0019      	movs	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4b6c      	ldr	r3, [pc, #432]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003692:	430a      	orrs	r2, r1
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2202      	movs	r2, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a0:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	220c      	movs	r2, #12
 80036a6:	4393      	bics	r3, r2
 80036a8:	0019      	movs	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	4b65      	ldr	r3, [pc, #404]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036b0:	430a      	orrs	r2, r1
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2220      	movs	r2, #32
 80036ba:	4013      	ands	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036be:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	0019      	movs	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036ce:	430a      	orrs	r2, r1
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4013      	ands	r3, r2
 80036dc:	d009      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036de:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	4a5f      	ldr	r2, [pc, #380]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	4b55      	ldr	r3, [pc, #340]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036ee:	430a      	orrs	r2, r1
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4013      	ands	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036fe:	4b51      	ldr	r3, [pc, #324]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003704:	4013      	ands	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800370e:	430a      	orrs	r2, r1
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2240      	movs	r2, #64	; 0x40
 8003718:	4013      	ands	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371c:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800371e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003720:	4a51      	ldr	r2, [pc, #324]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003722:	4013      	ands	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	4b46      	ldr	r3, [pc, #280]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800372c:	430a      	orrs	r2, r1
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	01db      	lsls	r3, r3, #7
 8003738:	4013      	ands	r3, r2
 800373a:	d015      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	0899      	lsrs	r1, r3, #2
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1a      	ldr	r2, [r3, #32]
 8003748:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800374a:	430a      	orrs	r2, r1
 800374c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1a      	ldr	r2, [r3, #32]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	05db      	lsls	r3, r3, #23
 8003756:	429a      	cmp	r2, r3
 8003758:	d106      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0249      	lsls	r1, r1, #9
 8003764:	430a      	orrs	r2, r1
 8003766:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	031b      	lsls	r3, r3, #12
 8003770:	4013      	ands	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003774:	4b33      	ldr	r3, [pc, #204]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	2240      	movs	r2, #64	; 0x40
 800377a:	4393      	bics	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003784:	430a      	orrs	r2, r1
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	039b      	lsls	r3, r3, #14
 8003790:	4013      	ands	r3, r2
 8003792:	d016      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	4a34      	ldr	r2, [pc, #208]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800379a:	4013      	ands	r3, r2
 800379c:	0019      	movs	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a2:	4b28      	ldr	r3, [pc, #160]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	03db      	lsls	r3, r3, #15
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037b4:	4b23      	ldr	r3, [pc, #140]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037ba:	2180      	movs	r1, #128	; 0x80
 80037bc:	0449      	lsls	r1, r1, #17
 80037be:	430a      	orrs	r2, r1
 80037c0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	03db      	lsls	r3, r3, #15
 80037ca:	4013      	ands	r3, r2
 80037cc:	d016      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	4a27      	ldr	r2, [pc, #156]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	0019      	movs	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037de:	430a      	orrs	r2, r1
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	045b      	lsls	r3, r3, #17
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d106      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037f4:	2180      	movs	r1, #128	; 0x80
 80037f6:	0449      	lsls	r1, r1, #17
 80037f8:	430a      	orrs	r2, r1
 80037fa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	; 0x80
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	4013      	ands	r3, r2
 8003806:	d016      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003818:	430a      	orrs	r2, r1
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	01db      	lsls	r3, r3, #7
 8003824:	429a      	cmp	r2, r3
 8003826:	d106      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	0249      	lsls	r1, r1, #9
 8003832:	430a      	orrs	r2, r1
 8003834:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8003836:	2312      	movs	r3, #18
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	781b      	ldrb	r3, [r3, #0]
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b006      	add	sp, #24
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	fffffcff 	.word	0xfffffcff
 8003850:	fffeffff 	.word	0xfffeffff
 8003854:	00001388 	.word	0x00001388
 8003858:	efffffff 	.word	0xefffffff
 800385c:	fffff3ff 	.word	0xfffff3ff
 8003860:	fff3ffff 	.word	0xfff3ffff
 8003864:	ffcfffff 	.word	0xffcfffff
 8003868:	ffffcfff 	.word	0xffffcfff
 800386c:	ffbfffff 	.word	0xffbfffff
 8003870:	feffffff 	.word	0xfeffffff
 8003874:	ffff3fff 	.word	0xffff3fff

08003878 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003880:	230f      	movs	r3, #15
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d100      	bne.n	8003890 <HAL_RTC_Init+0x18>
 800388e:	e07f      	b.n	8003990 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2229      	movs	r2, #41	; 0x29
 8003894:	5c9b      	ldrb	r3, [r3, r2]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10b      	bne.n	80038b4 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2228      	movs	r2, #40	; 0x28
 80038a0:	2100      	movs	r1, #0
 80038a2:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2288      	movs	r2, #136	; 0x88
 80038a8:	0212      	lsls	r2, r2, #8
 80038aa:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7fd fe00 	bl	80014b4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2229      	movs	r2, #41	; 0x29
 80038b8:	2102      	movs	r1, #2
 80038ba:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	22ca      	movs	r2, #202	; 0xca
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2253      	movs	r2, #83	; 0x53
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80038cc:	250f      	movs	r5, #15
 80038ce:	197c      	adds	r4, r7, r5
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f000 fa13 	bl	8003cfe <RTC_EnterInitMode>
 80038d8:	0003      	movs	r3, r0
 80038da:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 80038dc:	197b      	adds	r3, r7, r5
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d148      	bne.n	8003976 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	492c      	ldr	r1, [pc, #176]	; (80039a0 <HAL_RTC_Init+0x128>)
 80038f0:	400a      	ands	r2, r1
 80038f2:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6999      	ldr	r1, [r3, #24]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6912      	ldr	r2, [r2, #16]
 800391a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6919      	ldr	r1, [r3, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	041a      	lsls	r2, r3, #16
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003930:	250f      	movs	r5, #15
 8003932:	197c      	adds	r4, r7, r5
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	0018      	movs	r0, r3
 8003938:	f000 fa24 	bl	8003d84 <RTC_ExitInitMode>
 800393c:	0003      	movs	r3, r0
 800393e:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8003940:	197b      	adds	r3, r7, r5
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	00d2      	lsls	r2, r2, #3
 8003954:	08d2      	lsrs	r2, r2, #3
 8003956:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800397e:	230f      	movs	r3, #15
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2229      	movs	r2, #41	; 0x29
 800398c:	2101      	movs	r1, #1
 800398e:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003990:	230f      	movs	r3, #15
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	781b      	ldrb	r3, [r3, #0]
}
 8003996:	0018      	movs	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	b004      	add	sp, #16
 800399c:	bdb0      	pop	{r4, r5, r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	fb8fffbf 	.word	0xfb8fffbf

080039a4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2228      	movs	r2, #40	; 0x28
 80039b4:	5c9b      	ldrb	r3, [r3, r2]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_RTC_SetAlarm_IT+0x1a>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e127      	b.n	8003c0e <HAL_RTC_SetAlarm_IT+0x26a>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2228      	movs	r2, #40	; 0x28
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2229      	movs	r2, #41	; 0x29
 80039ca:	2102      	movs	r1, #2
 80039cc:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d136      	bne.n	8003a42 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2240      	movs	r2, #64	; 0x40
 80039dc:	4013      	ands	r3, r2
 80039de:	d102      	bne.n	80039e6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2200      	movs	r2, #0
 80039e4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f000 fa10 	bl	8003e10 <RTC_ByteToBcd2>
 80039f0:	0003      	movs	r3, r0
 80039f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 fa09 	bl	8003e10 <RTC_ByteToBcd2>
 80039fe:	0003      	movs	r3, r0
 8003a00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a02:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	789b      	ldrb	r3, [r3, #2]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 fa01 	bl	8003e10 <RTC_ByteToBcd2>
 8003a0e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a10:	0022      	movs	r2, r4
 8003a12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	78db      	ldrb	r3, [r3, #3]
 8003a18:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2220      	movs	r2, #32
 8003a22:	5c9b      	ldrb	r3, [r3, r2]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 f9f3 	bl	8003e10 <RTC_ByteToBcd2>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a2e:	0022      	movs	r2, r4
 8003a30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e022      	b.n	8003a88 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2240      	movs	r2, #64	; 0x40
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d102      	bne.n	8003a54 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2200      	movs	r2, #0
 8003a52:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a60:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003a66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	78db      	ldrb	r3, [r3, #3]
 8003a6c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003a6e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2120      	movs	r1, #32
 8003a74:	5c5b      	ldrb	r3, [r3, r1]
 8003a76:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003a78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003a7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	22ca      	movs	r2, #202	; 0xca
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2253      	movs	r2, #83	; 0x53
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d14c      	bne.n	8003b4a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4957      	ldr	r1, [pc, #348]	; (8003c18 <HAL_RTC_SetAlarm_IT+0x274>)
 8003abc:	400a      	ands	r2, r1
 8003abe:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2101      	movs	r1, #1
 8003acc:	430a      	orrs	r2, r1
 8003ace:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003ad0:	f7fe f964 	bl	8001d9c <HAL_GetTick>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ad8:	e016      	b.n	8003b08 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ada:	f7fe f95f 	bl	8001d9c <HAL_GetTick>
 8003ade:	0002      	movs	r2, r0
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	1ad2      	subs	r2, r2, r3
 8003ae4:	23fa      	movs	r3, #250	; 0xfa
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d90d      	bls.n	8003b08 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	22ff      	movs	r2, #255	; 0xff
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2229      	movs	r2, #41	; 0x29
 8003af8:	2103      	movs	r1, #3
 8003afa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2228      	movs	r2, #40	; 0x28
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e082      	b.n	8003c0e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d0e2      	beq.n	8003ada <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2180      	movs	r1, #128	; 0x80
 8003b30:	0049      	lsls	r1, r1, #1
 8003b32:	430a      	orrs	r2, r1
 8003b34:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	0149      	lsls	r1, r1, #5
 8003b44:	430a      	orrs	r2, r1
 8003b46:	619a      	str	r2, [r3, #24]
 8003b48:	e04b      	b.n	8003be2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4931      	ldr	r1, [pc, #196]	; (8003c1c <HAL_RTC_SetAlarm_IT+0x278>)
 8003b56:	400a      	ands	r2, r1
 8003b58:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2102      	movs	r1, #2
 8003b66:	430a      	orrs	r2, r1
 8003b68:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003b6a:	f7fe f917 	bl	8001d9c <HAL_GetTick>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003b72:	e016      	b.n	8003ba2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b74:	f7fe f912 	bl	8001d9c <HAL_GetTick>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	23fa      	movs	r3, #250	; 0xfa
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90d      	bls.n	8003ba2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	22ff      	movs	r2, #255	; 0xff
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2229      	movs	r2, #41	; 0x29
 8003b92:	2103      	movs	r1, #3
 8003b94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2228      	movs	r2, #40	; 0x28
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e035      	b.n	8003c0e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	4013      	ands	r3, r2
 8003bac:	d0e2      	beq.n	8003b74 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2180      	movs	r1, #128	; 0x80
 8003bca:	0089      	lsls	r1, r1, #2
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	0189      	lsls	r1, r1, #6
 8003bde:	430a      	orrs	r2, r1
 8003be0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003be2:	4a0f      	ldr	r2, [pc, #60]	; (8003c20 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	58d3      	ldr	r3, [r2, r3]
 8003be8:	490d      	ldr	r1, [pc, #52]	; (8003c20 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	0312      	lsls	r2, r2, #12
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	2280      	movs	r2, #128	; 0x80
 8003bf2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2229      	movs	r2, #41	; 0x29
 8003c00:	2101      	movs	r1, #1
 8003c02:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2228      	movs	r2, #40	; 0x28
 8003c08:	2100      	movs	r1, #0
 8003c0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b009      	add	sp, #36	; 0x24
 8003c14:	bd90      	pop	{r4, r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	fffffeff 	.word	0xfffffeff
 8003c1c:	fffffdff 	.word	0xfffffdff
 8003c20:	40021800 	.word	0x40021800

08003c24 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	015b      	lsls	r3, r3, #5
 8003c36:	4013      	ands	r3, r2
 8003c38:	d011      	beq.n	8003c5e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	2201      	movs	r2, #1
 8003c42:	4013      	ands	r3, r2
 8003c44:	d00b      	beq.n	8003c5e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 f821 	bl	8003ca0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	019b      	lsls	r3, r3, #6
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d011      	beq.n	8003c90 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	2202      	movs	r2, #2
 8003c74:	4013      	ands	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2102      	movs	r1, #2
 8003c84:	430a      	orrs	r2, r1
 8003c86:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 f8e9 	bl	8003e62 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2229      	movs	r2, #41	; 0x29
 8003c94:	2101      	movs	r1, #1
 8003c96:	5499      	strb	r1, [r3, r2]
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	21a0      	movs	r1, #160	; 0xa0
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003cc8:	f7fe f868 	bl	8001d9c <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003cd2:	f7fe f863 	bl	8001d9c <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1ad2      	subs	r2, r2, r3
 8003cdc:	23fa      	movs	r3, #250	; 0xfa
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e006      	b.n	8003cf6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d0ee      	beq.n	8003cd2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b004      	add	sp, #16
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003d06:	230f      	movs	r3, #15
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	2240      	movs	r2, #64	; 0x40
 8003d16:	4013      	ands	r3, r2
 8003d18:	d12d      	bne.n	8003d76 <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	430a      	orrs	r2, r1
 8003d28:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003d2a:	f7fe f837 	bl	8001d9c <HAL_GetTick>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d32:	e015      	b.n	8003d60 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d34:	f7fe f832 	bl	8001d9c <HAL_GetTick>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	210f      	movs	r1, #15
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	1879      	adds	r1, r7, r1
 8003d44:	7809      	ldrb	r1, [r1, #0]
 8003d46:	7019      	strb	r1, [r3, #0]
 8003d48:	23fa      	movs	r3, #250	; 0xfa
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d907      	bls.n	8003d60 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8003d50:	230f      	movs	r3, #15
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	2203      	movs	r2, #3
 8003d56:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2229      	movs	r2, #41	; 0x29
 8003d5c:	2103      	movs	r1, #3
 8003d5e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2240      	movs	r2, #64	; 0x40
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d104      	bne.n	8003d76 <RTC_EnterInitMode+0x78>
 8003d6c:	230f      	movs	r3, #15
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d1de      	bne.n	8003d34 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003d76:	230f      	movs	r3, #15
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b004      	add	sp, #16
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8c:	230f      	movs	r3, #15
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003d94:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <RTC_ExitInitMode+0x88>)
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <RTC_ExitInitMode+0x88>)
 8003d9a:	2180      	movs	r1, #128	; 0x80
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <RTC_ExitInitMode+0x88>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2220      	movs	r2, #32
 8003da6:	4013      	ands	r3, r2
 8003da8:	d10e      	bne.n	8003dc8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff ff7f 	bl	8003cb0 <HAL_RTC_WaitForSynchro>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d022      	beq.n	8003dfc <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2229      	movs	r2, #41	; 0x29
 8003dba:	2103      	movs	r1, #3
 8003dbc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003dbe:	230f      	movs	r3, #15
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e019      	b.n	8003dfc <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003dc8:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <RTC_ExitInitMode+0x88>)
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <RTC_ExitInitMode+0x88>)
 8003dce:	2120      	movs	r1, #32
 8003dd0:	438a      	bics	r2, r1
 8003dd2:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7ff ff6a 	bl	8003cb0 <HAL_RTC_WaitForSynchro>
 8003ddc:	1e03      	subs	r3, r0, #0
 8003dde:	d007      	beq.n	8003df0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2229      	movs	r2, #41	; 0x29
 8003de4:	2103      	movs	r1, #3
 8003de6:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003de8:	230f      	movs	r3, #15
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2203      	movs	r2, #3
 8003dee:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <RTC_ExitInitMode+0x88>)
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <RTC_ExitInitMode+0x88>)
 8003df6:	2120      	movs	r1, #32
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003dfc:	230f      	movs	r3, #15
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	781b      	ldrb	r3, [r3, #0]
}
 8003e02:	0018      	movs	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	40002800 	.word	0x40002800

08003e10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	0002      	movs	r2, r0
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003e20:	230b      	movs	r3, #11
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	1dfa      	adds	r2, r7, #7
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003e2a:	e008      	b.n	8003e3e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003e32:	220b      	movs	r2, #11
 8003e34:	18bb      	adds	r3, r7, r2
 8003e36:	18ba      	adds	r2, r7, r2
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	3a0a      	subs	r2, #10
 8003e3c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003e3e:	230b      	movs	r3, #11
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b09      	cmp	r3, #9
 8003e46:	d8f1      	bhi.n	8003e2c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	230b      	movs	r3, #11
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b002      	add	sp, #8
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e01e      	b.n	8003ec2 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	223d      	movs	r2, #61	; 0x3d
 8003e88:	5c9b      	ldrb	r3, [r3, r2]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	223c      	movs	r2, #60	; 0x3c
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7fd fdfc 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	223d      	movs	r2, #61	; 0x3d
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	0010      	movs	r0, r2
 8003eb4:	f000 fc00 	bl	80046b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	223d      	movs	r2, #61	; 0x3d
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2101      	movs	r1, #1
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <HAL_TIM_Base_Start_IT+0x50>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d00c      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x44>
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	025b      	lsls	r3, r3, #9
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d007      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	0018      	movs	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b004      	add	sp, #16
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	00010007 	.word	0x00010007

08003f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e01e      	b.n	8003f70 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	223d      	movs	r2, #61	; 0x3d
 8003f36:	5c9b      	ldrb	r3, [r3, r2]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	223c      	movs	r2, #60	; 0x3c
 8003f42:	2100      	movs	r1, #0
 8003f44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 f815 	bl	8003f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	223d      	movs	r2, #61	; 0x3d
 8003f52:	2102      	movs	r1, #2
 8003f54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	0019      	movs	r1, r3
 8003f60:	0010      	movs	r0, r2
 8003f62:	f000 fba9 	bl	80046b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	223d      	movs	r2, #61	; 0x3d
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b002      	add	sp, #8
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e02e      	b.n	8003ffa <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	223d      	movs	r2, #61	; 0x3d
 8003fa0:	5c9b      	ldrb	r3, [r3, r2]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	223c      	movs	r2, #60	; 0x3c
 8003fac:	2100      	movs	r1, #0
 8003fae:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 f825 	bl	8004002 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	223d      	movs	r2, #61	; 0x3d
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	0019      	movs	r1, r3
 8003fca:	0010      	movs	r0, r2
 8003fcc:	f000 fb74 	bl	80046b8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2108      	movs	r1, #8
 8003fdc:	438a      	bics	r2, r1
 8003fde:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6819      	ldr	r1, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	223d      	movs	r2, #61	; 0x3d
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b002      	add	sp, #8
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	46bd      	mov	sp, r7
 800400e:	b002      	add	sp, #8
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2201      	movs	r2, #1
 8004024:	2100      	movs	r1, #0
 8004026:	0018      	movs	r0, r3
 8004028:	f000 ff26 	bl	8004e78 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	2104      	movs	r1, #4
 8004034:	0018      	movs	r0, r3
 8004036:	f000 ff1f 	bl	8004e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a12      	ldr	r2, [pc, #72]	; (8004088 <HAL_TIM_OnePulse_Start+0x74>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_TIM_OnePulse_Start+0x4e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a10      	ldr	r2, [pc, #64]	; (800408c <HAL_TIM_OnePulse_Start+0x78>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_TIM_OnePulse_Start+0x4e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <HAL_TIM_OnePulse_Start+0x7c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_TIM_OnePulse_Start+0x4e>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <HAL_TIM_OnePulse_Start+0x80>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <HAL_TIM_OnePulse_Start+0x52>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_TIM_OnePulse_Start+0x54>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_TIM_OnePulse_Start+0x6a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	0209      	lsls	r1, r1, #8
 800407a:	430a      	orrs	r2, r1
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800

08004098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2202      	movs	r2, #2
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d124      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2202      	movs	r2, #2
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d11d      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2203      	movs	r2, #3
 80040c2:	4252      	negs	r2, r2
 80040c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2203      	movs	r2, #3
 80040d4:	4013      	ands	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 fad4 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e007      	b.n	80040f2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 fac7 	bl	8004678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f000 fad3 	bl	8004698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2204      	movs	r2, #4
 8004100:	4013      	ands	r3, r2
 8004102:	2b04      	cmp	r3, #4
 8004104:	d125      	bne.n	8004152 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2204      	movs	r2, #4
 800410e:	4013      	ands	r3, r2
 8004110:	2b04      	cmp	r3, #4
 8004112:	d11e      	bne.n	8004152 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2205      	movs	r2, #5
 800411a:	4252      	negs	r2, r2
 800411c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	23c0      	movs	r3, #192	; 0xc0
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4013      	ands	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f000 faa7 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 800413a:	e007      	b.n	800414c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	0018      	movs	r0, r3
 8004140:	f000 fa9a 	bl	8004678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0018      	movs	r0, r3
 8004148:	f000 faa6 	bl	8004698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2208      	movs	r2, #8
 800415a:	4013      	ands	r3, r2
 800415c:	2b08      	cmp	r3, #8
 800415e:	d124      	bne.n	80041aa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2208      	movs	r2, #8
 8004168:	4013      	ands	r3, r2
 800416a:	2b08      	cmp	r3, #8
 800416c:	d11d      	bne.n	80041aa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2209      	movs	r2, #9
 8004174:	4252      	negs	r2, r2
 8004176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2204      	movs	r2, #4
 800417c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	2203      	movs	r2, #3
 8004186:	4013      	ands	r3, r2
 8004188:	d004      	beq.n	8004194 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 fa7b 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 8004192:	e007      	b.n	80041a4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 fa6e 	bl	8004678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 fa7a 	bl	8004698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2210      	movs	r2, #16
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d125      	bne.n	8004204 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2210      	movs	r2, #16
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d11e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2211      	movs	r2, #17
 80041cc:	4252      	negs	r2, r2
 80041ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2208      	movs	r2, #8
 80041d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	23c0      	movs	r3, #192	; 0xc0
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4013      	ands	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fa4e 	bl	8004688 <HAL_TIM_IC_CaptureCallback>
 80041ec:	e007      	b.n	80041fe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 fa41 	bl	8004678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	0018      	movs	r0, r3
 80041fa:	f000 fa4d 	bl	8004698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2201      	movs	r2, #1
 800420c:	4013      	ands	r3, r2
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10f      	bne.n	8004232 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	4013      	ands	r3, r2
 800421c:	2b01      	cmp	r3, #1
 800421e:	d108      	bne.n	8004232 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2202      	movs	r2, #2
 8004226:	4252      	negs	r2, r2
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fc feb7 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	4013      	ands	r3, r2
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	d10f      	bne.n	8004260 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	4013      	ands	r3, r2
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d108      	bne.n	8004260 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2281      	movs	r2, #129	; 0x81
 8004254:	4252      	negs	r2, r2
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	0018      	movs	r0, r3
 800425c:	f000 ff34 	bl	80050c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	401a      	ands	r2, r3
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	429a      	cmp	r2, r3
 8004272:	d10e      	bne.n	8004292 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2280      	movs	r2, #128	; 0x80
 800427c:	4013      	ands	r3, r2
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d107      	bne.n	8004292 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <HAL_TIM_IRQHandler+0x260>)
 8004288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f000 ff23 	bl	80050d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2240      	movs	r2, #64	; 0x40
 800429a:	4013      	ands	r3, r2
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d10f      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2240      	movs	r2, #64	; 0x40
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d108      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2241      	movs	r2, #65	; 0x41
 80042b4:	4252      	negs	r2, r2
 80042b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 f9f4 	bl	80046a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2220      	movs	r2, #32
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b20      	cmp	r3, #32
 80042cc:	d10f      	bne.n	80042ee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d108      	bne.n	80042ee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2221      	movs	r2, #33	; 0x21
 80042e2:	4252      	negs	r2, r2
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 fee5 	bl	80050b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	fffffeff 	.word	0xfffffeff

080042fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	223c      	movs	r2, #60	; 0x3c
 800430c:	5c9b      	ldrb	r3, [r3, r2]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004312:	2302      	movs	r3, #2
 8004314:	e0e7      	b.n	80044e6 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	223c      	movs	r2, #60	; 0x3c
 800431a:	2101      	movs	r1, #1
 800431c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	223d      	movs	r2, #61	; 0x3d
 8004322:	2102      	movs	r1, #2
 8004324:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b14      	cmp	r3, #20
 800432a:	d900      	bls.n	800432e <HAL_TIM_PWM_ConfigChannel+0x32>
 800432c:	e0d1      	b.n	80044d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	009a      	lsls	r2, r3, #2
 8004332:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8004334:	18d3      	adds	r3, r2, r3
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	0011      	movs	r1, r2
 8004342:	0018      	movs	r0, r3
 8004344:	f000 fa38 	bl	80047b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2108      	movs	r1, #8
 8004354:	430a      	orrs	r2, r1
 8004356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2104      	movs	r1, #4
 8004364:	438a      	bics	r2, r1
 8004366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6999      	ldr	r1, [r3, #24]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	619a      	str	r2, [r3, #24]
      break;
 800437a:	e0ab      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	0011      	movs	r1, r2
 8004384:	0018      	movs	r0, r3
 8004386:	f000 faa1 	bl	80048cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	0109      	lsls	r1, r1, #4
 8004398:	430a      	orrs	r2, r1
 800439a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4953      	ldr	r1, [pc, #332]	; (80044f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80043a8:	400a      	ands	r2, r1
 80043aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6999      	ldr	r1, [r3, #24]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	021a      	lsls	r2, r3, #8
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	619a      	str	r2, [r3, #24]
      break;
 80043c0:	e088      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 fb02 	bl	80049d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2108      	movs	r1, #8
 80043dc:	430a      	orrs	r2, r1
 80043de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2104      	movs	r1, #4
 80043ec:	438a      	bics	r2, r1
 80043ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69d9      	ldr	r1, [r3, #28]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	61da      	str	r2, [r3, #28]
      break;
 8004402:	e067      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f000 fb69 	bl	8004ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	0109      	lsls	r1, r1, #4
 8004420:	430a      	orrs	r2, r1
 8004422:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4931      	ldr	r1, [pc, #196]	; (80044f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004430:	400a      	ands	r2, r1
 8004432:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69d9      	ldr	r1, [r3, #28]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	61da      	str	r2, [r3, #28]
      break;
 8004448:	e044      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	0011      	movs	r1, r2
 8004452:	0018      	movs	r0, r3
 8004454:	f000 fbb0 	bl	8004bb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2108      	movs	r1, #8
 8004464:	430a      	orrs	r2, r1
 8004466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2104      	movs	r1, #4
 8004474:	438a      	bics	r2, r1
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800448a:	e023      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f000 fbef 	bl	8004c78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2180      	movs	r1, #128	; 0x80
 80044a6:	0109      	lsls	r1, r1, #4
 80044a8:	430a      	orrs	r2, r1
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	490f      	ldr	r1, [pc, #60]	; (80044f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80044b8:	400a      	ands	r2, r1
 80044ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	021a      	lsls	r2, r3, #8
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044d0:	e000      	b.n	80044d4 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 80044d2:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	223d      	movs	r2, #61	; 0x3d
 80044d8:	2101      	movs	r1, #1
 80044da:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	223c      	movs	r2, #60	; 0x3c
 80044e0:	2100      	movs	r1, #0
 80044e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b004      	add	sp, #16
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	08005734 	.word	0x08005734
 80044f4:	fffffbff 	.word	0xfffffbff

080044f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	223c      	movs	r2, #60	; 0x3c
 8004506:	5c9b      	ldrb	r3, [r3, r2]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_TIM_ConfigClockSource+0x18>
 800450c:	2302      	movs	r3, #2
 800450e:	e0ab      	b.n	8004668 <HAL_TIM_ConfigClockSource+0x170>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	223c      	movs	r2, #60	; 0x3c
 8004514:	2101      	movs	r1, #1
 8004516:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	223d      	movs	r2, #61	; 0x3d
 800451c:	2102      	movs	r1, #2
 800451e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a51      	ldr	r2, [pc, #324]	; (8004670 <HAL_TIM_ConfigClockSource+0x178>)
 800452c:	4013      	ands	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a50      	ldr	r2, [pc, #320]	; (8004674 <HAL_TIM_ConfigClockSource+0x17c>)
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d100      	bne.n	800454a <HAL_TIM_ConfigClockSource+0x52>
 8004548:	e06b      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x12a>
 800454a:	d80e      	bhi.n	800456a <HAL_TIM_ConfigClockSource+0x72>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d100      	bne.n	8004552 <HAL_TIM_ConfigClockSource+0x5a>
 8004550:	e077      	b.n	8004642 <HAL_TIM_ConfigClockSource+0x14a>
 8004552:	d803      	bhi.n	800455c <HAL_TIM_ConfigClockSource+0x64>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d100      	bne.n	800455a <HAL_TIM_ConfigClockSource+0x62>
 8004558:	e073      	b.n	8004642 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800455a:	e07c      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800455c:	2b20      	cmp	r3, #32
 800455e:	d100      	bne.n	8004562 <HAL_TIM_ConfigClockSource+0x6a>
 8004560:	e06f      	b.n	8004642 <HAL_TIM_ConfigClockSource+0x14a>
 8004562:	2b30      	cmp	r3, #48	; 0x30
 8004564:	d100      	bne.n	8004568 <HAL_TIM_ConfigClockSource+0x70>
 8004566:	e06c      	b.n	8004642 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004568:	e075      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800456a:	2b70      	cmp	r3, #112	; 0x70
 800456c:	d00e      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x94>
 800456e:	d804      	bhi.n	800457a <HAL_TIM_ConfigClockSource+0x82>
 8004570:	2b50      	cmp	r3, #80	; 0x50
 8004572:	d036      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xea>
 8004574:	2b60      	cmp	r3, #96	; 0x60
 8004576:	d044      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004578:	e06d      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	0152      	lsls	r2, r2, #5
 800457e:	4293      	cmp	r3, r2
 8004580:	d068      	beq.n	8004654 <HAL_TIM_ConfigClockSource+0x15c>
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	0192      	lsls	r2, r2, #6
 8004586:	4293      	cmp	r3, r2
 8004588:	d017      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800458a:	e064      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f000 fc4c 	bl	8004e38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2277      	movs	r2, #119	; 0x77
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	609a      	str	r2, [r3, #8]
      break;
 80045b8:	e04d      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6899      	ldr	r1, [r3, #8]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f000 fc35 	bl	8004e38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	01c9      	lsls	r1, r1, #7
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]
      break;
 80045e0:	e039      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6859      	ldr	r1, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	001a      	movs	r2, r3
 80045f0:	f000 fba6 	bl	8004d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2150      	movs	r1, #80	; 0x50
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 fc00 	bl	8004e00 <TIM_ITRx_SetConfig>
      break;
 8004600:	e029      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6859      	ldr	r1, [r3, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	001a      	movs	r2, r3
 8004610:	f000 fbc4 	bl	8004d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2160      	movs	r1, #96	; 0x60
 800461a:	0018      	movs	r0, r3
 800461c:	f000 fbf0 	bl	8004e00 <TIM_ITRx_SetConfig>
      break;
 8004620:	e019      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	001a      	movs	r2, r3
 8004630:	f000 fb86 	bl	8004d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2140      	movs	r1, #64	; 0x40
 800463a:	0018      	movs	r0, r3
 800463c:	f000 fbe0 	bl	8004e00 <TIM_ITRx_SetConfig>
      break;
 8004640:	e009      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0019      	movs	r1, r3
 800464c:	0010      	movs	r0, r2
 800464e:	f000 fbd7 	bl	8004e00 <TIM_ITRx_SetConfig>
      break;
 8004652:	e000      	b.n	8004656 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004654:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	223d      	movs	r2, #61	; 0x3d
 800465a:	2101      	movs	r1, #1
 800465c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	223c      	movs	r2, #60	; 0x3c
 8004662:	2100      	movs	r1, #0
 8004664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b004      	add	sp, #16
 800466e:	bd80      	pop	{r7, pc}
 8004670:	ffceff88 	.word	0xffceff88
 8004674:	ffff00ff 	.word	0xffff00ff

08004678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b002      	add	sp, #8
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b002      	add	sp, #8
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a34      	ldr	r2, [pc, #208]	; (800479c <TIM_Base_SetConfig+0xe4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d008      	beq.n	80046e2 <TIM_Base_SetConfig+0x2a>
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	05db      	lsls	r3, r3, #23
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d003      	beq.n	80046e2 <TIM_Base_SetConfig+0x2a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a30      	ldr	r2, [pc, #192]	; (80047a0 <TIM_Base_SetConfig+0xe8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d108      	bne.n	80046f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2270      	movs	r2, #112	; 0x70
 80046e6:	4393      	bics	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a29      	ldr	r2, [pc, #164]	; (800479c <TIM_Base_SetConfig+0xe4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d018      	beq.n	800472e <TIM_Base_SetConfig+0x76>
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	05db      	lsls	r3, r3, #23
 8004702:	429a      	cmp	r2, r3
 8004704:	d013      	beq.n	800472e <TIM_Base_SetConfig+0x76>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <TIM_Base_SetConfig+0xe8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <TIM_Base_SetConfig+0x76>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <TIM_Base_SetConfig+0xec>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_Base_SetConfig+0x76>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a23      	ldr	r2, [pc, #140]	; (80047a8 <TIM_Base_SetConfig+0xf0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_Base_SetConfig+0x76>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a22      	ldr	r2, [pc, #136]	; (80047ac <TIM_Base_SetConfig+0xf4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_Base_SetConfig+0x76>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <TIM_Base_SetConfig+0xf8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a20      	ldr	r2, [pc, #128]	; (80047b4 <TIM_Base_SetConfig+0xfc>)
 8004732:	4013      	ands	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2280      	movs	r2, #128	; 0x80
 8004744:	4393      	bics	r3, r2
 8004746:	001a      	movs	r2, r3
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a0c      	ldr	r2, [pc, #48]	; (800479c <TIM_Base_SetConfig+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_Base_SetConfig+0xce>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <TIM_Base_SetConfig+0xf0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0xce>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <TIM_Base_SetConfig+0xf4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0xce>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a0b      	ldr	r2, [pc, #44]	; (80047b0 <TIM_Base_SetConfig+0xf8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d103      	bne.n	800478e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	615a      	str	r2, [r3, #20]
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b004      	add	sp, #16
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40000400 	.word	0x40000400
 80047a4:	40002000 	.word	0x40002000
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40014400 	.word	0x40014400
 80047b0:	40014800 	.word	0x40014800
 80047b4:	fffffcff 	.word	0xfffffcff

080047b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	2201      	movs	r2, #1
 80047c8:	4393      	bics	r3, r2
 80047ca:	001a      	movs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a32      	ldr	r2, [pc, #200]	; (80048b0 <TIM_OC1_SetConfig+0xf8>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2203      	movs	r2, #3
 80047ee:	4393      	bics	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2202      	movs	r2, #2
 8004800:	4393      	bics	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <TIM_OC1_SetConfig+0xfc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_OC1_SetConfig+0x76>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <TIM_OC1_SetConfig+0x100>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_OC1_SetConfig+0x76>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a26      	ldr	r2, [pc, #152]	; (80048bc <TIM_OC1_SetConfig+0x104>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_OC1_SetConfig+0x76>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a25      	ldr	r2, [pc, #148]	; (80048c0 <TIM_OC1_SetConfig+0x108>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d10c      	bne.n	8004848 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2208      	movs	r2, #8
 8004832:	4393      	bics	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	2204      	movs	r2, #4
 8004844:	4393      	bics	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <TIM_OC1_SetConfig+0xfc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00b      	beq.n	8004868 <TIM_OC1_SetConfig+0xb0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <TIM_OC1_SetConfig+0x100>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d007      	beq.n	8004868 <TIM_OC1_SetConfig+0xb0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <TIM_OC1_SetConfig+0x104>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_OC1_SetConfig+0xb0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <TIM_OC1_SetConfig+0x108>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d111      	bne.n	800488c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <TIM_OC1_SetConfig+0x10c>)
 800486c:	4013      	ands	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <TIM_OC1_SetConfig+0x110>)
 8004874:	4013      	ands	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b006      	add	sp, #24
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	fffeff8f 	.word	0xfffeff8f
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800
 80048c4:	fffffeff 	.word	0xfffffeff
 80048c8:	fffffdff 	.word	0xfffffdff

080048cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	2210      	movs	r2, #16
 80048dc:	4393      	bics	r3, r2
 80048de:	001a      	movs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a2e      	ldr	r2, [pc, #184]	; (80049b4 <TIM_OC2_SetConfig+0xe8>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <TIM_OC2_SetConfig+0xec>)
 8004902:	4013      	ands	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2220      	movs	r2, #32
 8004916:	4393      	bics	r3, r2
 8004918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a24      	ldr	r2, [pc, #144]	; (80049bc <TIM_OC2_SetConfig+0xf0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10d      	bne.n	800494a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2280      	movs	r2, #128	; 0x80
 8004932:	4393      	bics	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2240      	movs	r2, #64	; 0x40
 8004946:	4393      	bics	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <TIM_OC2_SetConfig+0xf0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_OC2_SetConfig+0x9e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <TIM_OC2_SetConfig+0xf4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_OC2_SetConfig+0x9e>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_OC2_SetConfig+0xf8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_OC2_SetConfig+0x9e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <TIM_OC2_SetConfig+0xfc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d113      	bne.n	8004992 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <TIM_OC2_SetConfig+0x100>)
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <TIM_OC2_SetConfig+0x104>)
 8004976:	4013      	ands	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b006      	add	sp, #24
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	feff8fff 	.word	0xfeff8fff
 80049b8:	fffffcff 	.word	0xfffffcff
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800
 80049cc:	fffffbff 	.word	0xfffffbff
 80049d0:	fffff7ff 	.word	0xfffff7ff

080049d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a35      	ldr	r2, [pc, #212]	; (8004ab8 <TIM_OC3_SetConfig+0xe4>)
 80049e4:	401a      	ands	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a2f      	ldr	r2, [pc, #188]	; (8004abc <TIM_OC3_SetConfig+0xe8>)
 8004a00:	4013      	ands	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2203      	movs	r2, #3
 8004a08:	4393      	bics	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4a29      	ldr	r2, [pc, #164]	; (8004ac0 <TIM_OC3_SetConfig+0xec>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a25      	ldr	r2, [pc, #148]	; (8004ac4 <TIM_OC3_SetConfig+0xf0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10d      	bne.n	8004a4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	4a24      	ldr	r2, [pc, #144]	; (8004ac8 <TIM_OC3_SetConfig+0xf4>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <TIM_OC3_SetConfig+0xf8>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <TIM_OC3_SetConfig+0xf0>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <TIM_OC3_SetConfig+0x9a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <TIM_OC3_SetConfig+0xfc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <TIM_OC3_SetConfig+0x9a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <TIM_OC3_SetConfig+0x100>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d003      	beq.n	8004a6e <TIM_OC3_SetConfig+0x9a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <TIM_OC3_SetConfig+0x104>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d113      	bne.n	8004a96 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4a1a      	ldr	r2, [pc, #104]	; (8004adc <TIM_OC3_SetConfig+0x108>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <TIM_OC3_SetConfig+0x10c>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	621a      	str	r2, [r3, #32]
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b006      	add	sp, #24
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	fffffeff 	.word	0xfffffeff
 8004abc:	fffeff8f 	.word	0xfffeff8f
 8004ac0:	fffffdff 	.word	0xfffffdff
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	fffff7ff 	.word	0xfffff7ff
 8004acc:	fffffbff 	.word	0xfffffbff
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800
 8004adc:	ffffefff 	.word	0xffffefff
 8004ae0:	ffffdfff 	.word	0xffffdfff

08004ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	4a28      	ldr	r2, [pc, #160]	; (8004b94 <TIM_OC4_SetConfig+0xb0>)
 8004af4:	401a      	ands	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <TIM_OC4_SetConfig+0xb4>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <TIM_OC4_SetConfig+0xb8>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <TIM_OC4_SetConfig+0xbc>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	031b      	lsls	r3, r3, #12
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a19      	ldr	r2, [pc, #100]	; (8004ba4 <TIM_OC4_SetConfig+0xc0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00b      	beq.n	8004b5c <TIM_OC4_SetConfig+0x78>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <TIM_OC4_SetConfig+0xc4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_OC4_SetConfig+0x78>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a17      	ldr	r2, [pc, #92]	; (8004bac <TIM_OC4_SetConfig+0xc8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC4_SetConfig+0x78>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <TIM_OC4_SetConfig+0xcc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d109      	bne.n	8004b70 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <TIM_OC4_SetConfig+0xd0>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b006      	add	sp, #24
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	ffffefff 	.word	0xffffefff
 8004b98:	feff8fff 	.word	0xfeff8fff
 8004b9c:	fffffcff 	.word	0xfffffcff
 8004ba0:	ffffdfff 	.word	0xffffdfff
 8004ba4:	40012c00 	.word	0x40012c00
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800
 8004bb4:	ffffbfff 	.word	0xffffbfff

08004bb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	4a25      	ldr	r2, [pc, #148]	; (8004c5c <TIM_OC5_SetConfig+0xa4>)
 8004bc8:	401a      	ands	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <TIM_OC5_SetConfig+0xa8>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <TIM_OC5_SetConfig+0xac>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <TIM_OC5_SetConfig+0xb0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_OC5_SetConfig+0x6e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <TIM_OC5_SetConfig+0xb4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_OC5_SetConfig+0x6e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <TIM_OC5_SetConfig+0xb8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_OC5_SetConfig+0x6e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a14      	ldr	r2, [pc, #80]	; (8004c74 <TIM_OC5_SetConfig+0xbc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d109      	bne.n	8004c3a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4a0c      	ldr	r2, [pc, #48]	; (8004c5c <TIM_OC5_SetConfig+0xa4>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	621a      	str	r2, [r3, #32]
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b006      	add	sp, #24
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	fffeffff 	.word	0xfffeffff
 8004c60:	fffeff8f 	.word	0xfffeff8f
 8004c64:	fffdffff 	.word	0xfffdffff
 8004c68:	40012c00 	.word	0x40012c00
 8004c6c:	40014000 	.word	0x40014000
 8004c70:	40014400 	.word	0x40014400
 8004c74:	40014800 	.word	0x40014800

08004c78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <TIM_OC6_SetConfig+0xa8>)
 8004c88:	401a      	ands	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <TIM_OC6_SetConfig+0xac>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <TIM_OC6_SetConfig+0xb0>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	051b      	lsls	r3, r3, #20
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <TIM_OC6_SetConfig+0xb4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00b      	beq.n	8004ce8 <TIM_OC6_SetConfig+0x70>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <TIM_OC6_SetConfig+0xb8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d007      	beq.n	8004ce8 <TIM_OC6_SetConfig+0x70>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC6_SetConfig+0xbc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_OC6_SetConfig+0x70>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC6_SetConfig+0xc0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d109      	bne.n	8004cfc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC6_SetConfig+0xc4>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b006      	add	sp, #24
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	ffefffff 	.word	0xffefffff
 8004d24:	feff8fff 	.word	0xfeff8fff
 8004d28:	ffdfffff 	.word	0xffdfffff
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800
 8004d3c:	fffbffff 	.word	0xfffbffff

08004d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	2201      	movs	r2, #1
 8004d58:	4393      	bics	r3, r2
 8004d5a:	001a      	movs	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	22f0      	movs	r2, #240	; 0xf0
 8004d6a:	4393      	bics	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	220a      	movs	r2, #10
 8004d7c:	4393      	bics	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	621a      	str	r2, [r3, #32]
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b006      	add	sp, #24
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	2210      	movs	r2, #16
 8004dae:	4393      	bics	r3, r2
 8004db0:	001a      	movs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <TIM_TI2_ConfigInputStage+0x60>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	22a0      	movs	r2, #160	; 0xa0
 8004dd8:	4393      	bics	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	621a      	str	r2, [r3, #32]
}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b006      	add	sp, #24
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	ffff0fff 	.word	0xffff0fff

08004e00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <TIM_ITRx_SetConfig+0x34>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	2207      	movs	r2, #7
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	609a      	str	r2, [r3, #8]
}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b004      	add	sp, #16
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	ffcfff8f 	.word	0xffcfff8f

08004e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	4a09      	ldr	r2, [pc, #36]	; (8004e74 <TIM_ETR_SetConfig+0x3c>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	021a      	lsls	r2, r3, #8
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	609a      	str	r2, [r3, #8]
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b006      	add	sp, #24
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	ffff00ff 	.word	0xffff00ff

08004e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	221f      	movs	r2, #31
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	409a      	lsls	r2, r3
 8004e8e:	0013      	movs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	43d2      	mvns	r2, r2
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	211f      	movs	r1, #31
 8004ea8:	400b      	ands	r3, r1
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4099      	lsls	r1, r3
 8004eae:	000b      	movs	r3, r1
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b006      	add	sp, #24
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	223c      	movs	r2, #60	; 0x3c
 8004ece:	5c9b      	ldrb	r3, [r3, r2]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e040      	b.n	8004f5a <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	223c      	movs	r2, #60	; 0x3c
 8004edc:	2101      	movs	r1, #1
 8004ede:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	223d      	movs	r2, #61	; 0x3d
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2270      	movs	r2, #112	; 0x70
 8004f18:	4393      	bics	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2280      	movs	r2, #128	; 0x80
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	223d      	movs	r2, #61	; 0x3d
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	223c      	movs	r2, #60	; 0x3c
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	b004      	add	sp, #16
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	ff0fffff 	.word	0xff0fffff

08004f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	223c      	movs	r2, #60	; 0x3c
 8004f7e:	5c9b      	ldrb	r3, [r3, r2]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e079      	b.n	800507c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	223c      	movs	r2, #60	; 0x3c
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	4393      	bics	r3, r2
 8004f96:	001a      	movs	r2, r3
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a38      	ldr	r2, [pc, #224]	; (8005084 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4a35      	ldr	r2, [pc, #212]	; (8005088 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a33      	ldr	r2, [pc, #204]	; (800508c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004fc0:	401a      	ands	r2, r3
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a30      	ldr	r2, [pc, #192]	; (8005090 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004fce:	401a      	ands	r2, r3
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4a2e      	ldr	r2, [pc, #184]	; (8005094 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004fdc:	401a      	ands	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004fea:	401a      	ands	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4a29      	ldr	r2, [pc, #164]	; (800509c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004ff8:	401a      	ands	r2, r3
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a25      	ldr	r2, [pc, #148]	; (80050a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d106      	bne.n	800501c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005012:	401a      	ands	r2, r3
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d121      	bne.n	800506a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800502a:	401a      	ands	r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	051b      	lsls	r3, r3, #20
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800503a:	401a      	ands	r2, r3
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a1a      	ldr	r2, [pc, #104]	; (80050b0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005048:	401a      	ands	r2, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d106      	bne.n	800506a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005060:	401a      	ands	r2, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	223c      	movs	r2, #60	; 0x3c
 8005076:	2100      	movs	r1, #0
 8005078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	0018      	movs	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	b004      	add	sp, #16
 8005082:	bd80      	pop	{r7, pc}
 8005084:	fffffcff 	.word	0xfffffcff
 8005088:	fffffbff 	.word	0xfffffbff
 800508c:	fffff7ff 	.word	0xfffff7ff
 8005090:	ffffefff 	.word	0xffffefff
 8005094:	ffffdfff 	.word	0xffffdfff
 8005098:	ffffbfff 	.word	0xffffbfff
 800509c:	fff0ffff 	.word	0xfff0ffff
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	efffffff 	.word	0xefffffff
 80050a8:	ff0fffff 	.word	0xff0fffff
 80050ac:	feffffff 	.word	0xfeffffff
 80050b0:	fdffffff 	.word	0xfdffffff
 80050b4:	dfffffff 	.word	0xdfffffff

080050b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b002      	add	sp, #8
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d0:	46c0      	nop			; (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b002      	add	sp, #8
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b002      	add	sp, #8
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <LL_EXTI_EnableIT_0_31>:
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80050f0:	4a05      	ldr	r2, [pc, #20]	; (8005108 <LL_EXTI_EnableIT_0_31+0x20>)
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	58d2      	ldr	r2, [r2, r3]
 80050f6:	4904      	ldr	r1, [pc, #16]	; (8005108 <LL_EXTI_EnableIT_0_31+0x20>)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	2280      	movs	r2, #128	; 0x80
 80050fe:	508b      	str	r3, [r1, r2]
}
 8005100:	46c0      	nop			; (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	b002      	add	sp, #8
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021800 	.word	0x40021800

0800510c <LL_EXTI_EnableIT_32_63>:
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005114:	4a05      	ldr	r2, [pc, #20]	; (800512c <LL_EXTI_EnableIT_32_63+0x20>)
 8005116:	2390      	movs	r3, #144	; 0x90
 8005118:	58d2      	ldr	r2, [r2, r3]
 800511a:	4904      	ldr	r1, [pc, #16]	; (800512c <LL_EXTI_EnableIT_32_63+0x20>)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4313      	orrs	r3, r2
 8005120:	2290      	movs	r2, #144	; 0x90
 8005122:	508b      	str	r3, [r1, r2]
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40021800 	.word	0x40021800

08005130 <LL_EXTI_DisableIT_0_31>:
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005138:	4a06      	ldr	r2, [pc, #24]	; (8005154 <LL_EXTI_DisableIT_0_31+0x24>)
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	58d3      	ldr	r3, [r2, r3]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	43d2      	mvns	r2, r2
 8005142:	4904      	ldr	r1, [pc, #16]	; (8005154 <LL_EXTI_DisableIT_0_31+0x24>)
 8005144:	4013      	ands	r3, r2
 8005146:	2280      	movs	r2, #128	; 0x80
 8005148:	508b      	str	r3, [r1, r2]
}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	46bd      	mov	sp, r7
 800514e:	b002      	add	sp, #8
 8005150:	bd80      	pop	{r7, pc}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	40021800 	.word	0x40021800

08005158 <LL_EXTI_DisableIT_32_63>:
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005160:	4a06      	ldr	r2, [pc, #24]	; (800517c <LL_EXTI_DisableIT_32_63+0x24>)
 8005162:	2390      	movs	r3, #144	; 0x90
 8005164:	58d3      	ldr	r3, [r2, r3]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	43d2      	mvns	r2, r2
 800516a:	4904      	ldr	r1, [pc, #16]	; (800517c <LL_EXTI_DisableIT_32_63+0x24>)
 800516c:	4013      	ands	r3, r2
 800516e:	2290      	movs	r2, #144	; 0x90
 8005170:	508b      	str	r3, [r1, r2]
}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b002      	add	sp, #8
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	40021800 	.word	0x40021800

08005180 <LL_EXTI_EnableEvent_0_31>:
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005188:	4a05      	ldr	r2, [pc, #20]	; (80051a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800518a:	2384      	movs	r3, #132	; 0x84
 800518c:	58d2      	ldr	r2, [r2, r3]
 800518e:	4904      	ldr	r1, [pc, #16]	; (80051a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	2284      	movs	r2, #132	; 0x84
 8005196:	508b      	str	r3, [r1, r2]
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b002      	add	sp, #8
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021800 	.word	0x40021800

080051a4 <LL_EXTI_EnableEvent_32_63>:
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80051ac:	4a05      	ldr	r2, [pc, #20]	; (80051c4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80051ae:	2394      	movs	r3, #148	; 0x94
 80051b0:	58d2      	ldr	r2, [r2, r3]
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	2294      	movs	r2, #148	; 0x94
 80051ba:	508b      	str	r3, [r1, r2]
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b002      	add	sp, #8
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021800 	.word	0x40021800

080051c8 <LL_EXTI_DisableEvent_0_31>:
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80051d0:	4a06      	ldr	r2, [pc, #24]	; (80051ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80051d2:	2384      	movs	r3, #132	; 0x84
 80051d4:	58d3      	ldr	r3, [r2, r3]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	43d2      	mvns	r2, r2
 80051da:	4904      	ldr	r1, [pc, #16]	; (80051ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80051dc:	4013      	ands	r3, r2
 80051de:	2284      	movs	r2, #132	; 0x84
 80051e0:	508b      	str	r3, [r1, r2]
}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b002      	add	sp, #8
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	40021800 	.word	0x40021800

080051f0 <LL_EXTI_DisableEvent_32_63>:
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80051f8:	4a06      	ldr	r2, [pc, #24]	; (8005214 <LL_EXTI_DisableEvent_32_63+0x24>)
 80051fa:	2394      	movs	r3, #148	; 0x94
 80051fc:	58d3      	ldr	r3, [r2, r3]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	43d2      	mvns	r2, r2
 8005202:	4904      	ldr	r1, [pc, #16]	; (8005214 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005204:	4013      	ands	r3, r2
 8005206:	2294      	movs	r2, #148	; 0x94
 8005208:	508b      	str	r3, [r1, r2]
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	b002      	add	sp, #8
 8005210:	bd80      	pop	{r7, pc}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	40021800 	.word	0x40021800

08005218 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005222:	6819      	ldr	r1, [r3, #0]
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	430a      	orrs	r2, r1
 800522a:	601a      	str	r2, [r3, #0]
}
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	46bd      	mov	sp, r7
 8005230:	b002      	add	sp, #8
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40021800 	.word	0x40021800

08005238 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005240:	4b05      	ldr	r3, [pc, #20]	; (8005258 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	43d9      	mvns	r1, r3
 8005248:	4b03      	ldr	r3, [pc, #12]	; (8005258 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800524a:	400a      	ands	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	46bd      	mov	sp, r7
 8005252:	b002      	add	sp, #8
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	40021800 	.word	0x40021800

0800525c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005266:	6859      	ldr	r1, [r3, #4]
 8005268:	4b03      	ldr	r3, [pc, #12]	; (8005278 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
}
 8005270:	46c0      	nop			; (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	b002      	add	sp, #8
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40021800 	.word	0x40021800

0800527c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	43d9      	mvns	r1, r3
 800528c:	4b03      	ldr	r3, [pc, #12]	; (800529c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800528e:	400a      	ands	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b002      	add	sp, #8
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	40021800 	.word	0x40021800

080052a0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	7a1b      	ldrb	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d100      	bne.n	80052b6 <LL_EXTI_Init+0x16>
 80052b4:	e095      	b.n	80053e2 <LL_EXTI_Init+0x142>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d05d      	beq.n	800537a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7a5b      	ldrb	r3, [r3, #9]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d00e      	beq.n	80052e4 <LL_EXTI_Init+0x44>
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d017      	beq.n	80052fa <LL_EXTI_Init+0x5a>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d120      	bne.n	8005310 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f7ff ff78 	bl	80051c8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff ff03 	bl	80050e8 <LL_EXTI_EnableIT_0_31>
          break;
 80052e2:	e018      	b.n	8005316 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7ff ff21 	bl	8005130 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7ff ff44 	bl	8005180 <LL_EXTI_EnableEvent_0_31>
          break;
 80052f8:	e00d      	b.n	8005316 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	0018      	movs	r0, r3
 8005300:	f7ff fef2 	bl	80050e8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	0018      	movs	r0, r3
 800530a:	f7ff ff39 	bl	8005180 <LL_EXTI_EnableEvent_0_31>
          break;
 800530e:	e002      	b.n	8005316 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8005310:	2301      	movs	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
          break;
 8005314:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	7a9b      	ldrb	r3, [r3, #10]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02d      	beq.n	800537a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	7a9b      	ldrb	r3, [r3, #10]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d00e      	beq.n	8005344 <LL_EXTI_Init+0xa4>
 8005326:	2b03      	cmp	r3, #3
 8005328:	d017      	beq.n	800535a <LL_EXTI_Init+0xba>
 800532a:	2b01      	cmp	r3, #1
 800532c:	d120      	bne.n	8005370 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	0018      	movs	r0, r3
 8005334:	f7ff ffa2 	bl	800527c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	0018      	movs	r0, r3
 800533e:	f7ff ff6b 	bl	8005218 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005342:	e01b      	b.n	800537c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0018      	movs	r0, r3
 800534a:	f7ff ff75 	bl	8005238 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0018      	movs	r0, r3
 8005354:	f7ff ff82 	bl	800525c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005358:	e010      	b.n	800537c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	0018      	movs	r0, r3
 8005360:	f7ff ff5a 	bl	8005218 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	0018      	movs	r0, r3
 800536a:	f7ff ff77 	bl	800525c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800536e:	e005      	b.n	800537c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2202      	movs	r2, #2
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
            break;
 8005378:	e000      	b.n	800537c <LL_EXTI_Init+0xdc>
        }
      }
 800537a:	46c0      	nop			; (mov r8, r8)
    }
#if defined(STM32G081xx) || defined(STM32G071xx)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d043      	beq.n	800540c <LL_EXTI_Init+0x16c>
    {
      switch (EXTI_InitStruct->Mode)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7a5b      	ldrb	r3, [r3, #9]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d00e      	beq.n	80053aa <LL_EXTI_Init+0x10a>
 800538c:	2b02      	cmp	r3, #2
 800538e:	d017      	beq.n	80053c0 <LL_EXTI_Init+0x120>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d120      	bne.n	80053d6 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	0018      	movs	r0, r3
 800539a:	f7ff ff29 	bl	80051f0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0018      	movs	r0, r3
 80053a4:	f7ff feb2 	bl	800510c <LL_EXTI_EnableIT_32_63>
          break;
 80053a8:	e031      	b.n	800540e <LL_EXTI_Init+0x16e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7ff fed2 	bl	8005158 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f7ff fef3 	bl	80051a4 <LL_EXTI_EnableEvent_32_63>
          break;
 80053be:	e026      	b.n	800540e <LL_EXTI_Init+0x16e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7ff fea1 	bl	800510c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	0018      	movs	r0, r3
 80053d0:	f7ff fee8 	bl	80051a4 <LL_EXTI_EnableEvent_32_63>
          break;
 80053d4:	e01b      	b.n	800540e <LL_EXTI_Init+0x16e>
        default:
          status |= 0x04u;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2204      	movs	r2, #4
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
          break;
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	e015      	b.n	800540e <LL_EXTI_Init+0x16e>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7ff fea2 	bl	8005130 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	0018      	movs	r0, r3
 80053f2:	f7ff fee9 	bl	80051c8 <LL_EXTI_DisableEvent_0_31>
#if defined(STM32G081xx) || defined(STM32G071xx)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7ff feac 	bl	8005158 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	0018      	movs	r0, r3
 8005406:	f7ff fef3 	bl	80051f0 <LL_EXTI_DisableEvent_32_63>
 800540a:	e000      	b.n	800540e <LL_EXTI_Init+0x16e>
    }
 800540c:	46c0      	nop			; (mov r8, r8)
#endif
  }

  return status;
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	0018      	movs	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	b004      	add	sp, #16
 8005416:	bd80      	pop	{r7, pc}

08005418 <LL_GPIO_SetPinMode>:
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6819      	ldr	r1, [r3, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	435a      	muls	r2, r3
 800542e:	0013      	movs	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	189b      	adds	r3, r3, r2
 8005434:	43db      	mvns	r3, r3
 8005436:	400b      	ands	r3, r1
 8005438:	001a      	movs	r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	434b      	muls	r3, r1
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	434b      	muls	r3, r1
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	601a      	str	r2, [r3, #0]
}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bd80      	pop	{r7, pc}

08005452 <LL_GPIO_SetPinOutputType>:
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	43d2      	mvns	r2, r2
 8005466:	401a      	ands	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	434b      	muls	r3, r1
 800546e:	431a      	orrs	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	605a      	str	r2, [r3, #4]
}
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	46bd      	mov	sp, r7
 8005478:	b004      	add	sp, #16
 800547a:	bd80      	pop	{r7, pc}

0800547c <LL_GPIO_SetPinSpeed>:
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6899      	ldr	r1, [r3, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	435a      	muls	r2, r3
 8005492:	0013      	movs	r3, r2
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	189b      	adds	r3, r3, r2
 8005498:	43db      	mvns	r3, r3
 800549a:	400b      	ands	r3, r1
 800549c:	001a      	movs	r2, r3
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	434b      	muls	r3, r1
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	434b      	muls	r3, r1
 80054a8:	431a      	orrs	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	609a      	str	r2, [r3, #8]
}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b004      	add	sp, #16
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <LL_GPIO_SetPinPull>:
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	68d9      	ldr	r1, [r3, #12]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	435a      	muls	r2, r3
 80054cc:	0013      	movs	r3, r2
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	189b      	adds	r3, r3, r2
 80054d2:	43db      	mvns	r3, r3
 80054d4:	400b      	ands	r3, r1
 80054d6:	001a      	movs	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	434b      	muls	r3, r1
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	434b      	muls	r3, r1
 80054e2:	431a      	orrs	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	60da      	str	r2, [r3, #12]
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b004      	add	sp, #16
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <LL_GPIO_SetAFPin_0_7>:
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a19      	ldr	r1, [r3, #32]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	4353      	muls	r3, r2
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4353      	muls	r3, r2
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	435a      	muls	r2, r3
 800550e:	0013      	movs	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	43db      	mvns	r3, r3
 8005516:	400b      	ands	r3, r1
 8005518:	001a      	movs	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	434b      	muls	r3, r1
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	434b      	muls	r3, r1
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	434b      	muls	r3, r1
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	434b      	muls	r3, r1
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b004      	add	sp, #16
 8005538:	bd80      	pop	{r7, pc}

0800553a <LL_GPIO_SetAFPin_8_15>:
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b084      	sub	sp, #16
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	0a12      	lsrs	r2, r2, #8
 8005552:	4353      	muls	r3, r2
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	0a12      	lsrs	r2, r2, #8
 8005558:	4353      	muls	r3, r2
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0a12      	lsrs	r2, r2, #8
 800555e:	435a      	muls	r2, r3
 8005560:	0013      	movs	r3, r2
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	43db      	mvns	r3, r3
 8005568:	400b      	ands	r3, r1
 800556a:	001a      	movs	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	0a1b      	lsrs	r3, r3, #8
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	0a09      	lsrs	r1, r1, #8
 8005574:	434b      	muls	r3, r1
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	0a09      	lsrs	r1, r1, #8
 800557a:	434b      	muls	r3, r1
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	0a09      	lsrs	r1, r1, #8
 8005580:	434b      	muls	r3, r1
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	434b      	muls	r3, r1
 8005586:	431a      	orrs	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b004      	add	sp, #16
 8005592:	bd80      	pop	{r7, pc}

08005594 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80055a2:	e040      	b.n	8005626 <LL_GPIO_Init+0x92>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4091      	lsls	r1, r2
 80055ae:	000a      	movs	r2, r1
 80055b0:	4013      	ands	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d032      	beq.n	8005620 <LL_GPIO_Init+0x8c>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	0018      	movs	r0, r3
 80055c4:	f7ff ff28 	bl	8005418 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d003      	beq.n	80055d8 <LL_GPIO_Init+0x44>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d106      	bne.n	80055e6 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7ff ff4b 	bl	800547c <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	0018      	movs	r0, r3
 80055f0:	f7ff ff61 	bl	80054b6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d111      	bne.n	8005620 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2bff      	cmp	r3, #255	; 0xff
 8005600:	d807      	bhi.n	8005612 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695a      	ldr	r2, [r3, #20]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	0018      	movs	r0, r3
 800560c:	f7ff ff70 	bl	80054f0 <LL_GPIO_SetAFPin_0_7>
 8005610:	e006      	b.n	8005620 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f7ff ff8d 	bl	800553a <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3301      	adds	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	40da      	lsrs	r2, r3
 800562e:	1e13      	subs	r3, r2, #0
 8005630:	d1b8      	bne.n	80055a4 <LL_GPIO_Init+0x10>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d003      	beq.n	8005642 <LL_GPIO_Init+0xae>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d107      	bne.n	8005652 <LL_GPIO_Init+0xbe>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	0018      	movs	r0, r3
 800564e:	f7ff ff00 	bl	8005452 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005652:	2300      	movs	r3, #0
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b004      	add	sp, #16
 800565a:	bd80      	pop	{r7, pc}

0800565c <__libc_init_array>:
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	2600      	movs	r6, #0
 8005660:	4d0c      	ldr	r5, [pc, #48]	; (8005694 <__libc_init_array+0x38>)
 8005662:	4c0d      	ldr	r4, [pc, #52]	; (8005698 <__libc_init_array+0x3c>)
 8005664:	1b64      	subs	r4, r4, r5
 8005666:	10a4      	asrs	r4, r4, #2
 8005668:	42a6      	cmp	r6, r4
 800566a:	d109      	bne.n	8005680 <__libc_init_array+0x24>
 800566c:	2600      	movs	r6, #0
 800566e:	f000 f821 	bl	80056b4 <_init>
 8005672:	4d0a      	ldr	r5, [pc, #40]	; (800569c <__libc_init_array+0x40>)
 8005674:	4c0a      	ldr	r4, [pc, #40]	; (80056a0 <__libc_init_array+0x44>)
 8005676:	1b64      	subs	r4, r4, r5
 8005678:	10a4      	asrs	r4, r4, #2
 800567a:	42a6      	cmp	r6, r4
 800567c:	d105      	bne.n	800568a <__libc_init_array+0x2e>
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	00b3      	lsls	r3, r6, #2
 8005682:	58eb      	ldr	r3, [r5, r3]
 8005684:	4798      	blx	r3
 8005686:	3601      	adds	r6, #1
 8005688:	e7ee      	b.n	8005668 <__libc_init_array+0xc>
 800568a:	00b3      	lsls	r3, r6, #2
 800568c:	58eb      	ldr	r3, [r5, r3]
 800568e:	4798      	blx	r3
 8005690:	3601      	adds	r6, #1
 8005692:	e7f2      	b.n	800567a <__libc_init_array+0x1e>
 8005694:	08005788 	.word	0x08005788
 8005698:	08005788 	.word	0x08005788
 800569c:	08005788 	.word	0x08005788
 80056a0:	0800578c 	.word	0x0800578c

080056a4 <memset>:
 80056a4:	0003      	movs	r3, r0
 80056a6:	1812      	adds	r2, r2, r0
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d100      	bne.n	80056ae <memset+0xa>
 80056ac:	4770      	bx	lr
 80056ae:	7019      	strb	r1, [r3, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	e7f9      	b.n	80056a8 <memset+0x4>

080056b4 <_init>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	46c0      	nop			; (mov r8, r8)
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr

080056c0 <_fini>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr
