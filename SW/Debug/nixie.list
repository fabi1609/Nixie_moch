
nixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005a4c  08005a4c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a4c  08005a4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  08005a64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005a64  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d33  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d25  00000000  00000000  00031d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  00034a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  00035b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a794  00000000  00000000  00036a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000faab  00000000  00000000  0005121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a1f8a  00000000  00000000  00060cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102c51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a28  00000000  00000000  00102ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005964 	.word	0x08005964

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08005964 	.word	0x08005964

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_RTC_AlarmAEventCallback>:
volatile uint8_t ESP01_m;
volatile uint8_t ESP01_s;

//Called every second
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(hrtc, &sTime1, RTC_FORMAT_BIN); // Get Time
 8000224:	492b      	ldr	r1, [pc, #172]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2200      	movs	r2, #0
 800022a:	0018      	movs	r0, r3
 800022c:	f003 fc3e 	bl	8003aac <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sDate1, RTC_FORMAT_BIN); // Get Date
 8000230:	4929      	ldr	r1, [pc, #164]	; (80002d8 <HAL_RTC_AlarmAEventCallback+0xbc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	0018      	movs	r0, r3
 8000238:	f003 fd26 	bl	8003c88 <HAL_RTC_GetDate>

	//Set clock
	if(!HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin))
 800023c:	2380      	movs	r3, #128	; 0x80
 800023e:	019b      	lsls	r3, r3, #6
 8000240:	4a26      	ldr	r2, [pc, #152]	; (80002dc <HAL_RTC_AlarmAEventCallback+0xc0>)
 8000242:	0019      	movs	r1, r3
 8000244:	0010      	movs	r0, r2
 8000246:	f002 fc17 	bl	8002a78 <HAL_GPIO_ReadPin>
 800024a:	1e03      	subs	r3, r0, #0
 800024c:	d135      	bne.n	80002ba <HAL_RTC_AlarmAEventCallback+0x9e>
	{
		if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin))
 800024e:	4b24      	ldr	r3, [pc, #144]	; (80002e0 <HAL_RTC_AlarmAEventCallback+0xc4>)
 8000250:	2101      	movs	r1, #1
 8000252:	0018      	movs	r0, r3
 8000254:	f002 fc10 	bl	8002a78 <HAL_GPIO_ReadPin>
 8000258:	1e03      	subs	r3, r0, #0
 800025a:	d014      	beq.n	8000286 <HAL_RTC_AlarmAEventCallback+0x6a>
		{
			sTime1.SecondFraction = 0;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
			sTime1.Seconds = 0;
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000264:	2200      	movs	r2, #0
 8000266:	709a      	strb	r2, [r3, #2]
			if(sTime1.Minutes < 59)
 8000268:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 800026a:	785b      	ldrb	r3, [r3, #1]
 800026c:	2b3a      	cmp	r3, #58	; 0x3a
 800026e:	d806      	bhi.n	800027e <HAL_RTC_AlarmAEventCallback+0x62>
				sTime1.Minutes = sTime1.Minutes + 1;
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000272:	785b      	ldrb	r3, [r3, #1]
 8000274:	3301      	adds	r3, #1
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 800027a:	705a      	strb	r2, [r3, #1]
 800027c:	e011      	b.n	80002a2 <HAL_RTC_AlarmAEventCallback+0x86>
			else
				sTime1.Minutes = 0;
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000280:	2200      	movs	r2, #0
 8000282:	705a      	strb	r2, [r3, #1]
 8000284:	e00d      	b.n	80002a2 <HAL_RTC_AlarmAEventCallback+0x86>
		}
		else
		{
			if(sTime1.Hours < 23)
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b16      	cmp	r3, #22
 800028c:	d806      	bhi.n	800029c <HAL_RTC_AlarmAEventCallback+0x80>
				sTime1.Hours = sTime1.Hours + 1;
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 8000298:	701a      	strb	r2, [r3, #0]
 800029a:	e002      	b.n	80002a2 <HAL_RTC_AlarmAEventCallback+0x86>
			else
				sTime1.Hours = 0;
 800029c:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
		}
		HAL_RTC_SetTime(hrtc, &sTime1, RTC_FORMAT_BIN);
 80002a2:	490c      	ldr	r1, [pc, #48]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2200      	movs	r2, #0
 80002a8:	0018      	movs	r0, r3
 80002aa:	f003 fb57 	bl	800395c <HAL_RTC_SetTime>
		HAL_RTC_SetDate(hrtc, &sDate1, RTC_FORMAT_BIN);
 80002ae:	490a      	ldr	r1, [pc, #40]	; (80002d8 <HAL_RTC_AlarmAEventCallback+0xbc>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	0018      	movs	r0, r3
 80002b6:	f003 fc55 	bl	8003b64 <HAL_RTC_SetDate>
	}

	//Display Time
	nixie_set_time(sTime1.Hours, sTime1.Minutes, sTime1.Seconds);
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 80002bc:	7818      	ldrb	r0, [r3, #0]
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 80002c0:	7859      	ldrb	r1, [r3, #1]
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_RTC_AlarmAEventCallback+0xb8>)
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	001a      	movs	r2, r3
 80002c8:	f001 f890 	bl	80013ec <nixie_set_time>
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000040 	.word	0x20000040
 80002d8:	20000038 	.word	0x20000038
 80002dc:	50000800 	.word	0x50000800
 80002e0:	50000c00 	.word	0x50000c00

080002e4 <ESP01_init>:

void ESP01_init()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim17);
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <ESP01_init+0x14>)
 80002ea:	0018      	movs	r0, r3
 80002ec:	f003 ffc2 	bl	8004274 <HAL_TIM_Base_Start>

}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	200000c8 	.word	0x200000c8

080002fc <OWN_LL_EXTI>:

//get time from ESP01 Board
//trigger on falling edge
void OWN_LL_EXTI()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	switch(ESP01_state)
 8000300:	4b86      	ldr	r3, [pc, #536]	; (800051c <OWN_LL_EXTI+0x220>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b04      	cmp	r3, #4
 8000308:	d900      	bls.n	800030c <OWN_LL_EXTI+0x10>
 800030a:	e104      	b.n	8000516 <OWN_LL_EXTI+0x21a>
 800030c:	009a      	lsls	r2, r3, #2
 800030e:	4b84      	ldr	r3, [pc, #528]	; (8000520 <OWN_LL_EXTI+0x224>)
 8000310:	18d3      	adds	r3, r2, r3
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	469f      	mov	pc, r3
	{
	case 0:
		ESP01_h = 0;
 8000316:	4b83      	ldr	r3, [pc, #524]	; (8000524 <OWN_LL_EXTI+0x228>)
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
		ESP01_m = 0;
 800031c:	4b82      	ldr	r3, [pc, #520]	; (8000528 <OWN_LL_EXTI+0x22c>)
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
		ESP01_s = 0;
 8000322:	4b82      	ldr	r3, [pc, #520]	; (800052c <OWN_LL_EXTI+0x230>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SetCounter(&htim17, 0); //TIM17 counts with 1000 Hz
 8000328:	4b81      	ldr	r3, [pc, #516]	; (8000530 <OWN_LL_EXTI+0x234>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	625a      	str	r2, [r3, #36]	; 0x24
		ESP01_state = 1;
 8000330:	4b7a      	ldr	r3, [pc, #488]	; (800051c <OWN_LL_EXTI+0x220>)
 8000332:	2201      	movs	r2, #1
 8000334:	701a      	strb	r2, [r3, #0]
		break;
 8000336:	e0ee      	b.n	8000516 <OWN_LL_EXTI+0x21a>
	case 1:
		if(__HAL_TIM_GET_COUNTER(&htim17) > 22 && __HAL_TIM_GET_COUNTER(&htim17) < 28)
 8000338:	4b7d      	ldr	r3, [pc, #500]	; (8000530 <OWN_LL_EXTI+0x234>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033e:	2b16      	cmp	r3, #22
 8000340:	d90c      	bls.n	800035c <OWN_LL_EXTI+0x60>
 8000342:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <OWN_LL_EXTI+0x234>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000348:	2b1b      	cmp	r3, #27
 800034a:	d807      	bhi.n	800035c <OWN_LL_EXTI+0x60>
		{
			ESP01_state = 2; //read h when pause 25 ms was send.
 800034c:	4b73      	ldr	r3, [pc, #460]	; (800051c <OWN_LL_EXTI+0x220>)
 800034e:	2202      	movs	r2, #2
 8000350:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SetCounter(&htim17, 0);
 8000352:	4b77      	ldr	r3, [pc, #476]	; (8000530 <OWN_LL_EXTI+0x234>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2200      	movs	r2, #0
 8000358:	625a      	str	r2, [r3, #36]	; 0x24
 800035a:	e027      	b.n	80003ac <OWN_LL_EXTI+0xb0>
		}
		else if(__HAL_TIM_GET_COUNTER(&htim17) > 12 && __HAL_TIM_GET_COUNTER(&htim17) < 18)
 800035c:	4b74      	ldr	r3, [pc, #464]	; (8000530 <OWN_LL_EXTI+0x234>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000362:	2b0c      	cmp	r3, #12
 8000364:	d90c      	bls.n	8000380 <OWN_LL_EXTI+0x84>
 8000366:	4b72      	ldr	r3, [pc, #456]	; (8000530 <OWN_LL_EXTI+0x234>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800036c:	2b11      	cmp	r3, #17
 800036e:	d807      	bhi.n	8000380 <OWN_LL_EXTI+0x84>
		{
			ESP01_state = 3; //read m when pause 15 ms was send.
 8000370:	4b6a      	ldr	r3, [pc, #424]	; (800051c <OWN_LL_EXTI+0x220>)
 8000372:	2203      	movs	r2, #3
 8000374:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SetCounter(&htim17, 0);
 8000376:	4b6e      	ldr	r3, [pc, #440]	; (8000530 <OWN_LL_EXTI+0x234>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2200      	movs	r2, #0
 800037c:	625a      	str	r2, [r3, #36]	; 0x24
 800037e:	e015      	b.n	80003ac <OWN_LL_EXTI+0xb0>
		}
		else if(__HAL_TIM_GET_COUNTER(&htim17) > 2 && __HAL_TIM_GET_COUNTER(&htim17) < 8)
 8000380:	4b6b      	ldr	r3, [pc, #428]	; (8000530 <OWN_LL_EXTI+0x234>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000386:	2b02      	cmp	r3, #2
 8000388:	d90c      	bls.n	80003a4 <OWN_LL_EXTI+0xa8>
 800038a:	4b69      	ldr	r3, [pc, #420]	; (8000530 <OWN_LL_EXTI+0x234>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000390:	2b07      	cmp	r3, #7
 8000392:	d807      	bhi.n	80003a4 <OWN_LL_EXTI+0xa8>
		{
			ESP01_state = 4; //read s when pause 5 ms was send.
 8000394:	4b61      	ldr	r3, [pc, #388]	; (800051c <OWN_LL_EXTI+0x220>)
 8000396:	2204      	movs	r2, #4
 8000398:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SetCounter(&htim17, 0);
 800039a:	4b65      	ldr	r3, [pc, #404]	; (8000530 <OWN_LL_EXTI+0x234>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	; 0x24
 80003a2:	e003      	b.n	80003ac <OWN_LL_EXTI+0xb0>
		}
		else
			ESP01_state = 0;
 80003a4:	4b5d      	ldr	r3, [pc, #372]	; (800051c <OWN_LL_EXTI+0x220>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
		break;
 80003aa:	e0b4      	b.n	8000516 <OWN_LL_EXTI+0x21a>
 80003ac:	e0b3      	b.n	8000516 <OWN_LL_EXTI+0x21a>
	case 2: //read h
		//read h finished when pause 25 ms was send and value plausible.
		if(ESP01_h < 25 && __HAL_TIM_GET_COUNTER(&htim17) > 22 && __HAL_TIM_GET_COUNTER(&htim17) < 28)
 80003ae:	4b5d      	ldr	r3, [pc, #372]	; (8000524 <OWN_LL_EXTI+0x228>)
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	2b18      	cmp	r3, #24
 80003b6:	d820      	bhi.n	80003fa <OWN_LL_EXTI+0xfe>
 80003b8:	4b5d      	ldr	r3, [pc, #372]	; (8000530 <OWN_LL_EXTI+0x234>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003be:	2b16      	cmp	r3, #22
 80003c0:	d91b      	bls.n	80003fa <OWN_LL_EXTI+0xfe>
 80003c2:	4b5b      	ldr	r3, [pc, #364]	; (8000530 <OWN_LL_EXTI+0x234>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c8:	2b1b      	cmp	r3, #27
 80003ca:	d816      	bhi.n	80003fa <OWN_LL_EXTI+0xfe>
		{
			sTime1.Hours = ESP01_h - 1;
 80003cc:	4b55      	ldr	r3, [pc, #340]	; (8000524 <OWN_LL_EXTI+0x228>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	3b01      	subs	r3, #1
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b57      	ldr	r3, [pc, #348]	; (8000534 <OWN_LL_EXTI+0x238>)
 80003d8:	701a      	strb	r2, [r3, #0]
			HAL_RTC_SetTime(&hrtc, &sTime1, RTC_FORMAT_BIN);
 80003da:	4956      	ldr	r1, [pc, #344]	; (8000534 <OWN_LL_EXTI+0x238>)
 80003dc:	4b56      	ldr	r3, [pc, #344]	; (8000538 <OWN_LL_EXTI+0x23c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	0018      	movs	r0, r3
 80003e2:	f003 fabb 	bl	800395c <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &sDate1, RTC_FORMAT_BIN);
 80003e6:	4955      	ldr	r1, [pc, #340]	; (800053c <OWN_LL_EXTI+0x240>)
 80003e8:	4b53      	ldr	r3, [pc, #332]	; (8000538 <OWN_LL_EXTI+0x23c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	0018      	movs	r0, r3
 80003ee:	f003 fbb9 	bl	8003b64 <HAL_RTC_SetDate>
			ESP01_state = 0;
 80003f2:	4b4a      	ldr	r3, [pc, #296]	; (800051c <OWN_LL_EXTI+0x220>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]
		else
		{
			ESP01_h++;
			__HAL_TIM_SetCounter(&htim17, 0);
		}
		break;
 80003f8:	e08d      	b.n	8000516 <OWN_LL_EXTI+0x21a>
		else if(__HAL_TIM_GET_COUNTER(&htim17) > 100) //timeout
 80003fa:	4b4d      	ldr	r3, [pc, #308]	; (8000530 <OWN_LL_EXTI+0x234>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000400:	2b64      	cmp	r3, #100	; 0x64
 8000402:	d903      	bls.n	800040c <OWN_LL_EXTI+0x110>
			ESP01_state = 0;
 8000404:	4b45      	ldr	r3, [pc, #276]	; (800051c <OWN_LL_EXTI+0x220>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
		break;
 800040a:	e084      	b.n	8000516 <OWN_LL_EXTI+0x21a>
			ESP01_h++;
 800040c:	4b45      	ldr	r3, [pc, #276]	; (8000524 <OWN_LL_EXTI+0x228>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	3301      	adds	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <OWN_LL_EXTI+0x228>)
 8000418:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SetCounter(&htim17, 0);
 800041a:	4b45      	ldr	r3, [pc, #276]	; (8000530 <OWN_LL_EXTI+0x234>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2200      	movs	r2, #0
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000422:	e078      	b.n	8000516 <OWN_LL_EXTI+0x21a>
	case 3: //read m
		//read m finished when pause 15 ms was send and value plausible.
		if(ESP01_m < 61 && __HAL_TIM_GET_COUNTER(&htim17) > 12 && __HAL_TIM_GET_COUNTER(&htim17) < 18)
 8000424:	4b40      	ldr	r3, [pc, #256]	; (8000528 <OWN_LL_EXTI+0x22c>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	2b3c      	cmp	r3, #60	; 0x3c
 800042c:	d820      	bhi.n	8000470 <OWN_LL_EXTI+0x174>
 800042e:	4b40      	ldr	r3, [pc, #256]	; (8000530 <OWN_LL_EXTI+0x234>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000434:	2b0c      	cmp	r3, #12
 8000436:	d91b      	bls.n	8000470 <OWN_LL_EXTI+0x174>
 8000438:	4b3d      	ldr	r3, [pc, #244]	; (8000530 <OWN_LL_EXTI+0x234>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043e:	2b11      	cmp	r3, #17
 8000440:	d816      	bhi.n	8000470 <OWN_LL_EXTI+0x174>
		{
			sTime1.Minutes = ESP01_m - 1;
 8000442:	4b39      	ldr	r3, [pc, #228]	; (8000528 <OWN_LL_EXTI+0x22c>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	3b01      	subs	r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	4b39      	ldr	r3, [pc, #228]	; (8000534 <OWN_LL_EXTI+0x238>)
 800044e:	705a      	strb	r2, [r3, #1]
			HAL_RTC_SetTime(&hrtc, &sTime1, RTC_FORMAT_BIN);
 8000450:	4938      	ldr	r1, [pc, #224]	; (8000534 <OWN_LL_EXTI+0x238>)
 8000452:	4b39      	ldr	r3, [pc, #228]	; (8000538 <OWN_LL_EXTI+0x23c>)
 8000454:	2200      	movs	r2, #0
 8000456:	0018      	movs	r0, r3
 8000458:	f003 fa80 	bl	800395c <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &sDate1, RTC_FORMAT_BIN);
 800045c:	4937      	ldr	r1, [pc, #220]	; (800053c <OWN_LL_EXTI+0x240>)
 800045e:	4b36      	ldr	r3, [pc, #216]	; (8000538 <OWN_LL_EXTI+0x23c>)
 8000460:	2200      	movs	r2, #0
 8000462:	0018      	movs	r0, r3
 8000464:	f003 fb7e 	bl	8003b64 <HAL_RTC_SetDate>
			ESP01_state = 0;
 8000468:	4b2c      	ldr	r3, [pc, #176]	; (800051c <OWN_LL_EXTI+0x220>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
		else
		{
			ESP01_m++;
			__HAL_TIM_SetCounter(&htim17, 0);
		}
		break;
 800046e:	e052      	b.n	8000516 <OWN_LL_EXTI+0x21a>
		else if(__HAL_TIM_GET_COUNTER(&htim17) > 100) //timeout
 8000470:	4b2f      	ldr	r3, [pc, #188]	; (8000530 <OWN_LL_EXTI+0x234>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000476:	2b64      	cmp	r3, #100	; 0x64
 8000478:	d903      	bls.n	8000482 <OWN_LL_EXTI+0x186>
			ESP01_state = 0;
 800047a:	4b28      	ldr	r3, [pc, #160]	; (800051c <OWN_LL_EXTI+0x220>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
		break;
 8000480:	e049      	b.n	8000516 <OWN_LL_EXTI+0x21a>
			ESP01_m++;
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <OWN_LL_EXTI+0x22c>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	3301      	adds	r3, #1
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b26      	ldr	r3, [pc, #152]	; (8000528 <OWN_LL_EXTI+0x22c>)
 800048e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SetCounter(&htim17, 0);
 8000490:	4b27      	ldr	r3, [pc, #156]	; (8000530 <OWN_LL_EXTI+0x234>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2200      	movs	r2, #0
 8000496:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000498:	e03d      	b.n	8000516 <OWN_LL_EXTI+0x21a>
	case 4: //read s
		//read s finished when pause 5 ms was send and value plausible.
		if(ESP01_s < 61 && __HAL_TIM_GET_COUNTER(&htim17) > 2 && __HAL_TIM_GET_COUNTER(&htim17) < 8)
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <OWN_LL_EXTI+0x230>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b3c      	cmp	r3, #60	; 0x3c
 80004a2:	d823      	bhi.n	80004ec <OWN_LL_EXTI+0x1f0>
 80004a4:	4b22      	ldr	r3, [pc, #136]	; (8000530 <OWN_LL_EXTI+0x234>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d91e      	bls.n	80004ec <OWN_LL_EXTI+0x1f0>
 80004ae:	4b20      	ldr	r3, [pc, #128]	; (8000530 <OWN_LL_EXTI+0x234>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b4:	2b07      	cmp	r3, #7
 80004b6:	d819      	bhi.n	80004ec <OWN_LL_EXTI+0x1f0>
		{
			sTime1.Seconds = ESP01_s - 1;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <OWN_LL_EXTI+0x230>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	3b01      	subs	r3, #1
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <OWN_LL_EXTI+0x238>)
 80004c4:	709a      	strb	r2, [r3, #2]
			sTime1.SecondFraction = 1;
 80004c6:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <OWN_LL_EXTI+0x238>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	609a      	str	r2, [r3, #8]
			HAL_RTC_SetTime(&hrtc, &sTime1, RTC_FORMAT_BIN);
 80004cc:	4919      	ldr	r1, [pc, #100]	; (8000534 <OWN_LL_EXTI+0x238>)
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <OWN_LL_EXTI+0x23c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	0018      	movs	r0, r3
 80004d4:	f003 fa42 	bl	800395c <HAL_RTC_SetTime>
			HAL_RTC_SetDate(&hrtc, &sDate1, RTC_FORMAT_BIN);
 80004d8:	4918      	ldr	r1, [pc, #96]	; (800053c <OWN_LL_EXTI+0x240>)
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <OWN_LL_EXTI+0x23c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f003 fb40 	bl	8003b64 <HAL_RTC_SetDate>
			ESP01_state = 0;
 80004e4:	4b0d      	ldr	r3, [pc, #52]	; (800051c <OWN_LL_EXTI+0x220>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
		else
		{
			ESP01_s++;
			__HAL_TIM_SetCounter(&htim17, 0);
		}
		break;
 80004ea:	e013      	b.n	8000514 <OWN_LL_EXTI+0x218>
		else if(__HAL_TIM_GET_COUNTER(&htim17) > 100) //timeout
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <OWN_LL_EXTI+0x234>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f2:	2b64      	cmp	r3, #100	; 0x64
 80004f4:	d903      	bls.n	80004fe <OWN_LL_EXTI+0x202>
			ESP01_state = 0;
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <OWN_LL_EXTI+0x220>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	701a      	strb	r2, [r3, #0]
		break;
 80004fc:	e00a      	b.n	8000514 <OWN_LL_EXTI+0x218>
			ESP01_s++;
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <OWN_LL_EXTI+0x230>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	b2db      	uxtb	r3, r3
 8000504:	3301      	adds	r3, #1
 8000506:	b2da      	uxtb	r2, r3
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <OWN_LL_EXTI+0x230>)
 800050a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SetCounter(&htim17, 0);
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <OWN_LL_EXTI+0x234>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2200      	movs	r2, #0
 8000512:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000514:	46c0      	nop			; (mov r8, r8)
	}
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000002c 	.word	0x2000002c
 8000520:	0800597c 	.word	0x0800597c
 8000524:	20000054 	.word	0x20000054
 8000528:	20000055 	.word	0x20000055
 800052c:	2000003c 	.word	0x2000003c
 8000530:	200000c8 	.word	0x200000c8
 8000534:	20000040 	.word	0x20000040
 8000538:	2000009c 	.word	0x2000009c
 800053c:	20000038 	.word	0x20000038

08000540 <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_COMP2_Init+0x58>)
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <MX_COMP2_Init+0x5c>)
 8000548:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_COMP2_Init+0x58>)
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	0092      	lsls	r2, r2, #2
 8000550:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH2;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_COMP2_Init+0x58>)
 8000554:	2250      	movs	r2, #80	; 0x50
 8000556:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_COMP2_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_COMP2_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_COMP2_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_COMP2_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_COMP2_Init+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_COMP2_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_COMP2_Init+0x58>)
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <MX_COMP2_Init+0x58>)
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fcc3 	bl	8001f10 <HAL_COMP_Init>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 800058e:	f000 fe81 	bl	8001294 <Error_Handler>
  }

}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000058 	.word	0x20000058
 800059c:	40010204 	.word	0x40010204

080005a0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	230c      	movs	r3, #12
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	0018      	movs	r0, r3
 80005ae:	2314      	movs	r3, #20
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f005 f9ce 	bl	8005954 <memset>
  if(compHandle->Instance==COMP2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a11      	ldr	r2, [pc, #68]	; (8000604 <HAL_COMP_MspInit+0x64>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d11c      	bne.n	80005fc <HAL_COMP_MspInit+0x5c>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <HAL_COMP_MspInit+0x68>)
 80005c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <HAL_COMP_MspInit+0x68>)
 80005c8:	2101      	movs	r1, #1
 80005ca:	430a      	orrs	r2, r1
 80005cc:	635a      	str	r2, [r3, #52]	; 0x34
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <HAL_COMP_MspInit+0x68>)
 80005d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d2:	2201      	movs	r2, #1
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005da:	210c      	movs	r1, #12
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2208      	movs	r2, #8
 80005e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2203      	movs	r2, #3
 80005e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	187a      	adds	r2, r7, r1
 80005f0:	23a0      	movs	r3, #160	; 0xa0
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	0011      	movs	r1, r2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 f8da 	bl	80027b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b008      	add	sp, #32
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010204 	.word	0x40010204
 8000608:	40021000 	.word	0x40021000

0800060c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	0018      	movs	r0, r3
 8000616:	2324      	movs	r3, #36	; 0x24
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f005 f99a 	bl	8005954 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_DAC1_Init+0x64>)
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <MX_DAC1_Init+0x68>)
 8000624:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_DAC1_Init+0x64>)
 8000628:	0018      	movs	r0, r3
 800062a:	f001 ff0f 	bl	800244c <HAL_DAC_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8000632:	f000 fe2f 	bl	8001294 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2202      	movs	r2, #2
 8000646:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2201      	movs	r2, #1
 800064c:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000654:	1d39      	adds	r1, r7, #4
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_DAC1_Init+0x64>)
 8000658:	2210      	movs	r2, #16
 800065a:	0018      	movs	r0, r3
 800065c:	f001 ff8a 	bl	8002574 <HAL_DAC_ConfigChannel>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000664:	f000 fe16 	bl	8001294 <Error_Handler>
  }

}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b00a      	add	sp, #40	; 0x28
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000088 	.word	0x20000088
 8000674:	40007400 	.word	0x40007400

08000678 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <HAL_DAC_MspInit+0x38>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d10d      	bne.n	80006a6 <HAL_DAC_MspInit+0x2e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_DAC_MspInit+0x3c>)
 800068c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_DAC_MspInit+0x3c>)
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	0589      	lsls	r1, r1, #22
 8000694:	430a      	orrs	r2, r1
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_DAC_MspInit+0x3c>)
 800069a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800069c:	2380      	movs	r3, #128	; 0x80
 800069e:	059b      	lsls	r3, r3, #22
 80006a0:	4013      	ands	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b004      	add	sp, #16
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	40007400 	.word	0x40007400
 80006b4:	40021000 	.word	0x40021000

080006b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0002      	movs	r2, r0
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b7f      	cmp	r3, #127	; 0x7f
 80006ca:	d809      	bhi.n	80006e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	001a      	movs	r2, r3
 80006d2:	231f      	movs	r3, #31
 80006d4:	401a      	ands	r2, r3
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_EnableIRQ+0x30>)
 80006d8:	2101      	movs	r1, #1
 80006da:	4091      	lsls	r1, r2
 80006dc:	000a      	movs	r2, r1
 80006de:	601a      	str	r2, [r3, #0]
  }
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	e000e100 	.word	0xe000e100

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	0002      	movs	r2, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b7f      	cmp	r3, #127	; 0x7f
 8000700:	d828      	bhi.n	8000754 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000702:	4a2f      	ldr	r2, [pc, #188]	; (80007c0 <__NVIC_SetPriority+0xd4>)
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	33c0      	adds	r3, #192	; 0xc0
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	589b      	ldr	r3, [r3, r2]
 8000712:	1dfa      	adds	r2, r7, #7
 8000714:	7812      	ldrb	r2, [r2, #0]
 8000716:	0011      	movs	r1, r2
 8000718:	2203      	movs	r2, #3
 800071a:	400a      	ands	r2, r1
 800071c:	00d2      	lsls	r2, r2, #3
 800071e:	21ff      	movs	r1, #255	; 0xff
 8000720:	4091      	lsls	r1, r2
 8000722:	000a      	movs	r2, r1
 8000724:	43d2      	mvns	r2, r2
 8000726:	401a      	ands	r2, r3
 8000728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	019b      	lsls	r3, r3, #6
 800072e:	22ff      	movs	r2, #255	; 0xff
 8000730:	401a      	ands	r2, r3
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	0018      	movs	r0, r3
 8000738:	2303      	movs	r3, #3
 800073a:	4003      	ands	r3, r0
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000740:	481f      	ldr	r0, [pc, #124]	; (80007c0 <__NVIC_SetPriority+0xd4>)
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b25b      	sxtb	r3, r3
 8000748:	089b      	lsrs	r3, r3, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	33c0      	adds	r3, #192	; 0xc0
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000752:	e031      	b.n	80007b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <__NVIC_SetPriority+0xd8>)
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	0019      	movs	r1, r3
 800075c:	230f      	movs	r3, #15
 800075e:	400b      	ands	r3, r1
 8000760:	3b08      	subs	r3, #8
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	3306      	adds	r3, #6
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	18d3      	adds	r3, r2, r3
 800076a:	3304      	adds	r3, #4
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	1dfa      	adds	r2, r7, #7
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	0011      	movs	r1, r2
 8000774:	2203      	movs	r2, #3
 8000776:	400a      	ands	r2, r1
 8000778:	00d2      	lsls	r2, r2, #3
 800077a:	21ff      	movs	r1, #255	; 0xff
 800077c:	4091      	lsls	r1, r2
 800077e:	000a      	movs	r2, r1
 8000780:	43d2      	mvns	r2, r2
 8000782:	401a      	ands	r2, r3
 8000784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	22ff      	movs	r2, #255	; 0xff
 800078c:	401a      	ands	r2, r3
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	0018      	movs	r0, r3
 8000794:	2303      	movs	r3, #3
 8000796:	4003      	ands	r3, r0
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <__NVIC_SetPriority+0xd8>)
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	001c      	movs	r4, r3
 80007a4:	230f      	movs	r3, #15
 80007a6:	4023      	ands	r3, r4
 80007a8:	3b08      	subs	r3, #8
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	430a      	orrs	r2, r1
 80007ae:	3306      	adds	r3, #6
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	18c3      	adds	r3, r0, r3
 80007b4:	3304      	adds	r3, #4
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b003      	add	sp, #12
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <LL_EXTI_SetEXTISource+0x48>)
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	2103      	movs	r1, #3
 80007d8:	400b      	ands	r3, r1
 80007da:	3318      	adds	r3, #24
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	589b      	ldr	r3, [r3, r2]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	0c12      	lsrs	r2, r2, #16
 80007e4:	2107      	movs	r1, #7
 80007e6:	4091      	lsls	r1, r2
 80007e8:	000a      	movs	r2, r1
 80007ea:	43d2      	mvns	r2, r2
 80007ec:	401a      	ands	r2, r3
 80007ee:	0011      	movs	r1, r2
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	409a      	lsls	r2, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <LL_EXTI_SetEXTISource+0x48>)
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2403      	movs	r4, #3
 80007fe:	4023      	ands	r3, r4
 8000800:	430a      	orrs	r2, r1
 8000802:	3318      	adds	r3, #24
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	501a      	str	r2, [r3, r0]
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b003      	add	sp, #12
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	40021800 	.word	0x40021800

08000814 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	435a      	muls	r2, r3
 800082a:	0013      	movs	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	189b      	adds	r3, r3, r2
 8000830:	43db      	mvns	r3, r3
 8000832:	400b      	ands	r3, r1
 8000834:	001a      	movs	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	434b      	muls	r3, r1
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	434b      	muls	r3, r1
 8000840:	431a      	orrs	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	601a      	str	r2, [r3, #0]
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b004      	add	sp, #16
 800084c:	bd80      	pop	{r7, pc}

0800084e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b084      	sub	sp, #16
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	68d9      	ldr	r1, [r3, #12]
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	435a      	muls	r2, r3
 8000864:	0013      	movs	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	189b      	adds	r3, r3, r2
 800086a:	43db      	mvns	r3, r3
 800086c:	400b      	ands	r3, r1
 800086e:	001a      	movs	r2, r3
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	434b      	muls	r3, r1
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	434b      	muls	r3, r1
 800087a:	431a      	orrs	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	60da      	str	r2, [r3, #12]
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b004      	add	sp, #16
 8000886:	bd80      	pop	{r7, pc}

08000888 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}

080008a0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <LL_IOP_GRP1_EnableClock+0x28>)
 80008aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <LL_IOP_GRP1_EnableClock+0x28>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <LL_IOP_GRP1_EnableClock+0x28>)
 80008b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4013      	ands	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b004      	add	sp, #16
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40021000 	.word	0x40021000

080008cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b08b      	sub	sp, #44	; 0x2c
 80008d0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80008d2:	241c      	movs	r4, #28
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	0018      	movs	r0, r3
 80008d8:	230c      	movs	r3, #12
 80008da:	001a      	movs	r2, r3
 80008dc:	2100      	movs	r1, #0
 80008de:	f005 f839 	bl	8005954 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	0018      	movs	r0, r3
 80008e6:	2318      	movs	r3, #24
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f005 f832 	bl	8005954 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80008f0:	2004      	movs	r0, #4
 80008f2:	f7ff ffd5 	bl	80008a0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 80008f6:	2020      	movs	r0, #32
 80008f8:	f7ff ffd2 	bl	80008a0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ffcf 	bl	80008a0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff ffcc 	bl	80008a0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 8000908:	2008      	movs	r0, #8
 800090a:	f7ff ffc9 	bl	80008a0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_0);
 800090e:	4bfe      	ldr	r3, [pc, #1016]	; (8000d08 <MX_GPIO_Init+0x43c>)
 8000910:	2101      	movs	r1, #1
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff ffb8 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_1);
 8000918:	4bfb      	ldr	r3, [pc, #1004]	; (8000d08 <MX_GPIO_Init+0x43c>)
 800091a:	2102      	movs	r1, #2
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff ffb3 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN1_GPIO_Port, GN1_Pin);
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2101      	movs	r1, #1
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff ffad 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN2_GPIO_Port, GN2_Pin);
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2104      	movs	r1, #4
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff ffa7 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G1_GPIO_Port, G1_Pin);
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2110      	movs	r1, #16
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff ffa1 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GDOT_GPIO_Port, GDOT_Pin);
 8000946:	23a0      	movs	r3, #160	; 0xa0
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	2120      	movs	r1, #32
 800094c:	0018      	movs	r0, r3
 800094e:	f7ff ff9b 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G3_GPIO_Port, G3_Pin);
 8000952:	23a0      	movs	r3, #160	; 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2140      	movs	r1, #64	; 0x40
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff ff95 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800095e:	23a0      	movs	r3, #160	; 0xa0
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2180      	movs	r1, #128	; 0x80
 8000964:	0018      	movs	r0, r3
 8000966:	f7ff ff8f 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 800096a:	4be8      	ldr	r3, [pc, #928]	; (8000d0c <MX_GPIO_Init+0x440>)
 800096c:	2101      	movs	r1, #1
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff ff8a 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000974:	4be5      	ldr	r3, [pc, #916]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000976:	2102      	movs	r1, #2
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff ff85 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 800097e:	4be3      	ldr	r3, [pc, #908]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000980:	2104      	movs	r1, #4
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff ff80 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	4adf      	ldr	r2, [pc, #892]	; (8000d0c <MX_GPIO_Init+0x440>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f7ff ff79 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	011b      	lsls	r3, r3, #4
 800099a:	4adc      	ldr	r2, [pc, #880]	; (8000d0c <MX_GPIO_Init+0x440>)
 800099c:	0019      	movs	r1, r3
 800099e:	0010      	movs	r0, r2
 80009a0:	f7ff ff72 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12);
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	015b      	lsls	r3, r3, #5
 80009a8:	4ad8      	ldr	r2, [pc, #864]	; (8000d0c <MX_GPIO_Init+0x440>)
 80009aa:	0019      	movs	r1, r3
 80009ac:	0010      	movs	r0, r2
 80009ae:	f7ff ff6b 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13);
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	019b      	lsls	r3, r3, #6
 80009b6:	4ad5      	ldr	r2, [pc, #852]	; (8000d0c <MX_GPIO_Init+0x440>)
 80009b8:	0019      	movs	r1, r3
 80009ba:	0010      	movs	r0, r2
 80009bc:	f7ff ff64 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_14);
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	01db      	lsls	r3, r3, #7
 80009c4:	4ad1      	ldr	r2, [pc, #836]	; (8000d0c <MX_GPIO_Init+0x440>)
 80009c6:	0019      	movs	r1, r3
 80009c8:	0010      	movs	r0, r2
 80009ca:	f7ff ff5d 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_15);
 80009ce:	2380      	movs	r3, #128	; 0x80
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	4ace      	ldr	r2, [pc, #824]	; (8000d0c <MX_GPIO_Init+0x440>)
 80009d4:	0019      	movs	r1, r3
 80009d6:	0010      	movs	r0, r2
 80009d8:	f7ff ff56 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	005a      	lsls	r2, r3, #1
 80009e0:	23a0      	movs	r3, #160	; 0xa0
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff ff4e 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_9);
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	009a      	lsls	r2, r3, #2
 80009f0:	23a0      	movs	r3, #160	; 0xa0
 80009f2:	05db      	lsls	r3, r3, #23
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff ff46 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
 80009fc:	4bc4      	ldr	r3, [pc, #784]	; (8000d10 <MX_GPIO_Init+0x444>)
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff ff41 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8000a06:	4bc2      	ldr	r3, [pc, #776]	; (8000d10 <MX_GPIO_Init+0x444>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff ff3c 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_10);
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	00da      	lsls	r2, r3, #3
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff ff34 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	011a      	lsls	r2, r3, #4
 8000a24:	23a0      	movs	r3, #160	; 0xa0
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff ff2c 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	015a      	lsls	r2, r3, #5
 8000a34:	23a0      	movs	r3, #160	; 0xa0
 8000a36:	05db      	lsls	r3, r3, #23
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f7ff ff24 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN3_GPIO_Port, GN3_Pin);
 8000a40:	4bb4      	ldr	r3, [pc, #720]	; (8000d14 <MX_GPIO_Init+0x448>)
 8000a42:	2102      	movs	r1, #2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ff1f 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G2_GPIO_Port, G2_Pin);
 8000a4a:	4bb2      	ldr	r3, [pc, #712]	; (8000d14 <MX_GPIO_Init+0x448>)
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff ff1a 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G4_GPIO_Port, G4_Pin);
 8000a54:	4baf      	ldr	r3, [pc, #700]	; (8000d14 <MX_GPIO_Init+0x448>)
 8000a56:	2108      	movs	r1, #8
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ff15 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G5_GPIO_Port, G5_Pin);
 8000a5e:	4bab      	ldr	r3, [pc, #684]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000a60:	2108      	movs	r1, #8
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff ff10 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G6_GPIO_Port, G6_Pin);
 8000a68:	4ba8      	ldr	r3, [pc, #672]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff ff0b 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GN4_GPIO_Port, GN4_Pin);
 8000a72:	4ba6      	ldr	r3, [pc, #664]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000a74:	2120      	movs	r1, #32
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff ff06 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G0_GPIO_Port, G0_Pin);
 8000a7c:	4ba3      	ldr	r3, [pc, #652]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ff01 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G9_GPIO_Port, G9_Pin);
 8000a86:	4ba1      	ldr	r3, [pc, #644]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff fefc 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G8_GPIO_Port, G8_Pin);
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4a9d      	ldr	r2, [pc, #628]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000a96:	0019      	movs	r1, r3
 8000a98:	0010      	movs	r0, r2
 8000a9a:	f7ff fef5 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(G7_GPIO_Port, G7_Pin);
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4a9a      	ldr	r2, [pc, #616]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f7ff feee 	bl	8000888 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = S2_Pin;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2201      	movs	r2, #1
 8000abe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4a93      	ldr	r2, [pc, #588]	; (8000d10 <MX_GPIO_Init+0x444>)
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0010      	movs	r0, r2
 8000ac8:	f004 febc 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4a86      	ldr	r2, [pc, #536]	; (8000d08 <MX_GPIO_Init+0x43c>)
 8000aee:	0019      	movs	r1, r3
 8000af0:	0010      	movs	r0, r2
 8000af2:	f004 fea7 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2202      	movs	r2, #2
 8000afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2201      	movs	r2, #1
 8000b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4a7c      	ldr	r2, [pc, #496]	; (8000d08 <MX_GPIO_Init+0x43c>)
 8000b18:	0019      	movs	r1, r3
 8000b1a:	0010      	movs	r0, r2
 8000b1c:	f004 fe92 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NRST_Pin;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2204      	movs	r2, #4
 8000b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4a74      	ldr	r2, [pc, #464]	; (8000d08 <MX_GPIO_Init+0x43c>)
 8000b36:	0019      	movs	r1, r3
 8000b38:	0010      	movs	r0, r2
 8000b3a:	f004 fe83 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN1_Pin;
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2201      	movs	r2, #1
 8000b48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN1_GPIO_Port, &GPIO_InitStruct);
 8000b5c:	1d3a      	adds	r2, r7, #4
 8000b5e:	23a0      	movs	r3, #160	; 0xa0
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f004 fe6d 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN2_Pin;
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2201      	movs	r2, #1
 8000b74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN2_GPIO_Port, &GPIO_InitStruct);
 8000b88:	1d3a      	adds	r2, r7, #4
 8000b8a:	23a0      	movs	r3, #160	; 0xa0
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f004 fe57 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G1_Pin;
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	2210      	movs	r2, #16
 8000b9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	1d3a      	adds	r2, r7, #4
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f004 fe41 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GDOT_Pin;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2201      	movs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2202      	movs	r2, #2
 8000bde:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GDOT_GPIO_Port, &GPIO_InitStruct);
 8000be0:	1d3a      	adds	r2, r7, #4
 8000be2:	23a0      	movs	r3, #160	; 0xa0
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f004 fe2b 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G3_Pin;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2240      	movs	r2, #64	; 0x40
 8000bf2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	1d3a      	adds	r2, r7, #4
 8000c0e:	23a0      	movs	r3, #160	; 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f004 fe15 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2201      	movs	r2, #1
 8000c24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	1d3a      	adds	r2, r7, #4
 8000c3a:	23a0      	movs	r3, #160	; 0xa0
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	0011      	movs	r1, r2
 8000c40:	0018      	movs	r0, r3
 8000c42:	f004 fdff 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2201      	movs	r2, #1
 8000c50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4a29      	ldr	r2, [pc, #164]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0010      	movs	r0, r2
 8000c6c:	f004 fdea 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2202      	movs	r2, #2
 8000c74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2201      	movs	r2, #1
 8000c7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000c92:	0019      	movs	r1, r3
 8000c94:	0010      	movs	r0, r2
 8000c96:	f004 fdd5 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	0010      	movs	r0, r2
 8000cc0:	f004 fdc0 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2201      	movs	r2, #1
 8000cd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <MX_GPIO_Init+0x440>)
 8000ce8:	0019      	movs	r1, r3
 8000cea:	0010      	movs	r0, r2
 8000cec:	f004 fdaa 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	0112      	lsls	r2, r2, #4
 8000cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	e007      	b.n	8000d18 <MX_GPIO_Init+0x44c>
 8000d08:	50001400 	.word	0x50001400
 8000d0c:	50000400 	.word	0x50000400
 8000d10:	50000800 	.word	0x50000800
 8000d14:	50000c00 	.word	0x50000c00
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4afe      	ldr	r2, [pc, #1016]	; (8001120 <MX_GPIO_Init+0x854>)
 8000d26:	0019      	movs	r1, r3
 8000d28:	0010      	movs	r0, r2
 8000d2a:	f004 fd8b 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0152      	lsls	r2, r2, #5
 8000d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2201      	movs	r2, #1
 8000d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4af3      	ldr	r2, [pc, #972]	; (8001120 <MX_GPIO_Init+0x854>)
 8000d52:	0019      	movs	r1, r3
 8000d54:	0010      	movs	r0, r2
 8000d56:	f004 fd75 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	0192      	lsls	r2, r2, #6
 8000d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2201      	movs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4ae8      	ldr	r2, [pc, #928]	; (8001120 <MX_GPIO_Init+0x854>)
 8000d7e:	0019      	movs	r1, r3
 8000d80:	0010      	movs	r0, r2
 8000d82:	f004 fd5f 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	01d2      	lsls	r2, r2, #7
 8000d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2201      	movs	r2, #1
 8000d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4add      	ldr	r2, [pc, #884]	; (8001120 <MX_GPIO_Init+0x854>)
 8000daa:	0019      	movs	r1, r3
 8000dac:	0010      	movs	r0, r2
 8000dae:	f004 fd49 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	0212      	lsls	r2, r2, #8
 8000db8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4ad2      	ldr	r2, [pc, #840]	; (8001120 <MX_GPIO_Init+0x854>)
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	0010      	movs	r0, r2
 8000dda:	f004 fd33 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	0052      	lsls	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2201      	movs	r2, #1
 8000dea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	1d3a      	adds	r2, r7, #4
 8000e00:	23a0      	movs	r3, #160	; 0xa0
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	0011      	movs	r1, r2
 8000e06:	0018      	movs	r0, r3
 8000e08:	f004 fd1c 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2201      	movs	r2, #1
 8000e18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	1d3a      	adds	r2, r7, #4
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f004 fd05 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2201      	movs	r2, #1
 8000e44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4ab2      	ldr	r2, [pc, #712]	; (8001124 <MX_GPIO_Init+0x858>)
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	0010      	movs	r0, r2
 8000e60:	f004 fcf0 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	4aa7      	ldr	r2, [pc, #668]	; (8001124 <MX_GPIO_Init+0x858>)
 8000e86:	0019      	movs	r1, r3
 8000e88:	0010      	movs	r0, r2
 8000e8a:	f004 fcdb 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	00d2      	lsls	r2, r2, #3
 8000e94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	1d3a      	adds	r2, r7, #4
 8000eb0:	23a0      	movs	r3, #160	; 0xa0
 8000eb2:	05db      	lsls	r3, r3, #23
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f004 fcc4 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	1d3a      	adds	r2, r7, #4
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f004 fcad 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	0152      	lsls	r2, r2, #5
 8000ef0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	1d3a      	adds	r2, r7, #4
 8000f0c:	23a0      	movs	r3, #160	; 0xa0
 8000f0e:	05db      	lsls	r3, r3, #23
 8000f10:	0011      	movs	r1, r2
 8000f12:	0018      	movs	r0, r3
 8000f14:	f004 fc96 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S1_Pin;
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2201      	movs	r2, #1
 8000f28:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4a7e      	ldr	r2, [pc, #504]	; (8001128 <MX_GPIO_Init+0x85c>)
 8000f2e:	0019      	movs	r1, r3
 8000f30:	0010      	movs	r0, r2
 8000f32:	f004 fc87 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN3_Pin;
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2202      	movs	r2, #2
 8000f3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2201      	movs	r2, #1
 8000f40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN3_GPIO_Port, &GPIO_InitStruct);
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	4a74      	ldr	r2, [pc, #464]	; (8001128 <MX_GPIO_Init+0x85c>)
 8000f58:	0019      	movs	r1, r3
 8000f5a:	0010      	movs	r0, r2
 8000f5c:	f004 fc72 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G2_Pin;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2204      	movs	r2, #4
 8000f64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G2_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4a69      	ldr	r2, [pc, #420]	; (8001128 <MX_GPIO_Init+0x85c>)
 8000f82:	0019      	movs	r1, r3
 8000f84:	0010      	movs	r0, r2
 8000f86:	f004 fc5d 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G4_Pin;
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2201      	movs	r2, #1
 8000f94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G4_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <MX_GPIO_Init+0x85c>)
 8000fac:	0019      	movs	r1, r3
 8000fae:	0010      	movs	r0, r2
 8000fb0:	f004 fc48 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G5_Pin;
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G5_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4a52      	ldr	r2, [pc, #328]	; (8001120 <MX_GPIO_Init+0x854>)
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	0010      	movs	r0, r2
 8000fda:	f004 fc33 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G6_Pin;
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G6_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4a48      	ldr	r2, [pc, #288]	; (8001120 <MX_GPIO_Init+0x854>)
 8001000:	0019      	movs	r1, r3
 8001002:	0010      	movs	r0, r2
 8001004:	f004 fc1e 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GN4_Pin;
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2220      	movs	r2, #32
 800100c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2201      	movs	r2, #1
 8001012:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GN4_GPIO_Port, &GPIO_InitStruct);
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4a3d      	ldr	r2, [pc, #244]	; (8001120 <MX_GPIO_Init+0x854>)
 800102a:	0019      	movs	r1, r3
 800102c:	0010      	movs	r0, r2
 800102e:	f004 fc09 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G0_Pin;
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2201      	movs	r2, #1
 800103c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G0_GPIO_Port, &GPIO_InitStruct);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4a33      	ldr	r2, [pc, #204]	; (8001120 <MX_GPIO_Init+0x854>)
 8001054:	0019      	movs	r1, r3
 8001056:	0010      	movs	r0, r2
 8001058:	f004 fbf4 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G9_Pin;
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2201      	movs	r2, #1
 8001066:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G9_GPIO_Port, &GPIO_InitStruct);
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <MX_GPIO_Init+0x854>)
 800107e:	0019      	movs	r1, r3
 8001080:	0010      	movs	r0, r2
 8001082:	f004 fbdf 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G8_Pin;
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	0052      	lsls	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2201      	movs	r2, #1
 8001092:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G8_GPIO_Port, &GPIO_InitStruct);
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4a1d      	ldr	r2, [pc, #116]	; (8001120 <MX_GPIO_Init+0x854>)
 80010aa:	0019      	movs	r1, r3
 80010ac:	0010      	movs	r0, r2
 80010ae:	f004 fbc9 	bl	8005844 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G7_Pin;
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	0092      	lsls	r2, r2, #2
 80010b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2201      	movs	r2, #1
 80010be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_GPIO_Init+0x854>)
 80010d6:	0019      	movs	r1, r3
 80010d8:	0010      	movs	r0, r2
 80010da:	f004 fbb3 	bl	8005844 <LL_GPIO_Init>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTA, LL_EXTI_CONFIG_LINE1);
 80010de:	2380      	movs	r3, #128	; 0x80
 80010e0:	031b      	lsls	r3, r3, #12
 80010e2:	0019      	movs	r1, r3
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff fb6f 	bl	80007c8 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80010ea:	0021      	movs	r1, r4
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2202      	movs	r2, #2
 80010f0:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2201      	movs	r2, #1
 80010f6:	721a      	strb	r2, [r3, #8]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2200      	movs	r2, #0
 80010fc:	725a      	strb	r2, [r3, #9]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2202      	movs	r2, #2
 8001102:	729a      	strb	r2, [r3, #10]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001104:	187b      	adds	r3, r7, r1
 8001106:	0018      	movs	r0, r3
 8001108:	f004 fa22 	bl	8005550 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ESP01_GPIO_Port, ESP01_Pin, LL_GPIO_PULL_UP);
 800110c:	23a0      	movs	r3, #160	; 0xa0
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	2201      	movs	r2, #1
 8001112:	2102      	movs	r1, #2
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fb9a 	bl	800084e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ESP01_GPIO_Port, ESP01_Pin, LL_GPIO_MODE_INPUT);
 800111a:	23a0      	movs	r3, #160	; 0xa0
 800111c:	e006      	b.n	800112c <MX_GPIO_Init+0x860>
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	50000400 	.word	0x50000400
 8001124:	50000800 	.word	0x50000800
 8001128:	50000c00 	.word	0x50000c00
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	2200      	movs	r2, #0
 8001130:	2102      	movs	r1, #2
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff fb6e 	bl	8000814 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
 8001138:	2100      	movs	r1, #0
 800113a:	2005      	movs	r0, #5
 800113c:	f7ff fad6 	bl	80006ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001140:	2005      	movs	r0, #5
 8001142:	f7ff fab9 	bl	80006b8 <__NVIC_EnableIRQ>

}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b00b      	add	sp, #44	; 0x2c
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fd68 	bl	8001c28 <HAL_Init>
  HAL_Delay(1000);
 8001158:	23fa      	movs	r3, #250	; 0xfa
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fde7 	bl	8001d30 <HAL_Delay>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f815 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f7ff fbb1 	bl	80008cc <MX_GPIO_Init>
  MX_COMP2_Init();
 800116a:	f7ff f9e9 	bl	8000540 <MX_COMP2_Init>
  MX_DAC1_Init();
 800116e:	f7ff fa4d 	bl	800060c <MX_DAC1_Init>
  MX_TIM2_Init();
 8001172:	f000 fbc5 	bl	8001900 <MX_TIM2_Init>
  MX_TIM14_Init();
 8001176:	f000 fc49 	bl	8001a0c <MX_TIM14_Init>
  MX_TIM17_Init();
 800117a:	f000 fc6d 	bl	8001a58 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  MY_OWN_MX_RTC_Init();
 800117e:	f000 fa6f 	bl	8001660 <MY_OWN_MX_RTC_Init>
  //MX_RTC_Init();
  nixie_init();
 8001182:	f000 f8e1 	bl	8001348 <nixie_init>
  ESP01_init();
 8001186:	f7ff f8ad 	bl	80002e4 <ESP01_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  boost_op();
 800118a:	f000 f90d 	bl	80013a8 <boost_op>
 800118e:	e7fc      	b.n	800118a <main+0x3a>

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b0a1      	sub	sp, #132	; 0x84
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	2448      	movs	r4, #72	; 0x48
 8001198:	193b      	adds	r3, r7, r4
 800119a:	0018      	movs	r0, r3
 800119c:	2338      	movs	r3, #56	; 0x38
 800119e:	001a      	movs	r2, r3
 80011a0:	2100      	movs	r1, #0
 80011a2:	f004 fbd7 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a6:	2338      	movs	r3, #56	; 0x38
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	0018      	movs	r0, r3
 80011ac:	2310      	movs	r3, #16
 80011ae:	001a      	movs	r2, r3
 80011b0:	2100      	movs	r1, #0
 80011b2:	f004 fbcf 	bl	8005954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	0018      	movs	r0, r3
 80011ba:	2334      	movs	r3, #52	; 0x34
 80011bc:	001a      	movs	r2, r3
 80011be:	2100      	movs	r1, #0
 80011c0:	f004 fbc8 	bl	8005954 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f001 fc8f 	bl	8002aec <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 80011ce:	4b30      	ldr	r3, [pc, #192]	; (8001290 <SystemClock_Config+0x100>)
 80011d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <SystemClock_Config+0x100>)
 80011d4:	2118      	movs	r1, #24
 80011d6:	430a      	orrs	r2, r1
 80011d8:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	2206      	movs	r2, #6
 80011de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	2201      	movs	r2, #1
 80011e4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	0052      	lsls	r2, r2, #1
 80011ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80011ee:	0021      	movs	r1, r4
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2202      	movs	r2, #2
 8001200:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2202      	movs	r2, #2
 8001206:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2210      	movs	r2, #16
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	0292      	lsls	r2, r2, #10
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	0492      	lsls	r2, r2, #18
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	22c0      	movs	r2, #192	; 0xc0
 8001228:	05d2      	lsls	r2, r2, #23
 800122a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	187b      	adds	r3, r7, r1
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fc9c 	bl	8002b6c <HAL_RCC_OscConfig>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001238:	f000 f82c 	bl	8001294 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	2138      	movs	r1, #56	; 0x38
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2202      	movs	r2, #2
 8001248:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001250:	187b      	adds	r3, r7, r1
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2102      	movs	r1, #2
 800125a:	0018      	movs	r0, r3
 800125c:	f001 ffa6 	bl	80031ac <HAL_RCC_ClockConfig>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001264:	f000 f816 	bl	8001294 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	0292      	lsls	r2, r2, #10
 800126e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	0052      	lsls	r2, r2, #1
 8001276:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	0018      	movs	r0, r3
 800127c:	f002 f920 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001284:	f000 f806 	bl	8001294 <Error_Handler>
  }
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b021      	add	sp, #132	; 0x84
 800128e:	bd90      	pop	{r4, r7, pc}
 8001290:	40021000 	.word	0x40021000

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <LL_GPIO_SetPinPull>:
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	68d9      	ldr	r1, [r3, #12]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	435a      	muls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	189b      	adds	r3, r3, r2
 80012ba:	43db      	mvns	r3, r3
 80012bc:	400b      	ands	r3, r1
 80012be:	001a      	movs	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	434b      	muls	r3, r1
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	434b      	muls	r3, r1
 80012ca:	431a      	orrs	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	60da      	str	r2, [r3, #12]
}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b004      	add	sp, #16
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_TIM_PeriodElapsedCallback>:
static void nixie_display();
static void nixie_display_reset_all();
static void nixie_display_set_anode(uint8_t n);

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d103      	bne.n	80012f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//End of boost converter pulse. Set flag to poll the feedback comparator of boost converter again
		poll_comp = true;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
		{
			dac_value = dac_value + 10;
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
		}
	}
}
 80012f2:	e019      	b.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x50>
	else if(htim->Instance == htim14.Instance)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d113      	bne.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x50>
		nixie_display();
 8001300:	f000 f89a 	bl	8001438 <nixie_display>
		if(dac_value < DAC_TARGET)
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d80c      	bhi.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x50>
			dac_value = dac_value + 10;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	330a      	adds	r3, #10
 8001314:	001a      	movs	r2, r3
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001318:	601a      	str	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001320:	2200      	movs	r2, #0
 8001322:	2110      	movs	r1, #16
 8001324:	f001 f904 	bl	8002530 <HAL_DAC_SetValue>
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000108 	.word	0x20000108
 8001334:	20000000 	.word	0x20000000
 8001338:	20000148 	.word	0x20000148
 800133c:	20000030 	.word	0x20000030
 8001340:	00000a59 	.word	0x00000a59
 8001344:	20000088 	.word	0x20000088

08001348 <nixie_init>:

void nixie_init()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	//Start DAC for feedback voltage of boost converter
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <nixie_init+0x4c>)
 800134e:	2110      	movs	r1, #16
 8001350:	0018      	movs	r0, r3
 8001352:	f001 f89e 	bl	8002492 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <nixie_init+0x50>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	480e      	ldr	r0, [pc, #56]	; (8001394 <nixie_init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	2110      	movs	r1, #16
 8001360:	f001 f8e6 	bl	8002530 <HAL_DAC_SetValue>
	//Start comparator for boost converter
	HAL_COMP_Start(&hcomp2);
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <nixie_init+0x54>)
 8001366:	0018      	movs	r0, r3
 8001368:	f000 ff32 	bl	80021d0 <HAL_COMP_Start>
	//Enable one pulse mode for boost converter. Trigger by software trough HAL_TIM_Base_Start
	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_1);
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <nixie_init+0x58>)
 800136e:	2100      	movs	r1, #0
 8001370:	0018      	movs	r0, r3
 8001372:	f003 f84d 	bl	8004410 <HAL_TIM_OnePulse_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <nixie_init+0x58>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <nixie_init+0x58>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2101      	movs	r1, #1
 8001382:	430a      	orrs	r2, r1
 8001384:	60da      	str	r2, [r3, #12]
	//Start timer and period elapsed event of multiplex timer for nixie tubes
	HAL_TIM_Base_Start_IT(&htim14);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <nixie_init+0x5c>)
 8001388:	0018      	movs	r0, r3
 800138a:	f002 ff9d 	bl	80042c8 <HAL_TIM_Base_Start_IT>
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000088 	.word	0x20000088
 8001398:	20000030 	.word	0x20000030
 800139c:	20000058 	.word	0x20000058
 80013a0:	20000108 	.word	0x20000108
 80013a4:	20000148 	.word	0x20000148

080013a8 <boost_op>:

void boost_op()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	if(poll_comp)
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <boost_op+0x38>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d010      	beq.n	80013d8 <boost_op+0x30>
	{
		//If voltage lower than feedback, activate next pulse of boost converter and switch off polling the comparator
		if(HAL_COMP_GetOutputLevel(&hcomp2) == COMP_OUTPUT_LEVEL_LOW)
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <boost_op+0x3c>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f000 ff5b 	bl	8002274 <HAL_COMP_GetOutputLevel>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d10a      	bne.n	80013d8 <boost_op+0x30>
		{
			poll_comp = false;
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <boost_op+0x38>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_ENABLE(&htim2);
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <boost_op+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <boost_op+0x40>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000058 	.word	0x20000058
 80013e8:	20000108 	.word	0x20000108

080013ec <nixie_set_time>:

void nixie_set_time(uint8_t h, uint8_t m, uint8_t s)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	0004      	movs	r4, r0
 80013f4:	0008      	movs	r0, r1
 80013f6:	0011      	movs	r1, r2
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	1c22      	adds	r2, r4, #0
 80013fc:	701a      	strb	r2, [r3, #0]
 80013fe:	1dbb      	adds	r3, r7, #6
 8001400:	1c02      	adds	r2, r0, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	1d7b      	adds	r3, r7, #5
 8001406:	1c0a      	adds	r2, r1, #0
 8001408:	701a      	strb	r2, [r3, #0]
	hours = h;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <nixie_set_time+0x40>)
 800140c:	1dfa      	adds	r2, r7, #7
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	701a      	strb	r2, [r3, #0]
	minutes = m;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <nixie_set_time+0x44>)
 8001414:	1dba      	adds	r2, r7, #6
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	701a      	strb	r2, [r3, #0]
	seconds = s;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <nixie_set_time+0x48>)
 800141c:	1d7a      	adds	r2, r7, #5
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	701a      	strb	r2, [r3, #0]
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b003      	add	sp, #12
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	20000035 	.word	0x20000035
 8001430:	20000036 	.word	0x20000036
 8001434:	20000037 	.word	0x20000037

08001438 <nixie_display>:

static void nixie_display()
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	nixie_display_reset_all();
 800143c:	f000 f88e 	bl	800155c <nixie_display_reset_all>
	switch(digit)
 8001440:	4b40      	ldr	r3, [pc, #256]	; (8001544 <nixie_display+0x10c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d01f      	beq.n	800148a <nixie_display+0x52>
 800144a:	dc02      	bgt.n	8001452 <nixie_display+0x1a>
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <nixie_display+0x24>
 8001450:	e05e      	b.n	8001510 <nixie_display+0xd8>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d030      	beq.n	80014b8 <nixie_display+0x80>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d044      	beq.n	80014e4 <nixie_display+0xac>
 800145a:	e059      	b.n	8001510 <nixie_display+0xd8>
	{
	case 0:
		nixie_display_set_anode(hours/10);
 800145c:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <nixie_display+0x110>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	210a      	movs	r1, #10
 8001464:	0018      	movs	r0, r3
 8001466:	f7fe fe4d 	bl	8000104 <__udivsi3>
 800146a:	0003      	movs	r3, r0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f892 	bl	8001598 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN1_GPIO_Port, GN1_Pin, GPIO_PIN_SET);
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	2201      	movs	r2, #1
 800147a:	2101      	movs	r1, #1
 800147c:	0018      	movs	r0, r3
 800147e:	f001 fb18 	bl	8002ab2 <HAL_GPIO_WritePin>
		digit = 1;
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <nixie_display+0x10c>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
		break;
 8001488:	e042      	b.n	8001510 <nixie_display+0xd8>
	case 1:
		nixie_display_set_anode(hours%10);
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <nixie_display+0x110>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	210a      	movs	r1, #10
 8001492:	0018      	movs	r0, r3
 8001494:	f7fe febc 	bl	8000210 <__aeabi_uidivmod>
 8001498:	000b      	movs	r3, r1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	0018      	movs	r0, r3
 800149e:	f000 f87b 	bl	8001598 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN2_GPIO_Port, GN2_Pin, GPIO_PIN_SET);
 80014a2:	23a0      	movs	r3, #160	; 0xa0
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	2201      	movs	r2, #1
 80014a8:	2104      	movs	r1, #4
 80014aa:	0018      	movs	r0, r3
 80014ac:	f001 fb01 	bl	8002ab2 <HAL_GPIO_WritePin>
		digit = 2;
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <nixie_display+0x10c>)
 80014b2:	2202      	movs	r2, #2
 80014b4:	701a      	strb	r2, [r3, #0]
		break;
 80014b6:	e02b      	b.n	8001510 <nixie_display+0xd8>
	case 2:
		nixie_display_set_anode(minutes/10);
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <nixie_display+0x114>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	210a      	movs	r1, #10
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7fe fe1f 	bl	8000104 <__udivsi3>
 80014c6:	0003      	movs	r3, r0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	0018      	movs	r0, r3
 80014cc:	f000 f864 	bl	8001598 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN3_GPIO_Port, GN3_Pin, GPIO_PIN_SET);
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <nixie_display+0x118>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	2102      	movs	r1, #2
 80014d6:	0018      	movs	r0, r3
 80014d8:	f001 faeb 	bl	8002ab2 <HAL_GPIO_WritePin>
		digit = 3;
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <nixie_display+0x10c>)
 80014de:	2203      	movs	r2, #3
 80014e0:	701a      	strb	r2, [r3, #0]
		break;
 80014e2:	e015      	b.n	8001510 <nixie_display+0xd8>
	case 3:
		nixie_display_set_anode(minutes%10);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <nixie_display+0x114>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	210a      	movs	r1, #10
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7fe fe8f 	bl	8000210 <__aeabi_uidivmod>
 80014f2:	000b      	movs	r3, r1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	0018      	movs	r0, r3
 80014f8:	f000 f84e 	bl	8001598 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN4_GPIO_Port, GN4_Pin, GPIO_PIN_SET);
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <nixie_display+0x11c>)
 80014fe:	2201      	movs	r2, #1
 8001500:	2120      	movs	r1, #32
 8001502:	0018      	movs	r0, r3
 8001504:	f001 fad5 	bl	8002ab2 <HAL_GPIO_WritePin>
		digit = 0;
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <nixie_display+0x10c>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
		break;
 800150e:	46c0      	nop			; (mov r8, r8)
	}

	/*TODO: PA4 and PA5 can’t be used in output mode when DAC1_OUT1 or
	DAC1_OUT2 respectively is connected to on-chip peripherals*/
	if(seconds%2)
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <nixie_display+0x120>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2201      	movs	r2, #1
 8001518:	4013      	ands	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <nixie_display+0xf8>
	{
		//HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_SET);
		//Workaround: use LL library and use pullup oder -down resistor instaed of output
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLUP);
 8001520:	23a0      	movs	r3, #160	; 0xa0
 8001522:	05db      	lsls	r3, r3, #23
 8001524:	2201      	movs	r2, #1
 8001526:	2120      	movs	r1, #32
 8001528:	0018      	movs	r0, r3
 800152a:	f7ff feb8 	bl	800129e <LL_GPIO_SetPinPull>
	{
		//HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_RESET);
		//Workaround: use LL library and use pullup oder -down resistor instaed of output
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLDOWN);
	}
}
 800152e:	e006      	b.n	800153e <nixie_display+0x106>
		LL_GPIO_SetPinPull(GDOT_GPIO_Port, GDOT_Pin, GPIO_PULLDOWN);
 8001530:	23a0      	movs	r3, #160	; 0xa0
 8001532:	05db      	lsls	r3, r3, #23
 8001534:	2202      	movs	r2, #2
 8001536:	2120      	movs	r1, #32
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff feb0 	bl	800129e <LL_GPIO_SetPinPull>
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000034 	.word	0x20000034
 8001548:	20000035 	.word	0x20000035
 800154c:	20000036 	.word	0x20000036
 8001550:	50000c00 	.word	0x50000c00
 8001554:	50000400 	.word	0x50000400
 8001558:	20000037 	.word	0x20000037

0800155c <nixie_display_reset_all>:

static void nixie_display_reset_all()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GN1_Pin|GN2_Pin|G1_Pin|G3_Pin, GPIO_PIN_RESET);
 8001560:	23a0      	movs	r3, #160	; 0xa0
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	2200      	movs	r2, #0
 8001566:	2155      	movs	r1, #85	; 0x55
 8001568:	0018      	movs	r0, r3
 800156a:	f001 faa2 	bl	8002ab2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GN3_Pin|G2_Pin|G4_Pin, GPIO_PIN_RESET);
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <nixie_display_reset_all+0x34>)
 8001570:	2200      	movs	r2, #0
 8001572:	210e      	movs	r1, #14
 8001574:	0018      	movs	r0, r3
 8001576:	f001 fa9c 	bl	8002ab2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, G5_Pin|G6_Pin|GN4_Pin|G0_Pin|G9_Pin|G8_Pin|G7_Pin, GPIO_PIN_RESET);
 800157a:	23fe      	movs	r3, #254	; 0xfe
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <nixie_display_reset_all+0x38>)
 8001580:	2200      	movs	r2, #0
 8001582:	0019      	movs	r1, r3
 8001584:	f001 fa95 	bl	8002ab2 <HAL_GPIO_WritePin>
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	50000c00 	.word	0x50000c00
 8001594:	50000400 	.word	0x50000400

08001598 <nixie_display_set_anode>:

static void nixie_display_set_anode(uint8_t n)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	0002      	movs	r2, r0
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	701a      	strb	r2, [r3, #0]
	switch(n)
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b09      	cmp	r3, #9
 80015aa:	d84e      	bhi.n	800164a <nixie_display_set_anode+0xb2>
 80015ac:	009a      	lsls	r2, r3, #2
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <nixie_display_set_anode+0xbc>)
 80015b0:	18d3      	adds	r3, r2, r3
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	469f      	mov	pc, r3
	{
	case 0:
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <nixie_display_set_anode+0xc0>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	2140      	movs	r1, #64	; 0x40
 80015bc:	0018      	movs	r0, r3
 80015be:	f001 fa78 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 80015c2:	e042      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 1:
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 80015c4:	23a0      	movs	r3, #160	; 0xa0
 80015c6:	05db      	lsls	r3, r3, #23
 80015c8:	2201      	movs	r2, #1
 80015ca:	2110      	movs	r1, #16
 80015cc:	0018      	movs	r0, r3
 80015ce:	f001 fa70 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 80015d2:	e03a      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 2:
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <nixie_display_set_anode+0xc4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	2104      	movs	r1, #4
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 fa69 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 80015e0:	e033      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 3:
		HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_SET);
 80015e2:	23a0      	movs	r3, #160	; 0xa0
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	2201      	movs	r2, #1
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 fa61 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 80015f0:	e02b      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 4:
		HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_SET);
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <nixie_display_set_anode+0xc4>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	2108      	movs	r1, #8
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 fa5a 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 80015fe:	e024      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 5:
		HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_SET);
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <nixie_display_set_anode+0xc0>)
 8001602:	2201      	movs	r2, #1
 8001604:	2108      	movs	r1, #8
 8001606:	0018      	movs	r0, r3
 8001608:	f001 fa53 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 800160c:	e01d      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 6:
		HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_SET);
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <nixie_display_set_anode+0xc0>)
 8001610:	2201      	movs	r2, #1
 8001612:	2110      	movs	r1, #16
 8001614:	0018      	movs	r0, r3
 8001616:	f001 fa4c 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 800161a:	e016      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 7:
		HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_SET);
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <nixie_display_set_anode+0xc0>)
 8001622:	2201      	movs	r2, #1
 8001624:	0019      	movs	r1, r3
 8001626:	f001 fa44 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 800162a:	e00e      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 8:
		HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_SET);
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <nixie_display_set_anode+0xc0>)
 8001632:	2201      	movs	r2, #1
 8001634:	0019      	movs	r1, r3
 8001636:	f001 fa3c 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 800163a:	e006      	b.n	800164a <nixie_display_set_anode+0xb2>
	case 9:
		HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_SET);
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <nixie_display_set_anode+0xc0>)
 800163e:	2201      	movs	r2, #1
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0018      	movs	r0, r3
 8001644:	f001 fa35 	bl	8002ab2 <HAL_GPIO_WritePin>
		break;
 8001648:	46c0      	nop			; (mov r8, r8)
	}
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	08005990 	.word	0x08005990
 8001658:	50000400 	.word	0x50000400
 800165c:	50000c00 	.word	0x50000c00

08001660 <MY_OWN_MX_RTC_Init>:
#include "rtc.h"

/* USER CODE BEGIN 0 */
/* Own RTC init function */
void MY_OWN_MX_RTC_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
  RTC_AlarmTypeDef sAlarm = {0};
 8001666:	003b      	movs	r3, r7
 8001668:	0018      	movs	r0, r3
 800166a:	2328      	movs	r3, #40	; 0x28
 800166c:	001a      	movs	r2, r3
 800166e:	2100      	movs	r1, #0
 8001670:	f004 f970 	bl	8005954 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 8001676:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <MY_OWN_MX_RTC_Init+0xc8>)
 8001678:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 8001682:	227f      	movs	r2, #127	; 0x7f
 8001684:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 8001688:	22ff      	movs	r2, #255	; 0xff
 800168a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	05d2      	lsls	r2, r2, #23
 80016a4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f002 f8be 	bl	8003830 <HAL_RTC_Init>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d001      	beq.n	80016bc <MY_OWN_MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80016b8:	f7ff fdec 	bl	8001294 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80016bc:	003b      	movs	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80016c2:	003b      	movs	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80016c8:	003b      	movs	r3, r7
 80016ca:	2200      	movs	r2, #0
 80016cc:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80016ce:	003b      	movs	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016d4:	003b      	movs	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_SET;
 80016da:	003b      	movs	r3, r7
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	02d2      	lsls	r2, r2, #11
 80016e0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80016e2:	003b      	movs	r3, r7
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <MY_OWN_MX_RTC_Init+0xcc>)
 80016e6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80016e8:	003b      	movs	r3, r7
 80016ea:	22f0      	movs	r2, #240	; 0xf0
 80016ec:	0512      	lsls	r2, r2, #20
 80016ee:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80016f0:	003b      	movs	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80016f6:	003b      	movs	r3, r7
 80016f8:	2220      	movs	r2, #32
 80016fa:	2101      	movs	r1, #1
 80016fc:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80016fe:	003b      	movs	r3, r7
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	0052      	lsls	r2, r2, #1
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001706:	0039      	movs	r1, r7
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MY_OWN_MX_RTC_Init+0xc4>)
 800170a:	2200      	movs	r2, #0
 800170c:	0018      	movs	r0, r3
 800170e:	f002 fb09 	bl	8003d24 <HAL_RTC_SetAlarm_IT>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d001      	beq.n	800171a <MY_OWN_MX_RTC_Init+0xba>
  {
    Error_Handler();
 8001716:	f7ff fdbd 	bl	8001294 <Error_Handler>
  }

}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b00a      	add	sp, #40	; 0x28
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	2000009c 	.word	0x2000009c
 8001728:	40002800 	.word	0x40002800
 800172c:	80808080 	.word	0x80808080

08001730 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a11      	ldr	r2, [pc, #68]	; (8001784 <HAL_RTC_MspInit+0x54>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11c      	bne.n	800177c <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_RTC_MspInit+0x58>)
 8001744:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RTC_MspInit+0x58>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0209      	lsls	r1, r1, #8
 800174c:	430a      	orrs	r2, r1
 800174e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_RTC_MspInit+0x58>)
 8001752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_RTC_MspInit+0x58>)
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	00c9      	lsls	r1, r1, #3
 800175a:	430a      	orrs	r2, r1
 800175c:	63da      	str	r2, [r3, #60]	; 0x3c
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_RTC_MspInit+0x58>)
 8001760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4013      	ands	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2002      	movs	r0, #2
 8001772:	f000 fe39 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8001776:	2002      	movs	r0, #2
 8001778:	f000 fe4b 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40002800 	.word	0x40002800
 8001788:	40021000 	.word	0x40021000

0800178c <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <LL_SYSCFG_DisableDBATT+0x1c>)
 8001796:	6819      	ldr	r1, [r3, #0]
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <LL_SYSCFG_DisableDBATT+0x1c>)
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40010000 	.word	0x40010000

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_MspInit+0x58>)
 80017b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_MspInit+0x58>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_MspInit+0x58>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_MspInit+0x58>)
 80017cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_MspInit+0x58>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0549      	lsls	r1, r1, #21
 80017d4:	430a      	orrs	r2, r1
 80017d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_MspInit+0x58>)
 80017da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	055b      	lsls	r3, r3, #21
 80017e0:	4013      	ands	r3, r2
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_DisableVREFBUF();
 80017e6:	f000 fad9 	bl	8001d9c <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80017ea:	2002      	movs	r0, #2
 80017ec:	f000 fac2 	bl	8001d74 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 80017f0:	23c0      	movs	r3, #192	; 0xc0
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff ffc9 	bl	800178c <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40021000 	.word	0x40021000

08001808 <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <LL_EXTI_IsActiveFallingFlag_0_31+0x24>)
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4013      	ands	r3, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d101      	bne.n	8001822 <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 8001822:	2300      	movs	r3, #0
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021800 	.word	0x40021800

08001830 <LL_EXTI_ClearFallingFlag_0_31>:
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	611a      	str	r2, [r3, #16]
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	40021800 	.word	0x40021800

0800184c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001860:	46c0      	nop			; (mov r8, r8)
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001874:	f000 fa42 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <RTC_TAMP_IRQHandler+0x14>)
 8001886:	0018      	movs	r0, r3
 8001888:	f002 fb8c 	bl	8003fa4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	2000009c 	.word	0x2000009c

08001898 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800189c:	2002      	movs	r0, #2
 800189e:	f7ff ffb3 	bl	8001808 <LL_EXTI_IsActiveFallingFlag_0_31>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d004      	beq.n	80018b0 <EXTI0_1_IRQHandler+0x18>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_1);
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7ff ffc2 	bl	8001830 <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_1_FALLING */
    OWN_LL_EXTI();
 80018ac:	f7fe fd26 	bl	80002fc <OWN_LL_EXTI>
    /* USER CODE END LL_EXTI_LINE_1_FALLING */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <TIM2_IRQHandler+0x14>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f002 fde8 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	20000108 	.word	0x20000108

080018d0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <TIM14_IRQHandler+0x14>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f002 fddc 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	20000148 	.word	0x20000148

080018e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <SystemInit+0x14>)
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	0512      	lsls	r2, r2, #20
 80018f2:	609a      	str	r2, [r3, #8]
#endif
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	2328      	movs	r3, #40	; 0x28
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	0018      	movs	r0, r3
 800190c:	2310      	movs	r3, #16
 800190e:	001a      	movs	r2, r3
 8001910:	2100      	movs	r1, #0
 8001912:	f004 f81f 	bl	8005954 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001916:	231c      	movs	r3, #28
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	0018      	movs	r0, r3
 800191c:	230c      	movs	r3, #12
 800191e:	001a      	movs	r2, r3
 8001920:	2100      	movs	r1, #0
 8001922:	f004 f817 	bl	8005954 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	003b      	movs	r3, r7
 8001928:	0018      	movs	r0, r3
 800192a:	231c      	movs	r3, #28
 800192c:	001a      	movs	r2, r3
 800192e:	2100      	movs	r1, #0
 8001930:	f004 f810 	bl	8005954 <memset>

  htim2.Instance = TIM2;
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <MX_TIM2_Init+0x108>)
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	05d2      	lsls	r2, r2, #23
 800193a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800193c:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <MX_TIM2_Init+0x108>)
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <MX_TIM2_Init+0x108>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 224;
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <MX_TIM2_Init+0x108>)
 800194a:	22e0      	movs	r2, #224	; 0xe0
 800194c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <MX_TIM2_Init+0x108>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001954:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <MX_TIM2_Init+0x108>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <MX_TIM2_Init+0x108>)
 800195c:	0018      	movs	r0, r3
 800195e:	f002 fc5d 	bl	800421c <HAL_TIM_Base_Init>
 8001962:	1e03      	subs	r3, r0, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001966:	f7ff fc95 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196a:	2128      	movs	r1, #40	; 0x28
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	0152      	lsls	r2, r2, #5
 8001972:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001974:	187a      	adds	r2, r7, r1
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_TIM2_Init+0x108>)
 8001978:	0011      	movs	r1, r2
 800197a:	0018      	movs	r0, r3
 800197c:	f002 ffba 	bl	80048f4 <HAL_TIM_ConfigClockSource>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001984:	f7ff fc86 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_TIM2_Init+0x108>)
 800198a:	0018      	movs	r0, r3
 800198c:	f002 fcc6 	bl	800431c <HAL_TIM_PWM_Init>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001994:	f7ff fc7e 	bl	8001294 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_TIM2_Init+0x108>)
 800199a:	2108      	movs	r1, #8
 800199c:	0018      	movs	r0, r3
 800199e:	f002 fcf1 	bl	8004384 <HAL_TIM_OnePulse_Init>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80019a6:	f7ff fc75 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019aa:	211c      	movs	r1, #28
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b8:	187a      	adds	r2, r7, r1
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_TIM2_Init+0x108>)
 80019bc:	0011      	movs	r1, r2
 80019be:	0018      	movs	r0, r3
 80019c0:	f003 fc7c 	bl	80052bc <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	1e03      	subs	r3, r0, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80019c8:	f7ff fc64 	bl	8001294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80019cc:	003b      	movs	r3, r7
 80019ce:	2270      	movs	r2, #112	; 0x70
 80019d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 80019d2:	003b      	movs	r3, r7
 80019d4:	2201      	movs	r2, #1
 80019d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	003b      	movs	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80019de:	003b      	movs	r3, r7
 80019e0:	2204      	movs	r2, #4
 80019e2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e4:	0039      	movs	r1, r7
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MX_TIM2_Init+0x108>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f002 fe84 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80019f4:	f7ff fc4e 	bl	8001294 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <MX_TIM2_Init+0x108>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 f8ae 	bl	8001b5c <HAL_TIM_MspPostInit>

}
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b00e      	add	sp, #56	; 0x38
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000108 	.word	0x20000108

08001a0c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_TIM14_Init+0x40>)
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <MX_TIM14_Init+0x44>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <MX_TIM14_Init+0x40>)
 8001a18:	223f      	movs	r2, #63	; 0x3f
 8001a1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_TIM14_Init+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <MX_TIM14_Init+0x40>)
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <MX_TIM14_Init+0x48>)
 8001a26:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_TIM14_Init+0x40>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <MX_TIM14_Init+0x40>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <MX_TIM14_Init+0x40>)
 8001a36:	0018      	movs	r0, r3
 8001a38:	f002 fbf0 	bl	800421c <HAL_TIM_Base_Init>
 8001a3c:	1e03      	subs	r3, r0, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001a40:	f7ff fc28 	bl	8001294 <Error_Handler>
  }

}
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	20000148 	.word	0x20000148
 8001a50:	40002000 	.word	0x40002000
 8001a54:	00001388 	.word	0x00001388

08001a58 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <MX_TIM17_Init+0x44>)
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <MX_TIM17_Init+0x48>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 63999;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_TIM17_Init+0x44>)
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <MX_TIM17_Init+0x4c>)
 8001a66:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_TIM17_Init+0x44>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_TIM17_Init+0x44>)
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <MX_TIM17_Init+0x50>)
 8001a72:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_TIM17_Init+0x44>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_TIM17_Init+0x44>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_TIM17_Init+0x44>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <MX_TIM17_Init+0x44>)
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f002 fbc7 	bl	800421c <HAL_TIM_Base_Init>
 8001a8e:	1e03      	subs	r3, r0, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001a92:	f7ff fbff 	bl	8001294 <Error_Handler>
  }

}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000c8 	.word	0x200000c8
 8001aa0:	40014800 	.word	0x40014800
 8001aa4:	0000f9ff 	.word	0x0000f9ff
 8001aa8:	0000ffff 	.word	0x0000ffff

08001aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	05db      	lsls	r3, r3, #23
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d114      	bne.n	8001aea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	200f      	movs	r0, #15
 8001ade:	f000 fc83 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f000 fc95 	bl	8002412 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001ae8:	e02e      	b.n	8001b48 <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM14)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_TIM_Base_MspInit+0xa8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d116      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af8:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	0209      	lsls	r1, r1, #8
 8001afe:	430a      	orrs	r2, r1
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	021b      	lsls	r3, r3, #8
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	2100      	movs	r1, #0
 8001b14:	2013      	movs	r0, #19
 8001b16:	f000 fc67 	bl	80023e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001b1a:	2013      	movs	r0, #19
 8001b1c:	f000 fc79 	bl	8002412 <HAL_NVIC_EnableIRQ>
}
 8001b20:	e012      	b.n	8001b48 <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM17)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_TIM_Base_MspInit+0xac>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d10d      	bne.n	8001b48 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001b32:	2180      	movs	r1, #128	; 0x80
 8001b34:	02c9      	lsls	r1, r1, #11
 8001b36:	430a      	orrs	r2, r1
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_TIM_Base_MspInit+0xa4>)
 8001b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	02db      	lsls	r3, r3, #11
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	46c0      	nop			; (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b006      	add	sp, #24
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40002000 	.word	0x40002000
 8001b58:	40014800 	.word	0x40014800

08001b5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	230c      	movs	r3, #12
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	0018      	movs	r0, r3
 8001b6a:	2314      	movs	r3, #20
 8001b6c:	001a      	movs	r2, r3
 8001b6e:	2100      	movs	r1, #0
 8001b70:	f003 fef0 	bl	8005954 <memset>
  if(timHandle->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	05db      	lsls	r3, r3, #23
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d123      	bne.n	8001bc8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <HAL_TIM_MspPostInit+0x74>)
 8001b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_TIM_MspPostInit+0x74>)
 8001b86:	2101      	movs	r1, #1
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_TIM_MspPostInit+0x74>)
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b90:	2201      	movs	r2, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b98:	210c      	movs	r1, #12
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	0212      	lsls	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	187a      	adds	r2, r7, r1
 8001bbc:	23a0      	movs	r3, #160	; 0xa0
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fdf4 	bl	80027b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bc8:	46c0      	nop			; (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b008      	add	sp, #32
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <LoopForever+0xa>)
  ldr r3, =_edata
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopForever+0xe>)
  adds r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
  ldr r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopForever+0x12>)
  b LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  str  r3, [r2]
 8001bf4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf6:	3204      	adds	r2, #4

08001bf8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <LoopForever+0x16>)
  cmp r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bfe:	f7ff fe73 	bl	80018e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001c02:	f003 fe83 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c06:	f7ff faa3 	bl	8001150 <main>

08001c0a <LoopForever>:

LoopForever:
    b LoopForever
 8001c0a:	e7fe      	b.n	8001c0a <LoopForever>
  ldr   r0, =_estack
 8001c0c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001c10:	08005a54 	.word	0x08005a54
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c18:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001c1c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001c20:	2000018c 	.word	0x2000018c

08001c24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_COMP_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_Init+0x3c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_Init+0x3c>)
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	0049      	lsls	r1, r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f810 	bl	8001c68 <HAL_InitTick>
 8001c48:	1e03      	subs	r3, r0, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c4c:	1dfb      	adds	r3, r7, #7
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	e001      	b.n	8001c58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fdaa 	bl	80017ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	781b      	ldrb	r3, [r3, #0]
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40022000 	.word	0x40022000

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c70:	230f      	movs	r3, #15
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_InitTick+0x88>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d02b      	beq.n	8001cd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <HAL_InitTick+0x8c>)
 8001c82:	681c      	ldr	r4, [r3, #0]
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_InitTick+0x88>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0019      	movs	r1, r3
 8001c8a:	23fa      	movs	r3, #250	; 0xfa
 8001c8c:	0098      	lsls	r0, r3, #2
 8001c8e:	f7fe fa39 	bl	8000104 <__udivsi3>
 8001c92:	0003      	movs	r3, r0
 8001c94:	0019      	movs	r1, r3
 8001c96:	0020      	movs	r0, r4
 8001c98:	f7fe fa34 	bl	8000104 <__udivsi3>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f000 fbc7 	bl	8002432 <HAL_SYSTICK_Config>
 8001ca4:	1e03      	subs	r3, r0, #0
 8001ca6:	d112      	bne.n	8001cce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d80a      	bhi.n	8001cc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	425b      	negs	r3, r3
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f000 fb96 	bl	80023e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_InitTick+0x90>)
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e00d      	b.n	8001ce0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e008      	b.n	8001ce0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cce:	230f      	movs	r3, #15
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e003      	b.n	8001ce0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd8:	230f      	movs	r3, #15
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b005      	add	sp, #20
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	20000008 	.word	0x20000008

08001cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <HAL_IncTick+0x18>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_IncTick+0x1c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	18d2      	adds	r2, r2, r3
 8001d0a:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <HAL_IncTick+0x18>)
 8001d0c:	601a      	str	r2, [r3, #0]
}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000188 	.word	0x20000188
 8001d18:	2000000c 	.word	0x2000000c

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <HAL_GetTick+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	20000188 	.word	0x20000188

08001d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_GetTick>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3301      	adds	r3, #1
 8001d48:	d004      	beq.n	8001d54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_Delay+0x40>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	18d3      	adds	r3, r2, r3
 8001d52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	f7ff ffe1 	bl	8001d1c <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d8f7      	bhi.n	8001d56 <HAL_Delay+0x26>
  {
  }
}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b004      	add	sp, #16
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	2000000c 	.word	0x2000000c

08001d74 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2202      	movs	r2, #2
 8001d82:	4393      	bics	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	40010030 	.word	0x40010030

08001d9c <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8001da6:	2101      	movs	r1, #1
 8001da8:	438a      	bics	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40010030 	.word	0x40010030

08001db8 <LL_EXTI_EnableIT_0_31>:
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	58d2      	ldr	r2, [r2, r3]
 8001dc6:	4904      	ldr	r1, [pc, #16]	; (8001dd8 <LL_EXTI_EnableIT_0_31+0x20>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	508b      	str	r3, [r1, r2]
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b002      	add	sp, #8
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021800 	.word	0x40021800

08001ddc <LL_EXTI_DisableIT_0_31>:
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <LL_EXTI_DisableIT_0_31+0x24>)
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	58d3      	ldr	r3, [r2, r3]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	43d2      	mvns	r2, r2
 8001dee:	4904      	ldr	r1, [pc, #16]	; (8001e00 <LL_EXTI_DisableIT_0_31+0x24>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	508b      	str	r3, [r1, r2]
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40021800 	.word	0x40021800

08001e04 <LL_EXTI_EnableEvent_0_31>:
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001e0c:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001e0e:	2384      	movs	r3, #132	; 0x84
 8001e10:	58d2      	ldr	r2, [r2, r3]
 8001e12:	4904      	ldr	r1, [pc, #16]	; (8001e24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	2284      	movs	r2, #132	; 0x84
 8001e1a:	508b      	str	r3, [r1, r2]
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021800 	.word	0x40021800

08001e28 <LL_EXTI_DisableEvent_0_31>:
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001e30:	4a06      	ldr	r2, [pc, #24]	; (8001e4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001e32:	2384      	movs	r3, #132	; 0x84
 8001e34:	58d3      	ldr	r3, [r2, r3]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	43d2      	mvns	r2, r2
 8001e3a:	4904      	ldr	r1, [pc, #16]	; (8001e4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2284      	movs	r2, #132	; 0x84
 8001e40:	508b      	str	r3, [r1, r2]
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	40021800 	.word	0x40021800

08001e50 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021800 	.word	0x40021800

08001e70 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001e82:	400a      	ands	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40021800 	.word	0x40021800

08001e94 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	605a      	str	r2, [r3, #4]
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021800 	.word	0x40021800

08001eb4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	40021800 	.word	0x40021800

08001ed8 <LL_EXTI_ClearFallingFlag_0_31>:
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b002      	add	sp, #8
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	40021800 	.word	0x40021800

08001ef4 <LL_EXTI_ClearRisingFlag_0_31>:
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	60da      	str	r2, [r3, #12]
}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b002      	add	sp, #8
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	40021800 	.word	0x40021800

08001f10 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	231f      	movs	r3, #31
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d104      	bne.n	8001f34 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e13a      	b.n	80021aa <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0fdb      	lsrs	r3, r3, #31
 8001f3c:	07da      	lsls	r2, r3, #31
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d104      	bne.n	8001f50 <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8001f46:	231f      	movs	r3, #31
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	e12c      	b.n	80021aa <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2229      	movs	r2, #41	; 0x29
 8001f54:	5c9b      	ldrb	r3, [r3, r2]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2228      	movs	r2, #40	; 0x28
 8001f60:	2100      	movs	r1, #0
 8001f62:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7fe fb17 	bl	80005a0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2230      	movs	r2, #48	; 0x30
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a83      	ldr	r2, [pc, #524]	; (80021b8 <HAL_COMP_Init+0x2a8>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001fc4:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b7c      	ldr	r3, [pc, #496]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8001fca:	497d      	ldr	r1, [pc, #500]	; (80021c0 <HAL_COMP_Init+0x2b0>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001fd0:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4b79      	ldr	r3, [pc, #484]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	0109      	lsls	r1, r1, #4
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	e01f      	b.n	8002020 <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	015b      	lsls	r3, r3, #5
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d10d      	bne.n	8002008 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8001fec:	4b73      	ldr	r3, [pc, #460]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b72      	ldr	r3, [pc, #456]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	0109      	lsls	r1, r1, #4
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8001ffa:	4b70      	ldr	r3, [pc, #448]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002000:	496f      	ldr	r1, [pc, #444]	; (80021c0 <HAL_COMP_Init+0x2b0>)
 8002002:	400a      	ands	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	e00b      	b.n	8002020 <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8002008:	4b6c      	ldr	r3, [pc, #432]	; (80021bc <HAL_COMP_Init+0x2ac>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <HAL_COMP_Init+0x2ac>)
 800200e:	496c      	ldr	r1, [pc, #432]	; (80021c0 <HAL_COMP_Init+0x2b0>)
 8002010:	400a      	ands	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8002014:	4b69      	ldr	r3, [pc, #420]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_COMP_Init+0x2ac>)
 800201a:	4969      	ldr	r1, [pc, #420]	; (80021c0 <HAL_COMP_Init+0x2b0>)
 800201c:	400a      	ands	r2, r1
 800201e:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	01d2      	lsls	r2, r2, #7
 8002028:	4293      	cmp	r3, r2
 800202a:	d006      	beq.n	800203a <HAL_COMP_Init+0x12a>
 800202c:	22a0      	movs	r2, #160	; 0xa0
 800202e:	01d2      	lsls	r2, r2, #7
 8002030:	4293      	cmp	r3, r2
 8002032:	d010      	beq.n	8002056 <HAL_COMP_Init+0x146>
 8002034:	2b01      	cmp	r3, #1
 8002036:	d01c      	beq.n	8002072 <HAL_COMP_Init+0x162>
 8002038:	e02a      	b.n	8002090 <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800203a:	4b60      	ldr	r3, [pc, #384]	; (80021bc <HAL_COMP_Init+0x2ac>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	01c9      	lsls	r1, r1, #7
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002048:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <HAL_COMP_Init+0x2ac>)
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4b5b      	ldr	r3, [pc, #364]	; (80021bc <HAL_COMP_Init+0x2ac>)
 800204e:	495d      	ldr	r1, [pc, #372]	; (80021c4 <HAL_COMP_Init+0x2b4>)
 8002050:	400a      	ands	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
        break;
 8002054:	e029      	b.n	80020aa <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002056:	4b59      	ldr	r3, [pc, #356]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_COMP_Init+0x2ac>)
 800205c:	4959      	ldr	r1, [pc, #356]	; (80021c4 <HAL_COMP_Init+0x2b4>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002062:	4b56      	ldr	r3, [pc, #344]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4b55      	ldr	r3, [pc, #340]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	01c9      	lsls	r1, r1, #7
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
        break;
 8002070:	e01b      	b.n	80020aa <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002072:	4b52      	ldr	r3, [pc, #328]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b51      	ldr	r3, [pc, #324]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	01c9      	lsls	r1, r1, #7
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8002080:	4b4e      	ldr	r3, [pc, #312]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	01c9      	lsls	r1, r1, #7
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
        break;
 800208e:	e00c      	b.n	80020aa <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_COMP_Init+0x2ac>)
 8002096:	494b      	ldr	r1, [pc, #300]	; (80021c4 <HAL_COMP_Init+0x2b4>)
 8002098:	400a      	ands	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_COMP_Init+0x2ac>)
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_COMP_Init+0x2ac>)
 80020a2:	4948      	ldr	r1, [pc, #288]	; (80021c4 <HAL_COMP_Init+0x2b4>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]
        break;
 80020a8:	46c0      	nop			; (mov r8, r8)
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2230      	movs	r2, #48	; 0x30
 80020b2:	4013      	ands	r3, r2
 80020b4:	d016      	beq.n	80020e4 <HAL_COMP_Init+0x1d4>
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d113      	bne.n	80020e4 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80020bc:	4b42      	ldr	r3, [pc, #264]	; (80021c8 <HAL_COMP_Init+0x2b8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4942      	ldr	r1, [pc, #264]	; (80021cc <HAL_COMP_Init+0x2bc>)
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7fe f81e 	bl	8000104 <__udivsi3>
 80020c8:	0003      	movs	r3, r0
 80020ca:	001a      	movs	r2, r3
 80020cc:	0013      	movs	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	189b      	adds	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80020d6:	e002      	b.n	80020de <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3b01      	subs	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f9      	bne.n	80020d8 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a34      	ldr	r2, [pc, #208]	; (80021bc <HAL_COMP_Init+0x2ac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d102      	bne.n	80020f4 <HAL_COMP_Init+0x1e4>
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	029b      	lsls	r3, r3, #10
 80020f2:	e001      	b.n	80020f8 <HAL_COMP_Init+0x1e8>
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	02db      	lsls	r3, r3, #11
 80020f8:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2203      	movs	r2, #3
 8002100:	4013      	ands	r3, r2
 8002102:	d040      	beq.n	8002186 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2210      	movs	r2, #16
 800210a:	4013      	ands	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff fe9d 	bl	8001e50 <LL_EXTI_EnableRisingTrig_0_31>
 8002116:	e003      	b.n	8002120 <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff fea8 	bl	8001e70 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2220      	movs	r2, #32
 8002126:	4013      	ands	r3, r2
 8002128:	d004      	beq.n	8002134 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	0018      	movs	r0, r3
 800212e:	f7ff feb1 	bl	8001e94 <LL_EXTI_EnableFallingTrig_0_31>
 8002132:	e003      	b.n	800213c <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff febc 	bl	8001eb4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	0018      	movs	r0, r3
 8002140:	f7ff fed8 	bl	8001ef4 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff fec6 	bl	8001ed8 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	d004      	beq.n	8002160 <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff fe53 	bl	8001e04 <LL_EXTI_EnableEvent_0_31>
 800215e:	e003      	b.n	8002168 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff fe60 	bl	8001e28 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2201      	movs	r2, #1
 800216e:	4013      	ands	r3, r2
 8002170:	d004      	beq.n	800217c <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	0018      	movs	r0, r3
 8002176:	f7ff fe1f 	bl	8001db8 <LL_EXTI_EnableIT_0_31>
 800217a:	e00c      	b.n	8002196 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	0018      	movs	r0, r3
 8002180:	f7ff fe2c 	bl	8001ddc <LL_EXTI_DisableIT_0_31>
 8002184:	e007      	b.n	8002196 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff fe4d 	bl	8001e28 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff fe23 	bl	8001ddc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2229      	movs	r2, #41	; 0x29
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2229      	movs	r2, #41	; 0x29
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80021aa:	231f      	movs	r3, #31
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	781b      	ldrb	r3, [r3, #0]
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b008      	add	sp, #32
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	fe00740f 	.word	0xfe00740f
 80021bc:	40010200 	.word	0x40010200
 80021c0:	fffff7ff 	.word	0xfffff7ff
 80021c4:	ffffbfff 	.word	0xffffbfff
 80021c8:	20000004 	.word	0x20000004
 80021cc:	00030d40 	.word	0x00030d40

080021d0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80021dc:	230f      	movs	r3, #15
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d104      	bne.n	80021f4 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 80021ea:	230f      	movs	r3, #15
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
 80021f2:	e034      	b.n	800225e <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0fdb      	lsrs	r3, r3, #31
 80021fc:	07da      	lsls	r2, r3, #31
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	429a      	cmp	r2, r3
 8002204:	d104      	bne.n	8002210 <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 8002206:	230f      	movs	r3, #15
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e026      	b.n	800225e <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2229      	movs	r2, #41	; 0x29
 8002214:	5c9b      	ldrb	r3, [r3, r2]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d11c      	bne.n	8002256 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2101      	movs	r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2229      	movs	r2, #41	; 0x29
 8002230:	2102      	movs	r1, #2
 8002232:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_COMP_Start+0x9c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	490d      	ldr	r1, [pc, #52]	; (8002270 <HAL_COMP_Start+0xa0>)
 800223a:	0018      	movs	r0, r3
 800223c:	f7fd ff62 	bl	8000104 <__udivsi3>
 8002240:	0003      	movs	r3, r0
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002246:	e002      	b.n	800224e <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3b01      	subs	r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <HAL_COMP_Start+0x78>
 8002254:	e003      	b.n	800225e <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002256:	230f      	movs	r3, #15
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800225e:	230f      	movs	r3, #15
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	781b      	ldrb	r3, [r3, #0]
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000004 	.word	0x20000004
 8002270:	00030d40 	.word	0x00030d40

08002274 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0f9b      	lsrs	r3, r3, #30
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <__NVIC_EnableIRQ>:
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	0002      	movs	r2, r0
 8002298:	1dfb      	adds	r3, r7, #7
 800229a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b7f      	cmp	r3, #127	; 0x7f
 80022a2:	d809      	bhi.n	80022b8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a4:	1dfb      	adds	r3, r7, #7
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	001a      	movs	r2, r3
 80022aa:	231f      	movs	r3, #31
 80022ac:	401a      	ands	r2, r3
 80022ae:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_EnableIRQ+0x30>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	4091      	lsls	r1, r2
 80022b4:	000a      	movs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	0002      	movs	r2, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	1dfb      	adds	r3, r7, #7
 80022d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	1dfb      	adds	r3, r7, #7
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b7f      	cmp	r3, #127	; 0x7f
 80022d8:	d828      	bhi.n	800232c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022da:	4a2f      	ldr	r2, [pc, #188]	; (8002398 <__NVIC_SetPriority+0xd4>)
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	33c0      	adds	r3, #192	; 0xc0
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	589b      	ldr	r3, [r3, r2]
 80022ea:	1dfa      	adds	r2, r7, #7
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	0011      	movs	r1, r2
 80022f0:	2203      	movs	r2, #3
 80022f2:	400a      	ands	r2, r1
 80022f4:	00d2      	lsls	r2, r2, #3
 80022f6:	21ff      	movs	r1, #255	; 0xff
 80022f8:	4091      	lsls	r1, r2
 80022fa:	000a      	movs	r2, r1
 80022fc:	43d2      	mvns	r2, r2
 80022fe:	401a      	ands	r2, r3
 8002300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	019b      	lsls	r3, r3, #6
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	401a      	ands	r2, r3
 800230a:	1dfb      	adds	r3, r7, #7
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	0018      	movs	r0, r3
 8002310:	2303      	movs	r3, #3
 8002312:	4003      	ands	r3, r0
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002318:	481f      	ldr	r0, [pc, #124]	; (8002398 <__NVIC_SetPriority+0xd4>)
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b25b      	sxtb	r3, r3
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	430a      	orrs	r2, r1
 8002324:	33c0      	adds	r3, #192	; 0xc0
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	501a      	str	r2, [r3, r0]
}
 800232a:	e031      	b.n	8002390 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <__NVIC_SetPriority+0xd8>)
 800232e:	1dfb      	adds	r3, r7, #7
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	0019      	movs	r1, r3
 8002334:	230f      	movs	r3, #15
 8002336:	400b      	ands	r3, r1
 8002338:	3b08      	subs	r3, #8
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3306      	adds	r3, #6
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	18d3      	adds	r3, r2, r3
 8002342:	3304      	adds	r3, #4
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1dfa      	adds	r2, r7, #7
 8002348:	7812      	ldrb	r2, [r2, #0]
 800234a:	0011      	movs	r1, r2
 800234c:	2203      	movs	r2, #3
 800234e:	400a      	ands	r2, r1
 8002350:	00d2      	lsls	r2, r2, #3
 8002352:	21ff      	movs	r1, #255	; 0xff
 8002354:	4091      	lsls	r1, r2
 8002356:	000a      	movs	r2, r1
 8002358:	43d2      	mvns	r2, r2
 800235a:	401a      	ands	r2, r3
 800235c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	019b      	lsls	r3, r3, #6
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	401a      	ands	r2, r3
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	0018      	movs	r0, r3
 800236c:	2303      	movs	r3, #3
 800236e:	4003      	ands	r3, r0
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002374:	4809      	ldr	r0, [pc, #36]	; (800239c <__NVIC_SetPriority+0xd8>)
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	001c      	movs	r4, r3
 800237c:	230f      	movs	r3, #15
 800237e:	4023      	ands	r3, r4
 8002380:	3b08      	subs	r3, #8
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	430a      	orrs	r2, r1
 8002386:	3306      	adds	r3, #6
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	18c3      	adds	r3, r0, r3
 800238c:	3304      	adds	r3, #4
 800238e:	601a      	str	r2, [r3, #0]
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b003      	add	sp, #12
 8002396:	bd90      	pop	{r4, r7, pc}
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	4a0c      	ldr	r2, [pc, #48]	; (80023e0 <SysTick_Config+0x40>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e010      	b.n	80023d8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <SysTick_Config+0x44>)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	3a01      	subs	r2, #1
 80023bc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	2301      	movs	r3, #1
 80023c0:	425b      	negs	r3, r3
 80023c2:	2103      	movs	r1, #3
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff ff7d 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <SysTick_Config+0x44>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <SysTick_Config+0x44>)
 80023d2:	2207      	movs	r2, #7
 80023d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	00ffffff 	.word	0x00ffffff
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	210f      	movs	r1, #15
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	1c02      	adds	r2, r0, #0
 80023f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b25b      	sxtb	r3, r3
 8002402:	0011      	movs	r1, r2
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	0002      	movs	r2, r0
 800241a:	1dfb      	adds	r3, r7, #7
 800241c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b25b      	sxtb	r3, r3
 8002424:	0018      	movs	r0, r3
 8002426:	f7ff ff33 	bl	8002290 <__NVIC_EnableIRQ>
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff ffaf 	bl	80023a0 <SysTick_Config>
 8002442:	0003      	movs	r3, r0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e015      	b.n	800248a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f7fe f901 	bl	8000678 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	795b      	ldrb	r3, [r3, #5]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_DAC_Start+0x16>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e03f      	b.n	8002528 <HAL_DAC_Start+0x96>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2210      	movs	r2, #16
 80024be:	4013      	ands	r3, r2
 80024c0:	2201      	movs	r2, #1
 80024c2:	409a      	lsls	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	223e      	movs	r2, #62	; 0x3e
 80024da:	4013      	ands	r3, r2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11c      	bne.n	800251a <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2101      	movs	r1, #1
 80024ec:	430a      	orrs	r2, r1
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	e013      	b.n	800251a <HAL_DAC_Start+0x88>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	23f8      	movs	r3, #248	; 0xf8
 80024fa:	039b      	lsls	r3, r3, #14
 80024fc:	401a      	ands	r2, r3
 80024fe:	2102      	movs	r1, #2
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4099      	lsls	r1, r3
 8002504:	000b      	movs	r3, r1
 8002506:	429a      	cmp	r2, r3
 8002508:	d107      	bne.n	800251a <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2102      	movs	r1, #2
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	18d3      	adds	r3, r2, r3
 8002554:	3308      	adds	r3, #8
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e004      	b.n	8002564 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	18d3      	adds	r3, r2, r3
 8002560:	3314      	adds	r3, #20
 8002562:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b006      	add	sp, #24
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	795b      	ldrb	r3, [r3, #5]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_DAC_ConfigChannel+0x1c>
 800258c:	2302      	movs	r3, #2
 800258e:	e107      	b.n	80027a0 <HAL_DAC_ConfigChannel+0x22c>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2202      	movs	r2, #2
 800259a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d000      	beq.n	80025a6 <HAL_DAC_ConfigChannel+0x32>
 80025a4:	e074      	b.n	8002690 <HAL_DAC_ConfigChannel+0x11c>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d138      	bne.n	800261e <HAL_DAC_ConfigChannel+0xaa>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80025ac:	f7ff fbb6 	bl	8001d1c <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	61fb      	str	r3, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025b4:	e011      	b.n	80025da <HAL_DAC_ConfigChannel+0x66>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025b6:	f7ff fbb1 	bl	8001d1c <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d90a      	bls.n	80025da <HAL_DAC_ConfigChannel+0x66>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2208      	movs	r2, #8
 80025ca:	431a      	orrs	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2203      	movs	r2, #3
 80025d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0e2      	b.n	80027a0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4013      	ands	r3, r2
 80025e6:	d1e6      	bne.n	80025b6 <HAL_DAC_ConfigChannel+0x42>
        }
      }
      HAL_Delay(1);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7ff fba1 	bl	8001d30 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	6992      	ldr	r2, [r2, #24]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
 80025f8:	e01e      	b.n	8002638 <HAL_DAC_ConfigChannel+0xc4>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80025fa:	f7ff fb8f 	bl	8001d1c <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d90a      	bls.n	800261e <HAL_DAC_ConfigChannel+0xaa>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2208      	movs	r2, #8
 800260e:	431a      	orrs	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2203      	movs	r2, #3
 8002618:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0c0      	b.n	80027a0 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	2b00      	cmp	r3, #0
 8002626:	dbe8      	blt.n	80025fa <HAL_DAC_ConfigChannel+0x86>
        }
      }
      HAL_Delay(1U);
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fb81 	bl	8001d30 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	6992      	ldr	r2, [r2, #24]
 8002636:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	2110      	movs	r1, #16
 8002642:	400a      	ands	r2, r1
 8002644:	4958      	ldr	r1, [pc, #352]	; (80027a8 <HAL_DAC_ConfigChannel+0x234>)
 8002646:	4091      	lsls	r1, r2
 8002648:	000a      	movs	r2, r1
 800264a:	43d2      	mvns	r2, r2
 800264c:	401a      	ands	r2, r3
 800264e:	0011      	movs	r1, r2
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2010      	movs	r0, #16
 8002658:	4003      	ands	r3, r0
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	2110      	movs	r1, #16
 800266e:	400a      	ands	r2, r1
 8002670:	21ff      	movs	r1, #255	; 0xff
 8002672:	4091      	lsls	r1, r2
 8002674:	000a      	movs	r2, r1
 8002676:	43d2      	mvns	r2, r2
 8002678:	401a      	ands	r2, r3
 800267a:	0011      	movs	r1, r2
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6a1a      	ldr	r2, [r3, #32]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2010      	movs	r0, #16
 8002684:	4003      	ands	r3, r0
 8002686:	409a      	lsls	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d11d      	bne.n	80026d4 <HAL_DAC_ConfigChannel+0x160>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2210      	movs	r2, #16
 80026a4:	4013      	ands	r3, r2
 80026a6:	221f      	movs	r2, #31
 80026a8:	409a      	lsls	r2, r3
 80026aa:	0013      	movs	r3, r2
 80026ac:	43da      	mvns	r2, r3
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2210      	movs	r2, #16
 80026be:	4013      	ands	r3, r2
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
 80026c4:	0013      	movs	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2210      	movs	r2, #16
 80026e0:	4013      	ands	r3, r2
 80026e2:	2207      	movs	r2, #7
 80026e4:	409a      	lsls	r2, r3
 80026e6:	0013      	movs	r3, r2
 80026e8:	43da      	mvns	r2, r3
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2210      	movs	r2, #16
 8002706:	4013      	ands	r3, r2
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	409a      	lsls	r2, r3
 800270c:	0013      	movs	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2110      	movs	r1, #16
 8002726:	400b      	ands	r3, r1
 8002728:	2180      	movs	r1, #128	; 0x80
 800272a:	01c9      	lsls	r1, r1, #7
 800272c:	4099      	lsls	r1, r3
 800272e:	000b      	movs	r3, r1
 8002730:	43d9      	mvns	r1, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	400a      	ands	r2, r1
 8002738:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2210      	movs	r2, #16
 8002746:	4013      	ands	r3, r2
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_DAC_ConfigChannel+0x238>)
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	43da      	mvns	r2, r3
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4013      	ands	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2210      	movs	r2, #16
 8002760:	4013      	ands	r3, r2
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	409a      	lsls	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2110      	movs	r1, #16
 8002780:	400b      	ands	r3, r1
 8002782:	21c0      	movs	r1, #192	; 0xc0
 8002784:	4099      	lsls	r1, r3
 8002786:	000b      	movs	r3, r1
 8002788:	43d9      	mvns	r1, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	400a      	ands	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b008      	add	sp, #32
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	000003ff 	.word	0x000003ff
 80027ac:	00000ffe 	.word	0x00000ffe

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027be:	e147      	b.n	8002a50 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4091      	lsls	r1, r2
 80027ca:	000a      	movs	r2, r1
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d100      	bne.n	80027d8 <HAL_GPIO_Init+0x28>
 80027d6:	e138      	b.n	8002a4a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x38>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b12      	cmp	r3, #18
 80027e6:	d123      	bne.n	8002830 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	08da      	lsrs	r2, r3, #3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3208      	adds	r2, #8
 80027f0:	0092      	lsls	r2, r2, #2
 80027f2:	58d3      	ldr	r3, [r2, r3]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2207      	movs	r2, #7
 80027fa:	4013      	ands	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	220f      	movs	r2, #15
 8002800:	409a      	lsls	r2, r3
 8002802:	0013      	movs	r3, r2
 8002804:	43da      	mvns	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2107      	movs	r1, #7
 8002814:	400b      	ands	r3, r1
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	409a      	lsls	r2, r3
 800281a:	0013      	movs	r3, r2
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	08da      	lsrs	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3208      	adds	r2, #8
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	6939      	ldr	r1, [r7, #16]
 800282e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	409a      	lsls	r2, r3
 800283e:	0013      	movs	r3, r2
 8002840:	43da      	mvns	r2, r3
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2203      	movs	r2, #3
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	0013      	movs	r3, r2
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d00b      	beq.n	8002884 <HAL_GPIO_Init+0xd4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d007      	beq.n	8002884 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002878:	2b11      	cmp	r3, #17
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d130      	bne.n	80028e6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	2203      	movs	r2, #3
 8002890:	409a      	lsls	r2, r3
 8002892:	0013      	movs	r3, r2
 8002894:	43da      	mvns	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	409a      	lsls	r2, r3
 80028a6:	0013      	movs	r3, r2
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ba:	2201      	movs	r2, #1
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	409a      	lsls	r2, r3
 80028c0:	0013      	movs	r3, r2
 80028c2:	43da      	mvns	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	2201      	movs	r2, #1
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	409a      	lsls	r2, r3
 80028f4:	0013      	movs	r3, r2
 80028f6:	43da      	mvns	r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	0013      	movs	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	055b      	lsls	r3, r3, #21
 800291e:	4013      	ands	r3, r2
 8002920:	d100      	bne.n	8002924 <HAL_GPIO_Init+0x174>
 8002922:	e092      	b.n	8002a4a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002924:	4a50      	ldr	r2, [pc, #320]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	3318      	adds	r3, #24
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	589b      	ldr	r3, [r3, r2]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2203      	movs	r2, #3
 8002936:	4013      	ands	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	220f      	movs	r2, #15
 800293c:	409a      	lsls	r2, r3
 800293e:	0013      	movs	r3, r2
 8002940:	43da      	mvns	r2, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	23a0      	movs	r3, #160	; 0xa0
 800294c:	05db      	lsls	r3, r3, #23
 800294e:	429a      	cmp	r2, r3
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0x1ca>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a45      	ldr	r2, [pc, #276]	; (8002a6c <HAL_GPIO_Init+0x2bc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00d      	beq.n	8002976 <HAL_GPIO_Init+0x1c6>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a44      	ldr	r2, [pc, #272]	; (8002a70 <HAL_GPIO_Init+0x2c0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x1c2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <HAL_GPIO_Init+0x2c4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_GPIO_Init+0x1be>
 800296a:	2303      	movs	r3, #3
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x1cc>
 800296e:	2305      	movs	r3, #5
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x1cc>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x1cc>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x1cc>
 800297a:	2300      	movs	r3, #0
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	2103      	movs	r1, #3
 8002980:	400a      	ands	r2, r1
 8002982:	00d2      	lsls	r2, r2, #3
 8002984:	4093      	lsls	r3, r2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800298c:	4936      	ldr	r1, [pc, #216]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3318      	adds	r3, #24
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800299a:	4a33      	ldr	r2, [pc, #204]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	58d3      	ldr	r3, [r2, r3]
 80029a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	43da      	mvns	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	025b      	lsls	r3, r3, #9
 80029b4:	4013      	ands	r3, r2
 80029b6:	d003      	beq.n	80029c0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029c0:	4929      	ldr	r1, [pc, #164]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80029c8:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 80029ca:	2384      	movs	r3, #132	; 0x84
 80029cc:	58d3      	ldr	r3, [r2, r3]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	43da      	mvns	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	029b      	lsls	r3, r3, #10
 80029e2:	4013      	ands	r3, r2
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029ee:	491e      	ldr	r1, [pc, #120]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 80029f0:	2284      	movs	r2, #132	; 0x84
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	43da      	mvns	r2, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	035b      	lsls	r3, r3, #13
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	43da      	mvns	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	039b      	lsls	r3, r3, #14
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_GPIO_Init+0x2b8>)
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	40da      	lsrs	r2, r3
 8002a58:	1e13      	subs	r3, r2, #0
 8002a5a:	d000      	beq.n	8002a5e <HAL_GPIO_Init+0x2ae>
 8002a5c:	e6b0      	b.n	80027c0 <HAL_GPIO_Init+0x10>
  }
}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b006      	add	sp, #24
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	50000400 	.word	0x50000400
 8002a70:	50000800 	.word	0x50000800
 8002a74:	50000c00 	.word	0x50000c00

08002a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	000a      	movs	r2, r1
 8002a82:	1cbb      	adds	r3, r7, #2
 8002a84:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	1cba      	adds	r2, r7, #2
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002a92:	230f      	movs	r3, #15
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	2201      	movs	r2, #1
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e003      	b.n	8002aa4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002aa4:	230f      	movs	r3, #15
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	781b      	ldrb	r3, [r3, #0]
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b004      	add	sp, #16
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	0008      	movs	r0, r1
 8002abc:	0011      	movs	r1, r2
 8002abe:	1cbb      	adds	r3, r7, #2
 8002ac0:	1c02      	adds	r2, r0, #0
 8002ac2:	801a      	strh	r2, [r3, #0]
 8002ac4:	1c7b      	adds	r3, r7, #1
 8002ac6:	1c0a      	adds	r2, r1, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aca:	1c7b      	adds	r3, r7, #1
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d004      	beq.n	8002adc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad2:	1cbb      	adds	r3, r7, #2
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ada:	e003      	b.n	8002ae4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002adc:	1cbb      	adds	r3, r7, #2
 8002ade:	881a      	ldrh	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d11f      	bne.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	0013      	movs	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	189b      	adds	r3, r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4912      	ldr	r1, [pc, #72]	; (8002b68 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7fd faf0 	bl	8000104 <__udivsi3>
 8002b24:	0003      	movs	r3, r0
 8002b26:	3301      	adds	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b2a:	e008      	b.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e001      	b.n	8002b3e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e009      	b.n	8002b52 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b40:	695a      	ldr	r2, [r3, #20]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	401a      	ands	r2, r3
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d0ed      	beq.n	8002b2c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b004      	add	sp, #16
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	fffff9ff 	.word	0xfffff9ff
 8002b64:	20000004 	.word	0x20000004
 8002b68:	000f4240 	.word	0x000f4240

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e304      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4013      	ands	r3, r2
 8002b86:	d100      	bne.n	8002b8a <HAL_RCC_OscConfig+0x1e>
 8002b88:	e07c      	b.n	8002c84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8a:	4bc3      	ldr	r3, [pc, #780]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2238      	movs	r2, #56	; 0x38
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b94:	4bc0      	ldr	r3, [pc, #768]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d102      	bne.n	8002baa <HAL_RCC_OscConfig+0x3e>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d002      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x44>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d10b      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	4bb9      	ldr	r3, [pc, #740]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	029b      	lsls	r3, r3, #10
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d062      	beq.n	8002c82 <HAL_RCC_OscConfig+0x116>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d15e      	bne.n	8002c82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e2df      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	025b      	lsls	r3, r3, #9
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_OscConfig+0x78>
 8002bd4:	4bb0      	ldr	r3, [pc, #704]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4baf      	ldr	r3, [pc, #700]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	0249      	lsls	r1, r1, #9
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e020      	b.n	8002c26 <HAL_RCC_OscConfig+0xba>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	23a0      	movs	r3, #160	; 0xa0
 8002bea:	02db      	lsls	r3, r3, #11
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d10e      	bne.n	8002c0e <HAL_RCC_OscConfig+0xa2>
 8002bf0:	4ba9      	ldr	r3, [pc, #676]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4ba8      	ldr	r3, [pc, #672]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	02c9      	lsls	r1, r1, #11
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	4ba6      	ldr	r3, [pc, #664]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4ba5      	ldr	r3, [pc, #660]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0249      	lsls	r1, r1, #9
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e00b      	b.n	8002c26 <HAL_RCC_OscConfig+0xba>
 8002c0e:	4ba2      	ldr	r3, [pc, #648]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4ba1      	ldr	r3, [pc, #644]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c14:	49a1      	ldr	r1, [pc, #644]	; (8002e9c <HAL_RCC_OscConfig+0x330>)
 8002c16:	400a      	ands	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	4b9f      	ldr	r3, [pc, #636]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b9e      	ldr	r3, [pc, #632]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c20:	499f      	ldr	r1, [pc, #636]	; (8002ea0 <HAL_RCC_OscConfig+0x334>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d014      	beq.n	8002c58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7ff f875 	bl	8001d1c <HAL_GetTick>
 8002c32:	0003      	movs	r3, r0
 8002c34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c38:	f7ff f870 	bl	8001d1c <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e29e      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c4a:	4b93      	ldr	r3, [pc, #588]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	4013      	ands	r3, r2
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0xcc>
 8002c56:	e015      	b.n	8002c84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7ff f860 	bl	8001d1c <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c62:	f7ff f85b 	bl	8001d1c <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b64      	cmp	r3, #100	; 0x64
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e289      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c74:	4b88      	ldr	r3, [pc, #544]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	029b      	lsls	r3, r3, #10
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0xf6>
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d100      	bne.n	8002c90 <HAL_RCC_OscConfig+0x124>
 8002c8e:	e099      	b.n	8002dc4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c90:	4b81      	ldr	r3, [pc, #516]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2238      	movs	r2, #56	; 0x38
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c9a:	4b7f      	ldr	r3, [pc, #508]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d102      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x144>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d002      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x14a>
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d135      	bne.n	8002d22 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb6:	4b78      	ldr	r3, [pc, #480]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x162>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e25c      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cce:	4b72      	ldr	r3, [pc, #456]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4a74      	ldr	r2, [pc, #464]	; (8002ea4 <HAL_RCC_OscConfig+0x338>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	021a      	lsls	r2, r3, #8
 8002cde:	4b6e      	ldr	r3, [pc, #440]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d112      	bne.n	8002d10 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002cea:	4b6b      	ldr	r3, [pc, #428]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <HAL_RCC_OscConfig+0x33c>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002cfe:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	0adb      	lsrs	r3, r3, #11
 8002d04:	2207      	movs	r2, #7
 8002d06:	4013      	ands	r3, r2
 8002d08:	4a68      	ldr	r2, [pc, #416]	; (8002eac <HAL_RCC_OscConfig+0x340>)
 8002d0a:	40da      	lsrs	r2, r3
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_OscConfig+0x344>)
 8002d0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x348>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7fe ffa7 	bl	8001c68 <HAL_InitTick>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d051      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e232      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d030      	beq.n	8002d8c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d2a:	4b5b      	ldr	r3, [pc, #364]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a5e      	ldr	r2, [pc, #376]	; (8002ea8 <HAL_RCC_OscConfig+0x33c>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	4b57      	ldr	r3, [pc, #348]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002d3e:	4b56      	ldr	r3, [pc, #344]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d44:	2180      	movs	r1, #128	; 0x80
 8002d46:	0049      	lsls	r1, r1, #1
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe ffe6 	bl	8001d1c <HAL_GetTick>
 8002d50:	0003      	movs	r3, r0
 8002d52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe ffe1 	bl	8001d1c <HAL_GetTick>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e20f      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4013      	ands	r3, r2
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b48      	ldr	r3, [pc, #288]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <HAL_RCC_OscConfig+0x338>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d86:	430a      	orrs	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	e01b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002d8c:	4b42      	ldr	r3, [pc, #264]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b41      	ldr	r3, [pc, #260]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002d92:	4949      	ldr	r1, [pc, #292]	; (8002eb8 <HAL_RCC_OscConfig+0x34c>)
 8002d94:	400a      	ands	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe ffc0 	bl	8001d1c <HAL_GetTick>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe ffbb 	bl	8001d1c <HAL_GetTick>
 8002da6:	0002      	movs	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1e9      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db4:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x236>
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2208      	movs	r2, #8
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d047      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002dce:	4b32      	ldr	r3, [pc, #200]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2238      	movs	r2, #56	; 0x38
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b18      	cmp	r3, #24
 8002dd8:	d10a      	bne.n	8002df0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002dda:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dde:	2202      	movs	r2, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	d03c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2f2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d138      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e1cb      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d019      	beq.n	8002e2c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002df8:	4b27      	ldr	r3, [pc, #156]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002dfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dfc:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002dfe:	2101      	movs	r1, #1
 8002e00:	430a      	orrs	r2, r1
 8002e02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe ff8a 	bl	8001d1c <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7fe ff85 	bl	8001d1c <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e1b3      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d0f1      	beq.n	8002e0e <HAL_RCC_OscConfig+0x2a2>
 8002e2a:	e018      	b.n	8002e5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002e2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	438a      	bics	r2, r1
 8002e36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe ff70 	bl	8001d1c <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe ff6b 	bl	8001d1c <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e199      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d1f1      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2204      	movs	r2, #4
 8002e64:	4013      	ands	r3, r2
 8002e66:	d100      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2fe>
 8002e68:	e0c6      	b.n	8002ff8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6a:	231f      	movs	r3, #31
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e72:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2238      	movs	r2, #56	; 0x38
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d11e      	bne.n	8002ebc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_RCC_OscConfig+0x32c>)
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x31e>
 8002e88:	e0b6      	b.n	8002ff8 <HAL_RCC_OscConfig+0x48c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d000      	beq.n	8002e94 <HAL_RCC_OscConfig+0x328>
 8002e92:	e0b1      	b.n	8002ff8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e177      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	fffeffff 	.word	0xfffeffff
 8002ea0:	fffbffff 	.word	0xfffbffff
 8002ea4:	ffff80ff 	.word	0xffff80ff
 8002ea8:	ffffc7ff 	.word	0xffffc7ff
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	20000008 	.word	0x20000008
 8002eb8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ebc:	4bb4      	ldr	r3, [pc, #720]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	055b      	lsls	r3, r3, #21
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_OscConfig+0x360>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x362>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d011      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	4baf      	ldr	r3, [pc, #700]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed6:	4bae      	ldr	r3, [pc, #696]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	0549      	lsls	r1, r1, #21
 8002edc:	430a      	orrs	r2, r1
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ee0:	4bab      	ldr	r3, [pc, #684]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	055b      	lsls	r3, r3, #21
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002eee:	231f      	movs	r3, #31
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef6:	4ba7      	ldr	r3, [pc, #668]	; (8003194 <HAL_RCC_OscConfig+0x628>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4013      	ands	r3, r2
 8002f00:	d11a      	bne.n	8002f38 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f02:	4ba4      	ldr	r3, [pc, #656]	; (8003194 <HAL_RCC_OscConfig+0x628>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4ba3      	ldr	r3, [pc, #652]	; (8003194 <HAL_RCC_OscConfig+0x628>)
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	0049      	lsls	r1, r1, #1
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002f10:	f7fe ff04 	bl	8001d1c <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1a:	f7fe feff 	bl	8001d1c <HAL_GetTick>
 8002f1e:	0002      	movs	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e12d      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2c:	4b99      	ldr	r3, [pc, #612]	; (8003194 <HAL_RCC_OscConfig+0x628>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4013      	ands	r3, r2
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3e2>
 8002f40:	4b93      	ldr	r3, [pc, #588]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f44:	4b92      	ldr	r3, [pc, #584]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f46:	2101      	movs	r1, #1
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f4c:	e01c      	b.n	8002f88 <HAL_RCC_OscConfig+0x41c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x404>
 8002f56:	4b8e      	ldr	r3, [pc, #568]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f5a:	4b8d      	ldr	r3, [pc, #564]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f62:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f66:	4b8a      	ldr	r3, [pc, #552]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f68:	2101      	movs	r1, #1
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0x41c>
 8002f70:	4b87      	ldr	r3, [pc, #540]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f74:	4b86      	ldr	r3, [pc, #536]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f76:	2101      	movs	r1, #1
 8002f78:	438a      	bics	r2, r1
 8002f7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f7c:	4b84      	ldr	r3, [pc, #528]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f80:	4b83      	ldr	r3, [pc, #524]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002f82:	2104      	movs	r1, #4
 8002f84:	438a      	bics	r2, r1
 8002f86:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d014      	beq.n	8002fba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fec4 	bl	8001d1c <HAL_GetTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f98:	e009      	b.n	8002fae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fe febf 	bl	8001d1c <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	4a7c      	ldr	r2, [pc, #496]	; (8003198 <HAL_RCC_OscConfig+0x62c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0ec      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fae:	4b78      	ldr	r3, [pc, #480]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x42e>
 8002fb8:	e013      	b.n	8002fe2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fba:	f7fe feaf 	bl	8001d1c <HAL_GetTick>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe feaa 	bl	8001d1c <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a72      	ldr	r2, [pc, #456]	; (8003198 <HAL_RCC_OscConfig+0x62c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0d7      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fd8:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	2202      	movs	r2, #2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002fe2:	231f      	movs	r3, #31
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002fec:	4b68      	ldr	r3, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff0:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8002ff2:	496a      	ldr	r1, [pc, #424]	; (800319c <HAL_RCC_OscConfig+0x630>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d100      	bne.n	8003002 <HAL_RCC_OscConfig+0x496>
 8003000:	e0c1      	b.n	8003186 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2238      	movs	r2, #56	; 0x38
 8003008:	4013      	ands	r3, r2
 800300a:	2b10      	cmp	r3, #16
 800300c:	d100      	bne.n	8003010 <HAL_RCC_OscConfig+0x4a4>
 800300e:	e081      	b.n	8003114 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d156      	bne.n	80030c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b5d      	ldr	r3, [pc, #372]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b5c      	ldr	r3, [pc, #368]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 800301e:	4960      	ldr	r1, [pc, #384]	; (80031a0 <HAL_RCC_OscConfig+0x634>)
 8003020:	400a      	ands	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fe fe7a 	bl	8001d1c <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe fe75 	bl	8001d1c <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0a3      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	049b      	lsls	r3, r3, #18
 8003048:	4013      	ands	r3, r2
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304c:	4b50      	ldr	r3, [pc, #320]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_RCC_OscConfig+0x638>)
 8003052:	4013      	ands	r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	431a      	orrs	r2, r3
 800307a:	4b45      	ldr	r3, [pc, #276]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 800307c:	430a      	orrs	r2, r1
 800307e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003080:	4b43      	ldr	r3, [pc, #268]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b42      	ldr	r3, [pc, #264]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8003086:	2180      	movs	r1, #128	; 0x80
 8003088:	0449      	lsls	r1, r1, #17
 800308a:	430a      	orrs	r2, r1
 800308c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800308e:	4b40      	ldr	r3, [pc, #256]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	0549      	lsls	r1, r1, #21
 8003098:	430a      	orrs	r2, r1
 800309a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe fe3e 	bl	8001d1c <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a6:	f7fe fe39 	bl	8001d1c <HAL_GetTick>
 80030aa:	0002      	movs	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e067      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b8:	4b35      	ldr	r3, [pc, #212]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	049b      	lsls	r3, r3, #18
 80030c0:	4013      	ands	r3, r2
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x53a>
 80030c4:	e05f      	b.n	8003186 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c6:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b31      	ldr	r3, [pc, #196]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 80030cc:	4934      	ldr	r1, [pc, #208]	; (80031a0 <HAL_RCC_OscConfig+0x634>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 80030d8:	2103      	movs	r1, #3
 80030da:	438a      	bics	r2, r1
 80030dc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 80030e4:	4930      	ldr	r1, [pc, #192]	; (80031a8 <HAL_RCC_OscConfig+0x63c>)
 80030e6:	400a      	ands	r2, r1
 80030e8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fe fe17 	bl	8001d1c <HAL_GetTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fe12 	bl	8001d1c <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e040      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	049b      	lsls	r3, r3, #18
 800310e:	4013      	ands	r3, r2
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x588>
 8003112:	e038      	b.n	8003186 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e033      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x624>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2203      	movs	r2, #3
 800312a:	401a      	ands	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	429a      	cmp	r2, r3
 8003132:	d126      	bne.n	8003182 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2270      	movs	r2, #112	; 0x70
 8003138:	401a      	ands	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11f      	bne.n	8003182 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	23fe      	movs	r3, #254	; 0xfe
 8003146:	01db      	lsls	r3, r3, #7
 8003148:	401a      	ands	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d116      	bne.n	8003182 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	23f8      	movs	r3, #248	; 0xf8
 8003158:	039b      	lsls	r3, r3, #14
 800315a:	401a      	ands	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d10e      	bne.n	8003182 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	23e0      	movs	r3, #224	; 0xe0
 8003168:	051b      	lsls	r3, r3, #20
 800316a:	401a      	ands	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	0f5b      	lsrs	r3, r3, #29
 8003178:	075a      	lsls	r2, r3, #29
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	0018      	movs	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	b008      	add	sp, #32
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
 8003198:	00001388 	.word	0x00001388
 800319c:	efffffff 	.word	0xefffffff
 80031a0:	feffffff 	.word	0xfeffffff
 80031a4:	11c1808c 	.word	0x11c1808c
 80031a8:	eefeffff 	.word	0xeefeffff

080031ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0e9      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c0:	4b76      	ldr	r3, [pc, #472]	; (800339c <HAL_RCC_ClockConfig+0x1f0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2207      	movs	r2, #7
 80031c6:	4013      	ands	r3, r2
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d91e      	bls.n	800320c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2207      	movs	r2, #7
 80031d4:	4393      	bics	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fd9c 	bl	8001d1c <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031e8:	e009      	b.n	80031fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ea:	f7fe fd97 	bl	8001d1c <HAL_GetTick>
 80031ee:	0002      	movs	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	4a6a      	ldr	r2, [pc, #424]	; (80033a0 <HAL_RCC_ClockConfig+0x1f4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0ca      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031fe:	4b67      	ldr	r3, [pc, #412]	; (800339c <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2207      	movs	r2, #7
 8003204:	4013      	ands	r3, r2
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d1ee      	bne.n	80031ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2202      	movs	r2, #2
 8003212:	4013      	ands	r3, r2
 8003214:	d015      	beq.n	8003242 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2204      	movs	r2, #4
 800321c:	4013      	ands	r3, r2
 800321e:	d006      	beq.n	800322e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003220:	4b60      	ldr	r3, [pc, #384]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003226:	21e0      	movs	r1, #224	; 0xe0
 8003228:	01c9      	lsls	r1, r1, #7
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322e:	4b5d      	ldr	r3, [pc, #372]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4a5d      	ldr	r2, [pc, #372]	; (80033a8 <HAL_RCC_ClockConfig+0x1fc>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2201      	movs	r2, #1
 8003248:	4013      	ands	r3, r2
 800324a:	d057      	beq.n	80032fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	4013      	ands	r3, r2
 800325e:	d12b      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e097      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326c:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	049b      	lsls	r3, r3, #18
 8003274:	4013      	ands	r3, r2
 8003276:	d11f      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e08b      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d107      	bne.n	8003294 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003284:	4b47      	ldr	r3, [pc, #284]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4013      	ands	r3, r2
 800328e:	d113      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e07f      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d106      	bne.n	80032aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800329c:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 800329e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a0:	2202      	movs	r2, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	d108      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e074      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	2202      	movs	r2, #2
 80032b0:	4013      	ands	r3, r2
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e06d      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032b8:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2207      	movs	r2, #7
 80032be:	4393      	bics	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fe fd26 	bl	8001d1c <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d4:	e009      	b.n	80032ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d6:	f7fe fd21 	bl	8001d1c <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	4a2f      	ldr	r2, [pc, #188]	; (80033a0 <HAL_RCC_ClockConfig+0x1f4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e054      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2238      	movs	r2, #56	; 0x38
 80032f0:	401a      	ands	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1ec      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2207      	movs	r2, #7
 8003302:	4013      	ands	r3, r2
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d21e      	bcs.n	8003348 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2207      	movs	r2, #7
 8003310:	4393      	bics	r3, r2
 8003312:	0019      	movs	r1, r3
 8003314:	4b21      	ldr	r3, [pc, #132]	; (800339c <HAL_RCC_ClockConfig+0x1f0>)
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800331c:	f7fe fcfe 	bl	8001d1c <HAL_GetTick>
 8003320:	0003      	movs	r3, r0
 8003322:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003324:	e009      	b.n	800333a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003326:	f7fe fcf9 	bl	8001d1c <HAL_GetTick>
 800332a:	0002      	movs	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <HAL_RCC_ClockConfig+0x1f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e02c      	b.n	8003394 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <HAL_RCC_ClockConfig+0x1f0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2207      	movs	r2, #7
 8003340:	4013      	ands	r3, r2
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d1ee      	bne.n	8003326 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2204      	movs	r2, #4
 800334e:	4013      	ands	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003352:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_RCC_ClockConfig+0x200>)
 8003358:	4013      	ands	r3, r2
 800335a:	0019      	movs	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003366:	f000 f829 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 800336a:	0001      	movs	r1, r0
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_RCC_ClockConfig+0x1f8>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	220f      	movs	r2, #15
 8003374:	401a      	ands	r2, r3
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_RCC_ClockConfig+0x204>)
 8003378:	0092      	lsls	r2, r2, #2
 800337a:	58d3      	ldr	r3, [r2, r3]
 800337c:	221f      	movs	r2, #31
 800337e:	4013      	ands	r3, r2
 8003380:	000a      	movs	r2, r1
 8003382:	40da      	lsrs	r2, r3
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x208>)
 8003386:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_ClockConfig+0x20c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0018      	movs	r0, r3
 800338e:	f7fe fc6b 	bl	8001c68 <HAL_InitTick>
 8003392:	0003      	movs	r3, r0
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b004      	add	sp, #16
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40022000 	.word	0x40022000
 80033a0:	00001388 	.word	0x00001388
 80033a4:	40021000 	.word	0x40021000
 80033a8:	fffff0ff 	.word	0xfffff0ff
 80033ac:	ffff8fff 	.word	0xffff8fff
 80033b0:	080059b8 	.word	0x080059b8
 80033b4:	20000004 	.word	0x20000004
 80033b8:	20000008 	.word	0x20000008

080033bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033c2:	4b3c      	ldr	r3, [pc, #240]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2238      	movs	r2, #56	; 0x38
 80033c8:	4013      	ands	r3, r2
 80033ca:	d10f      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0adb      	lsrs	r3, r3, #11
 80033d2:	2207      	movs	r2, #7
 80033d4:	4013      	ands	r3, r2
 80033d6:	2201      	movs	r2, #1
 80033d8:	409a      	lsls	r2, r3
 80033da:	0013      	movs	r3, r2
 80033dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	4835      	ldr	r0, [pc, #212]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80033e2:	f7fc fe8f 	bl	8000104 <__udivsi3>
 80033e6:	0003      	movs	r3, r0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e05d      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033ec:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2238      	movs	r2, #56	; 0x38
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d102      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033f8:	4b30      	ldr	r3, [pc, #192]	; (80034bc <HAL_RCC_GetSysClockFreq+0x100>)
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	e054      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033fe:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2238      	movs	r2, #56	; 0x38
 8003404:	4013      	ands	r3, r2
 8003406:	2b10      	cmp	r3, #16
 8003408:	d138      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800340a:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2203      	movs	r2, #3
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	2207      	movs	r2, #7
 800341c:	4013      	ands	r3, r2
 800341e:	3301      	adds	r3, #1
 8003420:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d10d      	bne.n	8003444 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	4824      	ldr	r0, [pc, #144]	; (80034bc <HAL_RCC_GetSysClockFreq+0x100>)
 800342c:	f7fc fe6a 	bl	8000104 <__udivsi3>
 8003430:	0003      	movs	r3, r0
 8003432:	0019      	movs	r1, r3
 8003434:	4b1f      	ldr	r3, [pc, #124]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	227f      	movs	r2, #127	; 0x7f
 800343c:	4013      	ands	r3, r2
 800343e:	434b      	muls	r3, r1
 8003440:	617b      	str	r3, [r7, #20]
        break;
 8003442:	e00d      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	481c      	ldr	r0, [pc, #112]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003448:	f7fc fe5c 	bl	8000104 <__udivsi3>
 800344c:	0003      	movs	r3, r0
 800344e:	0019      	movs	r1, r3
 8003450:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	227f      	movs	r2, #127	; 0x7f
 8003458:	4013      	ands	r3, r2
 800345a:	434b      	muls	r3, r1
 800345c:	617b      	str	r3, [r7, #20]
        break;
 800345e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003460:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	0f5b      	lsrs	r3, r3, #29
 8003466:	2207      	movs	r2, #7
 8003468:	4013      	ands	r3, r2
 800346a:	3301      	adds	r3, #1
 800346c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	6978      	ldr	r0, [r7, #20]
 8003472:	f7fc fe47 	bl	8000104 <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	e015      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2238      	movs	r2, #56	; 0x38
 8003482:	4013      	ands	r3, r2
 8003484:	2b20      	cmp	r3, #32
 8003486:	d103      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2238      	movs	r2, #56	; 0x38
 8003496:	4013      	ands	r3, r2
 8003498:	2b18      	cmp	r3, #24
 800349a:	d103      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800349c:	23fa      	movs	r3, #250	; 0xfa
 800349e:	01db      	lsls	r3, r3, #7
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e001      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034a8:	693b      	ldr	r3, [r7, #16]
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b006      	add	sp, #24
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	40021000 	.word	0x40021000
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	007a1200 	.word	0x007a1200

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80034c8:	2313      	movs	r3, #19
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d0:	2312      	movs	r3, #18
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	029b      	lsls	r3, r3, #10
 80034e0:	4013      	ands	r3, r2
 80034e2:	d100      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80034e4:	e0a4      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e6:	2311      	movs	r3, #17
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ee:	4bc3      	ldr	r3, [pc, #780]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	055b      	lsls	r3, r3, #21
 80034f6:	4013      	ands	r3, r2
 80034f8:	d111      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	4bc0      	ldr	r3, [pc, #768]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034fe:	4bbf      	ldr	r3, [pc, #764]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	0549      	lsls	r1, r1, #21
 8003504:	430a      	orrs	r2, r1
 8003506:	63da      	str	r2, [r3, #60]	; 0x3c
 8003508:	4bbc      	ldr	r3, [pc, #752]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800350a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	055b      	lsls	r3, r3, #21
 8003510:	4013      	ands	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003516:	2311      	movs	r3, #17
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800351e:	4bb8      	ldr	r3, [pc, #736]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4bb7      	ldr	r3, [pc, #732]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	0049      	lsls	r1, r1, #1
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800352c:	f7fe fbf6 	bl	8001d1c <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003534:	e00b      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003536:	f7fe fbf1 	bl	8001d1c <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d904      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003544:	2313      	movs	r3, #19
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2203      	movs	r2, #3
 800354a:	701a      	strb	r2, [r3, #0]
        break;
 800354c:	e005      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800354e:	4bac      	ldr	r3, [pc, #688]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	2380      	movs	r3, #128	; 0x80
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4013      	ands	r3, r2
 8003558:	d0ed      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800355a:	2313      	movs	r3, #19
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d154      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003564:	4ba5      	ldr	r3, [pc, #660]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003566:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003568:	23c0      	movs	r3, #192	; 0xc0
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4013      	ands	r3, r2
 800356e:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d019      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	429a      	cmp	r2, r3
 800357e:	d014      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003580:	4b9e      	ldr	r3, [pc, #632]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	4a9f      	ldr	r2, [pc, #636]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003586:	4013      	ands	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800358a:	4b9c      	ldr	r3, [pc, #624]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800358c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800358e:	4b9b      	ldr	r3, [pc, #620]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	0249      	lsls	r1, r1, #9
 8003594:	430a      	orrs	r2, r1
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003598:	4b98      	ldr	r3, [pc, #608]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800359a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800359c:	4b97      	ldr	r3, [pc, #604]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800359e:	499a      	ldr	r1, [pc, #616]	; (8003808 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035a4:	4b95      	ldr	r3, [pc, #596]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	d016      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe fbb3 	bl	8001d1c <HAL_GetTick>
 80035b6:	0003      	movs	r3, r0
 80035b8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ba:	e00c      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe fbae 	bl	8001d1c <HAL_GetTick>
 80035c0:	0002      	movs	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	4a91      	ldr	r2, [pc, #580]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d904      	bls.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80035cc:	2313      	movs	r3, #19
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2203      	movs	r2, #3
 80035d2:	701a      	strb	r2, [r3, #0]
            break;
 80035d4:	e004      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d6:	4b89      	ldr	r3, [pc, #548]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	2202      	movs	r2, #2
 80035dc:	4013      	ands	r3, r2
 80035de:	d0ed      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80035e0:	2313      	movs	r3, #19
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ea:	4b84      	ldr	r3, [pc, #528]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	4a85      	ldr	r2, [pc, #532]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f8:	4b80      	ldr	r3, [pc, #512]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035fa:	430a      	orrs	r2, r1
 80035fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80035fe:	e00c      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003600:	2312      	movs	r3, #18
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	2213      	movs	r2, #19
 8003606:	18ba      	adds	r2, r7, r2
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	701a      	strb	r2, [r3, #0]
 800360c:	e005      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360e:	2312      	movs	r3, #18
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2213      	movs	r2, #19
 8003614:	18ba      	adds	r2, r7, r2
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800361a:	2311      	movs	r3, #17
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b75      	ldr	r3, [pc, #468]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003628:	4b74      	ldr	r3, [pc, #464]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800362a:	4979      	ldr	r1, [pc, #484]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800362c:	400a      	ands	r2, r1
 800362e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	4013      	ands	r3, r2
 8003638:	d009      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800363a:	4b70      	ldr	r3, [pc, #448]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	2203      	movs	r2, #3
 8003640:	4393      	bics	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800364a:	430a      	orrs	r2, r1
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2202      	movs	r2, #2
 8003654:	4013      	ands	r3, r2
 8003656:	d009      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003658:	4b68      	ldr	r3, [pc, #416]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800365a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365c:	220c      	movs	r2, #12
 800365e:	4393      	bics	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	4b65      	ldr	r3, [pc, #404]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003668:	430a      	orrs	r2, r1
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2220      	movs	r2, #32
 8003672:	4013      	ands	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003676:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	4a66      	ldr	r2, [pc, #408]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	4b5d      	ldr	r3, [pc, #372]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003686:	430a      	orrs	r2, r1
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4013      	ands	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003696:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	4a5f      	ldr	r2, [pc, #380]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800369c:	4013      	ands	r3, r2
 800369e:	0019      	movs	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	4b55      	ldr	r3, [pc, #340]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036a6:	430a      	orrs	r2, r1
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4013      	ands	r3, r2
 80036b4:	d009      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036b6:	4b51      	ldr	r3, [pc, #324]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	4a58      	ldr	r2, [pc, #352]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80036bc:	4013      	ands	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036c6:	430a      	orrs	r2, r1
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	4013      	ands	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036d4:	4b49      	ldr	r3, [pc, #292]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	4a51      	ldr	r2, [pc, #324]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80036da:	4013      	ands	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	4b46      	ldr	r3, [pc, #280]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036e4:	430a      	orrs	r2, r1
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	01db      	lsls	r3, r3, #7
 80036f0:	4013      	ands	r3, r2
 80036f2:	d015      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036f4:	4b41      	ldr	r3, [pc, #260]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	0899      	lsrs	r1, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	4b3e      	ldr	r3, [pc, #248]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003702:	430a      	orrs	r2, r1
 8003704:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1a      	ldr	r2, [r3, #32]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	05db      	lsls	r3, r3, #23
 800370e:	429a      	cmp	r2, r3
 8003710:	d106      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003712:	4b3a      	ldr	r3, [pc, #232]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	4b39      	ldr	r3, [pc, #228]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0249      	lsls	r1, r1, #9
 800371c:	430a      	orrs	r2, r1
 800371e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	031b      	lsls	r3, r3, #12
 8003728:	4013      	ands	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800372c:	4b33      	ldr	r3, [pc, #204]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	2240      	movs	r2, #64	; 0x40
 8003732:	4393      	bics	r3, r2
 8003734:	0019      	movs	r1, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373a:	4b30      	ldr	r3, [pc, #192]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800373c:	430a      	orrs	r2, r1
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	039b      	lsls	r3, r3, #14
 8003748:	4013      	ands	r3, r2
 800374a:	d016      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800374e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003750:	4a34      	ldr	r2, [pc, #208]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375a:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800375c:	430a      	orrs	r2, r1
 800375e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	03db      	lsls	r3, r3, #15
 8003768:	429a      	cmp	r2, r3
 800376a:	d106      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003772:	2180      	movs	r1, #128	; 0x80
 8003774:	0449      	lsls	r1, r1, #17
 8003776:	430a      	orrs	r2, r1
 8003778:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	03db      	lsls	r3, r3, #15
 8003782:	4013      	ands	r3, r2
 8003784:	d016      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	4a27      	ldr	r2, [pc, #156]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800378c:	4013      	ands	r3, r2
 800378e:	0019      	movs	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003796:	430a      	orrs	r2, r1
 8003798:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	045b      	lsls	r3, r3, #17
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d106      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037ac:	2180      	movs	r1, #128	; 0x80
 80037ae:	0449      	lsls	r1, r1, #17
 80037b0:	430a      	orrs	r2, r1
 80037b2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	4013      	ands	r3, r2
 80037be:	d016      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695a      	ldr	r2, [r3, #20]
 80037ce:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037d0:	430a      	orrs	r2, r1
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	01db      	lsls	r3, r3, #7
 80037dc:	429a      	cmp	r2, r3
 80037de:	d106      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	0249      	lsls	r1, r1, #9
 80037ea:	430a      	orrs	r2, r1
 80037ec:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80037ee:	2312      	movs	r3, #18
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	781b      	ldrb	r3, [r3, #0]
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b006      	add	sp, #24
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40021000 	.word	0x40021000
 8003800:	40007000 	.word	0x40007000
 8003804:	fffffcff 	.word	0xfffffcff
 8003808:	fffeffff 	.word	0xfffeffff
 800380c:	00001388 	.word	0x00001388
 8003810:	efffffff 	.word	0xefffffff
 8003814:	fffff3ff 	.word	0xfffff3ff
 8003818:	fff3ffff 	.word	0xfff3ffff
 800381c:	ffcfffff 	.word	0xffcfffff
 8003820:	ffffcfff 	.word	0xffffcfff
 8003824:	ffbfffff 	.word	0xffbfffff
 8003828:	feffffff 	.word	0xfeffffff
 800382c:	ffff3fff 	.word	0xffff3fff

08003830 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003830:	b5b0      	push	{r4, r5, r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003838:	230f      	movs	r3, #15
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d100      	bne.n	8003848 <HAL_RTC_Init+0x18>
 8003846:	e07f      	b.n	8003948 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2229      	movs	r2, #41	; 0x29
 800384c:	5c9b      	ldrb	r3, [r3, r2]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2228      	movs	r2, #40	; 0x28
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2288      	movs	r2, #136	; 0x88
 8003860:	0212      	lsls	r2, r2, #8
 8003862:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	f7fd ff62 	bl	8001730 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2229      	movs	r2, #41	; 0x29
 8003870:	2102      	movs	r1, #2
 8003872:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	22ca      	movs	r2, #202	; 0xca
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2253      	movs	r2, #83	; 0x53
 8003882:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003884:	250f      	movs	r5, #15
 8003886:	197c      	adds	r4, r7, r5
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 fbef 	bl	800406e <RTC_EnterInitMode>
 8003890:	0003      	movs	r3, r0
 8003892:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8003894:	197b      	adds	r3, r7, r5
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d148      	bne.n	800392e <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	492c      	ldr	r1, [pc, #176]	; (8003958 <HAL_RTC_Init+0x128>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6912      	ldr	r2, [r2, #16]
 80038d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6919      	ldr	r1, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	041a      	lsls	r2, r3, #16
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80038e8:	250f      	movs	r5, #15
 80038ea:	197c      	adds	r4, r7, r5
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 fc00 	bl	80040f4 <RTC_ExitInitMode>
 80038f4:	0003      	movs	r3, r0
 80038f6:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80038f8:	197b      	adds	r3, r7, r5
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d116      	bne.n	800392e <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	00d2      	lsls	r2, r2, #3
 800390c:	08d2      	lsrs	r2, r2, #3
 800390e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6999      	ldr	r1, [r3, #24]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003936:	230f      	movs	r3, #15
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2229      	movs	r2, #41	; 0x29
 8003944:	2101      	movs	r1, #1
 8003946:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003948:	230f      	movs	r3, #15
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	781b      	ldrb	r3, [r3, #0]
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b004      	add	sp, #16
 8003954:	bdb0      	pop	{r4, r5, r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	fb8fffbf 	.word	0xfb8fffbf

0800395c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800395c:	b5b0      	push	{r4, r5, r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2228      	movs	r2, #40	; 0x28
 800396c:	5c9b      	ldrb	r3, [r3, r2]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_RTC_SetTime+0x1a>
 8003972:	2302      	movs	r3, #2
 8003974:	e092      	b.n	8003a9c <HAL_RTC_SetTime+0x140>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2228      	movs	r2, #40	; 0x28
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2229      	movs	r2, #41	; 0x29
 8003982:	2102      	movs	r1, #2
 8003984:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	22ca      	movs	r2, #202	; 0xca
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2253      	movs	r2, #83	; 0x53
 8003994:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003996:	2513      	movs	r5, #19
 8003998:	197c      	adds	r4, r7, r5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	0018      	movs	r0, r3
 800399e:	f000 fb66 	bl	800406e <RTC_EnterInitMode>
 80039a2:	0003      	movs	r3, r0
 80039a4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80039a6:	197b      	adds	r3, r7, r5
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d162      	bne.n	8003a74 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d125      	bne.n	8003a00 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2240      	movs	r2, #64	; 0x40
 80039bc:	4013      	ands	r3, r2
 80039be:	d102      	bne.n	80039c6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 fbd8 	bl	8004180 <RTC_ByteToBcd2>
 80039d0:	0003      	movs	r3, r0
 80039d2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	785b      	ldrb	r3, [r3, #1]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 fbd1 	bl	8004180 <RTC_ByteToBcd2>
 80039de:	0003      	movs	r3, r0
 80039e0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039e2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	789b      	ldrb	r3, [r3, #2]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 fbc9 	bl	8004180 <RTC_ByteToBcd2>
 80039ee:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039f0:	0022      	movs	r2, r4
 80039f2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	78db      	ldrb	r3, [r3, #3]
 80039f8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e017      	b.n	8003a30 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2240      	movs	r2, #64	; 0x40
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d102      	bne.n	8003a12 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a1e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a24:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	78db      	ldrb	r3, [r3, #3]
 8003a2a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	491b      	ldr	r1, [pc, #108]	; (8003aa4 <HAL_RTC_SetTime+0x148>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4918      	ldr	r1, [pc, #96]	; (8003aa8 <HAL_RTC_SetTime+0x14c>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6999      	ldr	r1, [r3, #24]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a64:	2313      	movs	r3, #19
 8003a66:	18fc      	adds	r4, r7, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 fb42 	bl	80040f4 <RTC_ExitInitMode>
 8003a70:	0003      	movs	r3, r0
 8003a72:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	22ff      	movs	r2, #255	; 0xff
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003a7c:	2313      	movs	r3, #19
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2229      	movs	r2, #41	; 0x29
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2228      	movs	r2, #40	; 0x28
 8003a92:	2100      	movs	r1, #0
 8003a94:	5499      	strb	r1, [r3, r2]

  return status;
 8003a96:	2313      	movs	r3, #19
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	781b      	ldrb	r3, [r3, #0]
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b006      	add	sp, #24
 8003aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa4:	007f7f7f 	.word	0x007f7f7f
 8003aa8:	fffbffff 	.word	0xfffbffff

08003aac <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	045b      	lsls	r3, r3, #17
 8003aca:	0c5a      	lsrs	r2, r3, #17
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_RTC_GetTime+0xb4>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	223f      	movs	r2, #63	; 0x3f
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	227f      	movs	r2, #127	; 0x7f
 8003af4:	4013      	ands	r3, r2
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	227f      	movs	r2, #127	; 0x7f
 8003b02:	4013      	ands	r3, r2
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	0d9b      	lsrs	r3, r3, #22
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2201      	movs	r2, #1
 8003b12:	4013      	ands	r3, r2
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11a      	bne.n	8003b56 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 fb54 	bl	80041d2 <RTC_Bcd2ToByte>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	001a      	movs	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 fb4b 	bl	80041d2 <RTC_Bcd2ToByte>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	001a      	movs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	789b      	ldrb	r3, [r3, #2]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f000 fb42 	bl	80041d2 <RTC_Bcd2ToByte>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	001a      	movs	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b006      	add	sp, #24
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	007f7f7f 	.word	0x007f7f7f

08003b64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2228      	movs	r2, #40	; 0x28
 8003b74:	5c9b      	ldrb	r3, [r3, r2]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_RTC_SetDate+0x1a>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e07e      	b.n	8003c7c <HAL_RTC_SetDate+0x118>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2228      	movs	r2, #40	; 0x28
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2229      	movs	r2, #41	; 0x29
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <HAL_RTC_SetDate+0x4e>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	001a      	movs	r2, r3
 8003b9a:	2310      	movs	r3, #16
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d008      	beq.n	8003bb2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	4393      	bics	r3, r2
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	330a      	adds	r3, #10
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11c      	bne.n	8003bf2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	78db      	ldrb	r3, [r3, #3]
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f000 fadf 	bl	8004180 <RTC_ByteToBcd2>
 8003bc2:	0003      	movs	r3, r0
 8003bc4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 fad8 	bl	8004180 <RTC_ByteToBcd2>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bd4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	789b      	ldrb	r3, [r3, #2]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 fad0 	bl	8004180 <RTC_ByteToBcd2>
 8003be0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003be2:	0022      	movs	r2, r4
 8003be4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e00e      	b.n	8003c10 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	78db      	ldrb	r3, [r3, #3]
 8003bf6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bfe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003c04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	22ca      	movs	r2, #202	; 0xca
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2253      	movs	r2, #83	; 0x53
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c20:	2513      	movs	r5, #19
 8003c22:	197c      	adds	r4, r7, r5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 fa21 	bl	800406e <RTC_EnterInitMode>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003c30:	197b      	adds	r3, r7, r5
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10d      	bne.n	8003c54 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4911      	ldr	r1, [pc, #68]	; (8003c84 <HAL_RTC_SetDate+0x120>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c44:	2313      	movs	r3, #19
 8003c46:	18fc      	adds	r4, r7, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 fa52 	bl	80040f4 <RTC_ExitInitMode>
 8003c50:	0003      	movs	r3, r0
 8003c52:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	22ff      	movs	r2, #255	; 0xff
 8003c5a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003c5c:	2313      	movs	r3, #19
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2229      	movs	r2, #41	; 0x29
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2228      	movs	r2, #40	; 0x28
 8003c72:	2100      	movs	r1, #0
 8003c74:	5499      	strb	r1, [r3, r2]

  return status;
 8003c76:	2313      	movs	r3, #19
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	781b      	ldrb	r3, [r3, #0]
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b006      	add	sp, #24
 8003c82:	bdb0      	pop	{r4, r5, r7, pc}
 8003c84:	00ffff3f 	.word	0x00ffff3f

08003c88 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4a21      	ldr	r2, [pc, #132]	; (8003d20 <HAL_RTC_GetDate+0x98>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	221f      	movs	r2, #31
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	223f      	movs	r2, #63	; 0x3f
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	0b5b      	lsrs	r3, r3, #13
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2207      	movs	r2, #7
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11a      	bne.n	8003d14 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	78db      	ldrb	r3, [r3, #3]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 fa75 	bl	80041d2 <RTC_Bcd2ToByte>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	001a      	movs	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 fa6c 	bl	80041d2 <RTC_Bcd2ToByte>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	789b      	ldrb	r3, [r3, #2]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 fa63 	bl	80041d2 <RTC_Bcd2ToByte>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	001a      	movs	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b006      	add	sp, #24
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	00ffff3f 	.word	0x00ffff3f

08003d24 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2228      	movs	r2, #40	; 0x28
 8003d34:	5c9b      	ldrb	r3, [r3, r2]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_RTC_SetAlarm_IT+0x1a>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e127      	b.n	8003f8e <HAL_RTC_SetAlarm_IT+0x26a>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2228      	movs	r2, #40	; 0x28
 8003d42:	2101      	movs	r1, #1
 8003d44:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2229      	movs	r2, #41	; 0x29
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d136      	bne.n	8003dc2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2240      	movs	r2, #64	; 0x40
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d102      	bne.n	8003d66 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f000 fa08 	bl	8004180 <RTC_ByteToBcd2>
 8003d70:	0003      	movs	r3, r0
 8003d72:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 fa01 	bl	8004180 <RTC_ByteToBcd2>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d82:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	789b      	ldrb	r3, [r3, #2]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f000 f9f9 	bl	8004180 <RTC_ByteToBcd2>
 8003d8e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d90:	0022      	movs	r2, r4
 8003d92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	78db      	ldrb	r3, [r3, #3]
 8003d98:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2220      	movs	r2, #32
 8003da2:	5c9b      	ldrb	r3, [r3, r2]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 f9eb 	bl	8004180 <RTC_ByteToBcd2>
 8003daa:	0003      	movs	r3, r0
 8003dac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003dae:	0022      	movs	r2, r4
 8003db0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003db6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e022      	b.n	8003e08 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2240      	movs	r2, #64	; 0x40
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d102      	bne.n	8003dd4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	785b      	ldrb	r3, [r3, #1]
 8003dde:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003de0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003de6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	78db      	ldrb	r3, [r3, #3]
 8003dec:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003dee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2120      	movs	r1, #32
 8003df4:	5c5b      	ldrb	r3, [r3, r1]
 8003df6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003df8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003dfe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	22ca      	movs	r2, #202	; 0xca
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2253      	movs	r2, #83	; 0x53
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d14c      	bne.n	8003eca <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4957      	ldr	r1, [pc, #348]	; (8003f98 <HAL_RTC_SetAlarm_IT+0x274>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003e50:	f7fd ff64 	bl	8001d1c <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e58:	e016      	b.n	8003e88 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003e5a:	f7fd ff5f 	bl	8001d1c <HAL_GetTick>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	1ad2      	subs	r2, r2, r3
 8003e64:	23fa      	movs	r3, #250	; 0xfa
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d90d      	bls.n	8003e88 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	22ff      	movs	r2, #255	; 0xff
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2229      	movs	r2, #41	; 0x29
 8003e78:	2103      	movs	r1, #3
 8003e7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2228      	movs	r2, #40	; 0x28
 8003e80:	2100      	movs	r1, #0
 8003e82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e082      	b.n	8003f8e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4013      	ands	r3, r2
 8003e92:	d0e2      	beq.n	8003e5a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0049      	lsls	r1, r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699a      	ldr	r2, [r3, #24]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	0149      	lsls	r1, r1, #5
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	619a      	str	r2, [r3, #24]
 8003ec8:	e04b      	b.n	8003f62 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4931      	ldr	r1, [pc, #196]	; (8003f9c <HAL_RTC_SetAlarm_IT+0x278>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8003eea:	f7fd ff17 	bl	8001d1c <HAL_GetTick>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003ef2:	e016      	b.n	8003f22 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ef4:	f7fd ff12 	bl	8001d1c <HAL_GetTick>
 8003ef8:	0002      	movs	r2, r0
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	1ad2      	subs	r2, r2, r3
 8003efe:	23fa      	movs	r3, #250	; 0xfa
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d90d      	bls.n	8003f22 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	22ff      	movs	r2, #255	; 0xff
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2229      	movs	r2, #41	; 0x29
 8003f12:	2103      	movs	r1, #3
 8003f14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2228      	movs	r2, #40	; 0x28
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e035      	b.n	8003f8e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d0e2      	beq.n	8003ef4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	0089      	lsls	r1, r1, #2
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2180      	movs	r1, #128	; 0x80
 8003f5c:	0189      	lsls	r1, r1, #6
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003f62:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	58d3      	ldr	r3, [r2, r3]
 8003f68:	490d      	ldr	r1, [pc, #52]	; (8003fa0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003f6a:	2280      	movs	r2, #128	; 0x80
 8003f6c:	0312      	lsls	r2, r2, #12
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	22ff      	movs	r2, #255	; 0xff
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2229      	movs	r2, #41	; 0x29
 8003f80:	2101      	movs	r1, #1
 8003f82:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2228      	movs	r2, #40	; 0x28
 8003f88:	2100      	movs	r1, #0
 8003f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b009      	add	sp, #36	; 0x24
 8003f94:	bd90      	pop	{r4, r7, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	fffffeff 	.word	0xfffffeff
 8003f9c:	fffffdff 	.word	0xfffffdff
 8003fa0:	40021800 	.word	0x40021800

08003fa4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	015b      	lsls	r3, r3, #5
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	d011      	beq.n	8003fde <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7fc f91f 	bl	800021c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	019b      	lsls	r3, r3, #6
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d011      	beq.n	8004010 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2102      	movs	r1, #2
 8004004:	430a      	orrs	r2, r1
 8004006:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	0018      	movs	r0, r3
 800400c:	f000 f8fe 	bl	800420c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2229      	movs	r2, #41	; 0x29
 8004014:	2101      	movs	r1, #1
 8004016:	5499      	strb	r1, [r3, r2]
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	21a0      	movs	r1, #160	; 0xa0
 8004034:	438a      	bics	r2, r1
 8004036:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004038:	f7fd fe70 	bl	8001d1c <HAL_GetTick>
 800403c:	0003      	movs	r3, r0
 800403e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004040:	e00a      	b.n	8004058 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004042:	f7fd fe6b 	bl	8001d1c <HAL_GetTick>
 8004046:	0002      	movs	r2, r0
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1ad2      	subs	r2, r2, r3
 800404c:	23fa      	movs	r3, #250	; 0xfa
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d901      	bls.n	8004058 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e006      	b.n	8004066 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	4013      	ands	r3, r2
 8004062:	d0ee      	beq.n	8004042 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}

0800406e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004076:	230f      	movs	r3, #15
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	2200      	movs	r2, #0
 800407c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2240      	movs	r2, #64	; 0x40
 8004086:	4013      	ands	r3, r2
 8004088:	d12d      	bne.n	80040e6 <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	430a      	orrs	r2, r1
 8004098:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800409a:	f7fd fe3f 	bl	8001d1c <HAL_GetTick>
 800409e:	0003      	movs	r3, r0
 80040a0:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80040a2:	e015      	b.n	80040d0 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80040a4:	f7fd fe3a 	bl	8001d1c <HAL_GetTick>
 80040a8:	0002      	movs	r2, r0
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	1ad2      	subs	r2, r2, r3
 80040ae:	210f      	movs	r1, #15
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	1879      	adds	r1, r7, r1
 80040b4:	7809      	ldrb	r1, [r1, #0]
 80040b6:	7019      	strb	r1, [r3, #0]
 80040b8:	23fa      	movs	r3, #250	; 0xfa
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	429a      	cmp	r2, r3
 80040be:	d907      	bls.n	80040d0 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 80040c0:	230f      	movs	r3, #15
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2203      	movs	r2, #3
 80040c6:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2229      	movs	r2, #41	; 0x29
 80040cc:	2103      	movs	r1, #3
 80040ce:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2240      	movs	r2, #64	; 0x40
 80040d8:	4013      	ands	r3, r2
 80040da:	d104      	bne.n	80040e6 <RTC_EnterInitMode+0x78>
 80040dc:	230f      	movs	r3, #15
 80040de:	18fb      	adds	r3, r7, r3
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d1de      	bne.n	80040a4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80040e6:	230f      	movs	r3, #15
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	781b      	ldrb	r3, [r3, #0]
}
 80040ec:	0018      	movs	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b004      	add	sp, #16
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040fc:	230f      	movs	r3, #15
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <RTC_ExitInitMode+0x88>)
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	4b1c      	ldr	r3, [pc, #112]	; (800417c <RTC_ExitInitMode+0x88>)
 800410a:	2180      	movs	r1, #128	; 0x80
 800410c:	438a      	bics	r2, r1
 800410e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <RTC_ExitInitMode+0x88>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2220      	movs	r2, #32
 8004116:	4013      	ands	r3, r2
 8004118:	d10e      	bne.n	8004138 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0018      	movs	r0, r3
 800411e:	f7ff ff7f 	bl	8004020 <HAL_RTC_WaitForSynchro>
 8004122:	1e03      	subs	r3, r0, #0
 8004124:	d022      	beq.n	800416c <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2229      	movs	r2, #41	; 0x29
 800412a:	2103      	movs	r1, #3
 800412c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800412e:	230f      	movs	r3, #15
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	2203      	movs	r2, #3
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e019      	b.n	800416c <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <RTC_ExitInitMode+0x88>)
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <RTC_ExitInitMode+0x88>)
 800413e:	2120      	movs	r1, #32
 8004140:	438a      	bics	r2, r1
 8004142:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0018      	movs	r0, r3
 8004148:	f7ff ff6a 	bl	8004020 <HAL_RTC_WaitForSynchro>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d007      	beq.n	8004160 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2229      	movs	r2, #41	; 0x29
 8004154:	2103      	movs	r1, #3
 8004156:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004158:	230f      	movs	r3, #15
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2203      	movs	r2, #3
 800415e:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <RTC_ExitInitMode+0x88>)
 8004162:	699a      	ldr	r2, [r3, #24]
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <RTC_ExitInitMode+0x88>)
 8004166:	2120      	movs	r1, #32
 8004168:	430a      	orrs	r2, r1
 800416a:	619a      	str	r2, [r3, #24]
  }

  return status;
 800416c:	230f      	movs	r3, #15
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	781b      	ldrb	r3, [r3, #0]
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	40002800 	.word	0x40002800

08004180 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	0002      	movs	r2, r0
 8004188:	1dfb      	adds	r3, r7, #7
 800418a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004190:	230b      	movs	r3, #11
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	1dfa      	adds	r2, r7, #7
 8004196:	7812      	ldrb	r2, [r2, #0]
 8004198:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800419a:	e008      	b.n	80041ae <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80041a2:	220b      	movs	r2, #11
 80041a4:	18bb      	adds	r3, r7, r2
 80041a6:	18ba      	adds	r2, r7, r2
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	3a0a      	subs	r2, #10
 80041ac:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80041ae:	230b      	movs	r3, #11
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d8f1      	bhi.n	800419c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	230b      	movs	r3, #11
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b2db      	uxtb	r3, r3
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b004      	add	sp, #16
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	0002      	movs	r2, r0
 80041da:	1dfb      	adds	r3, r7, #7
 80041dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80041de:	1dfb      	adds	r3, r7, #7
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	091b      	lsrs	r3, r3, #4
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	001a      	movs	r2, r3
 80041e8:	0013      	movs	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	189b      	adds	r3, r3, r2
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	1dfb      	adds	r3, r7, #7
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	210f      	movs	r1, #15
 80041fc:	400b      	ands	r3, r1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	18d3      	adds	r3, r2, r3
 8004202:	b2db      	uxtb	r3, r3
}
 8004204:	0018      	movs	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	b004      	add	sp, #16
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e01e      	b.n	800426c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	223d      	movs	r2, #61	; 0x3d
 8004232:	5c9b      	ldrb	r3, [r3, r2]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	223c      	movs	r2, #60	; 0x3c
 800423e:	2100      	movs	r1, #0
 8004240:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0018      	movs	r0, r3
 8004246:	f7fd fc31 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	223d      	movs	r2, #61	; 0x3d
 800424e:	2102      	movs	r1, #2
 8004250:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3304      	adds	r3, #4
 800425a:	0019      	movs	r1, r3
 800425c:	0010      	movs	r0, r2
 800425e:	f000 fc29 	bl	8004ab4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	223d      	movs	r2, #61	; 0x3d
 8004266:	2101      	movs	r1, #1
 8004268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b002      	add	sp, #8
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	223d      	movs	r2, #61	; 0x3d
 8004280:	2102      	movs	r1, #2
 8004282:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <HAL_TIM_Base_Start+0x50>)
 800428c:	4013      	ands	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b06      	cmp	r3, #6
 8004294:	d00c      	beq.n	80042b0 <HAL_TIM_Base_Start+0x3c>
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	025b      	lsls	r3, r3, #9
 800429c:	429a      	cmp	r2, r3
 800429e:	d007      	beq.n	80042b0 <HAL_TIM_Base_Start+0x3c>
  {
    __HAL_TIM_ENABLE(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2101      	movs	r1, #1
 80042ac:	430a      	orrs	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	223d      	movs	r2, #61	; 0x3d
 80042b4:	2101      	movs	r1, #1
 80042b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b004      	add	sp, #16
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	00010007 	.word	0x00010007

080042c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2101      	movs	r1, #1
 80042dc:	430a      	orrs	r2, r1
 80042de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <HAL_TIM_Base_Start_IT+0x50>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b06      	cmp	r3, #6
 80042f0:	d00c      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x44>
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d007      	beq.n	800430c <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b004      	add	sp, #16
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	00010007 	.word	0x00010007

0800431c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e01e      	b.n	800436c <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	223d      	movs	r2, #61	; 0x3d
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d107      	bne.n	800434a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	223c      	movs	r2, #60	; 0x3c
 800433e:	2100      	movs	r1, #0
 8004340:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f000 f815 	bl	8004374 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	223d      	movs	r2, #61	; 0x3d
 800434e:	2102      	movs	r1, #2
 8004350:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3304      	adds	r3, #4
 800435a:	0019      	movs	r1, r3
 800435c:	0010      	movs	r0, r2
 800435e:	f000 fba9 	bl	8004ab4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	223d      	movs	r2, #61	; 0x3d
 8004366:	2101      	movs	r1, #1
 8004368:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800437c:	46c0      	nop			; (mov r8, r8)
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e02e      	b.n	80043f6 <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	223d      	movs	r2, #61	; 0x3d
 800439c:	5c9b      	ldrb	r3, [r3, r2]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	223c      	movs	r2, #60	; 0x3c
 80043a8:	2100      	movs	r1, #0
 80043aa:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 f825 	bl	80043fe <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	223d      	movs	r2, #61	; 0x3d
 80043b8:	2102      	movs	r1, #2
 80043ba:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	0019      	movs	r1, r3
 80043c6:	0010      	movs	r0, r2
 80043c8:	f000 fb74 	bl	8004ab4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2108      	movs	r1, #8
 80043d8:	438a      	bics	r2, r1
 80043da:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6819      	ldr	r1, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	223d      	movs	r2, #61	; 0x3d
 80043f0:	2101      	movs	r1, #1
 80043f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b002      	add	sp, #8
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b002      	add	sp, #8
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2201      	movs	r2, #1
 8004420:	2100      	movs	r1, #0
 8004422:	0018      	movs	r0, r3
 8004424:	f000 ff26 	bl	8005274 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2201      	movs	r2, #1
 800442e:	2104      	movs	r1, #4
 8004430:	0018      	movs	r0, r3
 8004432:	f000 ff1f 	bl	8005274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a12      	ldr	r2, [pc, #72]	; (8004484 <HAL_TIM_OnePulse_Start+0x74>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_TIM_OnePulse_Start+0x4e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a10      	ldr	r2, [pc, #64]	; (8004488 <HAL_TIM_OnePulse_Start+0x78>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_TIM_OnePulse_Start+0x4e>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a0f      	ldr	r2, [pc, #60]	; (800448c <HAL_TIM_OnePulse_Start+0x7c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_TIM_OnePulse_Start+0x4e>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a0d      	ldr	r2, [pc, #52]	; (8004490 <HAL_TIM_OnePulse_Start+0x80>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_TIM_OnePulse_Start+0x52>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_TIM_OnePulse_Start+0x54>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_TIM_OnePulse_Start+0x6a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2180      	movs	r1, #128	; 0x80
 8004474:	0209      	lsls	r1, r1, #8
 8004476:	430a      	orrs	r2, r1
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40014000 	.word	0x40014000
 800448c:	40014400 	.word	0x40014400
 8004490:	40014800 	.word	0x40014800

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2202      	movs	r2, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d124      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2202      	movs	r2, #2
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11d      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2203      	movs	r2, #3
 80044be:	4252      	negs	r2, r2
 80044c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2203      	movs	r2, #3
 80044d0:	4013      	ands	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 fad4 	bl	8004a84 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e007      	b.n	80044ee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 fac7 	bl	8004a74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f000 fad3 	bl	8004a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2204      	movs	r2, #4
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d125      	bne.n	800454e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2204      	movs	r2, #4
 800450a:	4013      	ands	r3, r2
 800450c:	2b04      	cmp	r3, #4
 800450e:	d11e      	bne.n	800454e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2205      	movs	r2, #5
 8004516:	4252      	negs	r2, r2
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	23c0      	movs	r3, #192	; 0xc0
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4013      	ands	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 faa7 	bl	8004a84 <HAL_TIM_IC_CaptureCallback>
 8004536:	e007      	b.n	8004548 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f000 fa9a 	bl	8004a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0018      	movs	r0, r3
 8004544:	f000 faa6 	bl	8004a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2208      	movs	r2, #8
 8004556:	4013      	ands	r3, r2
 8004558:	2b08      	cmp	r3, #8
 800455a:	d124      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2208      	movs	r2, #8
 8004564:	4013      	ands	r3, r2
 8004566:	2b08      	cmp	r3, #8
 8004568:	d11d      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2209      	movs	r2, #9
 8004570:	4252      	negs	r2, r2
 8004572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2204      	movs	r2, #4
 8004578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	2203      	movs	r2, #3
 8004582:	4013      	ands	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 fa7b 	bl	8004a84 <HAL_TIM_IC_CaptureCallback>
 800458e:	e007      	b.n	80045a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 fa6e 	bl	8004a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0018      	movs	r0, r3
 800459c:	f000 fa7a 	bl	8004a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2210      	movs	r2, #16
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d125      	bne.n	8004600 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2210      	movs	r2, #16
 80045bc:	4013      	ands	r3, r2
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d11e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2211      	movs	r2, #17
 80045c8:	4252      	negs	r2, r2
 80045ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2208      	movs	r2, #8
 80045d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	23c0      	movs	r3, #192	; 0xc0
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fa4e 	bl	8004a84 <HAL_TIM_IC_CaptureCallback>
 80045e8:	e007      	b.n	80045fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 fa41 	bl	8004a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 fa4d 	bl	8004a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2201      	movs	r2, #1
 8004608:	4013      	ands	r3, r2
 800460a:	2b01      	cmp	r3, #1
 800460c:	d10f      	bne.n	800462e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	4013      	ands	r3, r2
 8004618:	2b01      	cmp	r3, #1
 800461a:	d108      	bne.n	800462e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2202      	movs	r2, #2
 8004622:	4252      	negs	r2, r2
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0018      	movs	r0, r3
 800462a:	f7fc fe55 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2280      	movs	r2, #128	; 0x80
 8004636:	4013      	ands	r3, r2
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d10f      	bne.n	800465c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	4013      	ands	r3, r2
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d108      	bne.n	800465c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2281      	movs	r2, #129	; 0x81
 8004650:	4252      	negs	r2, r2
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	0018      	movs	r0, r3
 8004658:	f000 fe8e 	bl	8005378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	401a      	ands	r2, r3
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	429a      	cmp	r2, r3
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2280      	movs	r2, #128	; 0x80
 8004678:	4013      	ands	r3, r2
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <HAL_TIM_IRQHandler+0x260>)
 8004684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 fe7d 	bl	8005388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2240      	movs	r2, #64	; 0x40
 8004696:	4013      	ands	r3, r2
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d10f      	bne.n	80046bc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d108      	bne.n	80046bc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2241      	movs	r2, #65	; 0x41
 80046b0:	4252      	negs	r2, r2
 80046b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 f9f4 	bl	8004aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2220      	movs	r2, #32
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d10f      	bne.n	80046ea <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d108      	bne.n	80046ea <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	4252      	negs	r2, r2
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 fe3f 	bl	8005368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b002      	add	sp, #8
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	fffffeff 	.word	0xfffffeff

080046f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	223c      	movs	r2, #60	; 0x3c
 8004708:	5c9b      	ldrb	r3, [r3, r2]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800470e:	2302      	movs	r3, #2
 8004710:	e0e7      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	223c      	movs	r2, #60	; 0x3c
 8004716:	2101      	movs	r1, #1
 8004718:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	223d      	movs	r2, #61	; 0x3d
 800471e:	2102      	movs	r1, #2
 8004720:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b14      	cmp	r3, #20
 8004726:	d900      	bls.n	800472a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004728:	e0d1      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	009a      	lsls	r2, r3, #2
 800472e:	4b6f      	ldr	r3, [pc, #444]	; (80048ec <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8004730:	18d3      	adds	r3, r2, r3
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	0011      	movs	r1, r2
 800473e:	0018      	movs	r0, r3
 8004740:	f000 fa38 	bl	8004bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2108      	movs	r1, #8
 8004750:	430a      	orrs	r2, r1
 8004752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2104      	movs	r1, #4
 8004760:	438a      	bics	r2, r1
 8004762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6999      	ldr	r1, [r3, #24]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	619a      	str	r2, [r3, #24]
      break;
 8004776:	e0ab      	b.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	0011      	movs	r1, r2
 8004780:	0018      	movs	r0, r3
 8004782:	f000 faa1 	bl	8004cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	0109      	lsls	r1, r1, #4
 8004794:	430a      	orrs	r2, r1
 8004796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4953      	ldr	r1, [pc, #332]	; (80048f0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80047a4:	400a      	ands	r2, r1
 80047a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6999      	ldr	r1, [r3, #24]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	021a      	lsls	r2, r3, #8
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	619a      	str	r2, [r3, #24]
      break;
 80047bc:	e088      	b.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	0011      	movs	r1, r2
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 fb02 	bl	8004dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2108      	movs	r1, #8
 80047d8:	430a      	orrs	r2, r1
 80047da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2104      	movs	r1, #4
 80047e8:	438a      	bics	r2, r1
 80047ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69d9      	ldr	r1, [r3, #28]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	61da      	str	r2, [r3, #28]
      break;
 80047fe:	e067      	b.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	0011      	movs	r1, r2
 8004808:	0018      	movs	r0, r3
 800480a:	f000 fb69 	bl	8004ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69da      	ldr	r2, [r3, #28]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	0109      	lsls	r1, r1, #4
 800481c:	430a      	orrs	r2, r1
 800481e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4931      	ldr	r1, [pc, #196]	; (80048f0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800482c:	400a      	ands	r2, r1
 800482e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69d9      	ldr	r1, [r3, #28]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	021a      	lsls	r2, r3, #8
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	61da      	str	r2, [r3, #28]
      break;
 8004844:	e044      	b.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0011      	movs	r1, r2
 800484e:	0018      	movs	r0, r3
 8004850:	f000 fbb0 	bl	8004fb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2108      	movs	r1, #8
 8004860:	430a      	orrs	r2, r1
 8004862:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2104      	movs	r1, #4
 8004870:	438a      	bics	r2, r1
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004886:	e023      	b.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	0011      	movs	r1, r2
 8004890:	0018      	movs	r0, r3
 8004892:	f000 fbef 	bl	8005074 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2180      	movs	r1, #128	; 0x80
 80048a2:	0109      	lsls	r1, r1, #4
 80048a4:	430a      	orrs	r2, r1
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	490f      	ldr	r1, [pc, #60]	; (80048f0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	021a      	lsls	r2, r3, #8
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048cc:	e000      	b.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 80048ce:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	223d      	movs	r2, #61	; 0x3d
 80048d4:	2101      	movs	r1, #1
 80048d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	223c      	movs	r2, #60	; 0x3c
 80048dc:	2100      	movs	r1, #0
 80048de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b004      	add	sp, #16
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	080059f8 	.word	0x080059f8
 80048f0:	fffffbff 	.word	0xfffffbff

080048f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	223c      	movs	r2, #60	; 0x3c
 8004902:	5c9b      	ldrb	r3, [r3, r2]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIM_ConfigClockSource+0x18>
 8004908:	2302      	movs	r3, #2
 800490a:	e0ab      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x170>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	223c      	movs	r2, #60	; 0x3c
 8004910:	2101      	movs	r1, #1
 8004912:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	223d      	movs	r2, #61	; 0x3d
 8004918:	2102      	movs	r1, #2
 800491a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a51      	ldr	r2, [pc, #324]	; (8004a6c <HAL_TIM_ConfigClockSource+0x178>)
 8004928:	4013      	ands	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a50      	ldr	r2, [pc, #320]	; (8004a70 <HAL_TIM_ConfigClockSource+0x17c>)
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b40      	cmp	r3, #64	; 0x40
 8004942:	d100      	bne.n	8004946 <HAL_TIM_ConfigClockSource+0x52>
 8004944:	e06b      	b.n	8004a1e <HAL_TIM_ConfigClockSource+0x12a>
 8004946:	d80e      	bhi.n	8004966 <HAL_TIM_ConfigClockSource+0x72>
 8004948:	2b10      	cmp	r3, #16
 800494a:	d100      	bne.n	800494e <HAL_TIM_ConfigClockSource+0x5a>
 800494c:	e077      	b.n	8004a3e <HAL_TIM_ConfigClockSource+0x14a>
 800494e:	d803      	bhi.n	8004958 <HAL_TIM_ConfigClockSource+0x64>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d100      	bne.n	8004956 <HAL_TIM_ConfigClockSource+0x62>
 8004954:	e073      	b.n	8004a3e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004956:	e07c      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004958:	2b20      	cmp	r3, #32
 800495a:	d100      	bne.n	800495e <HAL_TIM_ConfigClockSource+0x6a>
 800495c:	e06f      	b.n	8004a3e <HAL_TIM_ConfigClockSource+0x14a>
 800495e:	2b30      	cmp	r3, #48	; 0x30
 8004960:	d100      	bne.n	8004964 <HAL_TIM_ConfigClockSource+0x70>
 8004962:	e06c      	b.n	8004a3e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004964:	e075      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004966:	2b70      	cmp	r3, #112	; 0x70
 8004968:	d00e      	beq.n	8004988 <HAL_TIM_ConfigClockSource+0x94>
 800496a:	d804      	bhi.n	8004976 <HAL_TIM_ConfigClockSource+0x82>
 800496c:	2b50      	cmp	r3, #80	; 0x50
 800496e:	d036      	beq.n	80049de <HAL_TIM_ConfigClockSource+0xea>
 8004970:	2b60      	cmp	r3, #96	; 0x60
 8004972:	d044      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004974:	e06d      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	0152      	lsls	r2, r2, #5
 800497a:	4293      	cmp	r3, r2
 800497c:	d068      	beq.n	8004a50 <HAL_TIM_ConfigClockSource+0x15c>
 800497e:	2280      	movs	r2, #128	; 0x80
 8004980:	0192      	lsls	r2, r2, #6
 8004982:	4293      	cmp	r3, r2
 8004984:	d017      	beq.n	80049b6 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8004986:	e064      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6899      	ldr	r1, [r3, #8]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f000 fc4c 	bl	8005234 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2277      	movs	r2, #119	; 0x77
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]
      break;
 80049b4:	e04d      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6899      	ldr	r1, [r3, #8]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f000 fc35 	bl	8005234 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	01c9      	lsls	r1, r1, #7
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
      break;
 80049dc:	e039      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	001a      	movs	r2, r3
 80049ec:	f000 fba6 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2150      	movs	r1, #80	; 0x50
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 fc00 	bl	80051fc <TIM_ITRx_SetConfig>
      break;
 80049fc:	e029      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6859      	ldr	r1, [r3, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	f000 fbc4 	bl	8005198 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2160      	movs	r1, #96	; 0x60
 8004a16:	0018      	movs	r0, r3
 8004a18:	f000 fbf0 	bl	80051fc <TIM_ITRx_SetConfig>
      break;
 8004a1c:	e019      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	f000 fb86 	bl	800513c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2140      	movs	r1, #64	; 0x40
 8004a36:	0018      	movs	r0, r3
 8004a38:	f000 fbe0 	bl	80051fc <TIM_ITRx_SetConfig>
      break;
 8004a3c:	e009      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	0019      	movs	r1, r3
 8004a48:	0010      	movs	r0, r2
 8004a4a:	f000 fbd7 	bl	80051fc <TIM_ITRx_SetConfig>
      break;
 8004a4e:	e000      	b.n	8004a52 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004a50:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	223d      	movs	r2, #61	; 0x3d
 8004a56:	2101      	movs	r1, #1
 8004a58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	223c      	movs	r2, #60	; 0x3c
 8004a5e:	2100      	movs	r1, #0
 8004a60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b004      	add	sp, #16
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	ffceff88 	.word	0xffceff88
 8004a70:	ffff00ff 	.word	0xffff00ff

08004a74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b002      	add	sp, #8
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a8c:	46c0      	nop			; (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aac:	46c0      	nop			; (mov r8, r8)
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a34      	ldr	r2, [pc, #208]	; (8004b98 <TIM_Base_SetConfig+0xe4>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d008      	beq.n	8004ade <TIM_Base_SetConfig+0x2a>
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	2380      	movs	r3, #128	; 0x80
 8004ad0:	05db      	lsls	r3, r3, #23
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d003      	beq.n	8004ade <TIM_Base_SetConfig+0x2a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	; (8004b9c <TIM_Base_SetConfig+0xe8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2270      	movs	r2, #112	; 0x70
 8004ae2:	4393      	bics	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <TIM_Base_SetConfig+0xe4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <TIM_Base_SetConfig+0x76>
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	05db      	lsls	r3, r3, #23
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d013      	beq.n	8004b2a <TIM_Base_SetConfig+0x76>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a25      	ldr	r2, [pc, #148]	; (8004b9c <TIM_Base_SetConfig+0xe8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00f      	beq.n	8004b2a <TIM_Base_SetConfig+0x76>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a24      	ldr	r2, [pc, #144]	; (8004ba0 <TIM_Base_SetConfig+0xec>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00b      	beq.n	8004b2a <TIM_Base_SetConfig+0x76>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a23      	ldr	r2, [pc, #140]	; (8004ba4 <TIM_Base_SetConfig+0xf0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d007      	beq.n	8004b2a <TIM_Base_SetConfig+0x76>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a22      	ldr	r2, [pc, #136]	; (8004ba8 <TIM_Base_SetConfig+0xf4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_Base_SetConfig+0x76>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <TIM_Base_SetConfig+0xf8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d108      	bne.n	8004b3c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <TIM_Base_SetConfig+0xfc>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2280      	movs	r2, #128	; 0x80
 8004b40:	4393      	bics	r3, r2
 8004b42:	001a      	movs	r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a0c      	ldr	r2, [pc, #48]	; (8004b98 <TIM_Base_SetConfig+0xe4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <TIM_Base_SetConfig+0xce>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ba4 <TIM_Base_SetConfig+0xf0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <TIM_Base_SetConfig+0xce>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <TIM_Base_SetConfig+0xf4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_Base_SetConfig+0xce>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a0b      	ldr	r2, [pc, #44]	; (8004bac <TIM_Base_SetConfig+0xf8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d103      	bne.n	8004b8a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	615a      	str	r2, [r3, #20]
}
 8004b90:	46c0      	nop			; (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b004      	add	sp, #16
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40002000 	.word	0x40002000
 8004ba4:	40014000 	.word	0x40014000
 8004ba8:	40014400 	.word	0x40014400
 8004bac:	40014800 	.word	0x40014800
 8004bb0:	fffffcff 	.word	0xfffffcff

08004bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	4393      	bics	r3, r2
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a32      	ldr	r2, [pc, #200]	; (8004cac <TIM_OC1_SetConfig+0xf8>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2203      	movs	r2, #3
 8004bea:	4393      	bics	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	4393      	bics	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a28      	ldr	r2, [pc, #160]	; (8004cb0 <TIM_OC1_SetConfig+0xfc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00b      	beq.n	8004c2a <TIM_OC1_SetConfig+0x76>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <TIM_OC1_SetConfig+0x100>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d007      	beq.n	8004c2a <TIM_OC1_SetConfig+0x76>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a26      	ldr	r2, [pc, #152]	; (8004cb8 <TIM_OC1_SetConfig+0x104>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <TIM_OC1_SetConfig+0x76>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <TIM_OC1_SetConfig+0x108>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10c      	bne.n	8004c44 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	4393      	bics	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2204      	movs	r2, #4
 8004c40:	4393      	bics	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <TIM_OC1_SetConfig+0xfc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <TIM_OC1_SetConfig+0xb0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <TIM_OC1_SetConfig+0x100>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <TIM_OC1_SetConfig+0xb0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <TIM_OC1_SetConfig+0x104>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_OC1_SetConfig+0xb0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <TIM_OC1_SetConfig+0x108>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d111      	bne.n	8004c88 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <TIM_OC1_SetConfig+0x10c>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <TIM_OC1_SetConfig+0x110>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b006      	add	sp, #24
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	fffeff8f 	.word	0xfffeff8f
 8004cb0:	40012c00 	.word	0x40012c00
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800
 8004cc0:	fffffeff 	.word	0xfffffeff
 8004cc4:	fffffdff 	.word	0xfffffdff

08004cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	2210      	movs	r2, #16
 8004cd8:	4393      	bics	r3, r2
 8004cda:	001a      	movs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	; (8004db0 <TIM_OC2_SetConfig+0xe8>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4a2d      	ldr	r2, [pc, #180]	; (8004db4 <TIM_OC2_SetConfig+0xec>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2220      	movs	r2, #32
 8004d12:	4393      	bics	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a24      	ldr	r2, [pc, #144]	; (8004db8 <TIM_OC2_SetConfig+0xf0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10d      	bne.n	8004d46 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2280      	movs	r2, #128	; 0x80
 8004d2e:	4393      	bics	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2240      	movs	r2, #64	; 0x40
 8004d42:	4393      	bics	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <TIM_OC2_SetConfig+0xf0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00b      	beq.n	8004d66 <TIM_OC2_SetConfig+0x9e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <TIM_OC2_SetConfig+0xf4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d007      	beq.n	8004d66 <TIM_OC2_SetConfig+0x9e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <TIM_OC2_SetConfig+0xf8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d003      	beq.n	8004d66 <TIM_OC2_SetConfig+0x9e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a18      	ldr	r2, [pc, #96]	; (8004dc4 <TIM_OC2_SetConfig+0xfc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d113      	bne.n	8004d8e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <TIM_OC2_SetConfig+0x100>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <TIM_OC2_SetConfig+0x104>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	621a      	str	r2, [r3, #32]
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b006      	add	sp, #24
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	feff8fff 	.word	0xfeff8fff
 8004db4:	fffffcff 	.word	0xfffffcff
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800
 8004dc8:	fffffbff 	.word	0xfffffbff
 8004dcc:	fffff7ff 	.word	0xfffff7ff

08004dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	4a35      	ldr	r2, [pc, #212]	; (8004eb4 <TIM_OC3_SetConfig+0xe4>)
 8004de0:	401a      	ands	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a2f      	ldr	r2, [pc, #188]	; (8004eb8 <TIM_OC3_SetConfig+0xe8>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2203      	movs	r2, #3
 8004e04:	4393      	bics	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4a29      	ldr	r2, [pc, #164]	; (8004ebc <TIM_OC3_SetConfig+0xec>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a25      	ldr	r2, [pc, #148]	; (8004ec0 <TIM_OC3_SetConfig+0xf0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10d      	bne.n	8004e4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	4a24      	ldr	r2, [pc, #144]	; (8004ec4 <TIM_OC3_SetConfig+0xf4>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <TIM_OC3_SetConfig+0xf8>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <TIM_OC3_SetConfig+0xf0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_OC3_SetConfig+0x9a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <TIM_OC3_SetConfig+0xfc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <TIM_OC3_SetConfig+0x9a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1c      	ldr	r2, [pc, #112]	; (8004ed0 <TIM_OC3_SetConfig+0x100>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_OC3_SetConfig+0x9a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a1b      	ldr	r2, [pc, #108]	; (8004ed4 <TIM_OC3_SetConfig+0x104>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d113      	bne.n	8004e92 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ed8 <TIM_OC3_SetConfig+0x108>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4a19      	ldr	r2, [pc, #100]	; (8004edc <TIM_OC3_SetConfig+0x10c>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	b006      	add	sp, #24
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	fffffeff 	.word	0xfffffeff
 8004eb8:	fffeff8f 	.word	0xfffeff8f
 8004ebc:	fffffdff 	.word	0xfffffdff
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	fffff7ff 	.word	0xfffff7ff
 8004ec8:	fffffbff 	.word	0xfffffbff
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800
 8004ed8:	ffffefff 	.word	0xffffefff
 8004edc:	ffffdfff 	.word	0xffffdfff

08004ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <TIM_OC4_SetConfig+0xb0>)
 8004ef0:	401a      	ands	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a22      	ldr	r2, [pc, #136]	; (8004f94 <TIM_OC4_SetConfig+0xb4>)
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a21      	ldr	r2, [pc, #132]	; (8004f98 <TIM_OC4_SetConfig+0xb8>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <TIM_OC4_SetConfig+0xbc>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	031b      	lsls	r3, r3, #12
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <TIM_OC4_SetConfig+0xc0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_OC4_SetConfig+0x78>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <TIM_OC4_SetConfig+0xc4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_OC4_SetConfig+0x78>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <TIM_OC4_SetConfig+0xc8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_OC4_SetConfig+0x78>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a16      	ldr	r2, [pc, #88]	; (8004fac <TIM_OC4_SetConfig+0xcc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d109      	bne.n	8004f6c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4a15      	ldr	r2, [pc, #84]	; (8004fb0 <TIM_OC4_SetConfig+0xd0>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b006      	add	sp, #24
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	ffffefff 	.word	0xffffefff
 8004f94:	feff8fff 	.word	0xfeff8fff
 8004f98:	fffffcff 	.word	0xfffffcff
 8004f9c:	ffffdfff 	.word	0xffffdfff
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800
 8004fb0:	ffffbfff 	.word	0xffffbfff

08004fb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a25      	ldr	r2, [pc, #148]	; (8005058 <TIM_OC5_SetConfig+0xa4>)
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4a1f      	ldr	r2, [pc, #124]	; (800505c <TIM_OC5_SetConfig+0xa8>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <TIM_OC5_SetConfig+0xac>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a17      	ldr	r2, [pc, #92]	; (8005064 <TIM_OC5_SetConfig+0xb0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_OC5_SetConfig+0x6e>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a16      	ldr	r2, [pc, #88]	; (8005068 <TIM_OC5_SetConfig+0xb4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_OC5_SetConfig+0x6e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a15      	ldr	r2, [pc, #84]	; (800506c <TIM_OC5_SetConfig+0xb8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC5_SetConfig+0x6e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <TIM_OC5_SetConfig+0xbc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d109      	bne.n	8005036 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4a0c      	ldr	r2, [pc, #48]	; (8005058 <TIM_OC5_SetConfig+0xa4>)
 8005026:	4013      	ands	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	46bd      	mov	sp, r7
 8005054:	b006      	add	sp, #24
 8005056:	bd80      	pop	{r7, pc}
 8005058:	fffeffff 	.word	0xfffeffff
 800505c:	fffeff8f 	.word	0xfffeff8f
 8005060:	fffdffff 	.word	0xfffdffff
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	4a26      	ldr	r2, [pc, #152]	; (800511c <TIM_OC6_SetConfig+0xa8>)
 8005084:	401a      	ands	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a20      	ldr	r2, [pc, #128]	; (8005120 <TIM_OC6_SetConfig+0xac>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4a1c      	ldr	r2, [pc, #112]	; (8005124 <TIM_OC6_SetConfig+0xb0>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	051b      	lsls	r3, r3, #20
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <TIM_OC6_SetConfig+0xb4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <TIM_OC6_SetConfig+0x70>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <TIM_OC6_SetConfig+0xb8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <TIM_OC6_SetConfig+0x70>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <TIM_OC6_SetConfig+0xbc>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_OC6_SetConfig+0x70>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <TIM_OC6_SetConfig+0xc0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d109      	bne.n	80050f8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4a14      	ldr	r2, [pc, #80]	; (8005138 <TIM_OC6_SetConfig+0xc4>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b006      	add	sp, #24
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	ffefffff 	.word	0xffefffff
 8005120:	feff8fff 	.word	0xfeff8fff
 8005124:	ffdfffff 	.word	0xffdfffff
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800
 8005138:	fffbffff 	.word	0xfffbffff

0800513c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	2201      	movs	r2, #1
 8005154:	4393      	bics	r3, r2
 8005156:	001a      	movs	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	22f0      	movs	r2, #240	; 0xf0
 8005166:	4393      	bics	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	220a      	movs	r2, #10
 8005178:	4393      	bics	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	46c0      	nop			; (mov r8, r8)
 8005192:	46bd      	mov	sp, r7
 8005194:	b006      	add	sp, #24
 8005196:	bd80      	pop	{r7, pc}

08005198 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	2210      	movs	r2, #16
 80051aa:	4393      	bics	r3, r2
 80051ac:	001a      	movs	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	4a0d      	ldr	r2, [pc, #52]	; (80051f8 <TIM_TI2_ConfigInputStage+0x60>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	22a0      	movs	r2, #160	; 0xa0
 80051d4:	4393      	bics	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b006      	add	sp, #24
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	ffff0fff 	.word	0xffff0fff

080051fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a08      	ldr	r2, [pc, #32]	; (8005230 <TIM_ITRx_SetConfig+0x34>)
 8005210:	4013      	ands	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	2207      	movs	r2, #7
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	609a      	str	r2, [r3, #8]
}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	b004      	add	sp, #16
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	ffcfff8f 	.word	0xffcfff8f

08005234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <TIM_ETR_SetConfig+0x3c>)
 800524c:	4013      	ands	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	021a      	lsls	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	431a      	orrs	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	46c0      	nop			; (mov r8, r8)
 800526a:	46bd      	mov	sp, r7
 800526c:	b006      	add	sp, #24
 800526e:	bd80      	pop	{r7, pc}
 8005270:	ffff00ff 	.word	0xffff00ff

08005274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	221f      	movs	r2, #31
 8005284:	4013      	ands	r3, r2
 8005286:	2201      	movs	r2, #1
 8005288:	409a      	lsls	r2, r3
 800528a:	0013      	movs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	43d2      	mvns	r2, r2
 8005296:	401a      	ands	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	211f      	movs	r1, #31
 80052a4:	400b      	ands	r3, r1
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4099      	lsls	r1, r3
 80052aa:	000b      	movs	r3, r1
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b006      	add	sp, #24
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	223c      	movs	r2, #60	; 0x3c
 80052ca:	5c9b      	ldrb	r3, [r3, r2]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e040      	b.n	8005356 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	223c      	movs	r2, #60	; 0x3c
 80052d8:	2101      	movs	r1, #1
 80052da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	223d      	movs	r2, #61	; 0x3d
 80052e0:	2102      	movs	r1, #2
 80052e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d108      	bne.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a18      	ldr	r2, [pc, #96]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005302:	4013      	ands	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2270      	movs	r2, #112	; 0x70
 8005314:	4393      	bics	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2280      	movs	r2, #128	; 0x80
 8005326:	4393      	bics	r3, r2
 8005328:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4313      	orrs	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	223d      	movs	r2, #61	; 0x3d
 8005348:	2101      	movs	r1, #1
 800534a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	223c      	movs	r2, #60	; 0x3c
 8005350:	2100      	movs	r1, #0
 8005352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	0018      	movs	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	b004      	add	sp, #16
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	40012c00 	.word	0x40012c00
 8005364:	ff0fffff 	.word	0xff0fffff

08005368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b002      	add	sp, #8
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <LL_EXTI_EnableIT_0_31>:
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80053a0:	4a05      	ldr	r2, [pc, #20]	; (80053b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	58d2      	ldr	r2, [r2, r3]
 80053a6:	4904      	ldr	r1, [pc, #16]	; (80053b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	2280      	movs	r2, #128	; 0x80
 80053ae:	508b      	str	r3, [r1, r2]
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021800 	.word	0x40021800

080053bc <LL_EXTI_EnableIT_32_63>:
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80053c4:	4a05      	ldr	r2, [pc, #20]	; (80053dc <LL_EXTI_EnableIT_32_63+0x20>)
 80053c6:	2390      	movs	r3, #144	; 0x90
 80053c8:	58d2      	ldr	r2, [r2, r3]
 80053ca:	4904      	ldr	r1, [pc, #16]	; (80053dc <LL_EXTI_EnableIT_32_63+0x20>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	2290      	movs	r2, #144	; 0x90
 80053d2:	508b      	str	r3, [r1, r2]
}
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b002      	add	sp, #8
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021800 	.word	0x40021800

080053e0 <LL_EXTI_DisableIT_0_31>:
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80053e8:	4a06      	ldr	r2, [pc, #24]	; (8005404 <LL_EXTI_DisableIT_0_31+0x24>)
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	58d3      	ldr	r3, [r2, r3]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	43d2      	mvns	r2, r2
 80053f2:	4904      	ldr	r1, [pc, #16]	; (8005404 <LL_EXTI_DisableIT_0_31+0x24>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	2280      	movs	r2, #128	; 0x80
 80053f8:	508b      	str	r3, [r1, r2]
}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b002      	add	sp, #8
 8005400:	bd80      	pop	{r7, pc}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	40021800 	.word	0x40021800

08005408 <LL_EXTI_DisableIT_32_63>:
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8005410:	4a06      	ldr	r2, [pc, #24]	; (800542c <LL_EXTI_DisableIT_32_63+0x24>)
 8005412:	2390      	movs	r3, #144	; 0x90
 8005414:	58d3      	ldr	r3, [r2, r3]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	43d2      	mvns	r2, r2
 800541a:	4904      	ldr	r1, [pc, #16]	; (800542c <LL_EXTI_DisableIT_32_63+0x24>)
 800541c:	4013      	ands	r3, r2
 800541e:	2290      	movs	r2, #144	; 0x90
 8005420:	508b      	str	r3, [r1, r2]
}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	46bd      	mov	sp, r7
 8005426:	b002      	add	sp, #8
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	40021800 	.word	0x40021800

08005430 <LL_EXTI_EnableEvent_0_31>:
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005438:	4a05      	ldr	r2, [pc, #20]	; (8005450 <LL_EXTI_EnableEvent_0_31+0x20>)
 800543a:	2384      	movs	r3, #132	; 0x84
 800543c:	58d2      	ldr	r2, [r2, r3]
 800543e:	4904      	ldr	r1, [pc, #16]	; (8005450 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4313      	orrs	r3, r2
 8005444:	2284      	movs	r2, #132	; 0x84
 8005446:	508b      	str	r3, [r1, r2]
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	b002      	add	sp, #8
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021800 	.word	0x40021800

08005454 <LL_EXTI_EnableEvent_32_63>:
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800545c:	4a05      	ldr	r2, [pc, #20]	; (8005474 <LL_EXTI_EnableEvent_32_63+0x20>)
 800545e:	2394      	movs	r3, #148	; 0x94
 8005460:	58d2      	ldr	r2, [r2, r3]
 8005462:	4904      	ldr	r1, [pc, #16]	; (8005474 <LL_EXTI_EnableEvent_32_63+0x20>)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4313      	orrs	r3, r2
 8005468:	2294      	movs	r2, #148	; 0x94
 800546a:	508b      	str	r3, [r1, r2]
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b002      	add	sp, #8
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021800 	.word	0x40021800

08005478 <LL_EXTI_DisableEvent_0_31>:
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005480:	4a06      	ldr	r2, [pc, #24]	; (800549c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005482:	2384      	movs	r3, #132	; 0x84
 8005484:	58d3      	ldr	r3, [r2, r3]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	43d2      	mvns	r2, r2
 800548a:	4904      	ldr	r1, [pc, #16]	; (800549c <LL_EXTI_DisableEvent_0_31+0x24>)
 800548c:	4013      	ands	r3, r2
 800548e:	2284      	movs	r2, #132	; 0x84
 8005490:	508b      	str	r3, [r1, r2]
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b002      	add	sp, #8
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	40021800 	.word	0x40021800

080054a0 <LL_EXTI_DisableEvent_32_63>:
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80054a8:	4a06      	ldr	r2, [pc, #24]	; (80054c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80054aa:	2394      	movs	r3, #148	; 0x94
 80054ac:	58d3      	ldr	r3, [r2, r3]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	43d2      	mvns	r2, r2
 80054b2:	4904      	ldr	r1, [pc, #16]	; (80054c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	2294      	movs	r2, #148	; 0x94
 80054b8:	508b      	str	r3, [r1, r2]
}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	46bd      	mov	sp, r7
 80054be:	b002      	add	sp, #8
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	40021800 	.word	0x40021800

080054c8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	430a      	orrs	r2, r1
 80054da:	601a      	str	r2, [r3, #0]
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b002      	add	sp, #8
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021800 	.word	0x40021800

080054e8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	43d9      	mvns	r1, r3
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80054fa:	400a      	ands	r2, r1
 80054fc:	601a      	str	r2, [r3, #0]
}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	46bd      	mov	sp, r7
 8005502:	b002      	add	sp, #8
 8005504:	bd80      	pop	{r7, pc}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	40021800 	.word	0x40021800

0800550c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005516:	6859      	ldr	r1, [r3, #4]
 8005518:	4b03      	ldr	r3, [pc, #12]	; (8005528 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021800 	.word	0x40021800

0800552c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	43d9      	mvns	r1, r3
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800553e:	400a      	ands	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	b002      	add	sp, #8
 8005548:	bd80      	pop	{r7, pc}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	40021800 	.word	0x40021800

08005550 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7a1b      	ldrb	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d100      	bne.n	8005566 <LL_EXTI_Init+0x16>
 8005564:	e095      	b.n	8005692 <LL_EXTI_Init+0x142>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d05d      	beq.n	800562a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	7a5b      	ldrb	r3, [r3, #9]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d00e      	beq.n	8005594 <LL_EXTI_Init+0x44>
 8005576:	2b02      	cmp	r3, #2
 8005578:	d017      	beq.n	80055aa <LL_EXTI_Init+0x5a>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d120      	bne.n	80055c0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	0018      	movs	r0, r3
 8005584:	f7ff ff78 	bl	8005478 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	0018      	movs	r0, r3
 800558e:	f7ff ff03 	bl	8005398 <LL_EXTI_EnableIT_0_31>
          break;
 8005592:	e018      	b.n	80055c6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	0018      	movs	r0, r3
 800559a:	f7ff ff21 	bl	80053e0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	0018      	movs	r0, r3
 80055a4:	f7ff ff44 	bl	8005430 <LL_EXTI_EnableEvent_0_31>
          break;
 80055a8:	e00d      	b.n	80055c6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	0018      	movs	r0, r3
 80055b0:	f7ff fef2 	bl	8005398 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0018      	movs	r0, r3
 80055ba:	f7ff ff39 	bl	8005430 <LL_EXTI_EnableEvent_0_31>
          break;
 80055be:	e002      	b.n	80055c6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80055c0:	2301      	movs	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
          break;
 80055c4:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	7a9b      	ldrb	r3, [r3, #10]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d02d      	beq.n	800562a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7a9b      	ldrb	r3, [r3, #10]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d00e      	beq.n	80055f4 <LL_EXTI_Init+0xa4>
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d017      	beq.n	800560a <LL_EXTI_Init+0xba>
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d120      	bne.n	8005620 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	0018      	movs	r0, r3
 80055e4:	f7ff ffa2 	bl	800552c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	0018      	movs	r0, r3
 80055ee:	f7ff ff6b 	bl	80054c8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80055f2:	e01b      	b.n	800562c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7ff ff75 	bl	80054e8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	0018      	movs	r0, r3
 8005604:	f7ff ff82 	bl	800550c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005608:	e010      	b.n	800562c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	0018      	movs	r0, r3
 8005610:	f7ff ff5a 	bl	80054c8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	0018      	movs	r0, r3
 800561a:	f7ff ff77 	bl	800550c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800561e:	e005      	b.n	800562c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2202      	movs	r2, #2
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
            break;
 8005628:	e000      	b.n	800562c <LL_EXTI_Init+0xdc>
        }
      }
 800562a:	46c0      	nop			; (mov r8, r8)
    }
#if defined(STM32G081xx) || defined(STM32G071xx)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d043      	beq.n	80056bc <LL_EXTI_Init+0x16c>
    {
      switch (EXTI_InitStruct->Mode)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	7a5b      	ldrb	r3, [r3, #9]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d00e      	beq.n	800565a <LL_EXTI_Init+0x10a>
 800563c:	2b02      	cmp	r3, #2
 800563e:	d017      	beq.n	8005670 <LL_EXTI_Init+0x120>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d120      	bne.n	8005686 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	0018      	movs	r0, r3
 800564a:	f7ff ff29 	bl	80054a0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	0018      	movs	r0, r3
 8005654:	f7ff feb2 	bl	80053bc <LL_EXTI_EnableIT_32_63>
          break;
 8005658:	e031      	b.n	80056be <LL_EXTI_Init+0x16e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	0018      	movs	r0, r3
 8005660:	f7ff fed2 	bl	8005408 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	0018      	movs	r0, r3
 800566a:	f7ff fef3 	bl	8005454 <LL_EXTI_EnableEvent_32_63>
          break;
 800566e:	e026      	b.n	80056be <LL_EXTI_Init+0x16e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff fea1 	bl	80053bc <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f7ff fee8 	bl	8005454 <LL_EXTI_EnableEvent_32_63>
          break;
 8005684:	e01b      	b.n	80056be <LL_EXTI_Init+0x16e>
        default:
          status |= 0x04u;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2204      	movs	r2, #4
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
          break;
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	e015      	b.n	80056be <LL_EXTI_Init+0x16e>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	0018      	movs	r0, r3
 8005698:	f7ff fea2 	bl	80053e0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7ff fee9 	bl	8005478 <LL_EXTI_DisableEvent_0_31>
#if defined(STM32G081xx) || defined(STM32G071xx)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f7ff feac 	bl	8005408 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7ff fef3 	bl	80054a0 <LL_EXTI_DisableEvent_32_63>
 80056ba:	e000      	b.n	80056be <LL_EXTI_Init+0x16e>
    }
 80056bc:	46c0      	nop			; (mov r8, r8)
#endif
  }

  return status;
 80056be:	68fb      	ldr	r3, [r7, #12]
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b004      	add	sp, #16
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <LL_GPIO_SetPinMode>:
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6819      	ldr	r1, [r3, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	435a      	muls	r2, r3
 80056de:	0013      	movs	r3, r2
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	43db      	mvns	r3, r3
 80056e6:	400b      	ands	r3, r1
 80056e8:	001a      	movs	r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	434b      	muls	r3, r1
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	434b      	muls	r3, r1
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b004      	add	sp, #16
 8005700:	bd80      	pop	{r7, pc}

08005702 <LL_GPIO_SetPinOutputType>:
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	43d2      	mvns	r2, r2
 8005716:	401a      	ands	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	434b      	muls	r3, r1
 800571e:	431a      	orrs	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	605a      	str	r2, [r3, #4]
}
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	46bd      	mov	sp, r7
 8005728:	b004      	add	sp, #16
 800572a:	bd80      	pop	{r7, pc}

0800572c <LL_GPIO_SetPinSpeed>:
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6899      	ldr	r1, [r3, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	435a      	muls	r2, r3
 8005742:	0013      	movs	r3, r2
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	189b      	adds	r3, r3, r2
 8005748:	43db      	mvns	r3, r3
 800574a:	400b      	ands	r3, r1
 800574c:	001a      	movs	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	434b      	muls	r3, r1
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	434b      	muls	r3, r1
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	609a      	str	r2, [r3, #8]
}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	46bd      	mov	sp, r7
 8005762:	b004      	add	sp, #16
 8005764:	bd80      	pop	{r7, pc}

08005766 <LL_GPIO_SetPinPull>:
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b084      	sub	sp, #16
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68d9      	ldr	r1, [r3, #12]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	435a      	muls	r2, r3
 800577c:	0013      	movs	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	189b      	adds	r3, r3, r2
 8005782:	43db      	mvns	r3, r3
 8005784:	400b      	ands	r3, r1
 8005786:	001a      	movs	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	434b      	muls	r3, r1
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	434b      	muls	r3, r1
 8005792:	431a      	orrs	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	60da      	str	r2, [r3, #12]
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	b004      	add	sp, #16
 800579e:	bd80      	pop	{r7, pc}

080057a0 <LL_GPIO_SetAFPin_0_7>:
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a19      	ldr	r1, [r3, #32]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4353      	muls	r3, r2
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4353      	muls	r3, r2
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	435a      	muls	r2, r3
 80057be:	0013      	movs	r3, r2
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	43db      	mvns	r3, r3
 80057c6:	400b      	ands	r3, r1
 80057c8:	001a      	movs	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	434b      	muls	r3, r1
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	434b      	muls	r3, r1
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	434b      	muls	r3, r1
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	434b      	muls	r3, r1
 80057dc:	431a      	orrs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b004      	add	sp, #16
 80057e8:	bd80      	pop	{r7, pc}

080057ea <LL_GPIO_SetAFPin_8_15>:
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	0a1b      	lsrs	r3, r3, #8
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	0a12      	lsrs	r2, r2, #8
 8005802:	4353      	muls	r3, r2
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	0a12      	lsrs	r2, r2, #8
 8005808:	4353      	muls	r3, r2
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	0a12      	lsrs	r2, r2, #8
 800580e:	435a      	muls	r2, r3
 8005810:	0013      	movs	r3, r2
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	43db      	mvns	r3, r3
 8005818:	400b      	ands	r3, r1
 800581a:	001a      	movs	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	0a1b      	lsrs	r3, r3, #8
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	0a09      	lsrs	r1, r1, #8
 8005824:	434b      	muls	r3, r1
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	0a09      	lsrs	r1, r1, #8
 800582a:	434b      	muls	r3, r1
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	0a09      	lsrs	r1, r1, #8
 8005830:	434b      	muls	r3, r1
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	434b      	muls	r3, r1
 8005836:	431a      	orrs	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	46bd      	mov	sp, r7
 8005840:	b004      	add	sp, #16
 8005842:	bd80      	pop	{r7, pc}

08005844 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005852:	e040      	b.n	80058d6 <LL_GPIO_Init+0x92>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2101      	movs	r1, #1
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4091      	lsls	r1, r2
 800585e:	000a      	movs	r2, r1
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d032      	beq.n	80058d0 <LL_GPIO_Init+0x8c>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	0018      	movs	r0, r3
 8005874:	f7ff ff28 	bl	80056c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d003      	beq.n	8005888 <LL_GPIO_Init+0x44>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d106      	bne.n	8005896 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff ff4b 	bl	800572c <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	691a      	ldr	r2, [r3, #16]
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	0018      	movs	r0, r3
 80058a0:	f7ff ff61 	bl	8005766 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d111      	bne.n	80058d0 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2bff      	cmp	r3, #255	; 0xff
 80058b0:	d807      	bhi.n	80058c2 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7ff ff70 	bl	80057a0 <LL_GPIO_SetAFPin_0_7>
 80058c0:	e006      	b.n	80058d0 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff ff8d 	bl	80057ea <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3301      	adds	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	40da      	lsrs	r2, r3
 80058de:	1e13      	subs	r3, r2, #0
 80058e0:	d1b8      	bne.n	8005854 <LL_GPIO_Init+0x10>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d003      	beq.n	80058f2 <LL_GPIO_Init+0xae>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d107      	bne.n	8005902 <LL_GPIO_Init+0xbe>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6819      	ldr	r1, [r3, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7ff ff00 	bl	8005702 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005902:	2300      	movs	r3, #0
}
 8005904:	0018      	movs	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	b004      	add	sp, #16
 800590a:	bd80      	pop	{r7, pc}

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	2600      	movs	r6, #0
 8005910:	4d0c      	ldr	r5, [pc, #48]	; (8005944 <__libc_init_array+0x38>)
 8005912:	4c0d      	ldr	r4, [pc, #52]	; (8005948 <__libc_init_array+0x3c>)
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	42a6      	cmp	r6, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	2600      	movs	r6, #0
 800591e:	f000 f821 	bl	8005964 <_init>
 8005922:	4d0a      	ldr	r5, [pc, #40]	; (800594c <__libc_init_array+0x40>)
 8005924:	4c0a      	ldr	r4, [pc, #40]	; (8005950 <__libc_init_array+0x44>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	42a6      	cmp	r6, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	00b3      	lsls	r3, r6, #2
 8005932:	58eb      	ldr	r3, [r5, r3]
 8005934:	4798      	blx	r3
 8005936:	3601      	adds	r6, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	00b3      	lsls	r3, r6, #2
 800593c:	58eb      	ldr	r3, [r5, r3]
 800593e:	4798      	blx	r3
 8005940:	3601      	adds	r6, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08005a4c 	.word	0x08005a4c
 8005948:	08005a4c 	.word	0x08005a4c
 800594c:	08005a4c 	.word	0x08005a4c
 8005950:	08005a50 	.word	0x08005a50

08005954 <memset>:
 8005954:	0003      	movs	r3, r0
 8005956:	1812      	adds	r2, r2, r0
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	7019      	strb	r1, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <_init>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr

08005970 <_fini>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr
