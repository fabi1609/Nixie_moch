
nixie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004450  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c8  080045c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080045c8  080045c8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045c8  080045c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000010  080045e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080045e0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3c6  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002535  00000000  00000000  0002e3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc0  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c68  00000000  00000000  000316f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d0d  00000000  00000000  00032360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ce3c  00000000  00000000  0004b06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009ba3e  00000000  00000000  00057ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f38e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f58  00000000  00000000  000f3964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080044f4 	.word	0x080044f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080044f4 	.word	0x080044f4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <MX_COMP2_Init+0x58>)
 8000222:	4a15      	ldr	r2, [pc, #84]	; (8000278 <MX_COMP2_Init+0x5c>)
 8000224:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO3;
 8000226:	4b13      	ldr	r3, [pc, #76]	; (8000274 <MX_COMP2_Init+0x58>)
 8000228:	2280      	movs	r2, #128	; 0x80
 800022a:	0092      	lsls	r2, r2, #2
 800022c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC1_CH1;
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_COMP2_Init+0x58>)
 8000230:	2240      	movs	r2, #64	; 0x40
 8000232:	615a      	str	r2, [r3, #20]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <MX_COMP2_Init+0x58>)
 8000236:	2200      	movs	r2, #0
 8000238:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_COMP2_Init+0x58>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_COMP2_Init+0x58>)
 8000242:	2200      	movs	r2, #0
 8000244:	619a      	str	r2, [r3, #24]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <MX_COMP2_Init+0x58>)
 8000248:	2200      	movs	r2, #0
 800024a:	621a      	str	r2, [r3, #32]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_COMP2_Init+0x58>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <MX_COMP2_Init+0x58>)
 8000254:	2200      	movs	r2, #0
 8000256:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_COMP2_Init+0x58>)
 800025a:	2200      	movs	r2, #0
 800025c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <MX_COMP2_Init+0x58>)
 8000260:	0018      	movs	r0, r3
 8000262:	f001 f8c3 	bl	80013ec <HAL_COMP_Init>
 8000266:	1e03      	subs	r3, r0, #0
 8000268:	d001      	beq.n	800026e <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 800026a:	f000 fa07 	bl	800067c <Error_Handler>
  }

}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	20000034 	.word	0x20000034
 8000278:	40010204 	.word	0x40010204

0800027c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	230c      	movs	r3, #12
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f004 f928 	bl	80044e4 <memset>
  if(compHandle->Instance==COMP2)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <HAL_COMP_MspInit+0x64>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d11c      	bne.n	80002d8 <HAL_COMP_MspInit+0x5c>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002a4:	2101      	movs	r1, #1
 80002a6:	430a      	orrs	r2, r1
 80002a8:	635a      	str	r2, [r3, #52]	; 0x34
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <HAL_COMP_MspInit+0x68>)
 80002ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ae:	2201      	movs	r2, #1
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
 80002b4:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration    
    PA3     ------> COMP2_INP 
    */
    GPIO_InitStruct.Pin = FB_170V_Pin;
 80002b6:	210c      	movs	r1, #12
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2208      	movs	r2, #8
 80002bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2203      	movs	r2, #3
 80002c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(FB_170V_GPIO_Port, &GPIO_InitStruct);
 80002ca:	187a      	adds	r2, r7, r1
 80002cc:	23a0      	movs	r3, #160	; 0xa0
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 fcda 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b008      	add	sp, #32
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40010204 	.word	0x40010204
 80002e4:	40021000 	.word	0x40021000

080002e8 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2324      	movs	r3, #36	; 0x24
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f004 f8f4 	bl	80044e4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_DAC1_Init+0x64>)
 80002fe:	4a14      	ldr	r2, [pc, #80]	; (8000350 <MX_DAC1_Init+0x68>)
 8000300:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_DAC1_Init+0x64>)
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fb0f 	bl	8001928 <HAL_DAC_Init>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800030e:	f000 f9b5 	bl	800067c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2202      	movs	r2, #2
 8000322:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2201      	movs	r2, #1
 8000328:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000330:	1d39      	adds	r1, r7, #4
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_DAC1_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	0018      	movs	r0, r3
 8000338:	f001 fb8a 	bl	8001a50 <HAL_DAC_ConfigChannel>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8000340:	f000 f99c 	bl	800067c <Error_Handler>
  }

}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b00a      	add	sp, #40	; 0x28
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000064 	.word	0x20000064
 8000350:	40007400 	.word	0x40007400

08000354 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]

  if(dacHandle->Instance==DAC1)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <HAL_DAC_MspInit+0x38>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d10d      	bne.n	8000382 <HAL_DAC_MspInit+0x2e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 8000368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 800036c:	2180      	movs	r1, #128	; 0x80
 800036e:	0589      	lsls	r1, r1, #22
 8000370:	430a      	orrs	r2, r1
 8000372:	63da      	str	r2, [r3, #60]	; 0x3c
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <HAL_DAC_MspInit+0x3c>)
 8000376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000378:	2380      	movs	r3, #128	; 0x80
 800037a:	059b      	lsls	r3, r3, #22
 800037c:	4013      	ands	r3, r2
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b004      	add	sp, #16
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	40007400 	.word	0x40007400
 8000390:	40021000 	.word	0x40021000

08000394 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000394:	b590      	push	{r4, r7, lr}
 8000396:	b08b      	sub	sp, #44	; 0x2c
 8000398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	2414      	movs	r4, #20
 800039c:	193b      	adds	r3, r7, r4
 800039e:	0018      	movs	r0, r3
 80003a0:	2314      	movs	r3, #20
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f004 f89d 	bl	80044e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003aa:	4b5f      	ldr	r3, [pc, #380]	; (8000528 <MX_GPIO_Init+0x194>)
 80003ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003ae:	4b5e      	ldr	r3, [pc, #376]	; (8000528 <MX_GPIO_Init+0x194>)
 80003b0:	2104      	movs	r1, #4
 80003b2:	430a      	orrs	r2, r1
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
 80003b6:	4b5c      	ldr	r3, [pc, #368]	; (8000528 <MX_GPIO_Init+0x194>)
 80003b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ba:	2204      	movs	r2, #4
 80003bc:	4013      	ands	r3, r2
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003c2:	4b59      	ldr	r3, [pc, #356]	; (8000528 <MX_GPIO_Init+0x194>)
 80003c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003c6:	4b58      	ldr	r3, [pc, #352]	; (8000528 <MX_GPIO_Init+0x194>)
 80003c8:	2120      	movs	r1, #32
 80003ca:	430a      	orrs	r2, r1
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34
 80003ce:	4b56      	ldr	r3, [pc, #344]	; (8000528 <MX_GPIO_Init+0x194>)
 80003d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d2:	2220      	movs	r2, #32
 80003d4:	4013      	ands	r3, r2
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b53      	ldr	r3, [pc, #332]	; (8000528 <MX_GPIO_Init+0x194>)
 80003dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003de:	4b52      	ldr	r3, [pc, #328]	; (8000528 <MX_GPIO_Init+0x194>)
 80003e0:	2101      	movs	r1, #1
 80003e2:	430a      	orrs	r2, r1
 80003e4:	635a      	str	r2, [r3, #52]	; 0x34
 80003e6:	4b50      	ldr	r3, [pc, #320]	; (8000528 <MX_GPIO_Init+0x194>)
 80003e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ea:	2201      	movs	r2, #1
 80003ec:	4013      	ands	r3, r2
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f2:	4b4d      	ldr	r3, [pc, #308]	; (8000528 <MX_GPIO_Init+0x194>)
 80003f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f6:	4b4c      	ldr	r3, [pc, #304]	; (8000528 <MX_GPIO_Init+0x194>)
 80003f8:	2108      	movs	r1, #8
 80003fa:	430a      	orrs	r2, r1
 80003fc:	635a      	str	r2, [r3, #52]	; 0x34
 80003fe:	4b4a      	ldr	r3, [pc, #296]	; (8000528 <MX_GPIO_Init+0x194>)
 8000400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000402:	2208      	movs	r2, #8
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b47      	ldr	r3, [pc, #284]	; (8000528 <MX_GPIO_Init+0x194>)
 800040c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040e:	4b46      	ldr	r3, [pc, #280]	; (8000528 <MX_GPIO_Init+0x194>)
 8000410:	2102      	movs	r1, #2
 8000412:	430a      	orrs	r2, r1
 8000414:	635a      	str	r2, [r3, #52]	; 0x34
 8000416:	4b44      	ldr	r3, [pc, #272]	; (8000528 <MX_GPIO_Init+0x194>)
 8000418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041a:	2202      	movs	r2, #2
 800041c:	4013      	ands	r3, r2
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GN1_Pin|GN2_Pin|G1_Pin|GDOT_Pin 
 8000422:	23a0      	movs	r3, #160	; 0xa0
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	2200      	movs	r2, #0
 8000428:	2173      	movs	r1, #115	; 0x73
 800042a:	0018      	movs	r0, r3
 800042c:	f001 fd92 	bl	8001f54 <HAL_GPIO_WritePin>
                          |G3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GN3_Pin|G2_Pin|G4_Pin, GPIO_PIN_RESET);
 8000430:	4b3e      	ldr	r3, [pc, #248]	; (800052c <MX_GPIO_Init+0x198>)
 8000432:	2200      	movs	r2, #0
 8000434:	210e      	movs	r1, #14
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fd8c 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G5_Pin|G6_Pin|GN4_Pin|G0_Pin 
 800043c:	23fe      	movs	r3, #254	; 0xfe
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	483b      	ldr	r0, [pc, #236]	; (8000530 <MX_GPIO_Init+0x19c>)
 8000442:	2200      	movs	r2, #0
 8000444:	0019      	movs	r1, r3
 8000446:	f001 fd85 	bl	8001f54 <HAL_GPIO_WritePin>
                          |G9_Pin|G8_Pin|G7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2_Pin;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0192      	lsls	r2, r2, #6
 8000450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2201      	movs	r2, #1
 800045c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 800045e:	193b      	adds	r3, r7, r4
 8000460:	4a34      	ldr	r2, [pc, #208]	; (8000534 <MX_GPIO_Init+0x1a0>)
 8000462:	0019      	movs	r1, r3
 8000464:	0010      	movs	r0, r2
 8000466:	f001 fc11 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2204      	movs	r2, #4
 800046e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 800047c:	193b      	adds	r3, r7, r4
 800047e:	4a2e      	ldr	r2, [pc, #184]	; (8000538 <MX_GPIO_Init+0x1a4>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f001 fc02 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = GN1_Pin|GN2_Pin|G1_Pin|GDOT_Pin 
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2273      	movs	r2, #115	; 0x73
 800048c:	601a      	str	r2, [r3, #0]
                          |G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2201      	movs	r2, #1
 8000492:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	193a      	adds	r2, r7, r4
 80004a2:	23a0      	movs	r3, #160	; 0xa0
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fbef 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S1_Pin;
 80004ae:	0021      	movs	r1, r4
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2201      	movs	r2, #1
 80004b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2201      	movs	r2, #1
 80004c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80004c2:	000c      	movs	r4, r1
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	4a19      	ldr	r2, [pc, #100]	; (800052c <MX_GPIO_Init+0x198>)
 80004c8:	0019      	movs	r1, r3
 80004ca:	0010      	movs	r0, r2
 80004cc:	f001 fbde 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GN3_Pin|G2_Pin|G4_Pin;
 80004d0:	0021      	movs	r1, r4
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	220e      	movs	r2, #14
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004ea:	000c      	movs	r4, r1
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	4a0f      	ldr	r2, [pc, #60]	; (800052c <MX_GPIO_Init+0x198>)
 80004f0:	0019      	movs	r1, r3
 80004f2:	0010      	movs	r0, r2
 80004f4:	f001 fbca 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G5_Pin|G6_Pin|GN4_Pin|G0_Pin 
 80004f8:	0021      	movs	r1, r4
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	22fe      	movs	r2, #254	; 0xfe
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	601a      	str	r2, [r3, #0]
                          |G9_Pin|G8_Pin|G7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2201      	movs	r2, #1
 8000506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	187b      	adds	r3, r7, r1
 8000516:	4a06      	ldr	r2, [pc, #24]	; (8000530 <MX_GPIO_Init+0x19c>)
 8000518:	0019      	movs	r1, r3
 800051a:	0010      	movs	r0, r2
 800051c:	f001 fbb6 	bl	8001c8c <HAL_GPIO_Init>

}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b00b      	add	sp, #44	; 0x2c
 8000526:	bd90      	pop	{r4, r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	50000c00 	.word	0x50000c00
 8000530:	50000400 	.word	0x50000400
 8000534:	50000800 	.word	0x50000800
 8000538:	50001400 	.word	0x50001400

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fde0 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f814 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f7ff ff24 	bl	8000394 <MX_GPIO_Init>
  MX_COMP2_Init();
 800054c:	f7ff fe66 	bl	800021c <MX_COMP2_Init>
  MX_DAC1_Init();
 8000550:	f7ff feca 	bl	80002e8 <MX_DAC1_Init>
  MX_RTC_Init();
 8000554:	f000 fa7c 	bl	8000a50 <MX_RTC_Init>
  MX_TIM2_Init();
 8000558:	f000 fb88 	bl	8000c6c <MX_TIM2_Init>
  MX_TIM14_Init();
 800055c:	f000 fc0c 	bl	8000d78 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000560:	f000 fc30 	bl	8000dc4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  nixie_init();
 8000564:	f000 f8c8 	bl	80006f8 <nixie_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  boost_op();
 8000568:	f000 f8f6 	bl	8000758 <boost_op>
 800056c:	e7fc      	b.n	8000568 <main+0x2c>
	...

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b0a1      	sub	sp, #132	; 0x84
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	2448      	movs	r4, #72	; 0x48
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0018      	movs	r0, r3
 800057c:	2338      	movs	r3, #56	; 0x38
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f003 ffaf 	bl	80044e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000586:	2338      	movs	r3, #56	; 0x38
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	0018      	movs	r0, r3
 800058c:	2310      	movs	r3, #16
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f003 ffa7 	bl	80044e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	0018      	movs	r0, r3
 800059a:	2334      	movs	r3, #52	; 0x34
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f003 ffa0 	bl	80044e4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fcf1 	bl	8001f90 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ae:	4b32      	ldr	r3, [pc, #200]	; (8000678 <SystemClock_Config+0x108>)
 80005b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005b2:	4b31      	ldr	r3, [pc, #196]	; (8000678 <SystemClock_Config+0x108>)
 80005b4:	2118      	movs	r1, #24
 80005b6:	438a      	bics	r2, r1
 80005b8:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2206      	movs	r2, #6
 80005be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2201      	movs	r2, #1
 80005c4:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	0052      	lsls	r2, r2, #1
 80005cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005ce:	0021      	movs	r1, r4
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2240      	movs	r2, #64	; 0x40
 80005da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2202      	movs	r2, #2
 80005e0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2202      	movs	r2, #2
 80005e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2208      	movs	r2, #8
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	0292      	lsls	r2, r2, #10
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	0492      	lsls	r2, r2, #18
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2280      	movs	r2, #128	; 0x80
 8000608:	0592      	lsls	r2, r2, #22
 800060a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	187b      	adds	r3, r7, r1
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fcfe 	bl	8002010 <HAL_RCC_OscConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000618:	f000 f830 	bl	800067c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	2138      	movs	r1, #56	; 0x38
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2207      	movs	r2, #7
 8000622:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2202      	movs	r2, #2
 8000628:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2102      	movs	r1, #2
 800063a:	0018      	movs	r0, r3
 800063c:	f002 f808 	bl	8002650 <HAL_RCC_ClockConfig>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000644:	f000 f81a 	bl	800067c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM15;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2284      	movs	r2, #132	; 0x84
 800064c:	03d2      	lsls	r2, r2, #15
 800064e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	0052      	lsls	r2, r2, #1
 800065c:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	f002 f97f 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800066a:	f000 f807 	bl	800067c <Error_Handler>
  }
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b021      	add	sp, #132	; 0x84
 8000674:	bd90      	pop	{r4, r7, pc}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	40021000 	.word	0x40021000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_TIM_PeriodElapsedCallback>:
static void nixie_display();
static void nixie_display_reset_all();
static void nixie_display_set_anode(uint8_t n);

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d103      	bne.n	80006a4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		//End of boost converter pulse. Set flag to poll the feedback comparator of boost converter again
		poll_comp = true;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
		{
			dac_value = dac_value + 5;
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
		}
	}
}
 80006a2:	e018      	b.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if(htim->Instance == htim14.Instance)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d112      	bne.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		nixie_display();
 80006b0:	f000 f874 	bl	800079c <nixie_display>
		if(dac_value < DAC_TARGET)
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d80b      	bhi.n	80006d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			dac_value = dac_value + 5;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1d5a      	adds	r2, r3, #5
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006c6:	601a      	str	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	f001 f99b 	bl	8001a0c <HAL_DAC_SetValue>
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	200000e4 	.word	0x200000e4
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000124 	.word	0x20000124
 80006ec:	2000002c 	.word	0x2000002c
 80006f0:	00000a27 	.word	0x00000a27
 80006f4:	20000064 	.word	0x20000064

080006f8 <nixie_init>:

void nixie_init()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	//Start DAC for feedback voltage of boost converter
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <nixie_init+0x4c>)
 80006fe:	2100      	movs	r1, #0
 8000700:	0018      	movs	r0, r3
 8000702:	f001 f934 	bl	800196e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <nixie_init+0x50>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <nixie_init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	f001 f97c 	bl	8001a0c <HAL_DAC_SetValue>
	HAL_COMP_Start(&hcomp2);
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <nixie_init+0x54>)
 8000716:	0018      	movs	r0, r3
 8000718:	f000 ffc8 	bl	80016ac <HAL_COMP_Start>
	//Enable one pulse mode for boost converter. Trigger by software trough HAL_TIM_Base_Start
	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_1);
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <nixie_init+0x58>)
 800071e:	2100      	movs	r1, #0
 8000720:	0018      	movs	r0, r3
 8000722:	f002 fe51 	bl	80033c8 <HAL_TIM_OnePulse_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <nixie_init+0x58>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <nixie_init+0x58>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	60da      	str	r2, [r3, #12]
	//Start timer and period elapsed event of multiplex timer for nixie tubes
	HAL_TIM_Base_Start_IT(&htim14);
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <nixie_init+0x5c>)
 8000738:	0018      	movs	r0, r3
 800073a:	f002 fda1 	bl	8003280 <HAL_TIM_Base_Start_IT>
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000064 	.word	0x20000064
 8000748:	2000002c 	.word	0x2000002c
 800074c:	20000034 	.word	0x20000034
 8000750:	200000e4 	.word	0x200000e4
 8000754:	20000124 	.word	0x20000124

08000758 <boost_op>:

void boost_op()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	/*static uint32_t comp = 1;
	comp = HAL_COMP_GetOutputLevel(&hcomp2);*/
	if(poll_comp)
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <boost_op+0x38>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d010      	beq.n	8000788 <boost_op+0x30>
	{
		//If voltage lower than feedback, activate next pulse of boost converter and switch off polling the comparator
		if(HAL_COMP_GetOutputLevel(&hcomp2) == COMP_OUTPUT_LEVEL_LOW)
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <boost_op+0x3c>)
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fff1 	bl	8001750 <HAL_COMP_GetOutputLevel>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d10a      	bne.n	8000788 <boost_op+0x30>
		{
			//HAL_Delay(1);
			poll_comp = false;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <boost_op+0x38>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
			//HAL_TIM_Base_Start_IT(&htim2);
			__HAL_TIM_ENABLE(&htim2);
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <boost_op+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <boost_op+0x40>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2101      	movs	r1, #1
 8000784:	430a      	orrs	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	20000000 	.word	0x20000000
 8000794:	20000034 	.word	0x20000034
 8000798:	200000e4 	.word	0x200000e4

0800079c <nixie_display>:
	minutes = m;
	seconds = s;
}

static void nixie_display()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	nixie_display_reset_all();
 80007a0:	f000 f88e 	bl	80008c0 <nixie_display_reset_all>
	switch(digit)
 80007a4:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <nixie_display+0x10c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d01f      	beq.n	80007ee <nixie_display+0x52>
 80007ae:	dc02      	bgt.n	80007b6 <nixie_display+0x1a>
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d005      	beq.n	80007c0 <nixie_display+0x24>
 80007b4:	e05e      	b.n	8000874 <nixie_display+0xd8>
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d030      	beq.n	800081c <nixie_display+0x80>
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d044      	beq.n	8000848 <nixie_display+0xac>
 80007be:	e059      	b.n	8000874 <nixie_display+0xd8>
	{
	case 0:
		nixie_display_set_anode(hours/10);
 80007c0:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <nixie_display+0x110>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	210a      	movs	r1, #10
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff fc9b 	bl	8000104 <__udivsi3>
 80007ce:	0003      	movs	r3, r0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 f8d8 	bl	8000988 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN1_GPIO_Port, GN1_Pin, GPIO_PIN_SET);
 80007d8:	23a0      	movs	r3, #160	; 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	2201      	movs	r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 fbb7 	bl	8001f54 <HAL_GPIO_WritePin>
		digit = 1;
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <nixie_display+0x10c>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
		break;
 80007ec:	e042      	b.n	8000874 <nixie_display+0xd8>
	case 1:
		nixie_display_set_anode(hours%10);
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <nixie_display+0x110>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	210a      	movs	r1, #10
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff fd0a 	bl	8000210 <__aeabi_uidivmod>
 80007fc:	000b      	movs	r3, r1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	0018      	movs	r0, r3
 8000802:	f000 f8c1 	bl	8000988 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN2_GPIO_Port, GN2_Pin, GPIO_PIN_SET);
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	2201      	movs	r2, #1
 800080c:	2102      	movs	r1, #2
 800080e:	0018      	movs	r0, r3
 8000810:	f001 fba0 	bl	8001f54 <HAL_GPIO_WritePin>
		digit = 2;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <nixie_display+0x10c>)
 8000816:	2202      	movs	r2, #2
 8000818:	701a      	strb	r2, [r3, #0]
		break;
 800081a:	e02b      	b.n	8000874 <nixie_display+0xd8>
	case 2:
		nixie_display_set_anode(minutes/10);
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <nixie_display+0x114>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	210a      	movs	r1, #10
 8000824:	0018      	movs	r0, r3
 8000826:	f7ff fc6d 	bl	8000104 <__udivsi3>
 800082a:	0003      	movs	r3, r0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f8aa 	bl	8000988 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN3_GPIO_Port, GN3_Pin, GPIO_PIN_SET);
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <nixie_display+0x118>)
 8000836:	2201      	movs	r2, #1
 8000838:	2102      	movs	r1, #2
 800083a:	0018      	movs	r0, r3
 800083c:	f001 fb8a 	bl	8001f54 <HAL_GPIO_WritePin>
		digit = 3;
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <nixie_display+0x10c>)
 8000842:	2203      	movs	r2, #3
 8000844:	701a      	strb	r2, [r3, #0]
		break;
 8000846:	e015      	b.n	8000874 <nixie_display+0xd8>
	case 3:
		nixie_display_set_anode(minutes%10);
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <nixie_display+0x114>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	210a      	movs	r1, #10
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fcdd 	bl	8000210 <__aeabi_uidivmod>
 8000856:	000b      	movs	r3, r1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	0018      	movs	r0, r3
 800085c:	f000 f894 	bl	8000988 <nixie_display_set_anode>
		HAL_GPIO_WritePin(GN4_GPIO_Port, GN4_Pin, GPIO_PIN_SET);
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <nixie_display+0x11c>)
 8000862:	2201      	movs	r2, #1
 8000864:	2120      	movs	r1, #32
 8000866:	0018      	movs	r0, r3
 8000868:	f001 fb74 	bl	8001f54 <HAL_GPIO_WritePin>
		digit = 0;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <nixie_display+0x10c>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
		break;
 8000872:	46c0      	nop			; (mov r8, r8)
	}
	if(seconds%2)
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <nixie_display+0x120>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d007      	beq.n	8000894 <nixie_display+0xf8>
		HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_SET);
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	2201      	movs	r2, #1
 800088a:	2120      	movs	r1, #32
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fb61 	bl	8001f54 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_RESET);
}
 8000892:	e006      	b.n	80008a2 <nixie_display+0x106>
		HAL_GPIO_WritePin(GDOT_GPIO_Port, GDOT_Pin, GPIO_PIN_RESET);
 8000894:	23a0      	movs	r3, #160	; 0xa0
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	2200      	movs	r2, #0
 800089a:	2120      	movs	r1, #32
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fb59 	bl	8001f54 <HAL_GPIO_WritePin>
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000030 	.word	0x20000030
 80008ac:	20000031 	.word	0x20000031
 80008b0:	20000032 	.word	0x20000032
 80008b4:	50000c00 	.word	0x50000c00
 80008b8:	50000400 	.word	0x50000400
 80008bc:	20000033 	.word	0x20000033

080008c0 <nixie_display_reset_all>:

static void nixie_display_reset_all()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GN1_GPIO_Port, GN1_Pin, GPIO_PIN_RESET);
 80008c4:	23a0      	movs	r3, #160	; 0xa0
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	2200      	movs	r2, #0
 80008ca:	2101      	movs	r1, #1
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fb41 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GN2_GPIO_Port, GN2_Pin, GPIO_PIN_RESET);
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fb3a 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GN3_GPIO_Port, GN3_Pin, GPIO_PIN_RESET);
 80008e0:	4b27      	ldr	r3, [pc, #156]	; (8000980 <nixie_display_reset_all+0xc0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	2102      	movs	r1, #2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 fb34 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GN4_GPIO_Port, GN4_Pin, GPIO_PIN_RESET);
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <nixie_display_reset_all+0xc4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fb2e 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_RESET);
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <nixie_display_reset_all+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fb28 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000904:	23a0      	movs	r3, #160	; 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	2200      	movs	r2, #0
 800090a:	2110      	movs	r1, #16
 800090c:	0018      	movs	r0, r3
 800090e:	f001 fb21 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000912:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <nixie_display_reset_all+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	2104      	movs	r1, #4
 8000918:	0018      	movs	r0, r3
 800091a:	f001 fb1b 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_RESET);
 800091e:	23a0      	movs	r3, #160	; 0xa0
 8000920:	05db      	lsls	r3, r3, #23
 8000922:	2200      	movs	r2, #0
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	0018      	movs	r0, r3
 8000928:	f001 fb14 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_RESET);
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <nixie_display_reset_all+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	2108      	movs	r1, #8
 8000932:	0018      	movs	r0, r3
 8000934:	f001 fb0e 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_RESET);
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <nixie_display_reset_all+0xc4>)
 800093a:	2200      	movs	r2, #0
 800093c:	2108      	movs	r1, #8
 800093e:	0018      	movs	r0, r3
 8000940:	f001 fb08 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_RESET);
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <nixie_display_reset_all+0xc4>)
 8000946:	2200      	movs	r2, #0
 8000948:	2110      	movs	r1, #16
 800094a:	0018      	movs	r0, r3
 800094c:	f001 fb02 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_RESET);
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <nixie_display_reset_all+0xc4>)
 8000956:	2200      	movs	r2, #0
 8000958:	0019      	movs	r1, r3
 800095a:	f001 fafb 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_RESET);
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4808      	ldr	r0, [pc, #32]	; (8000984 <nixie_display_reset_all+0xc4>)
 8000964:	2200      	movs	r2, #0
 8000966:	0019      	movs	r1, r3
 8000968:	f001 faf4 	bl	8001f54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_RESET);
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <nixie_display_reset_all+0xc4>)
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0018      	movs	r0, r3
 8000974:	f001 faee 	bl	8001f54 <HAL_GPIO_WritePin>
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	50000c00 	.word	0x50000c00
 8000984:	50000400 	.word	0x50000400

08000988 <nixie_display_set_anode>:

static void nixie_display_set_anode(uint8_t n)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	0002      	movs	r2, r0
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	701a      	strb	r2, [r3, #0]
	switch(n)
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b09      	cmp	r3, #9
 800099a:	d84e      	bhi.n	8000a3a <nixie_display_set_anode+0xb2>
 800099c:	009a      	lsls	r2, r3, #2
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <nixie_display_set_anode+0xbc>)
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	469f      	mov	pc, r3
	{
	case 0:
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, GPIO_PIN_SET);
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <nixie_display_set_anode+0xc0>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	0018      	movs	r0, r3
 80009ae:	f001 fad1 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 80009b2:	e042      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 1:
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 80009b4:	23a0      	movs	r3, #160	; 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	2201      	movs	r2, #1
 80009ba:	2110      	movs	r1, #16
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 fac9 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 80009c2:	e03a      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 2:
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <nixie_display_set_anode+0xc4>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	2104      	movs	r1, #4
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fac2 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 80009d0:	e033      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 3:
		HAL_GPIO_WritePin(G3_GPIO_Port, G3_Pin, GPIO_PIN_SET);
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	2201      	movs	r2, #1
 80009d8:	2140      	movs	r1, #64	; 0x40
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 faba 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 80009e0:	e02b      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 4:
		HAL_GPIO_WritePin(G4_GPIO_Port, G4_Pin, GPIO_PIN_SET);
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <nixie_display_set_anode+0xc4>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	2108      	movs	r1, #8
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fab3 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 80009ee:	e024      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 5:
		HAL_GPIO_WritePin(G5_GPIO_Port, G5_Pin, GPIO_PIN_SET);
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <nixie_display_set_anode+0xc0>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	2108      	movs	r1, #8
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 faac 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 80009fc:	e01d      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 6:
		HAL_GPIO_WritePin(G6_GPIO_Port, G6_Pin, GPIO_PIN_SET);
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <nixie_display_set_anode+0xc0>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	2110      	movs	r1, #16
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 faa5 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000a0a:	e016      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 7:
		HAL_GPIO_WritePin(G7_GPIO_Port, G7_Pin, GPIO_PIN_SET);
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <nixie_display_set_anode+0xc0>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	0019      	movs	r1, r3
 8000a16:	f001 fa9d 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000a1a:	e00e      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 8:
		HAL_GPIO_WritePin(G8_GPIO_Port, G8_Pin, GPIO_PIN_SET);
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <nixie_display_set_anode+0xc0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	0019      	movs	r1, r3
 8000a26:	f001 fa95 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000a2a:	e006      	b.n	8000a3a <nixie_display_set_anode+0xb2>
	case 9:
		HAL_GPIO_WritePin(G9_GPIO_Port, G9_Pin, GPIO_PIN_SET);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <nixie_display_set_anode+0xc0>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 fa8e 	bl	8001f54 <HAL_GPIO_WritePin>
		break;
 8000a38:	46c0      	nop			; (mov r8, r8)
	}
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	0800450c 	.word	0x0800450c
 8000a48:	50000400 	.word	0x50000400
 8000a4c:	50000c00 	.word	0x50000c00

08000a50 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	0018      	movs	r0, r3
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f003 fd40 	bl	80044e4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000a64:	003b      	movs	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <MX_RTC_Init+0xd4>)
 8000a6e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a78:	227f      	movs	r2, #127	; 0x7f
 8000a7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a7c:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a7e:	22ff      	movs	r2, #255	; 0xff
 8000a80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	05d2      	lsls	r2, r2, #23
 8000a9a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a9c:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f002 f915 	bl	8002cd4 <HAL_RTC_Init>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000aae:	f7ff fde5 	bl	800067c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ad6:	1d39      	adds	r1, r7, #4
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	0018      	movs	r0, r3
 8000ade:	f002 f98f 	bl	8002e00 <HAL_RTC_SetTime>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000ae6:	f7ff fdc9 	bl	800067c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aea:	003b      	movs	r3, r7
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000af0:	003b      	movs	r3, r7
 8000af2:	2201      	movs	r2, #1
 8000af4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000af6:	003b      	movs	r3, r7
 8000af8:	2201      	movs	r2, #1
 8000afa:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000afc:	003b      	movs	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b02:	0039      	movs	r1, r7
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_RTC_Init+0xd0>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f002 fa21 	bl	8002f50 <HAL_RTC_SetDate>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000b12:	f7ff fdb3 	bl	800067c <Error_Handler>
  }

}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b006      	add	sp, #24
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000078 	.word	0x20000078
 8000b24:	40002800 	.word	0x40002800

08000b28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_RTC_MspInit+0x44>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d114      	bne.n	8000b64 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_RTC_MspInit+0x48>)
 8000b3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_RTC_MspInit+0x48>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0209      	lsls	r1, r1, #8
 8000b44:	430a      	orrs	r2, r1
 8000b46:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_RTC_MspInit+0x48>)
 8000b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_RTC_MspInit+0x48>)
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	00c9      	lsls	r1, r1, #3
 8000b52:	430a      	orrs	r2, r1
 8000b54:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_RTC_MspInit+0x48>)
 8000b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	4013      	ands	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b004      	add	sp, #16
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40002800 	.word	0x40002800
 8000b70:	40021000 	.word	0x40021000

08000b74 <LL_SYSCFG_DisableDBATT>:
  *         @arg @ref LL_SYSCFG_UCPD2_STROBE
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000b7e:	6819      	ldr	r1, [r3, #0]
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <LL_SYSCFG_DisableDBATT+0x1c>)
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40010000 	.word	0x40010000

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_MspInit+0x58>)
 8000b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_MspInit+0x58>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_MspInit+0x58>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	2201      	movs	r2, #1
 8000bac:	4013      	ands	r3, r2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_MspInit+0x58>)
 8000bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_MspInit+0x58>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0549      	lsls	r1, r1, #21
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_MspInit+0x58>)
 8000bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	055b      	lsls	r3, r3, #21
 8000bc8:	4013      	ands	r3, r2
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer 
  */
  HAL_SYSCFG_DisableVREFBUF();
 8000bce:	f000 fb53 	bl	8001278 <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode 
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f000 fb3c 	bl	8001250 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>
  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_SYSCFG_DisableDBATT(LL_SYSCFG_UCPD1_STROBE | LL_SYSCFG_UCPD2_STROBE);
 8000bd8:	23c0      	movs	r3, #192	; 0xc0
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ffc9 	bl	8000b74 <LL_SYSCFG_DisableDBATT>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40021000 	.word	0x40021000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 fade 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <TIM2_IRQHandler+0x14>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f002 fc0e 	bl	800344c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	200000e4 	.word	0x200000e4

08000c3c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <TIM14_IRQHandler+0x14>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f002 fc02 	bl	800344c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000124 	.word	0x20000124

08000c54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <SystemInit+0x14>)
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	0512      	lsls	r2, r2, #20
 8000c5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08e      	sub	sp, #56	; 0x38
 8000c70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	2328      	movs	r3, #40	; 0x28
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	0018      	movs	r0, r3
 8000c78:	2310      	movs	r3, #16
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	f003 fc31 	bl	80044e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c82:	231c      	movs	r3, #28
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	0018      	movs	r0, r3
 8000c88:	230c      	movs	r3, #12
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f003 fc29 	bl	80044e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c92:	003b      	movs	r3, r7
 8000c94:	0018      	movs	r0, r3
 8000c96:	231c      	movs	r3, #28
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	f003 fc22 	bl	80044e4 <memset>

  htim2.Instance = TIM2;
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	05d2      	lsls	r2, r2, #23
 8000ca6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ca8:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 224;
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000cb6:	22e0      	movs	r2, #224	; 0xe0
 8000cb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f002 faac 	bl	8003226 <HAL_TIM_Base_Init>
 8000cce:	1e03      	subs	r3, r0, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cd2:	f7ff fcd3 	bl	800067c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd6:	2128      	movs	r1, #40	; 0x28
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	0152      	lsls	r2, r2, #5
 8000cde:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ce0:	187a      	adds	r2, r7, r1
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f002 fde0 	bl	80038ac <HAL_TIM_ConfigClockSource>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000cf0:	f7ff fcc4 	bl	800067c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f002 faec 	bl	80032d4 <HAL_TIM_PWM_Init>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d00:	f7ff fcbc 	bl	800067c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000d06:	2108      	movs	r1, #8
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f002 fb17 	bl	800333c <HAL_TIM_OnePulse_Init>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000d12:	f7ff fcb3 	bl	800067c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	211c      	movs	r1, #28
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d24:	187a      	adds	r2, r7, r1
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f003 faa2 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000d34:	f7ff fca2 	bl	800067c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d38:	003b      	movs	r3, r7
 8000d3a:	2270      	movs	r2, #112	; 0x70
 8000d3c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1;
 8000d3e:	003b      	movs	r3, r7
 8000d40:	2201      	movs	r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	003b      	movs	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d50:	0039      	movs	r1, r7
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f002 fcaa 	bl	80036b0 <HAL_TIM_PWM_ConfigChannel>
 8000d5c:	1e03      	subs	r3, r0, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8000d60:	f7ff fc8c 	bl	800067c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <MX_TIM2_Init+0x108>)
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 f93a 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b00e      	add	sp, #56	; 0x38
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000e4 	.word	0x200000e4

08000d78 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  htim14.Instance = TIM14;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_TIM14_Init+0x40>)
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	; (8000dbc <MX_TIM14_Init+0x44>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_TIM14_Init+0x40>)
 8000d84:	223f      	movs	r2, #63	; 0x3f
 8000d86:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_TIM14_Init+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_TIM14_Init+0x40>)
 8000d90:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <MX_TIM14_Init+0x48>)
 8000d92:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_TIM14_Init+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_TIM14_Init+0x40>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <MX_TIM14_Init+0x40>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 fa3f 	bl	8003226 <HAL_TIM_Base_Init>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000dac:	f7ff fc66 	bl	800067c <Error_Handler>
  }

}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	20000124 	.word	0x20000124
 8000dbc:	40002000 	.word	0x40002000
 8000dc0:	00001388 	.word	0x00001388

08000dc4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b09c      	sub	sp, #112	; 0x70
 8000dc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	2360      	movs	r3, #96	; 0x60
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f003 fb85 	bl	80044e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	2354      	movs	r3, #84	; 0x54
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	0018      	movs	r0, r3
 8000de0:	230c      	movs	r3, #12
 8000de2:	001a      	movs	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	f003 fb7d 	bl	80044e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	2338      	movs	r3, #56	; 0x38
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	0018      	movs	r0, r3
 8000df0:	231c      	movs	r3, #28
 8000df2:	001a      	movs	r2, r3
 8000df4:	2100      	movs	r1, #0
 8000df6:	f003 fb75 	bl	80044e4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	2334      	movs	r3, #52	; 0x34
 8000e00:	001a      	movs	r2, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	f003 fb6e 	bl	80044e4 <memset>

  htim15.Instance = TIM15;
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e0a:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <MX_TIM15_Init+0x168>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8000e0e:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e10:	223f      	movs	r2, #63	; 0x3f
 8000e12:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 249;
 8000e1a:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e1c:	22f9      	movs	r2, #249	; 0xf9
 8000e1e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e32:	4b3d      	ldr	r3, [pc, #244]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e34:	0018      	movs	r0, r3
 8000e36:	f002 f9f6 	bl	8003226 <HAL_TIM_Base_Init>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8000e3e:	f7ff fc1d 	bl	800067c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e42:	2160      	movs	r1, #96	; 0x60
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	0152      	lsls	r2, r2, #5
 8000e4a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e4c:	187a      	adds	r2, r7, r1
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e50:	0011      	movs	r1, r2
 8000e52:	0018      	movs	r0, r3
 8000e54:	f002 fd2a 	bl	80038ac <HAL_TIM_ConfigClockSource>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8000e5c:	f7ff fc0e 	bl	800067c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f002 fa36 	bl	80032d4 <HAL_TIM_PWM_Init>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8000e6c:	f7ff fc06 	bl	800067c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2154      	movs	r1, #84	; 0x54
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e7e:	187a      	adds	r2, r7, r1
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f003 f9f5 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8000e8e:	f7ff fbf5 	bl	800067c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e92:	2138      	movs	r1, #56	; 0x38
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2260      	movs	r2, #96	; 0x60
 8000e98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 124;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	227c      	movs	r2, #124	; 0x7c
 8000e9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ebe:	1879      	adds	r1, r7, r1
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f002 fbf3 	bl	80036b0 <HAL_TIM_PWM_ConfigChannel>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000ece:	f7ff fbd5 	bl	800067c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	0192      	lsls	r2, r2, #6
 8000ef6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000f04:	1d3a      	adds	r2, r7, #4
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000f08:	0011      	movs	r1, r2
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f003 fa08 	bl	8004320 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8000f14:	f7ff fbb2 	bl	800067c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim15);
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <MX_TIM15_Init+0x164>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 f860 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b01c      	add	sp, #112	; 0x70
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200000a4 	.word	0x200000a4
 8000f2c:	40014000 	.word	0x40014000

08000f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d114      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f54:	2201      	movs	r2, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	200f      	movs	r0, #15
 8000f62:	f000 fcaf 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f66:	200f      	movs	r0, #15
 8000f68:	f000 fcc1 	bl	80018ee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8000f6c:	e02e      	b.n	8000fcc <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM14)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <HAL_TIM_Base_MspInit+0xa8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d116      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	0209      	lsls	r1, r1, #8
 8000f82:	430a      	orrs	r2, r1
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2013      	movs	r0, #19
 8000f9a:	f000 fc93 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f9e:	2013      	movs	r0, #19
 8000fa0:	f000 fca5 	bl	80018ee <HAL_NVIC_EnableIRQ>
}
 8000fa4:	e012      	b.n	8000fcc <HAL_TIM_Base_MspInit+0x9c>
  else if(tim_baseHandle->Instance==TIM15)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_TIM_Base_MspInit+0xac>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d10d      	bne.n	8000fcc <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	0249      	lsls	r1, r1, #9
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_TIM_Base_MspInit+0xa4>)
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b006      	add	sp, #24
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40002000 	.word	0x40002000
 8000fdc:	40014000 	.word	0x40014000

08000fe0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	2314      	movs	r3, #20
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	0018      	movs	r0, r3
 8000fee:	2314      	movs	r3, #20
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f003 fa76 	bl	80044e4 <memset>
  if(timHandle->Instance==TIM2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	05db      	lsls	r3, r3, #23
 8001000:	429a      	cmp	r2, r3
 8001002:	d124      	bne.n	800104e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_TIM_MspPostInit+0xc8>)
 8001006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <HAL_TIM_MspPostInit+0xc8>)
 800100a:	2101      	movs	r1, #1
 800100c:	430a      	orrs	r2, r1
 800100e:	635a      	str	r2, [r3, #52]	; 0x34
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <HAL_TIM_MspPostInit+0xc8>)
 8001012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001014:	2201      	movs	r2, #1
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800101c:	2114      	movs	r1, #20
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0212      	lsls	r2, r2, #8
 8001024:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2202      	movs	r2, #2
 800102a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	187b      	adds	r3, r7, r1
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001032:	187b      	adds	r3, r7, r1
 8001034:	2201      	movs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2202      	movs	r2, #2
 800103c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	187a      	adds	r2, r7, r1
 8001040:	23a0      	movs	r3, #160	; 0xa0
 8001042:	05db      	lsls	r3, r3, #23
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f000 fe20 	bl	8001c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800104c:	e027      	b.n	800109e <HAL_TIM_MspPostInit+0xbe>
  else if(timHandle->Instance==TIM15)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <HAL_TIM_MspPostInit+0xcc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d122      	bne.n	800109e <HAL_TIM_MspPostInit+0xbe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <HAL_TIM_MspPostInit+0xc8>)
 800105a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_TIM_MspPostInit+0xc8>)
 800105e:	2101      	movs	r1, #1
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_TIM_MspPostInit+0xc8>)
 8001066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001068:	2201      	movs	r2, #1
 800106a:	4013      	ands	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LS_Pin;
 8001070:	2114      	movs	r1, #20
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2204      	movs	r2, #4
 8001076:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2202      	movs	r2, #2
 800107c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2205      	movs	r2, #5
 800108e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LS_GPIO_Port, &GPIO_InitStruct);
 8001090:	187a      	adds	r2, r7, r1
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f000 fdf7 	bl	8001c8c <HAL_GPIO_Init>
}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b00a      	add	sp, #40	; 0x28
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40014000 	.word	0x40014000

080010b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010b6:	e003      	b.n	80010c0 <LoopCopyDataInit>

080010b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80010ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010be:	3104      	adds	r1, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <LoopForever+0xa>)
  ldr r3, =_edata
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <LoopForever+0xe>)
  adds r2, r0, r1
 80010c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010c8:	d3f6      	bcc.n	80010b8 <CopyDataInit>
  ldr r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopForever+0x12>)
  b LoopFillZerobss
 80010cc:	e002      	b.n	80010d4 <LoopFillZerobss>

080010ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  str  r3, [r2]
 80010d0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d2:	3204      	adds	r2, #4

080010d4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <LoopForever+0x16>)
  cmp r2, r3
 80010d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010d8:	d3f9      	bcc.n	80010ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010da:	f7ff fdbb 	bl	8000c54 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010de:	f003 f9dd 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e2:	f7ff fa2b 	bl	800053c <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   r0, =_estack
 80010e8:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80010ec:	080045d0 	.word	0x080045d0
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010f4:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80010f8:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80010fc:	20000168 	.word	0x20000168

08001100 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_COMP_IRQHandler>
	...

08001104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_Init+0x3c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Init+0x3c>)
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	0049      	lsls	r1, r1, #1
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f810 	bl	8001144 <HAL_InitTick>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d003      	beq.n	8001130 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e001      	b.n	8001134 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fd30 	bl	8000b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	781b      	ldrb	r3, [r3, #0]
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_InitTick+0x88>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d02b      	beq.n	80011b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_InitTick+0x8c>)
 800115e:	681c      	ldr	r4, [r3, #0]
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_InitTick+0x88>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0019      	movs	r1, r3
 8001166:	23fa      	movs	r3, #250	; 0xfa
 8001168:	0098      	lsls	r0, r3, #2
 800116a:	f7fe ffcb 	bl	8000104 <__udivsi3>
 800116e:	0003      	movs	r3, r0
 8001170:	0019      	movs	r1, r3
 8001172:	0020      	movs	r0, r4
 8001174:	f7fe ffc6 	bl	8000104 <__udivsi3>
 8001178:	0003      	movs	r3, r0
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fbc7 	bl	800190e <HAL_SYSTICK_Config>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d112      	bne.n	80011aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d80a      	bhi.n	80011a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	2301      	movs	r3, #1
 800118e:	425b      	negs	r3, r3
 8001190:	2200      	movs	r2, #0
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fb96 	bl	80018c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_InitTick+0x90>)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00d      	b.n	80011bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e008      	b.n	80011bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011aa:	230f      	movs	r3, #15
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e003      	b.n	80011bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b005      	add	sp, #20
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	20000004 	.word	0x20000004
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_IncTick+0x18>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_IncTick+0x1c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	18d2      	adds	r2, r2, r3
 80011e6:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <HAL_IncTick+0x18>)
 80011e8:	601a      	str	r2, [r3, #0]
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000164 	.word	0x20000164
 80011f4:	2000000c 	.word	0x2000000c

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <HAL_GetTick+0x10>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	0018      	movs	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	20000164 	.word	0x20000164

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff fff0 	bl	80011f8 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3301      	adds	r3, #1
 8001224:	d004      	beq.n	8001230 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_Delay+0x40>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	f7ff ffe1 	bl	80011f8 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	429a      	cmp	r2, r3
 8001240:	d8f7      	bhi.n	8001232 <HAL_Delay+0x26>
  {
  }
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	2000000c 	.word	0x2000000c

08001250 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2202      	movs	r2, #2
 800125e:	4393      	bics	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40010030 	.word	0x40010030

08001278 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_SYSCFG_DisableVREFBUF+0x18>)
 8001282:	2101      	movs	r1, #1
 8001284:	438a      	bics	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	40010030 	.word	0x40010030

08001294 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <LL_EXTI_EnableIT_0_31+0x20>)
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	58d2      	ldr	r2, [r2, r3]
 80012a2:	4904      	ldr	r1, [pc, #16]	; (80012b4 <LL_EXTI_EnableIT_0_31+0x20>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	508b      	str	r3, [r1, r2]
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021800 	.word	0x40021800

080012b8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80012c0:	4a06      	ldr	r2, [pc, #24]	; (80012dc <LL_EXTI_DisableIT_0_31+0x24>)
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	58d3      	ldr	r3, [r2, r3]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	43d2      	mvns	r2, r2
 80012ca:	4904      	ldr	r1, [pc, #16]	; (80012dc <LL_EXTI_DisableIT_0_31+0x24>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	508b      	str	r3, [r1, r2]
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	40021800 	.word	0x40021800

080012e0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80012e8:	4a05      	ldr	r2, [pc, #20]	; (8001300 <LL_EXTI_EnableEvent_0_31+0x20>)
 80012ea:	2384      	movs	r3, #132	; 0x84
 80012ec:	58d2      	ldr	r2, [r2, r3]
 80012ee:	4904      	ldr	r1, [pc, #16]	; (8001300 <LL_EXTI_EnableEvent_0_31+0x20>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	2284      	movs	r2, #132	; 0x84
 80012f6:	508b      	str	r3, [r1, r2]

}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021800 	.word	0x40021800

08001304 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <LL_EXTI_DisableEvent_0_31+0x24>)
 800130e:	2384      	movs	r3, #132	; 0x84
 8001310:	58d3      	ldr	r3, [r2, r3]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	43d2      	mvns	r2, r2
 8001316:	4904      	ldr	r1, [pc, #16]	; (8001328 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001318:	4013      	ands	r3, r2
 800131a:	2284      	movs	r2, #132	; 0x84
 800131c:	508b      	str	r3, [r1, r2]
}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	40021800 	.word	0x40021800

0800132c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]

}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021800 	.word	0x40021800

0800134c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	43d9      	mvns	r1, r3
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800135e:	400a      	ands	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	40021800 	.word	0x40021800

08001370 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b002      	add	sp, #8
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021800 	.word	0x40021800

08001390 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	43d9      	mvns	r1, r3
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80013a2:	400a      	ands	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]
}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b002      	add	sp, #8
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40021800 	.word	0x40021800

080013b4 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40021800 	.word	0x40021800

080013d0 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_18
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	60da      	str	r2, [r3, #12]
}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40021800 	.word	0x40021800

080013ec <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80013f8:	231f      	movs	r3, #31
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d104      	bne.n	8001410 <HAL_COMP_Init+0x24>
  {
    status = HAL_ERROR;
 8001406:	231f      	movs	r3, #31
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e13a      	b.n	8001686 <HAL_COMP_Init+0x29a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0fdb      	lsrs	r3, r3, #31
 8001418:	07da      	lsls	r2, r3, #31
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	061b      	lsls	r3, r3, #24
 800141e:	429a      	cmp	r2, r3
 8001420:	d104      	bne.n	800142c <HAL_COMP_Init+0x40>
  {
    status = HAL_ERROR;
 8001422:	231f      	movs	r3, #31
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e12c      	b.n	8001686 <HAL_COMP_Init+0x29a>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2229      	movs	r2, #41	; 0x29
 8001430:	5c9b      	ldrb	r3, [r3, r2]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10a      	bne.n	800144e <HAL_COMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2228      	movs	r2, #40	; 0x28
 800143c:	2100      	movs	r1, #0
 800143e:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f7fe ff17 	bl	800027c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2230      	movs	r2, #48	; 0x30
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 800147a:	4313      	orrs	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a83      	ldr	r2, [pc, #524]	; (8001694 <HAL_COMP_Init+0x2a8>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	429a      	cmp	r2, r3
 800149e:	d10d      	bne.n	80014bc <HAL_COMP_Init+0xd0>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80014a0:	4b7d      	ldr	r3, [pc, #500]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014a6:	497d      	ldr	r1, [pc, #500]	; (800169c <HAL_COMP_Init+0x2b0>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80014ac:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4b79      	ldr	r3, [pc, #484]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0109      	lsls	r1, r1, #4
 80014b6:	430a      	orrs	r2, r1
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	e01f      	b.n	80014fc <HAL_COMP_Init+0x110>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	23c0      	movs	r3, #192	; 0xc0
 80014c2:	015b      	lsls	r3, r3, #5
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d10d      	bne.n	80014e4 <HAL_COMP_Init+0xf8>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80014c8:	4b73      	ldr	r3, [pc, #460]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b72      	ldr	r3, [pc, #456]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	0109      	lsls	r1, r1, #4
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80014d6:	4b70      	ldr	r3, [pc, #448]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014dc:	496f      	ldr	r1, [pc, #444]	; (800169c <HAL_COMP_Init+0x2b0>)
 80014de:	400a      	ands	r2, r1
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	e00b      	b.n	80014fc <HAL_COMP_Init+0x110>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80014e4:	4b6c      	ldr	r3, [pc, #432]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b6b      	ldr	r3, [pc, #428]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014ea:	496c      	ldr	r1, [pc, #432]	; (800169c <HAL_COMP_Init+0x2b0>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80014f0:	4b69      	ldr	r3, [pc, #420]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4b68      	ldr	r3, [pc, #416]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80014f6:	4969      	ldr	r1, [pc, #420]	; (800169c <HAL_COMP_Init+0x2b0>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	01d2      	lsls	r2, r2, #7
 8001504:	4293      	cmp	r3, r2
 8001506:	d006      	beq.n	8001516 <HAL_COMP_Init+0x12a>
 8001508:	22a0      	movs	r2, #160	; 0xa0
 800150a:	01d2      	lsls	r2, r2, #7
 800150c:	4293      	cmp	r3, r2
 800150e:	d010      	beq.n	8001532 <HAL_COMP_Init+0x146>
 8001510:	2b01      	cmp	r3, #1
 8001512:	d01c      	beq.n	800154e <HAL_COMP_Init+0x162>
 8001514:	e02a      	b.n	800156c <HAL_COMP_Init+0x180>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b5f      	ldr	r3, [pc, #380]	; (8001698 <HAL_COMP_Init+0x2ac>)
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	01c9      	lsls	r1, r1, #7
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001524:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <HAL_COMP_Init+0x2ac>)
 800152a:	495d      	ldr	r1, [pc, #372]	; (80016a0 <HAL_COMP_Init+0x2b4>)
 800152c:	400a      	ands	r2, r1
 800152e:	605a      	str	r2, [r3, #4]
        break;
 8001530:	e029      	b.n	8001586 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8001532:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001538:	4959      	ldr	r1, [pc, #356]	; (80016a0 <HAL_COMP_Init+0x2b4>)
 800153a:	400a      	ands	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800153e:	4b56      	ldr	r3, [pc, #344]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4b55      	ldr	r3, [pc, #340]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	01c9      	lsls	r1, r1, #7
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]
        break;
 800154c:	e01b      	b.n	8001586 <HAL_COMP_Init+0x19a>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800154e:	4b52      	ldr	r3, [pc, #328]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4b51      	ldr	r3, [pc, #324]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	01c9      	lsls	r1, r1, #7
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800155c:	4b4e      	ldr	r3, [pc, #312]	; (8001698 <HAL_COMP_Init+0x2ac>)
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4b4d      	ldr	r3, [pc, #308]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	01c9      	lsls	r1, r1, #7
 8001566:	430a      	orrs	r2, r1
 8001568:	605a      	str	r2, [r3, #4]
        break;
 800156a:	e00c      	b.n	8001586 <HAL_COMP_Init+0x19a>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_COMP_Init+0x2ac>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_COMP_Init+0x2ac>)
 8001572:	494b      	ldr	r1, [pc, #300]	; (80016a0 <HAL_COMP_Init+0x2b4>)
 8001574:	400a      	ands	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_COMP_Init+0x2ac>)
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_COMP_Init+0x2ac>)
 800157e:	4948      	ldr	r1, [pc, #288]	; (80016a0 <HAL_COMP_Init+0x2b4>)
 8001580:	400a      	ands	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
        break;
 8001584:	46c0      	nop			; (mov r8, r8)
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2230      	movs	r2, #48	; 0x30
 800158e:	4013      	ands	r3, r2
 8001590:	d016      	beq.n	80015c0 <HAL_COMP_Init+0x1d4>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d113      	bne.n	80015c0 <HAL_COMP_Init+0x1d4>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001598:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <HAL_COMP_Init+0x2b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4942      	ldr	r1, [pc, #264]	; (80016a8 <HAL_COMP_Init+0x2bc>)
 800159e:	0018      	movs	r0, r3
 80015a0:	f7fe fdb0 	bl	8000104 <__udivsi3>
 80015a4:	0003      	movs	r3, r0
 80015a6:	001a      	movs	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	189b      	adds	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80015b2:	e002      	b.n	80015ba <HAL_COMP_Init+0x1ce>
      {
        wait_loop_index--;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f9      	bne.n	80015b4 <HAL_COMP_Init+0x1c8>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a34      	ldr	r2, [pc, #208]	; (8001698 <HAL_COMP_Init+0x2ac>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d102      	bne.n	80015d0 <HAL_COMP_Init+0x1e4>
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	e001      	b.n	80015d4 <HAL_COMP_Init+0x1e8>
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	02db      	lsls	r3, r3, #11
 80015d4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	2203      	movs	r2, #3
 80015dc:	4013      	ands	r3, r2
 80015de:	d040      	beq.n	8001662 <HAL_COMP_Init+0x276>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2210      	movs	r2, #16
 80015e6:	4013      	ands	r3, r2
 80015e8:	d004      	beq.n	80015f4 <HAL_COMP_Init+0x208>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff fe9d 	bl	800132c <LL_EXTI_EnableRisingTrig_0_31>
 80015f2:	e003      	b.n	80015fc <HAL_COMP_Init+0x210>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f7ff fea8 	bl	800134c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	2220      	movs	r2, #32
 8001602:	4013      	ands	r3, r2
 8001604:	d004      	beq.n	8001610 <HAL_COMP_Init+0x224>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff feb1 	bl	8001370 <LL_EXTI_EnableFallingTrig_0_31>
 800160e:	e003      	b.n	8001618 <HAL_COMP_Init+0x22c>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff febc 	bl	8001390 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff fed8 	bl	80013d0 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	0018      	movs	r0, r3
 8001624:	f7ff fec6 	bl	80013b4 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	d004      	beq.n	800163c <HAL_COMP_Init+0x250>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff fe53 	bl	80012e0 <LL_EXTI_EnableEvent_0_31>
 800163a:	e003      	b.n	8001644 <HAL_COMP_Init+0x258>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff fe60 	bl	8001304 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	d004      	beq.n	8001658 <HAL_COMP_Init+0x26c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fe1f 	bl	8001294 <LL_EXTI_EnableIT_0_31>
 8001656:	e00c      	b.n	8001672 <HAL_COMP_Init+0x286>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff fe2c 	bl	80012b8 <LL_EXTI_DisableIT_0_31>
 8001660:	e007      	b.n	8001672 <HAL_COMP_Init+0x286>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fe4d 	bl	8001304 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff fe23 	bl	80012b8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2229      	movs	r2, #41	; 0x29
 8001676:	5c9b      	ldrb	r3, [r3, r2]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <HAL_COMP_Init+0x29a>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2229      	movs	r2, #41	; 0x29
 8001682:	2101      	movs	r1, #1
 8001684:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001686:	231f      	movs	r3, #31
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b008      	add	sp, #32
 8001692:	bd80      	pop	{r7, pc}
 8001694:	fe00740f 	.word	0xfe00740f
 8001698:	40010200 	.word	0x40010200
 800169c:	fffff7ff 	.word	0xfffff7ff
 80016a0:	ffffbfff 	.word	0xffffbfff
 80016a4:	20000004 	.word	0x20000004
 80016a8:	00030d40 	.word	0x00030d40

080016ac <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	230f      	movs	r3, #15
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <HAL_COMP_Start+0x24>
  {
    status = HAL_ERROR;
 80016c6:	230f      	movs	r3, #15
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e034      	b.n	800173a <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0fdb      	lsrs	r3, r3, #31
 80016d8:	07da      	lsls	r2, r3, #31
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	429a      	cmp	r2, r3
 80016e0:	d104      	bne.n	80016ec <HAL_COMP_Start+0x40>
  {
    status = HAL_ERROR;
 80016e2:	230f      	movs	r3, #15
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	e026      	b.n	800173a <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2229      	movs	r2, #41	; 0x29
 80016f0:	5c9b      	ldrb	r3, [r3, r2]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d11c      	bne.n	8001732 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2101      	movs	r1, #1
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2229      	movs	r2, #41	; 0x29
 800170c:	2102      	movs	r1, #2
 800170e:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <HAL_COMP_Start+0x9c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	490d      	ldr	r1, [pc, #52]	; (800174c <HAL_COMP_Start+0xa0>)
 8001716:	0018      	movs	r0, r3
 8001718:	f7fe fcf4 	bl	8000104 <__udivsi3>
 800171c:	0003      	movs	r3, r0
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001722:	e002      	b.n	800172a <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3b01      	subs	r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f9      	bne.n	8001724 <HAL_COMP_Start+0x78>
 8001730:	e003      	b.n	800173a <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001732:	230f      	movs	r3, #15
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800173a:	230f      	movs	r3, #15
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	781b      	ldrb	r3, [r3, #0]
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000004 	.word	0x20000004
 800174c:	00030d40 	.word	0x00030d40

08001750 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0f9b      	lsrs	r3, r3, #30
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8001764:	0018      	movs	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	0002      	movs	r2, r0
 8001774:	1dfb      	adds	r3, r7, #7
 8001776:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001778:	1dfb      	adds	r3, r7, #7
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b7f      	cmp	r3, #127	; 0x7f
 800177e:	d809      	bhi.n	8001794 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	001a      	movs	r2, r3
 8001786:	231f      	movs	r3, #31
 8001788:	401a      	ands	r2, r3
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_EnableIRQ+0x30>)
 800178c:	2101      	movs	r1, #1
 800178e:	4091      	lsls	r1, r2
 8001790:	000a      	movs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]
  }
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	0002      	movs	r2, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b7f      	cmp	r3, #127	; 0x7f
 80017b4:	d828      	bhi.n	8001808 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b6:	4a2f      	ldr	r2, [pc, #188]	; (8001874 <__NVIC_SetPriority+0xd4>)
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	33c0      	adds	r3, #192	; 0xc0
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	589b      	ldr	r3, [r3, r2]
 80017c6:	1dfa      	adds	r2, r7, #7
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	0011      	movs	r1, r2
 80017cc:	2203      	movs	r2, #3
 80017ce:	400a      	ands	r2, r1
 80017d0:	00d2      	lsls	r2, r2, #3
 80017d2:	21ff      	movs	r1, #255	; 0xff
 80017d4:	4091      	lsls	r1, r2
 80017d6:	000a      	movs	r2, r1
 80017d8:	43d2      	mvns	r2, r2
 80017da:	401a      	ands	r2, r3
 80017dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	22ff      	movs	r2, #255	; 0xff
 80017e4:	401a      	ands	r2, r3
 80017e6:	1dfb      	adds	r3, r7, #7
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	0018      	movs	r0, r3
 80017ec:	2303      	movs	r3, #3
 80017ee:	4003      	ands	r3, r0
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <__NVIC_SetPriority+0xd4>)
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	430a      	orrs	r2, r1
 8001800:	33c0      	adds	r3, #192	; 0xc0
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001806:	e031      	b.n	800186c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <__NVIC_SetPriority+0xd8>)
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	0019      	movs	r1, r3
 8001810:	230f      	movs	r3, #15
 8001812:	400b      	ands	r3, r1
 8001814:	3b08      	subs	r3, #8
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3306      	adds	r3, #6
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	18d3      	adds	r3, r2, r3
 800181e:	3304      	adds	r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1dfa      	adds	r2, r7, #7
 8001824:	7812      	ldrb	r2, [r2, #0]
 8001826:	0011      	movs	r1, r2
 8001828:	2203      	movs	r2, #3
 800182a:	400a      	ands	r2, r1
 800182c:	00d2      	lsls	r2, r2, #3
 800182e:	21ff      	movs	r1, #255	; 0xff
 8001830:	4091      	lsls	r1, r2
 8001832:	000a      	movs	r2, r1
 8001834:	43d2      	mvns	r2, r2
 8001836:	401a      	ands	r2, r3
 8001838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	22ff      	movs	r2, #255	; 0xff
 8001840:	401a      	ands	r2, r3
 8001842:	1dfb      	adds	r3, r7, #7
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	0018      	movs	r0, r3
 8001848:	2303      	movs	r3, #3
 800184a:	4003      	ands	r3, r0
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <__NVIC_SetPriority+0xd8>)
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	001c      	movs	r4, r3
 8001858:	230f      	movs	r3, #15
 800185a:	4023      	ands	r3, r4
 800185c:	3b08      	subs	r3, #8
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	430a      	orrs	r2, r1
 8001862:	3306      	adds	r3, #6
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	18c3      	adds	r3, r0, r3
 8001868:	3304      	adds	r3, #4
 800186a:	601a      	str	r2, [r3, #0]
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b003      	add	sp, #12
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <SysTick_Config+0x40>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e010      	b.n	80018b4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <SysTick_Config+0x44>)
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	3a01      	subs	r2, #1
 8001898:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	2301      	movs	r3, #1
 800189c:	425b      	negs	r3, r3
 800189e:	2103      	movs	r1, #3
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff ff7d 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <SysTick_Config+0x44>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <SysTick_Config+0x44>)
 80018ae:	2207      	movs	r2, #7
 80018b0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	00ffffff 	.word	0x00ffffff
 80018c0:	e000e010 	.word	0xe000e010

080018c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	210f      	movs	r1, #15
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	1c02      	adds	r2, r0, #0
 80018d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7ff ff5d 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	0002      	movs	r2, r0
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff ff33 	bl	800176c <__NVIC_EnableIRQ>
}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ffaf 	bl	800187c <SysTick_Config>
 800191e:	0003      	movs	r3, r0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b002      	add	sp, #8
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e015      	b.n	8001966 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	791b      	ldrb	r3, [r3, #4]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	0018      	movs	r0, r3
 800194e:	f7fe fd01 	bl	8000354 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	795b      	ldrb	r3, [r3, #5]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <HAL_DAC_Start+0x16>
 8001980:	2302      	movs	r3, #2
 8001982:	e03f      	b.n	8001a04 <HAL_DAC_Start+0x96>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6819      	ldr	r1, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	2210      	movs	r2, #16
 800199a:	4013      	ands	r3, r2
 800199c:	2201      	movs	r2, #1
 800199e:	409a      	lsls	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	223e      	movs	r2, #62	; 0x3e
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d11c      	bne.n	80019f6 <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2101      	movs	r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	e013      	b.n	80019f6 <HAL_DAC_Start+0x88>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << Channel))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	23f8      	movs	r3, #248	; 0xf8
 80019d6:	039b      	lsls	r3, r3, #14
 80019d8:	401a      	ands	r2, r3
 80019da:	2102      	movs	r1, #2
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4099      	lsls	r1, r3
 80019e0:	000b      	movs	r3, r1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d107      	bne.n	80019f6 <HAL_DAC_Start+0x88>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2102      	movs	r1, #2
 80019f2:	430a      	orrs	r2, r1
 80019f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b002      	add	sp, #8
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	18d3      	adds	r3, r2, r3
 8001a30:	3308      	adds	r3, #8
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e004      	b.n	8001a40 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	18d3      	adds	r3, r2, r3
 8001a3c:	3314      	adds	r3, #20
 8001a3e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b006      	add	sp, #24
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	795b      	ldrb	r3, [r3, #5]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_DAC_ConfigChannel+0x1c>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e107      	b.n	8001c7c <HAL_DAC_ConfigChannel+0x22c>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2202      	movs	r2, #2
 8001a76:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d000      	beq.n	8001a82 <HAL_DAC_ConfigChannel+0x32>
 8001a80:	e074      	b.n	8001b6c <HAL_DAC_ConfigChannel+0x11c>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d138      	bne.n	8001afa <HAL_DAC_ConfigChannel+0xaa>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001a88:	f7ff fbb6 	bl	80011f8 <HAL_GetTick>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	61fb      	str	r3, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a90:	e011      	b.n	8001ab6 <HAL_DAC_ConfigChannel+0x66>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a92:	f7ff fbb1 	bl	80011f8 <HAL_GetTick>
 8001a96:	0002      	movs	r2, r0
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d90a      	bls.n	8001ab6 <HAL_DAC_ConfigChannel+0x66>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0e2      	b.n	8001c7c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d1e6      	bne.n	8001a92 <HAL_DAC_ConfigChannel+0x42>
        }
      }
      HAL_Delay(1);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7ff fba1 	bl	800120c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	6992      	ldr	r2, [r2, #24]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad4:	e01e      	b.n	8001b14 <HAL_DAC_ConfigChannel+0xc4>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ad6:	f7ff fb8f 	bl	80011f8 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d90a      	bls.n	8001afa <HAL_DAC_ConfigChannel+0xaa>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2208      	movs	r2, #8
 8001aea:	431a      	orrs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2203      	movs	r2, #3
 8001af4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0c0      	b.n	8001c7c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	dbe8      	blt.n	8001ad6 <HAL_DAC_ConfigChannel+0x86>
        }
      }
      HAL_Delay(1U);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff fb81 	bl	800120c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	6992      	ldr	r2, [r2, #24]
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	400a      	ands	r2, r1
 8001b20:	4958      	ldr	r1, [pc, #352]	; (8001c84 <HAL_DAC_ConfigChannel+0x234>)
 8001b22:	4091      	lsls	r1, r2
 8001b24:	000a      	movs	r2, r1
 8001b26:	43d2      	mvns	r2, r2
 8001b28:	401a      	ands	r2, r3
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2010      	movs	r0, #16
 8001b34:	4003      	ands	r3, r0
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	2110      	movs	r1, #16
 8001b4a:	400a      	ands	r2, r1
 8001b4c:	21ff      	movs	r1, #255	; 0xff
 8001b4e:	4091      	lsls	r1, r2
 8001b50:	000a      	movs	r2, r1
 8001b52:	43d2      	mvns	r2, r2
 8001b54:	401a      	ands	r2, r3
 8001b56:	0011      	movs	r1, r2
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2010      	movs	r0, #16
 8001b60:	4003      	ands	r3, r0
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d11d      	bne.n	8001bb0 <HAL_DAC_ConfigChannel+0x160>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	4013      	ands	r3, r2
 8001b82:	221f      	movs	r2, #31
 8001b84:	409a      	lsls	r2, r3
 8001b86:	0013      	movs	r3, r2
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2210      	movs	r2, #16
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2210      	movs	r2, #16
 8001be2:	4013      	ands	r3, r2
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2110      	movs	r1, #16
 8001c02:	400b      	ands	r3, r1
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	01c9      	lsls	r1, r1, #7
 8001c08:	4099      	lsls	r1, r3
 8001c0a:	000b      	movs	r3, r1
 8001c0c:	43d9      	mvns	r1, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	400a      	ands	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2210      	movs	r2, #16
 8001c22:	4013      	ands	r3, r2
 8001c24:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <HAL_DAC_ConfigChannel+0x238>)
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	409a      	lsls	r2, r3
 8001c42:	0013      	movs	r3, r2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2110      	movs	r1, #16
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	21c0      	movs	r1, #192	; 0xc0
 8001c60:	4099      	lsls	r1, r3
 8001c62:	000b      	movs	r3, r1
 8001c64:	43d9      	mvns	r1, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b008      	add	sp, #32
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	000003ff 	.word	0x000003ff
 8001c88:	00000ffe 	.word	0x00000ffe

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c9a:	e147      	b.n	8001f2c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d100      	bne.n	8001cb4 <HAL_GPIO_Init+0x28>
 8001cb2:	e138      	b.n	8001f26 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x38>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b12      	cmp	r3, #18
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	58d3      	ldr	r3, [r2, r3]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	0013      	movs	r3, r2
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2107      	movs	r1, #7
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	6939      	ldr	r1, [r7, #16]
 8001d0a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2203      	movs	r2, #3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	409a      	lsls	r2, r3
 8001d32:	0013      	movs	r3, r2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d00b      	beq.n	8001d60 <HAL_GPIO_Init+0xd4>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d007      	beq.n	8001d60 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d54:	2b11      	cmp	r3, #17
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b12      	cmp	r3, #18
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	0013      	movs	r3, r2
 8001d70:	43da      	mvns	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	0013      	movs	r3, r2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	2201      	movs	r2, #1
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	055b      	lsls	r3, r3, #21
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d100      	bne.n	8001e00 <HAL_GPIO_Init+0x174>
 8001dfe:	e092      	b.n	8001f26 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3318      	adds	r3, #24
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	589b      	ldr	r3, [r3, r2]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2203      	movs	r2, #3
 8001e12:	4013      	ands	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	220f      	movs	r2, #15
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	23a0      	movs	r3, #160	; 0xa0
 8001e28:	05db      	lsls	r3, r3, #23
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d013      	beq.n	8001e56 <HAL_GPIO_Init+0x1ca>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <HAL_GPIO_Init+0x2bc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00d      	beq.n	8001e52 <HAL_GPIO_Init+0x1c6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a44      	ldr	r2, [pc, #272]	; (8001f4c <HAL_GPIO_Init+0x2c0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d007      	beq.n	8001e4e <HAL_GPIO_Init+0x1c2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a43      	ldr	r2, [pc, #268]	; (8001f50 <HAL_GPIO_Init+0x2c4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_GPIO_Init+0x1be>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	e004      	b.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_GPIO_Init+0x1cc>
 8001e56:	2300      	movs	r3, #0
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	00d2      	lsls	r2, r2, #3
 8001e60:	4093      	lsls	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e68:	4936      	ldr	r1, [pc, #216]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3318      	adds	r3, #24
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e76:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	58d3      	ldr	r3, [r2, r3]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	4013      	ands	r3, r2
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e9c:	4929      	ldr	r1, [pc, #164]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001ea4:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001ea6:	2384      	movs	r3, #132	; 0x84
 8001ea8:	58d3      	ldr	r3, [r2, r3]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001eca:	491e      	ldr	r1, [pc, #120]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001ecc:	2284      	movs	r2, #132	; 0x84
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	035b      	lsls	r3, r3, #13
 8001eea:	4013      	ands	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	039b      	lsls	r3, r3, #14
 8001f14:	4013      	ands	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_GPIO_Init+0x2b8>)
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	40da      	lsrs	r2, r3
 8001f34:	1e13      	subs	r3, r2, #0
 8001f36:	d000      	beq.n	8001f3a <HAL_GPIO_Init+0x2ae>
 8001f38:	e6b0      	b.n	8001c9c <HAL_GPIO_Init+0x10>
  }
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b006      	add	sp, #24
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	40021800 	.word	0x40021800
 8001f48:	50000400 	.word	0x50000400
 8001f4c:	50000800 	.word	0x50000800
 8001f50:	50000c00 	.word	0x50000c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	0008      	movs	r0, r1
 8001f5e:	0011      	movs	r1, r2
 8001f60:	1cbb      	adds	r3, r7, #2
 8001f62:	1c02      	adds	r2, r0, #0
 8001f64:	801a      	strh	r2, [r3, #0]
 8001f66:	1c7b      	adds	r3, r7, #1
 8001f68:	1c0a      	adds	r2, r1, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f6c:	1c7b      	adds	r3, r7, #1
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f74:	1cbb      	adds	r3, r7, #2
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7e:	1cbb      	adds	r3, r7, #2
 8001f80:	881a      	ldrh	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b002      	add	sp, #8
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d11f      	bne.n	8001ff4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	0013      	movs	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	189b      	adds	r3, r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4912      	ldr	r1, [pc, #72]	; (800200c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7fe f89e 	bl	8000104 <__udivsi3>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fce:	e008      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	e001      	b.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e009      	b.n	8001ff6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	401a      	ands	r2, r3
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d0ed      	beq.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40007000 	.word	0x40007000
 8002004:	fffff9ff 	.word	0xfffff9ff
 8002008:	20000004 	.word	0x20000004
 800200c:	000f4240 	.word	0x000f4240

08002010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e304      	b.n	800262c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	4013      	ands	r3, r2
 800202a:	d100      	bne.n	800202e <HAL_RCC_OscConfig+0x1e>
 800202c:	e07c      	b.n	8002128 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202e:	4bc3      	ldr	r3, [pc, #780]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2238      	movs	r2, #56	; 0x38
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002038:	4bc0      	ldr	r3, [pc, #768]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2203      	movs	r2, #3
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d102      	bne.n	800204e <HAL_RCC_OscConfig+0x3e>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b03      	cmp	r3, #3
 800204c:	d002      	beq.n	8002054 <HAL_RCC_OscConfig+0x44>
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d10b      	bne.n	800206c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4bb9      	ldr	r3, [pc, #740]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	029b      	lsls	r3, r3, #10
 800205c:	4013      	ands	r3, r2
 800205e:	d062      	beq.n	8002126 <HAL_RCC_OscConfig+0x116>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d15e      	bne.n	8002126 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e2df      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x78>
 8002078:	4bb0      	ldr	r3, [pc, #704]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4baf      	ldr	r3, [pc, #700]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0249      	lsls	r1, r1, #9
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e020      	b.n	80020ca <HAL_RCC_OscConfig+0xba>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	23a0      	movs	r3, #160	; 0xa0
 800208e:	02db      	lsls	r3, r3, #11
 8002090:	429a      	cmp	r2, r3
 8002092:	d10e      	bne.n	80020b2 <HAL_RCC_OscConfig+0xa2>
 8002094:	4ba9      	ldr	r3, [pc, #676]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4ba8      	ldr	r3, [pc, #672]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	02c9      	lsls	r1, r1, #11
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	4ba6      	ldr	r3, [pc, #664]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4ba5      	ldr	r3, [pc, #660]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	0249      	lsls	r1, r1, #9
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0xba>
 80020b2:	4ba2      	ldr	r3, [pc, #648]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4ba1      	ldr	r3, [pc, #644]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80020b8:	49a1      	ldr	r1, [pc, #644]	; (8002340 <HAL_RCC_OscConfig+0x330>)
 80020ba:	400a      	ands	r2, r1
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	4b9f      	ldr	r3, [pc, #636]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	4b9e      	ldr	r3, [pc, #632]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80020c4:	499f      	ldr	r1, [pc, #636]	; (8002344 <HAL_RCC_OscConfig+0x334>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d014      	beq.n	80020fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7ff f891 	bl	80011f8 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff f88c 	bl	80011f8 <HAL_GetTick>
 80020e0:	0002      	movs	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e29e      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ee:	4b93      	ldr	r3, [pc, #588]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	029b      	lsls	r3, r3, #10
 80020f6:	4013      	ands	r3, r2
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xcc>
 80020fa:	e015      	b.n	8002128 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7ff f87c 	bl	80011f8 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002106:	f7ff f877 	bl	80011f8 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e289      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002118:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	029b      	lsls	r3, r3, #10
 8002120:	4013      	ands	r3, r2
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0xf6>
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2202      	movs	r2, #2
 800212e:	4013      	ands	r3, r2
 8002130:	d100      	bne.n	8002134 <HAL_RCC_OscConfig+0x124>
 8002132:	e099      	b.n	8002268 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002134:	4b81      	ldr	r3, [pc, #516]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2238      	movs	r2, #56	; 0x38
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213e:	4b7f      	ldr	r3, [pc, #508]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2203      	movs	r2, #3
 8002144:	4013      	ands	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b10      	cmp	r3, #16
 800214c:	d102      	bne.n	8002154 <HAL_RCC_OscConfig+0x144>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d002      	beq.n	800215a <HAL_RCC_OscConfig+0x14a>
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d135      	bne.n	80021c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800215a:	4b78      	ldr	r3, [pc, #480]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4013      	ands	r3, r2
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x162>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e25c      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b72      	ldr	r3, [pc, #456]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4a74      	ldr	r2, [pc, #464]	; (8002348 <HAL_RCC_OscConfig+0x338>)
 8002178:	4013      	ands	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	021a      	lsls	r2, r3, #8
 8002182:	4b6e      	ldr	r3, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002184:	430a      	orrs	r2, r1
 8002186:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d112      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800218e:	4b6b      	ldr	r3, [pc, #428]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_RCC_OscConfig+0x33c>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021a2:	4b66      	ldr	r3, [pc, #408]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	0adb      	lsrs	r3, r3, #11
 80021a8:	2207      	movs	r2, #7
 80021aa:	4013      	ands	r3, r2
 80021ac:	4a68      	ldr	r2, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x340>)
 80021ae:	40da      	lsrs	r2, r3
 80021b0:	4b68      	ldr	r3, [pc, #416]	; (8002354 <HAL_RCC_OscConfig+0x344>)
 80021b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021b4:	4b68      	ldr	r3, [pc, #416]	; (8002358 <HAL_RCC_OscConfig+0x348>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7fe ffc3 	bl	8001144 <HAL_InitTick>
 80021be:	1e03      	subs	r3, r0, #0
 80021c0:	d051      	beq.n	8002266 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e232      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d030      	beq.n	8002230 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021ce:	4b5b      	ldr	r3, [pc, #364]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5e      	ldr	r2, [pc, #376]	; (800234c <HAL_RCC_OscConfig+0x33c>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	4b57      	ldr	r3, [pc, #348]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80021de:	430a      	orrs	r2, r1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80021e2:	4b56      	ldr	r3, [pc, #344]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b55      	ldr	r3, [pc, #340]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	0049      	lsls	r1, r1, #1
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f802 	bl	80011f8 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fa:	f7fe fffd 	bl	80011f8 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e20f      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4013      	ands	r3, r2
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b48      	ldr	r3, [pc, #288]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <HAL_RCC_OscConfig+0x338>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	021a      	lsls	r2, r3, #8
 8002228:	4b44      	ldr	r3, [pc, #272]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	e01b      	b.n	8002268 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002230:	4b42      	ldr	r3, [pc, #264]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002236:	4949      	ldr	r1, [pc, #292]	; (800235c <HAL_RCC_OscConfig+0x34c>)
 8002238:	400a      	ands	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe ffdc 	bl	80011f8 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe ffd7 	bl	80011f8 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1e9      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002258:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4013      	ands	r3, r2
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x236>
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002266:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2208      	movs	r2, #8
 800226e:	4013      	ands	r3, r2
 8002270:	d047      	beq.n	8002302 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	; 0x38
 8002278:	4013      	ands	r3, r2
 800227a:	2b18      	cmp	r3, #24
 800227c:	d10a      	bne.n	8002294 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d03c      	beq.n	8002302 <HAL_RCC_OscConfig+0x2f2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d138      	bne.n	8002302 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e1cb      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d019      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 800229e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022a0:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	430a      	orrs	r2, r1
 80022a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe ffa6 	bl	80011f8 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b2:	f7fe ffa1 	bl	80011f8 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e1b3      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80022c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d0f1      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2a2>
 80022ce:	e018      	b.n	8002302 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80022d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	438a      	bics	r2, r1
 80022da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe ff8c 	bl	80011f8 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7fe ff87 	bl	80011f8 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e199      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 80022fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d1f1      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d100      	bne.n	800230e <HAL_RCC_OscConfig+0x2fe>
 800230c:	e0c6      	b.n	800249c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	231f      	movs	r3, #31
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2238      	movs	r2, #56	; 0x38
 800231c:	4013      	ands	r3, r2
 800231e:	2b20      	cmp	r3, #32
 8002320:	d11e      	bne.n	8002360 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x32c>)
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2202      	movs	r2, #2
 8002328:	4013      	ands	r3, r2
 800232a:	d100      	bne.n	800232e <HAL_RCC_OscConfig+0x31e>
 800232c:	e0b6      	b.n	800249c <HAL_RCC_OscConfig+0x48c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d000      	beq.n	8002338 <HAL_RCC_OscConfig+0x328>
 8002336:	e0b1      	b.n	800249c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e177      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
 800233c:	40021000 	.word	0x40021000
 8002340:	fffeffff 	.word	0xfffeffff
 8002344:	fffbffff 	.word	0xfffbffff
 8002348:	ffff80ff 	.word	0xffff80ff
 800234c:	ffffc7ff 	.word	0xffffc7ff
 8002350:	00f42400 	.word	0x00f42400
 8002354:	20000004 	.word	0x20000004
 8002358:	20000008 	.word	0x20000008
 800235c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002360:	4bb4      	ldr	r3, [pc, #720]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	055b      	lsls	r3, r3, #21
 8002368:	4013      	ands	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_RCC_OscConfig+0x360>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x362>
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d011      	beq.n	800239a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	4baf      	ldr	r3, [pc, #700]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800237a:	4bae      	ldr	r3, [pc, #696]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	0549      	lsls	r1, r1, #21
 8002380:	430a      	orrs	r2, r1
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
 8002384:	4bab      	ldr	r3, [pc, #684]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	055b      	lsls	r3, r3, #21
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002392:	231f      	movs	r3, #31
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2201      	movs	r2, #1
 8002398:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	4ba7      	ldr	r3, [pc, #668]	; (8002638 <HAL_RCC_OscConfig+0x628>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	d11a      	bne.n	80023dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a6:	4ba4      	ldr	r3, [pc, #656]	; (8002638 <HAL_RCC_OscConfig+0x628>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4ba3      	ldr	r3, [pc, #652]	; (8002638 <HAL_RCC_OscConfig+0x628>)
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0049      	lsls	r1, r1, #1
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023b4:	f7fe ff20 	bl	80011f8 <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe ff1b 	bl	80011f8 <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e12d      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d0:	4b99      	ldr	r3, [pc, #612]	; (8002638 <HAL_RCC_OscConfig+0x628>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	2380      	movs	r3, #128	; 0x80
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x3e2>
 80023e4:	4b93      	ldr	r3, [pc, #588]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80023e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023e8:	4b92      	ldr	r3, [pc, #584]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	430a      	orrs	r2, r1
 80023ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x41c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x404>
 80023fa:	4b8e      	ldr	r3, [pc, #568]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80023fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023fe:	4b8d      	ldr	r3, [pc, #564]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002400:	2104      	movs	r1, #4
 8002402:	430a      	orrs	r2, r1
 8002404:	65da      	str	r2, [r3, #92]	; 0x5c
 8002406:	4b8b      	ldr	r3, [pc, #556]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800240a:	4b8a      	ldr	r3, [pc, #552]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 800240c:	2101      	movs	r1, #1
 800240e:	430a      	orrs	r2, r1
 8002410:	65da      	str	r2, [r3, #92]	; 0x5c
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x41c>
 8002414:	4b87      	ldr	r3, [pc, #540]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002416:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002418:	4b86      	ldr	r3, [pc, #536]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 800241a:	2101      	movs	r1, #1
 800241c:	438a      	bics	r2, r1
 800241e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002420:	4b84      	ldr	r3, [pc, #528]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002424:	4b83      	ldr	r3, [pc, #524]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002426:	2104      	movs	r1, #4
 8002428:	438a      	bics	r2, r1
 800242a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d014      	beq.n	800245e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fee0 	bl	80011f8 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243c:	e009      	b.n	8002452 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fedb 	bl	80011f8 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	4a7c      	ldr	r2, [pc, #496]	; (800263c <HAL_RCC_OscConfig+0x62c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0ec      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b78      	ldr	r3, [pc, #480]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	2202      	movs	r2, #2
 8002458:	4013      	ands	r3, r2
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x42e>
 800245c:	e013      	b.n	8002486 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fecb 	bl	80011f8 <HAL_GetTick>
 8002462:	0003      	movs	r3, r0
 8002464:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002466:	e009      	b.n	800247c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fec6 	bl	80011f8 <HAL_GetTick>
 800246c:	0002      	movs	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	4a72      	ldr	r2, [pc, #456]	; (800263c <HAL_RCC_OscConfig+0x62c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0d7      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247c:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2202      	movs	r2, #2
 8002482:	4013      	ands	r3, r2
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002486:	231f      	movs	r3, #31
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002494:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002496:	496a      	ldr	r1, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x630>)
 8002498:	400a      	ands	r2, r1
 800249a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d100      	bne.n	80024a6 <HAL_RCC_OscConfig+0x496>
 80024a4:	e0c1      	b.n	800262a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a6:	4b63      	ldr	r3, [pc, #396]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2238      	movs	r2, #56	; 0x38
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b10      	cmp	r3, #16
 80024b0:	d100      	bne.n	80024b4 <HAL_RCC_OscConfig+0x4a4>
 80024b2:	e081      	b.n	80025b8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d156      	bne.n	800256a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b5d      	ldr	r3, [pc, #372]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80024c2:	4960      	ldr	r1, [pc, #384]	; (8002644 <HAL_RCC_OscConfig+0x634>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fe96 	bl	80011f8 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fe91 	bl	80011f8 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0a3      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	049b      	lsls	r3, r3, #18
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a54      	ldr	r2, [pc, #336]	; (8002648 <HAL_RCC_OscConfig+0x638>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1a      	ldr	r2, [r3, #32]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	431a      	orrs	r2, r3
 800251e:	4b45      	ldr	r3, [pc, #276]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002524:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b42      	ldr	r3, [pc, #264]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	0449      	lsls	r1, r1, #17
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002532:	4b40      	ldr	r3, [pc, #256]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	0549      	lsls	r1, r1, #21
 800253c:	430a      	orrs	r2, r1
 800253e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fe5a 	bl	80011f8 <HAL_GetTick>
 8002544:	0003      	movs	r3, r0
 8002546:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe fe55 	bl	80011f8 <HAL_GetTick>
 800254e:	0002      	movs	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e067      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	049b      	lsls	r3, r3, #18
 8002564:	4013      	ands	r3, r2
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x53a>
 8002568:	e05f      	b.n	800262a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b31      	ldr	r3, [pc, #196]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002570:	4934      	ldr	r1, [pc, #208]	; (8002644 <HAL_RCC_OscConfig+0x634>)
 8002572:	400a      	ands	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002576:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 800257c:	2103      	movs	r1, #3
 800257e:	438a      	bics	r2, r1
 8002580:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002582:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 8002588:	4930      	ldr	r1, [pc, #192]	; (800264c <HAL_RCC_OscConfig+0x63c>)
 800258a:	400a      	ands	r2, r1
 800258c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fe33 	bl	80011f8 <HAL_GetTick>
 8002592:	0003      	movs	r3, r0
 8002594:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fe2e 	bl	80011f8 <HAL_GetTick>
 800259c:	0002      	movs	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e040      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	049b      	lsls	r3, r3, #18
 80025b2:	4013      	ands	r3, r2
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x588>
 80025b6:	e038      	b.n	800262a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e033      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x624>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2203      	movs	r2, #3
 80025ce:	401a      	ands	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d126      	bne.n	8002626 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2270      	movs	r2, #112	; 0x70
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d11f      	bne.n	8002626 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	23fe      	movs	r3, #254	; 0xfe
 80025ea:	01db      	lsls	r3, r3, #7
 80025ec:	401a      	ands	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d116      	bne.n	8002626 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	23f8      	movs	r3, #248	; 0xf8
 80025fc:	039b      	lsls	r3, r3, #14
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d10e      	bne.n	8002626 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	23e0      	movs	r3, #224	; 0xe0
 800260c:	051b      	lsls	r3, r3, #20
 800260e:	401a      	ands	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d106      	bne.n	8002626 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	0f5b      	lsrs	r3, r3, #29
 800261c:	075a      	lsls	r2, r3, #29
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b008      	add	sp, #32
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	00001388 	.word	0x00001388
 8002640:	efffffff 	.word	0xefffffff
 8002644:	feffffff 	.word	0xfeffffff
 8002648:	11c1808c 	.word	0x11c1808c
 800264c:	eefeffff 	.word	0xeefeffff

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0e9      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b76      	ldr	r3, [pc, #472]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2207      	movs	r2, #7
 800266a:	4013      	ands	r3, r2
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d91e      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b73      	ldr	r3, [pc, #460]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2207      	movs	r2, #7
 8002678:	4393      	bics	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	4b70      	ldr	r3, [pc, #448]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002684:	f7fe fdb8 	bl	80011f8 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800268c:	e009      	b.n	80026a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268e:	f7fe fdb3 	bl	80011f8 <HAL_GetTick>
 8002692:	0002      	movs	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	4a6a      	ldr	r2, [pc, #424]	; (8002844 <HAL_RCC_ClockConfig+0x1f4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0ca      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2207      	movs	r2, #7
 80026a8:	4013      	ands	r3, r2
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1ee      	bne.n	800268e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d015      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d006      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026c4:	4b60      	ldr	r3, [pc, #384]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026ca:	21e0      	movs	r1, #224	; 0xe0
 80026cc:	01c9      	lsls	r1, r1, #7
 80026ce:	430a      	orrs	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d2:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4a5d      	ldr	r2, [pc, #372]	; (800284c <HAL_RCC_ClockConfig+0x1fc>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026e2:	430a      	orrs	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d057      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	d12b      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e097      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d107      	bne.n	8002720 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002710:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	049b      	lsls	r3, r3, #18
 8002718:	4013      	ands	r3, r2
 800271a:	d11f      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e08b      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002728:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4013      	ands	r3, r2
 8002732:	d113      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e07f      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d106      	bne.n	800274e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002740:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d108      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e074      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e06d      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800275c:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2207      	movs	r2, #7
 8002762:	4393      	bics	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4b37      	ldr	r3, [pc, #220]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 800276c:	430a      	orrs	r2, r1
 800276e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002770:	f7fe fd42 	bl	80011f8 <HAL_GetTick>
 8002774:	0003      	movs	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002778:	e009      	b.n	800278e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277a:	f7fe fd3d 	bl	80011f8 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	4a2f      	ldr	r2, [pc, #188]	; (8002844 <HAL_RCC_ClockConfig+0x1f4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e054      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2e      	ldr	r3, [pc, #184]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2238      	movs	r2, #56	; 0x38
 8002794:	401a      	ands	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	429a      	cmp	r2, r3
 800279e:	d1ec      	bne.n	800277a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2207      	movs	r2, #7
 80027a6:	4013      	ands	r3, r2
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d21e      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2207      	movs	r2, #7
 80027b4:	4393      	bics	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027c0:	f7fe fd1a 	bl	80011f8 <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027c8:	e009      	b.n	80027de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ca:	f7fe fd15 	bl	80011f8 <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_RCC_ClockConfig+0x1f4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e02c      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2207      	movs	r2, #7
 80027e4:	4013      	ands	r3, r2
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1ee      	bne.n	80027ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2204      	movs	r2, #4
 80027f2:	4013      	ands	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4a15      	ldr	r2, [pc, #84]	; (8002850 <HAL_RCC_ClockConfig+0x200>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800280a:	f000 f829 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800280e:	0001      	movs	r1, r0
 8002810:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	220f      	movs	r2, #15
 8002818:	401a      	ands	r2, r3
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_RCC_ClockConfig+0x204>)
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	58d3      	ldr	r3, [r2, r3]
 8002820:	221f      	movs	r2, #31
 8002822:	4013      	ands	r3, r2
 8002824:	000a      	movs	r2, r1
 8002826:	40da      	lsrs	r2, r3
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_ClockConfig+0x208>)
 800282a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_ClockConfig+0x20c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe fc87 	bl	8001144 <HAL_InitTick>
 8002836:	0003      	movs	r3, r0
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b004      	add	sp, #16
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40022000 	.word	0x40022000
 8002844:	00001388 	.word	0x00001388
 8002848:	40021000 	.word	0x40021000
 800284c:	fffff0ff 	.word	0xfffff0ff
 8002850:	ffff8fff 	.word	0xffff8fff
 8002854:	08004534 	.word	0x08004534
 8002858:	20000004 	.word	0x20000004
 800285c:	20000008 	.word	0x20000008

08002860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002866:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2238      	movs	r2, #56	; 0x38
 800286c:	4013      	ands	r3, r2
 800286e:	d10f      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002870:	4b39      	ldr	r3, [pc, #228]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0adb      	lsrs	r3, r3, #11
 8002876:	2207      	movs	r2, #7
 8002878:	4013      	ands	r3, r2
 800287a:	2201      	movs	r2, #1
 800287c:	409a      	lsls	r2, r3
 800287e:	0013      	movs	r3, r2
 8002880:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	4835      	ldr	r0, [pc, #212]	; (800295c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002886:	f7fd fc3d 	bl	8000104 <__udivsi3>
 800288a:	0003      	movs	r3, r0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	e05d      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002890:	4b31      	ldr	r3, [pc, #196]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2238      	movs	r2, #56	; 0x38
 8002896:	4013      	ands	r3, r2
 8002898:	2b08      	cmp	r3, #8
 800289a:	d102      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <HAL_RCC_GetSysClockFreq+0x100>)
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	e054      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028a2:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2238      	movs	r2, #56	; 0x38
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d138      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028ae:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2203      	movs	r2, #3
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	2207      	movs	r2, #7
 80028c0:	4013      	ands	r3, r2
 80028c2:	3301      	adds	r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	4824      	ldr	r0, [pc, #144]	; (8002960 <HAL_RCC_GetSysClockFreq+0x100>)
 80028d0:	f7fd fc18 	bl	8000104 <__udivsi3>
 80028d4:	0003      	movs	r3, r0
 80028d6:	0019      	movs	r1, r3
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	227f      	movs	r2, #127	; 0x7f
 80028e0:	4013      	ands	r3, r2
 80028e2:	434b      	muls	r3, r1
 80028e4:	617b      	str	r3, [r7, #20]
        break;
 80028e6:	e00d      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	481c      	ldr	r0, [pc, #112]	; (800295c <HAL_RCC_GetSysClockFreq+0xfc>)
 80028ec:	f7fd fc0a 	bl	8000104 <__udivsi3>
 80028f0:	0003      	movs	r3, r0
 80028f2:	0019      	movs	r1, r3
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	227f      	movs	r2, #127	; 0x7f
 80028fc:	4013      	ands	r3, r2
 80028fe:	434b      	muls	r3, r1
 8002900:	617b      	str	r3, [r7, #20]
        break;
 8002902:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0f5b      	lsrs	r3, r3, #29
 800290a:	2207      	movs	r2, #7
 800290c:	4013      	ands	r3, r2
 800290e:	3301      	adds	r3, #1
 8002910:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f7fd fbf5 	bl	8000104 <__udivsi3>
 800291a:	0003      	movs	r3, r0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e015      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2238      	movs	r2, #56	; 0x38
 8002926:	4013      	ands	r3, r2
 8002928:	2b20      	cmp	r3, #32
 800292a:	d103      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e00b      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2238      	movs	r2, #56	; 0x38
 800293a:	4013      	ands	r3, r2
 800293c:	2b18      	cmp	r3, #24
 800293e:	d103      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002940:	23fa      	movs	r3, #250	; 0xfa
 8002942:	01db      	lsls	r3, r3, #7
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	e001      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800294c:	693b      	ldr	r3, [r7, #16]
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b006      	add	sp, #24
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40021000 	.word	0x40021000
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800296c:	2313      	movs	r3, #19
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002974:	2312      	movs	r3, #18
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	029b      	lsls	r3, r3, #10
 8002984:	4013      	ands	r3, r2
 8002986:	d100      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002988:	e0a4      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298a:	2311      	movs	r3, #17
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002992:	4bc3      	ldr	r3, [pc, #780]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	055b      	lsls	r3, r3, #21
 800299a:	4013      	ands	r3, r2
 800299c:	d111      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	4bc0      	ldr	r3, [pc, #768]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029a2:	4bbf      	ldr	r3, [pc, #764]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	0549      	lsls	r1, r1, #21
 80029a8:	430a      	orrs	r2, r1
 80029aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80029ac:	4bbc      	ldr	r3, [pc, #752]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80029ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	055b      	lsls	r3, r3, #21
 80029b4:	4013      	ands	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ba:	2311      	movs	r3, #17
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c2:	4bb8      	ldr	r3, [pc, #736]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4bb7      	ldr	r3, [pc, #732]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	0049      	lsls	r1, r1, #1
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029d0:	f7fe fc12 	bl	80011f8 <HAL_GetTick>
 80029d4:	0003      	movs	r3, r0
 80029d6:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d8:	e00b      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029da:	f7fe fc0d 	bl	80011f8 <HAL_GetTick>
 80029de:	0002      	movs	r2, r0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d904      	bls.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80029e8:	2313      	movs	r3, #19
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	2203      	movs	r2, #3
 80029ee:	701a      	strb	r2, [r3, #0]
        break;
 80029f0:	e005      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029f2:	4bac      	ldr	r3, [pc, #688]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4013      	ands	r3, r2
 80029fc:	d0ed      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80029fe:	2313      	movs	r3, #19
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d154      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a08:	4ba5      	ldr	r3, [pc, #660]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a0c:	23c0      	movs	r3, #192	; 0xc0
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4013      	ands	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d019      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d014      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a24:	4b9e      	ldr	r3, [pc, #632]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	4a9f      	ldr	r2, [pc, #636]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a2e:	4b9c      	ldr	r3, [pc, #624]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a32:	4b9b      	ldr	r3, [pc, #620]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	0249      	lsls	r1, r1, #9
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a3c:	4b98      	ldr	r3, [pc, #608]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a40:	4b97      	ldr	r3, [pc, #604]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a42:	499a      	ldr	r1, [pc, #616]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002a44:	400a      	ands	r2, r1
 8002a46:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a48:	4b95      	ldr	r3, [pc, #596]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	d016      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7fe fbcf 	bl	80011f8 <HAL_GetTick>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5e:	e00c      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe fbca 	bl	80011f8 <HAL_GetTick>
 8002a64:	0002      	movs	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	4a91      	ldr	r2, [pc, #580]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d904      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002a70:	2313      	movs	r3, #19
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2203      	movs	r2, #3
 8002a76:	701a      	strb	r2, [r3, #0]
            break;
 8002a78:	e004      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a7a:	4b89      	ldr	r3, [pc, #548]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2202      	movs	r2, #2
 8002a80:	4013      	ands	r3, r2
 8002a82:	d0ed      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002a84:	2313      	movs	r3, #19
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a8e:	4b84      	ldr	r3, [pc, #528]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	4a85      	ldr	r2, [pc, #532]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9c:	4b80      	ldr	r3, [pc, #512]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aa2:	e00c      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa4:	2312      	movs	r3, #18
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2213      	movs	r2, #19
 8002aaa:	18ba      	adds	r2, r7, r2
 8002aac:	7812      	ldrb	r2, [r2, #0]
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e005      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab2:	2312      	movs	r3, #18
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2213      	movs	r2, #19
 8002ab8:	18ba      	adds	r2, r7, r2
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002abe:	2311      	movs	r3, #17
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac8:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002acc:	4b74      	ldr	r3, [pc, #464]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ace:	4979      	ldr	r1, [pc, #484]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ade:	4b70      	ldr	r3, [pc, #448]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	4393      	bics	r3, r2
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002aee:	430a      	orrs	r2, r1
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2202      	movs	r2, #2
 8002af8:	4013      	ands	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	220c      	movs	r2, #12
 8002b02:	4393      	bics	r3, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	4013      	ands	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b1a:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	4a66      	ldr	r2, [pc, #408]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	0019      	movs	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b3a:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	4b55      	ldr	r3, [pc, #340]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4013      	ands	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b5a:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5e:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	4013      	ands	r3, r2
 8002b76:	d009      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b78:	4b49      	ldr	r3, [pc, #292]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	4a51      	ldr	r2, [pc, #324]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	01db      	lsls	r3, r3, #7
 8002b94:	4013      	ands	r3, r2
 8002b96:	d015      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	0899      	lsrs	r1, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1a      	ldr	r2, [r3, #32]
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	05db      	lsls	r3, r3, #23
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	0249      	lsls	r1, r1, #9
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	031b      	lsls	r3, r3, #12
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d009      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	2240      	movs	r2, #64	; 0x40
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002be0:	430a      	orrs	r2, r1
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	039b      	lsls	r3, r3, #14
 8002bec:	4013      	ands	r3, r2
 8002bee:	d016      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c00:	430a      	orrs	r2, r1
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	03db      	lsls	r3, r3, #15
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	0449      	lsls	r1, r1, #17
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	03db      	lsls	r3, r3, #15
 8002c26:	4013      	ands	r3, r2
 8002c28:	d016      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	0019      	movs	r1, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	045b      	lsls	r3, r3, #17
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d106      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	0449      	lsls	r1, r1, #17
 8002c54:	430a      	orrs	r2, r1
 8002c56:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4013      	ands	r3, r2
 8002c62:	d016      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c74:	430a      	orrs	r2, r1
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	01db      	lsls	r3, r3, #7
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d106      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0249      	lsls	r1, r1, #9
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002c92:	2312      	movs	r3, #18
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	781b      	ldrb	r3, [r3, #0]
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b006      	add	sp, #24
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	fffffcff 	.word	0xfffffcff
 8002cac:	fffeffff 	.word	0xfffeffff
 8002cb0:	00001388 	.word	0x00001388
 8002cb4:	efffffff 	.word	0xefffffff
 8002cb8:	fffff3ff 	.word	0xfffff3ff
 8002cbc:	fff3ffff 	.word	0xfff3ffff
 8002cc0:	ffcfffff 	.word	0xffcfffff
 8002cc4:	ffffcfff 	.word	0xffffcfff
 8002cc8:	ffbfffff 	.word	0xffbfffff
 8002ccc:	feffffff 	.word	0xfeffffff
 8002cd0:	ffff3fff 	.word	0xffff3fff

08002cd4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cd4:	b5b0      	push	{r4, r5, r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cdc:	230f      	movs	r3, #15
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d100      	bne.n	8002cec <HAL_RTC_Init+0x18>
 8002cea:	e07f      	b.n	8002dec <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2229      	movs	r2, #41	; 0x29
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2228      	movs	r2, #40	; 0x28
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2288      	movs	r2, #136	; 0x88
 8002d04:	0212      	lsls	r2, r2, #8
 8002d06:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7fd ff0c 	bl	8000b28 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2229      	movs	r2, #41	; 0x29
 8002d14:	2102      	movs	r1, #2
 8002d16:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	22ca      	movs	r2, #202	; 0xca
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2253      	movs	r2, #83	; 0x53
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d28:	250f      	movs	r5, #15
 8002d2a:	197c      	adds	r4, r7, r5
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f9c7 	bl	80030c2 <RTC_EnterInitMode>
 8002d34:	0003      	movs	r3, r0
 8002d36:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002d38:	197b      	adds	r3, r7, r5
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d148      	bne.n	8002dd2 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	492c      	ldr	r1, [pc, #176]	; (8002dfc <HAL_RTC_Init+0x128>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6999      	ldr	r1, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6912      	ldr	r2, [r2, #16]
 8002d76:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	041a      	lsls	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d8c:	250f      	movs	r5, #15
 8002d8e:	197c      	adds	r4, r7, r5
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f9d8 	bl	8003148 <RTC_ExitInitMode>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8002d9c:	197b      	adds	r3, r7, r5
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d116      	bne.n	8002dd2 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	00d2      	lsls	r2, r2, #3
 8002db0:	08d2      	lsrs	r2, r2, #3
 8002db2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002dda:	230f      	movs	r3, #15
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2229      	movs	r2, #41	; 0x29
 8002de8:	2101      	movs	r1, #1
 8002dea:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002dec:	230f      	movs	r3, #15
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	781b      	ldrb	r3, [r3, #0]
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b004      	add	sp, #16
 8002df8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	fb8fffbf 	.word	0xfb8fffbf

08002e00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2228      	movs	r2, #40	; 0x28
 8002e10:	5c9b      	ldrb	r3, [r3, r2]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_RTC_SetTime+0x1a>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e092      	b.n	8002f40 <HAL_RTC_SetTime+0x140>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2228      	movs	r2, #40	; 0x28
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2229      	movs	r2, #41	; 0x29
 8002e26:	2102      	movs	r1, #2
 8002e28:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	22ca      	movs	r2, #202	; 0xca
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2253      	movs	r2, #83	; 0x53
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e3a:	2513      	movs	r5, #19
 8002e3c:	197c      	adds	r4, r7, r5
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 f93e 	bl	80030c2 <RTC_EnterInitMode>
 8002e46:	0003      	movs	r3, r0
 8002e48:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002e4a:	197b      	adds	r3, r7, r5
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d162      	bne.n	8002f18 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d125      	bne.n	8002ea4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	4013      	ands	r3, r2
 8002e62:	d102      	bne.n	8002e6a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f000 f9b0 	bl	80031d4 <RTC_ByteToBcd2>
 8002e74:	0003      	movs	r3, r0
 8002e76:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 f9a9 	bl	80031d4 <RTC_ByteToBcd2>
 8002e82:	0003      	movs	r3, r0
 8002e84:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e86:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	789b      	ldrb	r3, [r3, #2]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f9a1 	bl	80031d4 <RTC_ByteToBcd2>
 8002e92:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e94:	0022      	movs	r2, r4
 8002e96:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	78db      	ldrb	r3, [r3, #3]
 8002e9c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e017      	b.n	8002ed4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2240      	movs	r2, #64	; 0x40
 8002eac:	4013      	ands	r3, r2
 8002eae:	d102      	bne.n	8002eb6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ec2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002ec8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	78db      	ldrb	r3, [r3, #3]
 8002ece:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	491b      	ldr	r1, [pc, #108]	; (8002f48 <HAL_RTC_SetTime+0x148>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4918      	ldr	r1, [pc, #96]	; (8002f4c <HAL_RTC_SetTime+0x14c>)
 8002eec:	400a      	ands	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6999      	ldr	r1, [r3, #24]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002f08:	2313      	movs	r3, #19
 8002f0a:	18fc      	adds	r4, r7, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 f91a 	bl	8003148 <RTC_ExitInitMode>
 8002f14:	0003      	movs	r3, r0
 8002f16:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	22ff      	movs	r2, #255	; 0xff
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002f20:	2313      	movs	r3, #19
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2229      	movs	r2, #41	; 0x29
 8002f2e:	2101      	movs	r1, #1
 8002f30:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2228      	movs	r2, #40	; 0x28
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]

  return status;
 8002f3a:	2313      	movs	r3, #19
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	781b      	ldrb	r3, [r3, #0]
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b006      	add	sp, #24
 8002f46:	bdb0      	pop	{r4, r5, r7, pc}
 8002f48:	007f7f7f 	.word	0x007f7f7f
 8002f4c:	fffbffff 	.word	0xfffbffff

08002f50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f50:	b5b0      	push	{r4, r5, r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2228      	movs	r2, #40	; 0x28
 8002f60:	5c9b      	ldrb	r3, [r3, r2]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_RTC_SetDate+0x1a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e07e      	b.n	8003068 <HAL_RTC_SetDate+0x118>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2228      	movs	r2, #40	; 0x28
 8002f6e:	2101      	movs	r1, #1
 8002f70:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2229      	movs	r2, #41	; 0x29
 8002f76:	2102      	movs	r1, #2
 8002f78:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10e      	bne.n	8002f9e <HAL_RTC_SetDate+0x4e>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	785b      	ldrb	r3, [r3, #1]
 8002f84:	001a      	movs	r2, r3
 8002f86:	2310      	movs	r3, #16
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d008      	beq.n	8002f9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	2210      	movs	r2, #16
 8002f92:	4393      	bics	r3, r2
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	330a      	adds	r3, #10
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11c      	bne.n	8002fde <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f913 	bl	80031d4 <RTC_ByteToBcd2>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 f90c 	bl	80031d4 <RTC_ByteToBcd2>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fc0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	789b      	ldrb	r3, [r3, #2]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f000 f904 	bl	80031d4 <RTC_ByteToBcd2>
 8002fcc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fce:	0022      	movs	r2, r4
 8002fd0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e00e      	b.n	8002ffc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002fea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002ff0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	22ca      	movs	r2, #202	; 0xca
 8003002:	625a      	str	r2, [r3, #36]	; 0x24
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2253      	movs	r2, #83	; 0x53
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800300c:	2513      	movs	r5, #19
 800300e:	197c      	adds	r4, r7, r5
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 f855 	bl	80030c2 <RTC_EnterInitMode>
 8003018:	0003      	movs	r3, r0
 800301a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800301c:	197b      	adds	r3, r7, r5
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10d      	bne.n	8003040 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4911      	ldr	r1, [pc, #68]	; (8003070 <HAL_RTC_SetDate+0x120>)
 800302c:	400a      	ands	r2, r1
 800302e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003030:	2313      	movs	r3, #19
 8003032:	18fc      	adds	r4, r7, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	0018      	movs	r0, r3
 8003038:	f000 f886 	bl	8003148 <RTC_ExitInitMode>
 800303c:	0003      	movs	r3, r0
 800303e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003048:	2313      	movs	r3, #19
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2229      	movs	r2, #41	; 0x29
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2228      	movs	r2, #40	; 0x28
 800305e:	2100      	movs	r1, #0
 8003060:	5499      	strb	r1, [r3, r2]

  return status;
 8003062:	2313      	movs	r3, #19
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	781b      	ldrb	r3, [r3, #0]
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b006      	add	sp, #24
 800306e:	bdb0      	pop	{r4, r5, r7, pc}
 8003070:	00ffff3f 	.word	0x00ffff3f

08003074 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	21a0      	movs	r1, #160	; 0xa0
 8003088:	438a      	bics	r2, r1
 800308a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800308c:	f7fe f8b4 	bl	80011f8 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003094:	e00a      	b.n	80030ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003096:	f7fe f8af 	bl	80011f8 <HAL_GetTick>
 800309a:	0002      	movs	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad2      	subs	r2, r2, r3
 80030a0:	23fa      	movs	r3, #250	; 0xfa
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d901      	bls.n	80030ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e006      	b.n	80030ba <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	4013      	ands	r3, r2
 80030b6:	d0ee      	beq.n	8003096 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b004      	add	sp, #16
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80030ca:	230f      	movs	r3, #15
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2240      	movs	r2, #64	; 0x40
 80030da:	4013      	ands	r3, r2
 80030dc:	d12d      	bne.n	800313a <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2180      	movs	r1, #128	; 0x80
 80030ea:	430a      	orrs	r2, r1
 80030ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80030ee:	f7fe f883 	bl	80011f8 <HAL_GetTick>
 80030f2:	0003      	movs	r3, r0
 80030f4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80030f6:	e015      	b.n	8003124 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80030f8:	f7fe f87e 	bl	80011f8 <HAL_GetTick>
 80030fc:	0002      	movs	r2, r0
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	1ad2      	subs	r2, r2, r3
 8003102:	210f      	movs	r1, #15
 8003104:	187b      	adds	r3, r7, r1
 8003106:	1879      	adds	r1, r7, r1
 8003108:	7809      	ldrb	r1, [r1, #0]
 800310a:	7019      	strb	r1, [r3, #0]
 800310c:	23fa      	movs	r3, #250	; 0xfa
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d907      	bls.n	8003124 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2203      	movs	r2, #3
 800311a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2229      	movs	r2, #41	; 0x29
 8003120:	2103      	movs	r1, #3
 8003122:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	4013      	ands	r3, r2
 800312e:	d104      	bne.n	800313a <RTC_EnterInitMode+0x78>
 8003130:	230f      	movs	r3, #15
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d1de      	bne.n	80030f8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800313a:	230f      	movs	r3, #15
 800313c:	18fb      	adds	r3, r7, r3
 800313e:	781b      	ldrb	r3, [r3, #0]
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}

08003148 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003158:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <RTC_ExitInitMode+0x88>)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <RTC_ExitInitMode+0x88>)
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	438a      	bics	r2, r1
 8003162:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <RTC_ExitInitMode+0x88>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2220      	movs	r2, #32
 800316a:	4013      	ands	r3, r2
 800316c:	d10e      	bne.n	800318c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	0018      	movs	r0, r3
 8003172:	f7ff ff7f 	bl	8003074 <HAL_RTC_WaitForSynchro>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d022      	beq.n	80031c0 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2229      	movs	r2, #41	; 0x29
 800317e:	2103      	movs	r1, #3
 8003180:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003182:	230f      	movs	r3, #15
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2203      	movs	r2, #3
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e019      	b.n	80031c0 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <RTC_ExitInitMode+0x88>)
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <RTC_ExitInitMode+0x88>)
 8003192:	2120      	movs	r1, #32
 8003194:	438a      	bics	r2, r1
 8003196:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f7ff ff6a 	bl	8003074 <HAL_RTC_WaitForSynchro>
 80031a0:	1e03      	subs	r3, r0, #0
 80031a2:	d007      	beq.n	80031b4 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2229      	movs	r2, #41	; 0x29
 80031a8:	2103      	movs	r1, #3
 80031aa:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	2203      	movs	r2, #3
 80031b2:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <RTC_ExitInitMode+0x88>)
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <RTC_ExitInitMode+0x88>)
 80031ba:	2120      	movs	r1, #32
 80031bc:	430a      	orrs	r2, r1
 80031be:	619a      	str	r2, [r3, #24]
  }

  return status;
 80031c0:	230f      	movs	r3, #15
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	781b      	ldrb	r3, [r3, #0]
}
 80031c6:	0018      	movs	r0, r3
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b004      	add	sp, #16
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	40002800 	.word	0x40002800

080031d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	0002      	movs	r2, r0
 80031dc:	1dfb      	adds	r3, r7, #7
 80031de:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80031e4:	230b      	movs	r3, #11
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	1dfa      	adds	r2, r7, #7
 80031ea:	7812      	ldrb	r2, [r2, #0]
 80031ec:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80031ee:	e008      	b.n	8003202 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80031f6:	220b      	movs	r2, #11
 80031f8:	18bb      	adds	r3, r7, r2
 80031fa:	18ba      	adds	r2, r7, r2
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	3a0a      	subs	r2, #10
 8003200:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003202:	230b      	movs	r3, #11
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b09      	cmp	r3, #9
 800320a:	d8f1      	bhi.n	80031f0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	b2da      	uxtb	r2, r3
 8003214:	230b      	movs	r3, #11
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	b2db      	uxtb	r3, r3
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01e      	b.n	8003276 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	223d      	movs	r2, #61	; 0x3d
 800323c:	5c9b      	ldrb	r3, [r3, r2]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d107      	bne.n	8003254 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	223c      	movs	r2, #60	; 0x3c
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0018      	movs	r0, r3
 8003250:	f7fd fe6e 	bl	8000f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	223d      	movs	r2, #61	; 0x3d
 8003258:	2102      	movs	r1, #2
 800325a:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	0019      	movs	r1, r3
 8003266:	0010      	movs	r0, r2
 8003268:	f000 fc00 	bl	8003a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	223d      	movs	r2, #61	; 0x3d
 8003270:	2101      	movs	r1, #1
 8003272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b002      	add	sp, #8
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2101      	movs	r1, #1
 8003294:	430a      	orrs	r2, r1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_TIM_Base_Start_IT+0x50>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d00c      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x44>
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	025b      	lsls	r3, r3, #9
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d007      	beq.n	80032c4 <HAL_TIM_Base_Start_IT+0x44>
  {
    __HAL_TIM_ENABLE(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2101      	movs	r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b004      	add	sp, #16
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	00010007 	.word	0x00010007

080032d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e01e      	b.n	8003324 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223d      	movs	r2, #61	; 0x3d
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	223c      	movs	r2, #60	; 0x3c
 80032f6:	2100      	movs	r1, #0
 80032f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 f815 	bl	800332c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	223d      	movs	r2, #61	; 0x3d
 8003306:	2102      	movs	r1, #2
 8003308:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	0019      	movs	r1, r3
 8003314:	0010      	movs	r0, r2
 8003316:	f000 fba9 	bl	8003a6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223d      	movs	r2, #61	; 0x3d
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e02e      	b.n	80033ae <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	223d      	movs	r2, #61	; 0x3d
 8003354:	5c9b      	ldrb	r3, [r3, r2]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	223c      	movs	r2, #60	; 0x3c
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f825 	bl	80033b6 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	223d      	movs	r2, #61	; 0x3d
 8003370:	2102      	movs	r1, #2
 8003372:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	0019      	movs	r1, r3
 800337e:	0010      	movs	r0, r2
 8003380:	f000 fb74 	bl	8003a6c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2108      	movs	r1, #8
 8003390:	438a      	bics	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	223d      	movs	r2, #61	; 0x3d
 80033a8:	2101      	movs	r1, #1
 80033aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b002      	add	sp, #8
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2201      	movs	r2, #1
 80033d8:	2100      	movs	r1, #0
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 ff26 	bl	800422c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	2104      	movs	r1, #4
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 ff1f 	bl	800422c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_TIM_OnePulse_Start+0x74>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_TIM_OnePulse_Start+0x4e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a10      	ldr	r2, [pc, #64]	; (8003440 <HAL_TIM_OnePulse_Start+0x78>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_TIM_OnePulse_Start+0x4e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <HAL_TIM_OnePulse_Start+0x7c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_TIM_OnePulse_Start+0x4e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0d      	ldr	r2, [pc, #52]	; (8003448 <HAL_TIM_OnePulse_Start+0x80>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_TIM_OnePulse_Start+0x52>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_TIM_OnePulse_Start+0x54>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_TIM_OnePulse_Start+0x6a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2180      	movs	r1, #128	; 0x80
 800342c:	0209      	lsls	r1, r1, #8
 800342e:	430a      	orrs	r2, r1
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40014000 	.word	0x40014000
 8003444:	40014400 	.word	0x40014400
 8003448:	40014800 	.word	0x40014800

0800344c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2202      	movs	r2, #2
 800345c:	4013      	ands	r3, r2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d124      	bne.n	80034ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2202      	movs	r2, #2
 800346a:	4013      	ands	r3, r2
 800346c:	2b02      	cmp	r3, #2
 800346e:	d11d      	bne.n	80034ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2203      	movs	r2, #3
 8003476:	4252      	negs	r2, r2
 8003478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2203      	movs	r2, #3
 8003488:	4013      	ands	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 fad4 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 8003494:	e007      	b.n	80034a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f000 fac7 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fad3 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2204      	movs	r2, #4
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d125      	bne.n	8003506 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2204      	movs	r2, #4
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d11e      	bne.n	8003506 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2205      	movs	r2, #5
 80034ce:	4252      	negs	r2, r2
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	23c0      	movs	r3, #192	; 0xc0
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4013      	ands	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 faa7 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 80034ee:	e007      	b.n	8003500 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	0018      	movs	r0, r3
 80034f4:	f000 fa9a 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0018      	movs	r0, r3
 80034fc:	f000 faa6 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2208      	movs	r2, #8
 800350e:	4013      	ands	r3, r2
 8003510:	2b08      	cmp	r3, #8
 8003512:	d124      	bne.n	800355e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2208      	movs	r2, #8
 800351c:	4013      	ands	r3, r2
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11d      	bne.n	800355e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2209      	movs	r2, #9
 8003528:	4252      	negs	r2, r2
 800352a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2204      	movs	r2, #4
 8003530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	2203      	movs	r2, #3
 800353a:	4013      	ands	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	0018      	movs	r0, r3
 8003542:	f000 fa7b 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 8003546:	e007      	b.n	8003558 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f000 fa6e 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0018      	movs	r0, r3
 8003554:	f000 fa7a 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2210      	movs	r2, #16
 8003566:	4013      	ands	r3, r2
 8003568:	2b10      	cmp	r3, #16
 800356a:	d125      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2210      	movs	r2, #16
 8003574:	4013      	ands	r3, r2
 8003576:	2b10      	cmp	r3, #16
 8003578:	d11e      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2211      	movs	r2, #17
 8003580:	4252      	negs	r2, r2
 8003582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2208      	movs	r2, #8
 8003588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	23c0      	movs	r3, #192	; 0xc0
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	0018      	movs	r0, r3
 800359c:	f000 fa4e 	bl	8003a3c <HAL_TIM_IC_CaptureCallback>
 80035a0:	e007      	b.n	80035b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 fa41 	bl	8003a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	0018      	movs	r0, r3
 80035ae:	f000 fa4d 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2201      	movs	r2, #1
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10f      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d108      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2202      	movs	r2, #2
 80035da:	4252      	negs	r2, r2
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fd f851 	bl	8000688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b80      	cmp	r3, #128	; 0x80
 80035f2:	d10f      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d108      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2281      	movs	r2, #129	; 0x81
 8003608:	4252      	negs	r2, r2
 800360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	0018      	movs	r0, r3
 8003610:	f000 ff34 	bl	800447c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	401a      	ands	r2, r3
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	429a      	cmp	r2, r3
 8003626:	d10e      	bne.n	8003646 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	4013      	ands	r3, r2
 8003632:	2b80      	cmp	r3, #128	; 0x80
 8003634:	d107      	bne.n	8003646 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_TIM_IRQHandler+0x260>)
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f000 ff23 	bl	800448c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2240      	movs	r2, #64	; 0x40
 800364e:	4013      	ands	r3, r2
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d10f      	bne.n	8003674 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	4013      	ands	r3, r2
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d108      	bne.n	8003674 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2241      	movs	r2, #65	; 0x41
 8003668:	4252      	negs	r2, r2
 800366a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 f9f4 	bl	8003a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2220      	movs	r2, #32
 800367c:	4013      	ands	r3, r2
 800367e:	2b20      	cmp	r3, #32
 8003680:	d10f      	bne.n	80036a2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	4013      	ands	r3, r2
 800368c:	2b20      	cmp	r3, #32
 800368e:	d108      	bne.n	80036a2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2221      	movs	r2, #33	; 0x21
 8003696:	4252      	negs	r2, r2
 8003698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 fee5 	bl	800446c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	fffffeff 	.word	0xfffffeff

080036b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	223c      	movs	r2, #60	; 0x3c
 80036c0:	5c9b      	ldrb	r3, [r3, r2]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0e7      	b.n	800389a <HAL_TIM_PWM_ConfigChannel+0x1ea>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	223c      	movs	r2, #60	; 0x3c
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	223d      	movs	r2, #61	; 0x3d
 80036d6:	2102      	movs	r1, #2
 80036d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b14      	cmp	r3, #20
 80036de:	d900      	bls.n	80036e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80036e0:	e0d1      	b.n	8003886 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	009a      	lsls	r2, r3, #2
 80036e6:	4b6f      	ldr	r3, [pc, #444]	; (80038a4 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80036e8:	18d3      	adds	r3, r2, r3
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	0011      	movs	r1, r2
 80036f6:	0018      	movs	r0, r3
 80036f8:	f000 fa38 	bl	8003b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2108      	movs	r1, #8
 8003708:	430a      	orrs	r2, r1
 800370a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2104      	movs	r1, #4
 8003718:	438a      	bics	r2, r1
 800371a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	619a      	str	r2, [r3, #24]
      break;
 800372e:	e0ab      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	0011      	movs	r1, r2
 8003738:	0018      	movs	r0, r3
 800373a:	f000 faa1 	bl	8003c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	0109      	lsls	r1, r1, #4
 800374c:	430a      	orrs	r2, r1
 800374e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4953      	ldr	r1, [pc, #332]	; (80038a8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800375c:	400a      	ands	r2, r1
 800375e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6999      	ldr	r1, [r3, #24]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	021a      	lsls	r2, r3, #8
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	619a      	str	r2, [r3, #24]
      break;
 8003774:	e088      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	0011      	movs	r1, r2
 800377e:	0018      	movs	r0, r3
 8003780:	f000 fb02 	bl	8003d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2108      	movs	r1, #8
 8003790:	430a      	orrs	r2, r1
 8003792:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2104      	movs	r1, #4
 80037a0:	438a      	bics	r2, r1
 80037a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	69d9      	ldr	r1, [r3, #28]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	61da      	str	r2, [r3, #28]
      break;
 80037b6:	e067      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	0011      	movs	r1, r2
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 fb69 	bl	8003e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	0109      	lsls	r1, r1, #4
 80037d4:	430a      	orrs	r2, r1
 80037d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69da      	ldr	r2, [r3, #28]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4931      	ldr	r1, [pc, #196]	; (80038a8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80037e4:	400a      	ands	r2, r1
 80037e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69d9      	ldr	r1, [r3, #28]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	021a      	lsls	r2, r3, #8
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	61da      	str	r2, [r3, #28]
      break;
 80037fc:	e044      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	0011      	movs	r1, r2
 8003806:	0018      	movs	r0, r3
 8003808:	f000 fbb0 	bl	8003f6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2108      	movs	r1, #8
 8003818:	430a      	orrs	r2, r1
 800381a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2104      	movs	r1, #4
 8003828:	438a      	bics	r2, r1
 800382a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800383e:	e023      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	0011      	movs	r1, r2
 8003848:	0018      	movs	r0, r3
 800384a:	f000 fbef 	bl	800402c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2180      	movs	r1, #128	; 0x80
 800385a:	0109      	lsls	r1, r1, #4
 800385c:	430a      	orrs	r2, r1
 800385e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	490f      	ldr	r1, [pc, #60]	; (80038a8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800386c:	400a      	ands	r2, r1
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	021a      	lsls	r2, r3, #8
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003884:	e000      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    }

    default:
      break;
 8003886:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	223d      	movs	r2, #61	; 0x3d
 800388c:	2101      	movs	r1, #1
 800388e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	223c      	movs	r2, #60	; 0x3c
 8003894:	2100      	movs	r1, #0
 8003896:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	08004574 	.word	0x08004574
 80038a8:	fffffbff 	.word	0xfffffbff

080038ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	223c      	movs	r2, #60	; 0x3c
 80038ba:	5c9b      	ldrb	r3, [r3, r2]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_TIM_ConfigClockSource+0x18>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e0ab      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x170>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	223c      	movs	r2, #60	; 0x3c
 80038c8:	2101      	movs	r1, #1
 80038ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	223d      	movs	r2, #61	; 0x3d
 80038d0:	2102      	movs	r1, #2
 80038d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a51      	ldr	r2, [pc, #324]	; (8003a24 <HAL_TIM_ConfigClockSource+0x178>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a50      	ldr	r2, [pc, #320]	; (8003a28 <HAL_TIM_ConfigClockSource+0x17c>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d100      	bne.n	80038fe <HAL_TIM_ConfigClockSource+0x52>
 80038fc:	e06b      	b.n	80039d6 <HAL_TIM_ConfigClockSource+0x12a>
 80038fe:	d80e      	bhi.n	800391e <HAL_TIM_ConfigClockSource+0x72>
 8003900:	2b10      	cmp	r3, #16
 8003902:	d100      	bne.n	8003906 <HAL_TIM_ConfigClockSource+0x5a>
 8003904:	e077      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x14a>
 8003906:	d803      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x64>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d100      	bne.n	800390e <HAL_TIM_ConfigClockSource+0x62>
 800390c:	e073      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800390e:	e07c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003910:	2b20      	cmp	r3, #32
 8003912:	d100      	bne.n	8003916 <HAL_TIM_ConfigClockSource+0x6a>
 8003914:	e06f      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x14a>
 8003916:	2b30      	cmp	r3, #48	; 0x30
 8003918:	d100      	bne.n	800391c <HAL_TIM_ConfigClockSource+0x70>
 800391a:	e06c      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800391c:	e075      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800391e:	2b70      	cmp	r3, #112	; 0x70
 8003920:	d00e      	beq.n	8003940 <HAL_TIM_ConfigClockSource+0x94>
 8003922:	d804      	bhi.n	800392e <HAL_TIM_ConfigClockSource+0x82>
 8003924:	2b50      	cmp	r3, #80	; 0x50
 8003926:	d036      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0xea>
 8003928:	2b60      	cmp	r3, #96	; 0x60
 800392a:	d044      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800392c:	e06d      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	0152      	lsls	r2, r2, #5
 8003932:	4293      	cmp	r3, r2
 8003934:	d068      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0x15c>
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	0192      	lsls	r2, r2, #6
 800393a:	4293      	cmp	r3, r2
 800393c:	d017      	beq.n	800396e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800393e:	e064      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f000 fc4c 	bl	80041ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2277      	movs	r2, #119	; 0x77
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]
      break;
 800396c:	e04d      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6899      	ldr	r1, [r3, #8]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f000 fc35 	bl	80041ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2180      	movs	r1, #128	; 0x80
 800398e:	01c9      	lsls	r1, r1, #7
 8003990:	430a      	orrs	r2, r1
 8003992:	609a      	str	r2, [r3, #8]
      break;
 8003994:	e039      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	001a      	movs	r2, r3
 80039a4:	f000 fba6 	bl	80040f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2150      	movs	r1, #80	; 0x50
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 fc00 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 80039b4:	e029      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	001a      	movs	r2, r3
 80039c4:	f000 fbc4 	bl	8004150 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2160      	movs	r1, #96	; 0x60
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fbf0 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 80039d4:	e019      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6859      	ldr	r1, [r3, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	001a      	movs	r2, r3
 80039e4:	f000 fb86 	bl	80040f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 fbe0 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 80039f4:	e009      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	0019      	movs	r1, r3
 8003a00:	0010      	movs	r0, r2
 8003a02:	f000 fbd7 	bl	80041b4 <TIM_ITRx_SetConfig>
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003a08:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	223d      	movs	r2, #61	; 0x3d
 8003a0e:	2101      	movs	r1, #1
 8003a10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	223c      	movs	r2, #60	; 0x3c
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b004      	add	sp, #16
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	ffceff88 	.word	0xffceff88
 8003a28:	ffff00ff 	.word	0xffff00ff

08003a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a34      	ldr	r2, [pc, #208]	; (8003b50 <TIM_Base_SetConfig+0xe4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d008      	beq.n	8003a96 <TIM_Base_SetConfig+0x2a>
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	05db      	lsls	r3, r3, #23
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d003      	beq.n	8003a96 <TIM_Base_SetConfig+0x2a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a30      	ldr	r2, [pc, #192]	; (8003b54 <TIM_Base_SetConfig+0xe8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d108      	bne.n	8003aa8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2270      	movs	r2, #112	; 0x70
 8003a9a:	4393      	bics	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <TIM_Base_SetConfig+0xe4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d018      	beq.n	8003ae2 <TIM_Base_SetConfig+0x76>
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	05db      	lsls	r3, r3, #23
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d013      	beq.n	8003ae2 <TIM_Base_SetConfig+0x76>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <TIM_Base_SetConfig+0xe8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00f      	beq.n	8003ae2 <TIM_Base_SetConfig+0x76>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <TIM_Base_SetConfig+0xec>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00b      	beq.n	8003ae2 <TIM_Base_SetConfig+0x76>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a23      	ldr	r2, [pc, #140]	; (8003b5c <TIM_Base_SetConfig+0xf0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d007      	beq.n	8003ae2 <TIM_Base_SetConfig+0x76>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <TIM_Base_SetConfig+0xf4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_Base_SetConfig+0x76>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <TIM_Base_SetConfig+0xf8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d108      	bne.n	8003af4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <TIM_Base_SetConfig+0xfc>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	4393      	bics	r3, r2
 8003afa:	001a      	movs	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <TIM_Base_SetConfig+0xe4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_Base_SetConfig+0xce>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a0d      	ldr	r2, [pc, #52]	; (8003b5c <TIM_Base_SetConfig+0xf0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_Base_SetConfig+0xce>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a0c      	ldr	r2, [pc, #48]	; (8003b60 <TIM_Base_SetConfig+0xf4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_Base_SetConfig+0xce>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <TIM_Base_SetConfig+0xf8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d103      	bne.n	8003b42 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	615a      	str	r2, [r3, #20]
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b004      	add	sp, #16
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40002000 	.word	0x40002000
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800
 8003b68:	fffffcff 	.word	0xfffffcff

08003b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4393      	bics	r3, r2
 8003b7e:	001a      	movs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a32      	ldr	r2, [pc, #200]	; (8003c64 <TIM_OC1_SetConfig+0xf8>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a28      	ldr	r2, [pc, #160]	; (8003c68 <TIM_OC1_SetConfig+0xfc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <TIM_OC1_SetConfig+0x76>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <TIM_OC1_SetConfig+0x100>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <TIM_OC1_SetConfig+0x76>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <TIM_OC1_SetConfig+0x104>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d003      	beq.n	8003be2 <TIM_OC1_SetConfig+0x76>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <TIM_OC1_SetConfig+0x108>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d10c      	bne.n	8003bfc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2208      	movs	r2, #8
 8003be6:	4393      	bics	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	4393      	bics	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <TIM_OC1_SetConfig+0xfc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_OC1_SetConfig+0xb0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <TIM_OC1_SetConfig+0x100>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_OC1_SetConfig+0xb0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <TIM_OC1_SetConfig+0x104>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_OC1_SetConfig+0xb0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <TIM_OC1_SetConfig+0x108>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <TIM_OC1_SetConfig+0x10c>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <TIM_OC1_SetConfig+0x110>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	b006      	add	sp, #24
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	fffeff8f 	.word	0xfffeff8f
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40014000 	.word	0x40014000
 8003c70:	40014400 	.word	0x40014400
 8003c74:	40014800 	.word	0x40014800
 8003c78:	fffffeff 	.word	0xfffffeff
 8003c7c:	fffffdff 	.word	0xfffffdff

08003c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	2210      	movs	r2, #16
 8003c90:	4393      	bics	r3, r2
 8003c92:	001a      	movs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a2e      	ldr	r2, [pc, #184]	; (8003d68 <TIM_OC2_SetConfig+0xe8>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <TIM_OC2_SetConfig+0xec>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	4393      	bics	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <TIM_OC2_SetConfig+0xf0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10d      	bne.n	8003cfe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2280      	movs	r2, #128	; 0x80
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2240      	movs	r2, #64	; 0x40
 8003cfa:	4393      	bics	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a1b      	ldr	r2, [pc, #108]	; (8003d70 <TIM_OC2_SetConfig+0xf0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00b      	beq.n	8003d1e <TIM_OC2_SetConfig+0x9e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1a      	ldr	r2, [pc, #104]	; (8003d74 <TIM_OC2_SetConfig+0xf4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <TIM_OC2_SetConfig+0x9e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <TIM_OC2_SetConfig+0xf8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d003      	beq.n	8003d1e <TIM_OC2_SetConfig+0x9e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <TIM_OC2_SetConfig+0xfc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d113      	bne.n	8003d46 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <TIM_OC2_SetConfig+0x100>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <TIM_OC2_SetConfig+0x104>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	621a      	str	r2, [r3, #32]
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b006      	add	sp, #24
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	feff8fff 	.word	0xfeff8fff
 8003d6c:	fffffcff 	.word	0xfffffcff
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800
 8003d80:	fffffbff 	.word	0xfffffbff
 8003d84:	fffff7ff 	.word	0xfffff7ff

08003d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <TIM_OC3_SetConfig+0xe4>)
 8003d98:	401a      	ands	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a2f      	ldr	r2, [pc, #188]	; (8003e70 <TIM_OC3_SetConfig+0xe8>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	4393      	bics	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <TIM_OC3_SetConfig+0xec>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <TIM_OC3_SetConfig+0xf0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10d      	bne.n	8003e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <TIM_OC3_SetConfig+0xf4>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <TIM_OC3_SetConfig+0xf8>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	; (8003e78 <TIM_OC3_SetConfig+0xf0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <TIM_OC3_SetConfig+0x9a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <TIM_OC3_SetConfig+0xfc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <TIM_OC3_SetConfig+0x9a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a1c      	ldr	r2, [pc, #112]	; (8003e88 <TIM_OC3_SetConfig+0x100>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_OC3_SetConfig+0x9a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <TIM_OC3_SetConfig+0x104>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d113      	bne.n	8003e4a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4a1a      	ldr	r2, [pc, #104]	; (8003e90 <TIM_OC3_SetConfig+0x108>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	; (8003e94 <TIM_OC3_SetConfig+0x10c>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	621a      	str	r2, [r3, #32]
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b006      	add	sp, #24
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	fffffeff 	.word	0xfffffeff
 8003e70:	fffeff8f 	.word	0xfffeff8f
 8003e74:	fffffdff 	.word	0xfffffdff
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	fffff7ff 	.word	0xfffff7ff
 8003e80:	fffffbff 	.word	0xfffffbff
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800
 8003e90:	ffffefff 	.word	0xffffefff
 8003e94:	ffffdfff 	.word	0xffffdfff

08003e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4a28      	ldr	r2, [pc, #160]	; (8003f48 <TIM_OC4_SetConfig+0xb0>)
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a22      	ldr	r2, [pc, #136]	; (8003f4c <TIM_OC4_SetConfig+0xb4>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <TIM_OC4_SetConfig+0xb8>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <TIM_OC4_SetConfig+0xbc>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	031b      	lsls	r3, r3, #12
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <TIM_OC4_SetConfig+0xc0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_OC4_SetConfig+0x78>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <TIM_OC4_SetConfig+0xc4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_OC4_SetConfig+0x78>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <TIM_OC4_SetConfig+0xc8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_OC4_SetConfig+0x78>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <TIM_OC4_SetConfig+0xcc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d109      	bne.n	8003f24 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <TIM_OC4_SetConfig+0xd0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	019b      	lsls	r3, r3, #6
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b006      	add	sp, #24
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	ffffefff 	.word	0xffffefff
 8003f4c:	feff8fff 	.word	0xfeff8fff
 8003f50:	fffffcff 	.word	0xfffffcff
 8003f54:	ffffdfff 	.word	0xffffdfff
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800
 8003f68:	ffffbfff 	.word	0xffffbfff

08003f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a25      	ldr	r2, [pc, #148]	; (8004010 <TIM_OC5_SetConfig+0xa4>)
 8003f7c:	401a      	ands	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <TIM_OC5_SetConfig+0xa8>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <TIM_OC5_SetConfig+0xac>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a17      	ldr	r2, [pc, #92]	; (800401c <TIM_OC5_SetConfig+0xb0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00b      	beq.n	8003fda <TIM_OC5_SetConfig+0x6e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a16      	ldr	r2, [pc, #88]	; (8004020 <TIM_OC5_SetConfig+0xb4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d007      	beq.n	8003fda <TIM_OC5_SetConfig+0x6e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a15      	ldr	r2, [pc, #84]	; (8004024 <TIM_OC5_SetConfig+0xb8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d003      	beq.n	8003fda <TIM_OC5_SetConfig+0x6e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a14      	ldr	r2, [pc, #80]	; (8004028 <TIM_OC5_SetConfig+0xbc>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d109      	bne.n	8003fee <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <TIM_OC5_SetConfig+0xa4>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	621a      	str	r2, [r3, #32]
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b006      	add	sp, #24
 800400e:	bd80      	pop	{r7, pc}
 8004010:	fffeffff 	.word	0xfffeffff
 8004014:	fffeff8f 	.word	0xfffeff8f
 8004018:	fffdffff 	.word	0xfffdffff
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40014000 	.word	0x40014000
 8004024:	40014400 	.word	0x40014400
 8004028:	40014800 	.word	0x40014800

0800402c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <TIM_OC6_SetConfig+0xa8>)
 800403c:	401a      	ands	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <TIM_OC6_SetConfig+0xac>)
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <TIM_OC6_SetConfig+0xb0>)
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	051b      	lsls	r3, r3, #20
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <TIM_OC6_SetConfig+0xb4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_OC6_SetConfig+0x70>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <TIM_OC6_SetConfig+0xb8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <TIM_OC6_SetConfig+0x70>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <TIM_OC6_SetConfig+0xbc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_OC6_SetConfig+0x70>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a15      	ldr	r2, [pc, #84]	; (80040ec <TIM_OC6_SetConfig+0xc0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d109      	bne.n	80040b0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <TIM_OC6_SetConfig+0xc4>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	029b      	lsls	r3, r3, #10
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b006      	add	sp, #24
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	ffefffff 	.word	0xffefffff
 80040d8:	feff8fff 	.word	0xfeff8fff
 80040dc:	ffdfffff 	.word	0xffdfffff
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40014000 	.word	0x40014000
 80040e8:	40014400 	.word	0x40014400
 80040ec:	40014800 	.word	0x40014800
 80040f0:	fffbffff 	.word	0xfffbffff

080040f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	2201      	movs	r2, #1
 800410c:	4393      	bics	r3, r2
 800410e:	001a      	movs	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	22f0      	movs	r2, #240	; 0xf0
 800411e:	4393      	bics	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	220a      	movs	r2, #10
 8004130:	4393      	bics	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b006      	add	sp, #24
 800414e:	bd80      	pop	{r7, pc}

08004150 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	2210      	movs	r2, #16
 8004162:	4393      	bics	r3, r2
 8004164:	001a      	movs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <TIM_TI2_ConfigInputStage+0x60>)
 800417a:	4013      	ands	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	031b      	lsls	r3, r3, #12
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	22a0      	movs	r2, #160	; 0xa0
 800418c:	4393      	bics	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b006      	add	sp, #24
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	ffff0fff 	.word	0xffff0fff

080041b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <TIM_ITRx_SetConfig+0x34>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	2207      	movs	r2, #7
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	609a      	str	r2, [r3, #8]
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b004      	add	sp, #16
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	ffcfff8f 	.word	0xffcfff8f

080041ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <TIM_ETR_SetConfig+0x3c>)
 8004204:	4013      	ands	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b006      	add	sp, #24
 8004226:	bd80      	pop	{r7, pc}
 8004228:	ffff00ff 	.word	0xffff00ff

0800422c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	221f      	movs	r2, #31
 800423c:	4013      	ands	r3, r2
 800423e:	2201      	movs	r2, #1
 8004240:	409a      	lsls	r2, r3
 8004242:	0013      	movs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	43d2      	mvns	r2, r2
 800424e:	401a      	ands	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1a      	ldr	r2, [r3, #32]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	211f      	movs	r1, #31
 800425c:	400b      	ands	r3, r1
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4099      	lsls	r1, r3
 8004262:	000b      	movs	r3, r1
 8004264:	431a      	orrs	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b006      	add	sp, #24
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	223c      	movs	r2, #60	; 0x3c
 8004282:	5c9b      	ldrb	r3, [r3, r2]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004288:	2302      	movs	r3, #2
 800428a:	e040      	b.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	223c      	movs	r2, #60	; 0x3c
 8004290:	2101      	movs	r1, #1
 8004292:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	223d      	movs	r2, #61	; 0x3d
 8004298:	2102      	movs	r1, #2
 800429a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a19      	ldr	r2, [pc, #100]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d108      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80042ba:	4013      	ands	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2270      	movs	r2, #112	; 0x70
 80042cc:	4393      	bics	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	4393      	bics	r3, r2
 80042e0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223d      	movs	r2, #61	; 0x3d
 8004300:	2101      	movs	r1, #1
 8004302:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	223c      	movs	r2, #60	; 0x3c
 8004308:	2100      	movs	r1, #0
 800430a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b004      	add	sp, #16
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	40012c00 	.word	0x40012c00
 800431c:	ff0fffff 	.word	0xff0fffff

08004320 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	223c      	movs	r2, #60	; 0x3c
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004338:	2302      	movs	r3, #2
 800433a:	e079      	b.n	8004430 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	223c      	movs	r2, #60	; 0x3c
 8004340:	2101      	movs	r1, #1
 8004342:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	22ff      	movs	r2, #255	; 0xff
 8004348:	4393      	bics	r3, r2
 800434a:	001a      	movs	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4a38      	ldr	r2, [pc, #224]	; (8004438 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004358:	401a      	ands	r2, r3
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a35      	ldr	r2, [pc, #212]	; (800443c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004366:	401a      	ands	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a33      	ldr	r2, [pc, #204]	; (8004440 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004374:	401a      	ands	r2, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a30      	ldr	r2, [pc, #192]	; (8004444 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004382:	401a      	ands	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a2e      	ldr	r2, [pc, #184]	; (8004448 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004390:	401a      	ands	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a2b      	ldr	r2, [pc, #172]	; (800444c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800439e:	401a      	ands	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a29      	ldr	r2, [pc, #164]	; (8004450 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80043ac:	401a      	ands	r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a25      	ldr	r2, [pc, #148]	; (8004454 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d106      	bne.n	80043d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a24      	ldr	r2, [pc, #144]	; (8004458 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80043c6:	401a      	ands	r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d121      	bne.n	800441e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a1f      	ldr	r2, [pc, #124]	; (800445c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80043de:	401a      	ands	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	051b      	lsls	r3, r3, #20
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80043ee:	401a      	ands	r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80043fc:	401a      	ands	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a12      	ldr	r2, [pc, #72]	; (8004454 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d106      	bne.n	800441e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004414:	401a      	ands	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	223c      	movs	r2, #60	; 0x3c
 800442a:	2100      	movs	r1, #0
 800442c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b004      	add	sp, #16
 8004436:	bd80      	pop	{r7, pc}
 8004438:	fffffcff 	.word	0xfffffcff
 800443c:	fffffbff 	.word	0xfffffbff
 8004440:	fffff7ff 	.word	0xfffff7ff
 8004444:	ffffefff 	.word	0xffffefff
 8004448:	ffffdfff 	.word	0xffffdfff
 800444c:	ffffbfff 	.word	0xffffbfff
 8004450:	fff0ffff 	.word	0xfff0ffff
 8004454:	40012c00 	.word	0x40012c00
 8004458:	efffffff 	.word	0xefffffff
 800445c:	ff0fffff 	.word	0xff0fffff
 8004460:	feffffff 	.word	0xfeffffff
 8004464:	fdffffff 	.word	0xfdffffff
 8004468:	dfffffff 	.word	0xdfffffff

0800446c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004484:	46c0      	nop			; (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	2600      	movs	r6, #0
 80044a0:	4d0c      	ldr	r5, [pc, #48]	; (80044d4 <__libc_init_array+0x38>)
 80044a2:	4c0d      	ldr	r4, [pc, #52]	; (80044d8 <__libc_init_array+0x3c>)
 80044a4:	1b64      	subs	r4, r4, r5
 80044a6:	10a4      	asrs	r4, r4, #2
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	2600      	movs	r6, #0
 80044ae:	f000 f821 	bl	80044f4 <_init>
 80044b2:	4d0a      	ldr	r5, [pc, #40]	; (80044dc <__libc_init_array+0x40>)
 80044b4:	4c0a      	ldr	r4, [pc, #40]	; (80044e0 <__libc_init_array+0x44>)
 80044b6:	1b64      	subs	r4, r4, r5
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	00b3      	lsls	r3, r6, #2
 80044c2:	58eb      	ldr	r3, [r5, r3]
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	00b3      	lsls	r3, r6, #2
 80044cc:	58eb      	ldr	r3, [r5, r3]
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	080045c8 	.word	0x080045c8
 80044d8:	080045c8 	.word	0x080045c8
 80044dc:	080045c8 	.word	0x080045c8
 80044e0:	080045cc 	.word	0x080045cc

080044e4 <memset>:
 80044e4:	0003      	movs	r3, r0
 80044e6:	1812      	adds	r2, r2, r0
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d100      	bne.n	80044ee <memset+0xa>
 80044ec:	4770      	bx	lr
 80044ee:	7019      	strb	r1, [r3, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	e7f9      	b.n	80044e8 <memset+0x4>

080044f4 <_init>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr

08004500 <_fini>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr
